{"ctor":"BitburnerSaveObject","data":{"PlayerSave":"{\"ctor\":\"PlayerObject\",\"data\":{\"hacking\":799,\"hp\":10,\"max_hp\":10,\"strength\":1,\"defense\":1,\"dexterity\":1,\"agility\":1,\"charisma\":84,\"intelligence\":0,\"hacking_chance_mult\":1.4362651991475277,\"hacking_speed_mult\":1.4290920658182842,\"hacking_money_mult\":2.247217658530145,\"hacking_grow_mult\":1.4803805392161695,\"hacking_exp\":71834154.1618688,\"strength_exp\":0,\"defense_exp\":0,\"dexterity_exp\":0,\"agility_exp\":0,\"charisma_exp\":4260.736665734025,\"intelligence_exp\":0,\"hacking_mult\":2.110163854787552,\"strength_mult\":1.361950096078876,\"defense_mult\":1.1843044313729356,\"dexterity_mult\":1.5730523609711016,\"agility_mult\":1.2435196529415824,\"charisma_mult\":1.1843044313729356,\"hacking_exp_mult\":2.785875731279821,\"strength_exp_mult\":1.4981451056867636,\"defense_exp_mult\":1.4981451056867636,\"dexterity_exp_mult\":1.4981451056867636,\"agility_exp_mult\":1.4981451056867636,\"charisma_exp_mult\":1.4981451056867636,\"company_rep_mult\":1.3027348745102292,\"faction_rep_mult\":1.3027348745102292,\"money\":20516861098.197006,\"city\":\"Sector-12\",\"location\":\"Central Intelligence Agency\",\"jobs\":{\"Central Intelligence Agency\":\"IT Intern\"},\"companyName\":\"Central Intelligence Agency\",\"currentServer\":\"I.I.I.I\",\"purchasedServers\":[],\"hacknetNodes\":[{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":27394.029319350862,\"onlineTimeSeconds\":1421107.999999309,\"ram\":64,\"totalMoneyGenerated\":38765152239.64336,\"name\":\"hacknet-node-0\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":27394.029319350862,\"onlineTimeSeconds\":1420774.1999993138,\"ram\":64,\"totalMoneyGenerated\":38655888613.74354,\"name\":\"hacknet-node-1\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":27394.029319350862,\"onlineTimeSeconds\":1420773.799999314,\"ram\":64,\"totalMoneyGenerated\":38655829939.58667,\"name\":\"hacknet-node-2\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":27394.029319350862,\"onlineTimeSeconds\":1420773.5999993137,\"ram\":64,\"totalMoneyGenerated\":38449248471.17223,\"name\":\"hacknet-node-3\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":27394.029319350862,\"onlineTimeSeconds\":1420773.399999314,\"ram\":64,\"totalMoneyGenerated\":38455274442.696754,\"name\":\"hacknet-node-4\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":27394.029319350862,\"onlineTimeSeconds\":1420773.1999993138,\"ram\":64,\"totalMoneyGenerated\":36150659326.687096,\"name\":\"hacknet-node-5\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":27394.029319350862,\"onlineTimeSeconds\":1420772.9999993138,\"ram\":64,\"totalMoneyGenerated\":23164671634.47589,\"name\":\"hacknet-node-6\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":27394.029319350862,\"onlineTimeSeconds\":1420772.799999314,\"ram\":64,\"totalMoneyGenerated\":20352712037.088745,\"name\":\"hacknet-node-7\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":27394.029319350862,\"onlineTimeSeconds\":1420772.5999993137,\"ram\":64,\"totalMoneyGenerated\":19195483434.68952,\"name\":\"hacknet-node-8\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":117,\"moneyGainRatePerSecond\":16025.507151820253,\"onlineTimeSeconds\":1420772.399999314,\"ram\":64,\"totalMoneyGenerated\":13582450019.817917,\"name\":\"hacknet-node-9\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":27394.029319350862,\"onlineTimeSeconds\":1420772.1999993138,\"ram\":64,\"totalMoneyGenerated\":17361773539.29432,\"name\":\"hacknet-node-10\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":27394.029319350862,\"onlineTimeSeconds\":1420772.1999993138,\"ram\":64,\"totalMoneyGenerated\":19207520131.838474,\"name\":\"hacknet-node-11\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":27394.029319350862,\"onlineTimeSeconds\":500777.0000000626,\"ram\":64,\"totalMoneyGenerated\":13718193747.858833,\"name\":\"hacknet-node-12\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":27394.029319350862,\"onlineTimeSeconds\":500776.80000006256,\"ram\":64,\"totalMoneyGenerated\":13718157449.147026,\"name\":\"hacknet-node-13\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":27394.029319350862,\"onlineTimeSeconds\":500776.80000006256,\"ram\":64,\"totalMoneyGenerated\":13717861697.25469,\"name\":\"hacknet-node-14\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":27394.029319350862,\"onlineTimeSeconds\":500776.60000006255,\"ram\":64,\"totalMoneyGenerated\":13718062276.231817,\"name\":\"hacknet-node-15\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":27394.029319350862,\"onlineTimeSeconds\":500776.4000000626,\"ram\":64,\"totalMoneyGenerated\":13717960271.340727,\"name\":\"hacknet-node-16\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":27394.029319350862,\"onlineTimeSeconds\":500776.2000000626,\"ram\":64,\"totalMoneyGenerated\":13717919848.78523,\"name\":\"hacknet-node-17\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":27394.029319350862,\"onlineTimeSeconds\":500776.0000000626,\"ram\":64,\"totalMoneyGenerated\":13718007151.66824,\"name\":\"hacknet-node-18\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":27394.029319350862,\"onlineTimeSeconds\":500758.2000000626,\"ram\":64,\"totalMoneyGenerated\":13717417850.230877,\"name\":\"hacknet-node-19\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":27394.029319350862,\"onlineTimeSeconds\":500757.80000006256,\"ram\":64,\"totalMoneyGenerated\":13717379476.57227,\"name\":\"hacknet-node-20\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":27394.029319350862,\"onlineTimeSeconds\":500756.80000006256,\"ram\":64,\"totalMoneyGenerated\":13717508918.631723,\"name\":\"hacknet-node-21\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":27394.029319350862,\"onlineTimeSeconds\":500752.2000000626,\"ram\":64,\"totalMoneyGenerated\":13717463376.826221,\"name\":\"hacknet-node-22\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":27394.029319350862,\"onlineTimeSeconds\":500750.80000006256,\"ram\":64,\"totalMoneyGenerated\":13717329863.523006,\"name\":\"hacknet-node-23\"}}],\"hashManager\":{\"ctor\":\"HashManager\",\"data\":{\"capacity\":0,\"hashes\":0,\"upgrades\":{\"Sell for Money\":0,\"Sell for Corporation Funds\":0,\"Reduce Minimum Security\":0,\"Increase Maximum Money\":0,\"Improve Studying\":0,\"Improve Gym Training\":0,\"Exchange for Corporation Research\":0,\"Exchange for Bladeburner Rank\":0,\"Exchange for Bladeburner SP\":0,\"Generate Coding Contract\":0}}},\"factions\":[\"Netburners\",\"Sector-12\",\"CyberSec\",\"NiteSec\",\"Tian Di Hui\",\"BitRunners\",\"The Black Hand\"],\"factionInvitations\":[],\"queuedAugmentations\":[{\"level\":1,\"name\":\"Neuroreceptor Management Implant\"},{\"level\":1,\"name\":\"Artificial Bio-neural Network Implant\"},{\"level\":1,\"name\":\"Embedded Netburner Module Core Implant\"},{\"level\":1,\"name\":\"Neural Accelerator\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen V\"},{\"level\":1,\"name\":\"Embedded Netburner Module Core V2 Upgrade\"},{\"level\":1,\"name\":\"BitRunners Neurolink\"},{\"level\":1,\"name\":\"CashRoot Starter Kit\"},{\"level\":1,\"name\":\"Speech Processor Implant\"},{\"level\":1,\"name\":\"Augmented Targeting II\"},{\"level\":1,\"name\":\"Social Negotiation Assistant (S.N.A)\"},{\"level\":1,\"name\":\"Nuoptimal Nootropic Injector Implant\"},{\"level\":1,\"name\":\"Speech Enhancement\"}],\"augmentations\":[{\"level\":1,\"name\":\"Synaptic Enhancement Implant\"},{\"level\":1,\"name\":\"Neurotrainer I\"},{\"level\":1,\"name\":\"Neurotrainer II\"},{\"level\":1,\"name\":\"Neural-Retention Enhancement\"},{\"level\":1,\"name\":\"BitWire\"},{\"level\":17,\"name\":\"NeuroFlux Governor\"},{\"level\":1,\"name\":\"Hacknet Node CPU Architecture Neural-Upload\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen I\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen II\"},{\"level\":1,\"name\":\"Hacknet Node NIC Architecture Neural-Upload\"},{\"level\":1,\"name\":\"Hacknet Node Cache Architecture Neural-Upload\"},{\"level\":1,\"name\":\"Hacknet Node Kernel Direct-Neural Interface\"},{\"level\":1,\"name\":\"Hacknet Node Core Direct-Neural Interface\"},{\"level\":1,\"name\":\"Artificial Synaptic Potentiation\"},{\"level\":1,\"name\":\"ADR-V1 Pheromone Gene\"},{\"level\":1,\"name\":\"Wired Reflexes\"},{\"level\":1,\"name\":\"Neuralstimulator\"},{\"level\":1,\"name\":\"Enhanced Myelin Sheathing\"},{\"level\":1,\"name\":\"The Black Hand\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen III\"},{\"level\":1,\"name\":\"DataJack\"},{\"level\":1,\"name\":\"Embedded Netburner Module\"},{\"level\":1,\"name\":\"CRTX42-AA Gene Modification\"},{\"level\":1,\"name\":\"Augmented Targeting I\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen IV\"}],\"sourceFiles\":[],\"numPeopleKilled\":0,\"karma\":-3.5,\"crime_money_mult\":1.1843044313729356,\"crime_success_mult\":1.1843044313729356,\"isWorking\":false,\"focus\":true,\"workType\":\"\",\"workCostMult\":3,\"workExpMult\":2,\"currentWorkFactionName\":\"\",\"currentWorkFactionDescription\":\"\",\"workHackExpGainRate\":0,\"workStrExpGainRate\":0,\"workDefExpGainRate\":0,\"workDexExpGainRate\":0,\"workAgiExpGainRate\":0,\"workChaExpGainRate\":0,\"workRepGainRate\":0,\"workMoneyGainRate\":0,\"workMoneyLossRate\":0,\"workHackExpGained\":0,\"workStrExpGained\":0,\"workDefExpGained\":0,\"workDexExpGained\":0,\"workAgiExpGained\":0,\"workChaExpGained\":0,\"workRepGained\":0,\"workMoneyGained\":0,\"createProgramName\":\"\",\"createProgramReqLvl\":750,\"className\":\"\",\"crimeType\":\"\",\"timeWorked\":0,\"timeWorkedCreateProgram\":0,\"timeNeededToCompleteWork\":72000000,\"work_money_mult\":1.1843044313729356,\"hacknet_node_money_mult\":2.986926804462985,\"hacknet_node_purchase_cost_mult\":0.6448515429387038,\"hacknet_node_ram_cost_mult\":0.8429431933839266,\"hacknet_node_core_cost_mult\":0.8429431933839266,\"hacknet_node_level_cost_mult\":0.7165017143763376,\"hasWseAccount\":true,\"hasTixApiAccess\":true,\"has4SData\":true,\"has4SDataTixApi\":true,\"gang\":null,\"corporation\":null,\"bladeburner\":null,\"bladeburner_max_stamina_mult\":1,\"bladeburner_stamina_gain_mult\":1,\"bladeburner_analysis_mult\":1,\"bladeburner_success_chance_mult\":1,\"sleeves\":[],\"resleeves\":[],\"sleevesFromCovenant\":0,\"bitNodeN\":1,\"lastUpdate\":1644172509952,\"totalPlaytime\":3311923200,\"playtimeSinceLastAug\":1421135200,\"playtimeSinceLastBitnode\":3311923200,\"moneySourceA\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":0,\"codingcontract\":0,\"corporation\":0,\"crime\":0,\"gang\":0,\"hacking\":864796472.7152984,\"hacknet\":506609925754.8067,\"hacknet_expenses\":-10118802278.043879,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":0,\"total\":20516860098.197006,\"work\":8891978.425093848,\"servers\":0,\"other\":-260200000,\"augmentations\":-476587751829.9812}},\"moneySourceB\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":-140293752,\"codingcontract\":0,\"corporation\":0,\"crime\":5246159.850692849,\"gang\":0,\"hacking\":218207457037.57855,\"hacknet\":1402918951544.498,\"hacknet_expenses\":-120304302116.4474,\"hospitalization\":-4500000,\"infiltration\":0,\"sleeves\":0,\"stock\":6898613252.897437,\"total\":246017315950.2935,\"work\":10193289.025092782,\"servers\":-22412087257.018974,\"other\":-6202465235.149254,\"augmentations\":-1232959496891.5464}},\"scriptProdSinceLastAug\":73269462.3474747,\"exploits\":[],\"achievements\":[{\"ID\":\"NITESEC\",\"unlockedOn\":1641743061748},{\"ID\":\"BRUTESSH.EXE\",\"unlockedOn\":1641743061763},{\"ID\":\"FTPCRACK.EXE\",\"unlockedOn\":1641743061765},{\"ID\":\"RELAYSMTP.EXE\",\"unlockedOn\":1641743061767},{\"ID\":\"HTTPWORM.EXE\",\"unlockedOn\":1641743061769},{\"ID\":\"SQLINJECT.EXE\",\"unlockedOn\":1641743061771},{\"ID\":\"INSTALL_1\",\"unlockedOn\":1641743061775},{\"ID\":\"NS2\",\"unlockedOn\":1641743061779},{\"ID\":\"FIRST_HACKNET_NODE\",\"unlockedOn\":1641743061781},{\"ID\":\"MAX_HACKNET_NODE\",\"unlockedOn\":1641743061784},{\"ID\":\"HACKNET_NODE_10M\",\"unlockedOn\":1641743061786},{\"ID\":\"DONATION\",\"unlockedOn\":1641743061788},{\"ID\":\"TRAVEL\",\"unlockedOn\":1641743061790},{\"ID\":\"TOR\",\"unlockedOn\":1641743061794},{\"ID\":\"4S\",\"unlockedOn\":1641743061797},{\"ID\":\"DRAIN_SERVER\",\"unlockedOn\":1641743121759},{\"ID\":\"THE_BLACK_HAND\",\"unlockedOn\":1641745701759},{\"ID\":\"HOSPITALIZED\",\"unlockedOn\":1641817199927},{\"ID\":\"30_HACKNET_NODE\",\"unlockedOn\":1642339248219},{\"ID\":\"CYBERSEC\",\"unlockedOn\":1642755461567},{\"ID\":\"BITRUNNERS\",\"unlockedOn\":1643671752087}],\"factionWorkType\":\"Faction Hacking Work\",\"committingCrimeThruSingFn\":false,\"singFnCrimeWorkerScript\":null}}","AllServersSave":"{\"home\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":2,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"home\",\"httpPortOpen\":true,\"ip\":\"90.5.7.0\",\"isConnectedTo\":false,\"maxRam\":4096,\"messages\":[\"hackers-starting-handbook.lit\",\"j0.msg\",\"j1.msg\",\"csec-test.msg\",\"j2.msg\",\"nitesec-test.msg\",\"j3.msg\",\"j4.msg\",\"19dfj3l1nd.msg\"],\"organizationName\":\"Home PC\",\"programs\":[\"NUKE.exe\",\"fl1ght.exe\",\"BruteSSH.exe\",\"FTPCrack.exe\",\"relaySMTP.exe\",\"relaySMTP.exe-5.36%-INC\",\"DeepscanV1.exe\",\"DeepscanV2.exe\",\"HTTPWorm.exe\",\"AutoLink.exe\",\"SQLInject.exe\",\"ServerProfiler.exe\",\"SQLInject.exe\"],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"basic-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"basic-hack.js\",\"url\":\"blob:file:///b5db421f-0596-46c9-a473-81cf04034f59\",\"moduleSequenceNumber\":5903}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"home\",\"moduleSequenceNumber\":711,\"_hash\":\"b431b860a325c1f1e8d3f9afa6bd629bf87ee6500edce2693501368a5588a221\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.grow(target);\\n\\t}\\n}\",\"filename\":\"basic-grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"basic-grow.js\",\"url\":\"blob:file:///40f1639d-ad27-4103-9c38-4f0f278bc14d\",\"moduleSequenceNumber\":5985}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":712,\"_hash\":\"fc7652eef146e96723fb16cbc2683cf66b1d09853fff0ed8b2ca6655039902d8\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(target);\\n\\t}\\n}\",\"filename\":\"basic-weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"basic-weaken.js\",\"url\":\"blob:file:///7d98469e-b637-45b9-a6bd-42897f34731e\",\"moduleSequenceNumber\":5984}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":713,\"_hash\":\"ef6ef87a7a369f27563e9f084d651b032b74b974340529a78834d2cbf17c12a5\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tvar servers = ns.scan(home);\\n\\tvar scripts = ns.ls(home, \\\".ns\\\");\\n\\n\\tfor (let entry in scripts) {\\n\\t\\tns.tprint(\\\"found script: \\\" + scripts[entry]);\\n\\t}\\n\\n\\t// Hack servers (!!! depth = 2 !!!) if needed and populate with scripts\\n\\tfor (let entry in servers) {\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== \\\"home\\\") {\\n\\t\\t\\t\\tns.tprint(\\\"----->   \\\" + subservers[subentry]);\\n\\t\\t\\t\\tif (!ns.hasRootAccess(subservers[subentry])) {\\n\\t\\t\\t\\t\\ttakeover(subservers[subentry]);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tns.tprint(\\\"copying scripts to \\\" + subservers[subentry]);\\n\\t\\t\\t\\tawait ns.scp(scripts, home, subservers[subentry]);\\n\\t\\t\\t\\t//await ns.scp(\\\"setup.ns\\\", home, subservers[subentry]);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (!ns.hasRootAccess(servers[entry])) {\\n\\t\\t\\ttakeover(servers[entry]);\\n\\t\\t}\\n\\t\\tns.tprint(\\\"copying scripts to \\\" + servers[entry]);\\n\\t\\tawait ns.scp(scripts, home, servers[entry]);\\n\\t\\t//await ns.scp(\\\"setup.ns\\\", home, servers[entry]);\\n\\t}\\n\\n\\t/** \\n\\t * \\tAttempts to take over target machine\\t\\n\\t * \\n\\t *  @param {string} tar\\n\\t *  @return {boolean} outcome \\n\\t**/\\n\\tasync function takeover(tar) {\\n\\t\\tlet currentTarget = tar;\\n\\t\\tlet isNotTakenOver = true;\\n\\t\\tlet attemptCounter = 0;\\n\\n\\t\\tif (ns.getServerNumPortsRequired <= 5 && attemptCounter < 50) {\\n\\t\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\n\\t\\t\\t\\tattemptCounter++;\\n\\t\\t\\t}\\n\\n\\t\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"setup.ns\",\"url\":\"blob:file:///40e334a4-7fd4-4502-a549-19d1f50ece1f\"}],\"dependents\":[],\"ramUsage\":3.15,\"server\":\"home\",\"moduleSequenceNumber\":714,\"_hash\":\"4c81fd5db4f8fe4d722783f42191167d5d6d91fc10ae0fac9e104775c4fc3a2c\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerList, takeover } from \\\"modules/helper.js\\\";\\n\\n/** @param {NS} ns **/\\n// TODO: unused + unfinished, based on setup.ns\\nexport async function main(ns) {\\n\\tconst myServers = [\\\"home\\\"];\\n\\n\\tvar servers = await getServerList(myServers, 0, ns);\\n\\n\\tfor (let entry in servers) {\\t\\n\\t\\tawait takeover(servers[entry], ns);\\n\\t}\\n}\",\"filename\":\"deep-setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/modules/helper.js\",\"url\":\"blob:file:///39addb61-a354-45a6-9bfd-cafee48e71dc\",\"moduleSequenceNumber\":234559},{\"filename\":\"deep-setup.js\",\"url\":\"blob:file:///fd32f460-45f6-4c4a-acea-0ed0692228f2\",\"moduleSequenceNumber\":234560}],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"home\",\"moduleSequenceNumber\":715,\"_hash\":\"fa44df621eca0f1166505a7bef87b89a9fadd830d92c73316cd5bc3ef5206f4c\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tconst currentMachine = ns.getHostname();\\n\\tvar servers = ns.scan(currentMachine);\\n\\tvar scripts = ns.ls(home, \\\"basic-\\\");\\n\\n\\tns.tprint(\\\"Host:  \\\" + currentMachine);\\n\\tfor (let entry in servers) {\\t// depth 0\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\t// depth 1\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== home && subservers.length > 1) {\\n\\t\\t\\t\\tns.tprint(\\\"-----> \\\" + subservers[subentry]);\\n\\t\\t\\t\\tlet subserversd2 = ns.scan(subservers[subentry]); // depth 2\\n\\t\\t\\t\\tfor (let subentryd2 in subserversd2) {\\n\\t\\t\\t\\t\\tif (subserversd2[subentryd2] !== subservers[subentry] && subserversd2[subentryd2] !== servers[entry] && subserversd2.length > 1) {\\n\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------> \\\" + subserversd2[subentryd2]);\\n\\t\\t\\t\\t\\t\\tlet subserversd3 = ns.scan(subserversd2[subentryd2]);\\t// depth 3\\n\\t\\t\\t\\t\\t\\tfor (let subentryd3 in subserversd3) {\\n\\t\\t\\t\\t\\t\\t\\tif (subserversd3[subentryd3] !== subserversd2[subentryd2] && subserversd3[subentryd3] !== subservers[subentry] && subserversd3.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------> \\\" + subserversd3[subentryd3]);\\n\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd4 = ns.scan(subserversd3[subentryd3]);\\t// depth 4\\n\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd4 in subserversd4) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd4[subentryd4] !== subserversd3[subentryd3] && subserversd4[subentryd4] !== subserversd2[subentryd2] && subserversd4.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------------> \\\" + subserversd4[subentryd4]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd5 = ns.scan(subserversd4[subentryd4]);\\t// depth 5\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd5 in subserversd5) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd5[subentryd5] !== subserversd4[subentryd4] && subserversd5[subentryd5] !== subserversd3[subentryd3] && subserversd5.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-------------------------> \\\" + subserversd5[subentryd5]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd6 = ns.scan(subserversd5[subentryd5]);\\t// depth 6\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd6 in subserversd6) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd6[subentryd6] !== subserversd5[subentryd5] && subserversd6[subentryd6] !== subserversd4[subentryd4] && subserversd6.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"------------------------------> \\\" + subserversd6[subentryd6]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd7 = ns.scan(subserversd6[subentryd6]);\\t// depth 7\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor(let subentryd7 in subserversd7) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd7[subentryd7] !== subserversd6[subentryd6] && subserversd7[subentryd7] !== subserversd5[subentryd5] && subserversd7.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-----------------------------------> \\\" + subserversd7[subentryd7]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"gigascan.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"gigascan.ns\",\"url\":\"blob:file:///7a697fb8-bdb0-43ca-a230-ccd271f2d51f\"}],\"dependents\":[],\"ramUsage\":2.05,\"server\":\"home\",\"moduleSequenceNumber\":716,\"_hash\":\"09d5eb91ac2188cd08d0b0658f50095ede1bc815d40e01a99435a8ab5d16f1b9\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet targetRam = ns.getServerMaxRam(ns.args[0]);\\n\\tlet scriptMem = ns.getScriptRam(ns.args[1]);\\n\\n\\tns.tprint(\\\"Maximum possible threads for \\\" + ns.args[1] + \\\": \\\" + Math.floor(targetRam / scriptMem));\\n\\tns.exit;\\n}\",\"filename\":\"ram-usage.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"ram-usage.js\",\"url\":\"blob:file:///45b3d934-401c-4c9e-ae31-ea9254ed9a6c\",\"moduleSequenceNumber\":5902}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":717,\"_hash\":\"79e21ded0793dceaa73c6e11d7b184dbca238d9dd4f83ccaffe923eef76c02f2\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\t//\\n}\",\"filename\":\"formulas-testing.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":718,\"_hash\":\"dc082db7a076b3bfd1fb273bbdf15b0a97f1ba5e3bb443dd1918b2e5239841e4\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Returns an array of all hostnames in the network tree\\n * \\n * @param {string[]} myServers\\n * @param {number} safetyCounter Prevents infnite recursion\\n * @param {NS} ns\\n */\\nexport async function getServerList(myServers, safetyCounter, ns) {\\n\\tlet srvrsSeen = myServers;\\n\\tlet currServScanResult = [];\\n\\n\\tfor (let serverSeen in srvrsSeen) {\\n\\t\\tcurrServScanResult = ns.scan(srvrsSeen[serverSeen]);\\n\\t\\tfor (let entry in currServScanResult) {\\n\\t\\t\\tif (!srvrsSeen.includes(currServScanResult[entry])) {\\n\\t\\t\\t\\tsrvrsSeen.push(currServScanResult[entry]);\\n\\t\\t\\t\\tif ((++safetyCounter) < 250) {\\n\\t\\t\\t\\t\\tawait getServerList(srvrsSeen, safetyCounter, ns);\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tns.exit();\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\t//Filter out invalid values (NaN, null, {}, undefined)\\n\\tsrvrsSeen = srvrsSeen.filter(x => x);\\n\\treturn srvrsSeen;\\n}\\n\\n\\n/** \\n * \\tAttempts to take over target machine\\t\\n * \\n *  @param {string} target\\n * \\t@param {NS} ns\\n *  @return {boolean} outcome \\n**/\\nexport async function takeover(target, ns) {\\n\\tconst home = \\\"home\\\";\\n\\tlet currentTarget = target;\\n\\tlet isNotTakenOver = true;\\n\\tlet attemptCounter = 0;\\n\\n\\tlet scripts = ns.ls(home, \\\".js\\\");\\n\\t//scripts.push(ns.ls(home, \\\".ns\\\")); //in case of deprecated .ns scripts\\n\\n\\tif (!ns.hasRootAccess(currentTarget) && attemptCounter < 30) {\\n\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\ttry {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t} catch (error) {\\n\\t\\t\\t\\t\\tns.tprint(\\\"not enough ports to nuke \\\" + currentTarget);\\n\\t\\t\\t\\t\\treturn false;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t}\\n\\t\\t\\tattemptCounter++;\\n\\t\\t}\\n\\n\\t\\tawait ns.scp(scripts, home, currentTarget);\\n\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\",\"filename\":\"/modules/helper.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/modules/full-server-scan.ns\",\"url\":\"blob:file:///f0fc84af-969c-47c1-b00d-5dd0a3b92590\"}],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"home\",\"moduleSequenceNumber\":719,\"_hash\":\"4f93efcfd2d3e94b515fcafd88561e1004c6ba39e213d9b582505fbc3013a732\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerList } from \\\"modules/helper.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet serversSeen = [\\\"home\\\"]; // home + bought servers\\n\\tlet contractList = [];\\n\\n\\tserversSeen = await getServerList(serversSeen, 0, ns);\\n\\n\\tns.tprint(serversSeen);\\n}\",\"filename\":\"search-coding-contracts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/modules/helper.js\",\"url\":\"blob:file:///5e8ea341-4089-4cc3-bedf-0a8b883d21a0\"},{\"filename\":\"search-coding-contracts.ns\",\"url\":\"blob:file:///6f1d479a-db1d-47c9-ad9e-982cf7a3798a\"}],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"home\",\"moduleSequenceNumber\":720,\"_hash\":\"a6671a1379e16a087f0bac6fa17ea15a778ba4e3ce3367541a16a00ba340ca3b\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}}],\"serversOnNetwork\":[\"n00dles\",\"foodnstuff\",\"sigma-cosmetics\",\"joesguns\",\"hong-fang-tea\",\"harakiri-sushi\",\"iron-gym\",\"darkweb\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"ecorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"ecorp\",\"httpPortOpen\":true,\"ip\":\"76.0.4.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"ECorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Returns an array of all hostnames in the network tree\\n * \\n * @param {string[]} myServers\\n * @param {number} safetyCounter Prevents infnite recursion\\n * @param {NS} ns\\n */\\nexport async function getServerList(myServers, safetyCounter, ns) {\\n\\tlet srvrsSeen = myServers;\\n\\tlet currServScanResult = [];\\n\\n\\tfor (let serverSeen in srvrsSeen) {\\n\\t\\tcurrServScanResult = ns.scan(srvrsSeen[serverSeen]);\\n\\t\\tfor (let entry in currServScanResult) {\\n\\t\\t\\tif (!srvrsSeen.includes(currServScanResult[entry])) {\\n\\t\\t\\t\\tsrvrsSeen.push(currServScanResult[entry]);\\n\\t\\t\\t\\tif ((++safetyCounter) < 250) {\\n\\t\\t\\t\\t\\tawait getServerList(srvrsSeen, safetyCounter, ns);\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tns.exit();\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\t//Filter out invalid values (NaN, null, {}, undefined)\\n\\tsrvrsSeen = srvrsSeen.filter(x => x);\\n\\treturn srvrsSeen;\\n}\\n\\n\\n/** \\n * \\tAttempts to take over target machine\\t\\n * \\n *  @param {string} target\\n * \\t@param {NS} ns\\n *  @return {boolean} outcome \\n**/\\nexport async function takeover(target, ns) {\\n\\tconst home = \\\"home\\\";\\n\\tlet currentTarget = target;\\n\\tlet isNotTakenOver = true;\\n\\tlet attemptCounter = 0;\\n\\n\\tlet scripts = ns.ls(home, \\\".js\\\");\\n\\t//scripts.push(ns.ls(home, \\\".ns\\\")); //in case of deprecated .ns scripts\\n\\n\\tns.tprint(scripts);\\n\\n\\n\\tif (!ns.hasRootAccess(currentTarget) && attemptCounter < 30) {\\n\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\ttry {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t} catch (error) {\\n\\t\\t\\t\\t\\tns.tprint(\\\"not enough ports to nuke \\\" + currentTarget);\\n\\t\\t\\t\\t\\treturn false;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t}\\n\\t\\t\\tattemptCounter++;\\n\\t\\t}\\n\\n\\t\\tawait ns.scp(scripts, home, currentTarget);\\n\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\",\"filename\":\"/modules/helper.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"ecorp\",\"moduleSequenceNumber\":721,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.grow(target);\\n\\t}\\n}\",\"filename\":\"basic-grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"ecorp\",\"moduleSequenceNumber\":722,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"basic-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"ecorp\",\"moduleSequenceNumber\":723,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(target);\\n\\t}\\n}\",\"filename\":\"basic-weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"ecorp\",\"moduleSequenceNumber\":724,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerList, takeover } from \\\"modules/helper.js\\\";\\n\\n/** @param {NS} ns **/\\n// TODO: unused + unfinished, based on setup.ns\\nexport async function main(ns) {\\n\\tconst myServers = [\\\"home\\\"];\\n\\n\\tvar servers = await getServerList(myServers, 0, ns);\\n\\n\\tfor (let entry in servers) {\\t\\n\\t\\tawait takeover(servers[entry], ns);\\n\\t}\\n}\",\"filename\":\"deep-setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"ecorp\",\"moduleSequenceNumber\":725,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\t//\\n}\",\"filename\":\"formulas-testing.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"ecorp\",\"moduleSequenceNumber\":726,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tconst currentMachine = ns.getHostname();\\n\\tvar servers = ns.scan(currentMachine);\\n\\tvar scripts = ns.ls(home, \\\"basic-\\\");\\n\\n\\tns.tprint(\\\"Host:  \\\" + currentMachine);\\n\\tfor (let entry in servers) {\\t// depth 0\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\t// depth 1\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== home && subservers.length > 1) {\\n\\t\\t\\t\\tns.tprint(\\\"-----> \\\" + subservers[subentry]);\\n\\t\\t\\t\\tlet subserversd2 = ns.scan(subservers[subentry]); // depth 2\\n\\t\\t\\t\\tfor (let subentryd2 in subserversd2) {\\n\\t\\t\\t\\t\\tif (subserversd2[subentryd2] !== subservers[subentry] && subserversd2[subentryd2] !== servers[entry] && subserversd2.length > 1) {\\n\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------> \\\" + subserversd2[subentryd2]);\\n\\t\\t\\t\\t\\t\\tlet subserversd3 = ns.scan(subserversd2[subentryd2]);\\t// depth 3\\n\\t\\t\\t\\t\\t\\tfor (let subentryd3 in subserversd3) {\\n\\t\\t\\t\\t\\t\\t\\tif (subserversd3[subentryd3] !== subserversd2[subentryd2] && subserversd3[subentryd3] !== subservers[subentry] && subserversd3.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------> \\\" + subserversd3[subentryd3]);\\n\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd4 = ns.scan(subserversd3[subentryd3]);\\t// depth 4\\n\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd4 in subserversd4) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd4[subentryd4] !== subserversd3[subentryd3] && subserversd4[subentryd4] !== subserversd2[subentryd2] && subserversd4.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------------> \\\" + subserversd4[subentryd4]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd5 = ns.scan(subserversd4[subentryd4]);\\t// depth 5\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd5 in subserversd5) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd5[subentryd5] !== subserversd4[subentryd4] && subserversd5[subentryd5] !== subserversd3[subentryd3] && subserversd5.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-------------------------> \\\" + subserversd5[subentryd5]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd6 = ns.scan(subserversd5[subentryd5]);\\t// depth 6\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd6 in subserversd6) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd6[subentryd6] !== subserversd5[subentryd5] && subserversd6[subentryd6] !== subserversd4[subentryd4] && subserversd6.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"------------------------------> \\\" + subserversd6[subentryd6]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd7 = ns.scan(subserversd6[subentryd6]);\\t// depth 7\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor(let subentryd7 in subserversd7) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd7[subentryd7] !== subserversd6[subentryd6] && subserversd7[subentryd7] !== subserversd5[subentryd5] && subserversd7.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-----------------------------------> \\\" + subserversd7[subentryd7]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"gigascan.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.05,\"server\":\"ecorp\",\"moduleSequenceNumber\":727,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet targetRam = ns.getServerMaxRam(ns.args[0]);\\n\\tlet scriptMem = ns.getScriptRam(ns.args[1]);\\n\\n\\tns.tprint(\\\"Maximum possible threads for \\\" + ns.args[1] + \\\": \\\" + Math.floor(targetRam / scriptMem));\\n\\tns.exit;\\n}\",\"filename\":\"ram-usage.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"ecorp\",\"moduleSequenceNumber\":728,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerList } from \\\"modules/helper.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet serversSeen = [\\\"home\\\"]; // home + bought servers\\n\\tlet contractList = [];\\n\\n\\tserversSeen = await getServerList(serversSeen, 0, ns);\\n\\n\\tns.tprint(serversSeen);\\n}\",\"filename\":\"search-coding-contracts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"ecorp\",\"moduleSequenceNumber\":729,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tvar servers = ns.scan(home);\\n\\tvar scripts = ns.ls(home, \\\".ns\\\");\\n\\n\\tfor (let entry in scripts) {\\n\\t\\tns.tprint(\\\"found script: \\\" + scripts[entry]);\\n\\t}\\n\\n\\t// Hack servers (!!! depth = 2 !!!) if needed and populate with scripts\\n\\tfor (let entry in servers) {\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== \\\"home\\\") {\\n\\t\\t\\t\\tns.tprint(\\\"----->   \\\" + subservers[subentry]);\\n\\t\\t\\t\\tif (!ns.hasRootAccess(subservers[subentry])) {\\n\\t\\t\\t\\t\\ttakeover(subservers[subentry]);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tns.tprint(\\\"copying scripts to \\\" + subservers[subentry]);\\n\\t\\t\\t\\tawait ns.scp(scripts, home, subservers[subentry]);\\n\\t\\t\\t\\t//await ns.scp(\\\"setup.ns\\\", home, subservers[subentry]);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (!ns.hasRootAccess(servers[entry])) {\\n\\t\\t\\ttakeover(servers[entry]);\\n\\t\\t}\\n\\t\\tns.tprint(\\\"copying scripts to \\\" + servers[entry]);\\n\\t\\tawait ns.scp(scripts, home, servers[entry]);\\n\\t\\t//await ns.scp(\\\"setup.ns\\\", home, servers[entry]);\\n\\t}\\n\\n\\t/** \\n\\t * \\tAttempts to take over target machine\\t\\n\\t * \\n\\t *  @param {string} tar\\n\\t *  @return {boolean} outcome \\n\\t**/\\n\\tasync function takeover(tar) {\\n\\t\\tlet currentTarget = tar;\\n\\t\\tlet isNotTakenOver = true;\\n\\t\\tlet attemptCounter = 0;\\n\\n\\t\\tif (ns.getServerNumPortsRequired <= 5 && attemptCounter < 50) {\\n\\t\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\n\\t\\t\\t\\tattemptCounter++;\\n\\t\\t\\t}\\n\\n\\t\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.15,\"server\":\"ecorp\",\"moduleSequenceNumber\":730,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}}],\"serversOnNetwork\":[\"b-and-a\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":57691603388,\"moneyMax\":1442290084700,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1252,\"serverGrowth\":99}},\"megacorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"megacorp\",\"httpPortOpen\":true,\"ip\":\"13.2.0.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"MegaCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Returns an array of all hostnames in the network tree\\n * \\n * @param {string[]} myServers\\n * @param {number} safetyCounter Prevents infnite recursion\\n * @param {NS} ns\\n */\\nexport async function getServerList(myServers, safetyCounter, ns) {\\n\\tlet srvrsSeen = myServers;\\n\\tlet currServScanResult = [];\\n\\n\\tfor (let serverSeen in srvrsSeen) {\\n\\t\\tcurrServScanResult = ns.scan(srvrsSeen[serverSeen]);\\n\\t\\tfor (let entry in currServScanResult) {\\n\\t\\t\\tif (!srvrsSeen.includes(currServScanResult[entry])) {\\n\\t\\t\\t\\tsrvrsSeen.push(currServScanResult[entry]);\\n\\t\\t\\t\\tif ((++safetyCounter) < 250) {\\n\\t\\t\\t\\t\\tawait getServerList(srvrsSeen, safetyCounter, ns);\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tns.exit();\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\t//Filter out invalid values (NaN, null, {}, undefined)\\n\\tsrvrsSeen = srvrsSeen.filter(x => x);\\n\\treturn srvrsSeen;\\n}\\n\\n\\n/** \\n * \\tAttempts to take over target machine\\t\\n * \\n *  @param {string} target\\n * \\t@param {NS} ns\\n *  @return {boolean} outcome \\n**/\\nexport async function takeover(target, ns) {\\n\\tconst home = \\\"home\\\";\\n\\tlet currentTarget = target;\\n\\tlet isNotTakenOver = true;\\n\\tlet attemptCounter = 0;\\n\\n\\tlet scripts = ns.ls(home, \\\".js\\\");\\n\\t//scripts.push(ns.ls(home, \\\".ns\\\")); //in case of deprecated .ns scripts\\n\\n\\tns.tprint(scripts);\\n\\n\\n\\tif (!ns.hasRootAccess(currentTarget) && attemptCounter < 30) {\\n\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\ttry {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t} catch (error) {\\n\\t\\t\\t\\t\\tns.tprint(\\\"not enough ports to nuke \\\" + currentTarget);\\n\\t\\t\\t\\t\\treturn false;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t}\\n\\t\\t\\tattemptCounter++;\\n\\t\\t}\\n\\n\\t\\tawait ns.scp(scripts, home, currentTarget);\\n\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\",\"filename\":\"/modules/helper.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"megacorp\",\"moduleSequenceNumber\":731,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.grow(target);\\n\\t}\\n}\",\"filename\":\"basic-grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"megacorp\",\"moduleSequenceNumber\":732,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"basic-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"megacorp\",\"moduleSequenceNumber\":733,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(target);\\n\\t}\\n}\",\"filename\":\"basic-weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"megacorp\",\"moduleSequenceNumber\":734,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerList, takeover } from \\\"modules/helper.js\\\";\\n\\n/** @param {NS} ns **/\\n// TODO: unused + unfinished, based on setup.ns\\nexport async function main(ns) {\\n\\tconst myServers = [\\\"home\\\"];\\n\\n\\tvar servers = await getServerList(myServers, 0, ns);\\n\\n\\tfor (let entry in servers) {\\t\\n\\t\\tawait takeover(servers[entry], ns);\\n\\t}\\n}\",\"filename\":\"deep-setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"megacorp\",\"moduleSequenceNumber\":735,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\t//\\n}\",\"filename\":\"formulas-testing.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"megacorp\",\"moduleSequenceNumber\":736,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tconst currentMachine = ns.getHostname();\\n\\tvar servers = ns.scan(currentMachine);\\n\\tvar scripts = ns.ls(home, \\\"basic-\\\");\\n\\n\\tns.tprint(\\\"Host:  \\\" + currentMachine);\\n\\tfor (let entry in servers) {\\t// depth 0\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\t// depth 1\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== home && subservers.length > 1) {\\n\\t\\t\\t\\tns.tprint(\\\"-----> \\\" + subservers[subentry]);\\n\\t\\t\\t\\tlet subserversd2 = ns.scan(subservers[subentry]); // depth 2\\n\\t\\t\\t\\tfor (let subentryd2 in subserversd2) {\\n\\t\\t\\t\\t\\tif (subserversd2[subentryd2] !== subservers[subentry] && subserversd2[subentryd2] !== servers[entry] && subserversd2.length > 1) {\\n\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------> \\\" + subserversd2[subentryd2]);\\n\\t\\t\\t\\t\\t\\tlet subserversd3 = ns.scan(subserversd2[subentryd2]);\\t// depth 3\\n\\t\\t\\t\\t\\t\\tfor (let subentryd3 in subserversd3) {\\n\\t\\t\\t\\t\\t\\t\\tif (subserversd3[subentryd3] !== subserversd2[subentryd2] && subserversd3[subentryd3] !== subservers[subentry] && subserversd3.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------> \\\" + subserversd3[subentryd3]);\\n\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd4 = ns.scan(subserversd3[subentryd3]);\\t// depth 4\\n\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd4 in subserversd4) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd4[subentryd4] !== subserversd3[subentryd3] && subserversd4[subentryd4] !== subserversd2[subentryd2] && subserversd4.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------------> \\\" + subserversd4[subentryd4]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd5 = ns.scan(subserversd4[subentryd4]);\\t// depth 5\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd5 in subserversd5) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd5[subentryd5] !== subserversd4[subentryd4] && subserversd5[subentryd5] !== subserversd3[subentryd3] && subserversd5.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-------------------------> \\\" + subserversd5[subentryd5]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd6 = ns.scan(subserversd5[subentryd5]);\\t// depth 6\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd6 in subserversd6) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd6[subentryd6] !== subserversd5[subentryd5] && subserversd6[subentryd6] !== subserversd4[subentryd4] && subserversd6.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"------------------------------> \\\" + subserversd6[subentryd6]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd7 = ns.scan(subserversd6[subentryd6]);\\t// depth 7\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor(let subentryd7 in subserversd7) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd7[subentryd7] !== subserversd6[subentryd6] && subserversd7[subentryd7] !== subserversd5[subentryd5] && subserversd7.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-----------------------------------> \\\" + subserversd7[subentryd7]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"gigascan.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.05,\"server\":\"megacorp\",\"moduleSequenceNumber\":737,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet targetRam = ns.getServerMaxRam(ns.args[0]);\\n\\tlet scriptMem = ns.getScriptRam(ns.args[1]);\\n\\n\\tns.tprint(\\\"Maximum possible threads for \\\" + ns.args[1] + \\\": \\\" + Math.floor(targetRam / scriptMem));\\n\\tns.exit;\\n}\",\"filename\":\"ram-usage.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"megacorp\",\"moduleSequenceNumber\":738,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerList } from \\\"modules/helper.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet serversSeen = [\\\"home\\\"]; // home + bought servers\\n\\tlet contractList = [];\\n\\n\\tserversSeen = await getServerList(serversSeen, 0, ns);\\n\\n\\tns.tprint(serversSeen);\\n}\",\"filename\":\"search-coding-contracts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"megacorp\",\"moduleSequenceNumber\":739,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tvar servers = ns.scan(home);\\n\\tvar scripts = ns.ls(home, \\\".ns\\\");\\n\\n\\tfor (let entry in scripts) {\\n\\t\\tns.tprint(\\\"found script: \\\" + scripts[entry]);\\n\\t}\\n\\n\\t// Hack servers (!!! depth = 2 !!!) if needed and populate with scripts\\n\\tfor (let entry in servers) {\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== \\\"home\\\") {\\n\\t\\t\\t\\tns.tprint(\\\"----->   \\\" + subservers[subentry]);\\n\\t\\t\\t\\tif (!ns.hasRootAccess(subservers[subentry])) {\\n\\t\\t\\t\\t\\ttakeover(subservers[subentry]);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tns.tprint(\\\"copying scripts to \\\" + subservers[subentry]);\\n\\t\\t\\t\\tawait ns.scp(scripts, home, subservers[subentry]);\\n\\t\\t\\t\\t//await ns.scp(\\\"setup.ns\\\", home, subservers[subentry]);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (!ns.hasRootAccess(servers[entry])) {\\n\\t\\t\\ttakeover(servers[entry]);\\n\\t\\t}\\n\\t\\tns.tprint(\\\"copying scripts to \\\" + servers[entry]);\\n\\t\\tawait ns.scp(scripts, home, servers[entry]);\\n\\t\\t//await ns.scp(\\\"setup.ns\\\", home, servers[entry]);\\n\\t}\\n\\n\\t/** \\n\\t * \\tAttempts to take over target machine\\t\\n\\t * \\n\\t *  @param {string} tar\\n\\t *  @return {boolean} outcome \\n\\t**/\\n\\tasync function takeover(tar) {\\n\\t\\tlet currentTarget = tar;\\n\\t\\tlet isNotTakenOver = true;\\n\\t\\tlet attemptCounter = 0;\\n\\n\\t\\tif (ns.getServerNumPortsRequired <= 5 && attemptCounter < 50) {\\n\\t\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\n\\t\\t\\t\\tattemptCounter++;\\n\\t\\t\\t}\\n\\n\\t\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.15,\"server\":\"megacorp\",\"moduleSequenceNumber\":740,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}}],\"serversOnNetwork\":[\"b-and-a\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":51174665456,\"moneyMax\":1279366636400,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1289,\"serverGrowth\":99}},\"b-and-a\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"b-and-a\",\"httpPortOpen\":true,\"ip\":\"87.1.4.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Bachman & Associates\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Returns an array of all hostnames in the network tree\\n * \\n * @param {string[]} myServers\\n * @param {number} safetyCounter Prevents infnite recursion\\n * @param {NS} ns\\n */\\nexport async function getServerList(myServers, safetyCounter, ns) {\\n\\tlet srvrsSeen = myServers;\\n\\tlet currServScanResult = [];\\n\\n\\tfor (let serverSeen in srvrsSeen) {\\n\\t\\tcurrServScanResult = ns.scan(srvrsSeen[serverSeen]);\\n\\t\\tfor (let entry in currServScanResult) {\\n\\t\\t\\tif (!srvrsSeen.includes(currServScanResult[entry])) {\\n\\t\\t\\t\\tsrvrsSeen.push(currServScanResult[entry]);\\n\\t\\t\\t\\tif ((++safetyCounter) < 250) {\\n\\t\\t\\t\\t\\tawait getServerList(srvrsSeen, safetyCounter, ns);\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tns.exit();\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\t//Filter out invalid values (NaN, null, {}, undefined)\\n\\tsrvrsSeen = srvrsSeen.filter(x => x);\\n\\treturn srvrsSeen;\\n}\\n\\n\\n/** \\n * \\tAttempts to take over target machine\\t\\n * \\n *  @param {string} target\\n * \\t@param {NS} ns\\n *  @return {boolean} outcome \\n**/\\nexport async function takeover(target, ns) {\\n\\tconst home = \\\"home\\\";\\n\\tlet currentTarget = target;\\n\\tlet isNotTakenOver = true;\\n\\tlet attemptCounter = 0;\\n\\n\\tlet scripts = ns.ls(home, \\\".js\\\");\\n\\t//scripts.push(ns.ls(home, \\\".ns\\\")); //in case of deprecated .ns scripts\\n\\n\\tns.tprint(scripts);\\n\\n\\n\\tif (!ns.hasRootAccess(currentTarget) && attemptCounter < 30) {\\n\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\ttry {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t} catch (error) {\\n\\t\\t\\t\\t\\tns.tprint(\\\"not enough ports to nuke \\\" + currentTarget);\\n\\t\\t\\t\\t\\treturn false;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t}\\n\\t\\t\\tattemptCounter++;\\n\\t\\t}\\n\\n\\t\\tawait ns.scp(scripts, home, currentTarget);\\n\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\",\"filename\":\"/modules/helper.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"b-and-a\",\"moduleSequenceNumber\":741,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.grow(target);\\n\\t}\\n}\",\"filename\":\"basic-grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"b-and-a\",\"moduleSequenceNumber\":742,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"basic-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"b-and-a\",\"moduleSequenceNumber\":743,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(target);\\n\\t}\\n}\",\"filename\":\"basic-weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"b-and-a\",\"moduleSequenceNumber\":744,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerList, takeover } from \\\"modules/helper.js\\\";\\n\\n/** @param {NS} ns **/\\n// TODO: unused + unfinished, based on setup.ns\\nexport async function main(ns) {\\n\\tconst myServers = [\\\"home\\\"];\\n\\n\\tvar servers = await getServerList(myServers, 0, ns);\\n\\n\\tfor (let entry in servers) {\\t\\n\\t\\tawait takeover(servers[entry], ns);\\n\\t}\\n}\",\"filename\":\"deep-setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"b-and-a\",\"moduleSequenceNumber\":745,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\t//\\n}\",\"filename\":\"formulas-testing.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"b-and-a\",\"moduleSequenceNumber\":746,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tconst currentMachine = ns.getHostname();\\n\\tvar servers = ns.scan(currentMachine);\\n\\tvar scripts = ns.ls(home, \\\"basic-\\\");\\n\\n\\tns.tprint(\\\"Host:  \\\" + currentMachine);\\n\\tfor (let entry in servers) {\\t// depth 0\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\t// depth 1\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== home && subservers.length > 1) {\\n\\t\\t\\t\\tns.tprint(\\\"-----> \\\" + subservers[subentry]);\\n\\t\\t\\t\\tlet subserversd2 = ns.scan(subservers[subentry]); // depth 2\\n\\t\\t\\t\\tfor (let subentryd2 in subserversd2) {\\n\\t\\t\\t\\t\\tif (subserversd2[subentryd2] !== subservers[subentry] && subserversd2[subentryd2] !== servers[entry] && subserversd2.length > 1) {\\n\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------> \\\" + subserversd2[subentryd2]);\\n\\t\\t\\t\\t\\t\\tlet subserversd3 = ns.scan(subserversd2[subentryd2]);\\t// depth 3\\n\\t\\t\\t\\t\\t\\tfor (let subentryd3 in subserversd3) {\\n\\t\\t\\t\\t\\t\\t\\tif (subserversd3[subentryd3] !== subserversd2[subentryd2] && subserversd3[subentryd3] !== subservers[subentry] && subserversd3.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------> \\\" + subserversd3[subentryd3]);\\n\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd4 = ns.scan(subserversd3[subentryd3]);\\t// depth 4\\n\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd4 in subserversd4) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd4[subentryd4] !== subserversd3[subentryd3] && subserversd4[subentryd4] !== subserversd2[subentryd2] && subserversd4.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------------> \\\" + subserversd4[subentryd4]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd5 = ns.scan(subserversd4[subentryd4]);\\t// depth 5\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd5 in subserversd5) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd5[subentryd5] !== subserversd4[subentryd4] && subserversd5[subentryd5] !== subserversd3[subentryd3] && subserversd5.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-------------------------> \\\" + subserversd5[subentryd5]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd6 = ns.scan(subserversd5[subentryd5]);\\t// depth 6\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd6 in subserversd6) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd6[subentryd6] !== subserversd5[subentryd5] && subserversd6[subentryd6] !== subserversd4[subentryd4] && subserversd6.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"------------------------------> \\\" + subserversd6[subentryd6]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd7 = ns.scan(subserversd6[subentryd6]);\\t// depth 7\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor(let subentryd7 in subserversd7) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd7[subentryd7] !== subserversd6[subentryd6] && subserversd7[subentryd7] !== subserversd5[subentryd5] && subserversd7.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-----------------------------------> \\\" + subserversd7[subentryd7]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"gigascan.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.05,\"server\":\"b-and-a\",\"moduleSequenceNumber\":747,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet targetRam = ns.getServerMaxRam(ns.args[0]);\\n\\tlet scriptMem = ns.getScriptRam(ns.args[1]);\\n\\n\\tns.tprint(\\\"Maximum possible threads for \\\" + ns.args[1] + \\\": \\\" + Math.floor(targetRam / scriptMem));\\n\\tns.exit;\\n}\",\"filename\":\"ram-usage.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"b-and-a\",\"moduleSequenceNumber\":748,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerList } from \\\"modules/helper.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet serversSeen = [\\\"home\\\"]; // home + bought servers\\n\\tlet contractList = [];\\n\\n\\tserversSeen = await getServerList(serversSeen, 0, ns);\\n\\n\\tns.tprint(serversSeen);\\n}\",\"filename\":\"search-coding-contracts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"b-and-a\",\"moduleSequenceNumber\":749,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tvar servers = ns.scan(home);\\n\\tvar scripts = ns.ls(home, \\\".ns\\\");\\n\\n\\tfor (let entry in scripts) {\\n\\t\\tns.tprint(\\\"found script: \\\" + scripts[entry]);\\n\\t}\\n\\n\\t// Hack servers (!!! depth = 2 !!!) if needed and populate with scripts\\n\\tfor (let entry in servers) {\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== \\\"home\\\") {\\n\\t\\t\\t\\tns.tprint(\\\"----->   \\\" + subservers[subentry]);\\n\\t\\t\\t\\tif (!ns.hasRootAccess(subservers[subentry])) {\\n\\t\\t\\t\\t\\ttakeover(subservers[subentry]);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tns.tprint(\\\"copying scripts to \\\" + subservers[subentry]);\\n\\t\\t\\t\\tawait ns.scp(scripts, home, subservers[subentry]);\\n\\t\\t\\t\\t//await ns.scp(\\\"setup.ns\\\", home, subservers[subentry]);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (!ns.hasRootAccess(servers[entry])) {\\n\\t\\t\\ttakeover(servers[entry]);\\n\\t\\t}\\n\\t\\tns.tprint(\\\"copying scripts to \\\" + servers[entry]);\\n\\t\\tawait ns.scp(scripts, home, servers[entry]);\\n\\t\\t//await ns.scp(\\\"setup.ns\\\", home, servers[entry]);\\n\\t}\\n\\n\\t/** \\n\\t * \\tAttempts to take over target machine\\t\\n\\t * \\n\\t *  @param {string} tar\\n\\t *  @return {boolean} outcome \\n\\t**/\\n\\tasync function takeover(tar) {\\n\\t\\tlet currentTarget = tar;\\n\\t\\tlet isNotTakenOver = true;\\n\\t\\tlet attemptCounter = 0;\\n\\n\\t\\tif (ns.getServerNumPortsRequired <= 5 && attemptCounter < 50) {\\n\\t\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\n\\t\\t\\t\\tattemptCounter++;\\n\\t\\t\\t}\\n\\n\\t\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.15,\"server\":\"b-and-a\",\"moduleSequenceNumber\":750,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}}],\"serversOnNetwork\":[\"omnitek\",\"ecorp\",\"megacorp\",\"fulcrumassets\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":80,\"hackDifficulty\":80,\"minDifficulty\":27,\"moneyAvailable\":23158697776,\"moneyMax\":578967444400,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1097,\"serverGrowth\":77}},\"blade\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-642351.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[196,97,147,85,93,50,122,81,110,74],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"blade\",\"httpPortOpen\":true,\"ip\":\"74.6.4.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Blade Industries\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Returns an array of all hostnames in the network tree\\n * \\n * @param {string[]} myServers\\n * @param {number} safetyCounter Prevents infnite recursion\\n * @param {NS} ns\\n */\\nexport async function getServerList(myServers, safetyCounter, ns) {\\n\\tlet srvrsSeen = myServers;\\n\\tlet currServScanResult = [];\\n\\n\\tfor (let serverSeen in srvrsSeen) {\\n\\t\\tcurrServScanResult = ns.scan(srvrsSeen[serverSeen]);\\n\\t\\tfor (let entry in currServScanResult) {\\n\\t\\t\\tif (!srvrsSeen.includes(currServScanResult[entry])) {\\n\\t\\t\\t\\tsrvrsSeen.push(currServScanResult[entry]);\\n\\t\\t\\t\\tif ((++safetyCounter) < 250) {\\n\\t\\t\\t\\t\\tawait getServerList(srvrsSeen, safetyCounter, ns);\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tns.exit();\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\t//Filter out invalid values (NaN, null, {}, undefined)\\n\\tsrvrsSeen = srvrsSeen.filter(x => x);\\n\\treturn srvrsSeen;\\n}\\n\\n\\n/** \\n * \\tAttempts to take over target machine\\t\\n * \\n *  @param {string} target\\n * \\t@param {NS} ns\\n *  @return {boolean} outcome \\n**/\\nexport async function takeover(target, ns) {\\n\\tconst home = \\\"home\\\";\\n\\tlet currentTarget = target;\\n\\tlet isNotTakenOver = true;\\n\\tlet attemptCounter = 0;\\n\\n\\tlet scripts = ns.ls(home, \\\".js\\\");\\n\\t//scripts.push(ns.ls(home, \\\".ns\\\")); //in case of deprecated .ns scripts\\n\\n\\tns.tprint(scripts);\\n\\n\\n\\tif (!ns.hasRootAccess(currentTarget) && attemptCounter < 30) {\\n\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\ttry {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t} catch (error) {\\n\\t\\t\\t\\t\\tns.tprint(\\\"not enough ports to nuke \\\" + currentTarget);\\n\\t\\t\\t\\t\\treturn false;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t}\\n\\t\\t\\tattemptCounter++;\\n\\t\\t}\\n\\n\\t\\tawait ns.scp(scripts, home, currentTarget);\\n\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\",\"filename\":\"/modules/helper.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"blade\",\"moduleSequenceNumber\":751,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.grow(target);\\n\\t}\\n}\",\"filename\":\"basic-grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"blade\",\"moduleSequenceNumber\":752,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"basic-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"blade\",\"moduleSequenceNumber\":753,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(target);\\n\\t}\\n}\",\"filename\":\"basic-weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"blade\",\"moduleSequenceNumber\":754,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerList, takeover } from \\\"modules/helper.js\\\";\\n\\n/** @param {NS} ns **/\\n// TODO: unused + unfinished, based on setup.ns\\nexport async function main(ns) {\\n\\tconst myServers = [\\\"home\\\"];\\n\\n\\tvar servers = await getServerList(myServers, 0, ns);\\n\\n\\tfor (let entry in servers) {\\t\\n\\t\\tawait takeover(servers[entry], ns);\\n\\t}\\n}\",\"filename\":\"deep-setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"blade\",\"moduleSequenceNumber\":755,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\t//\\n}\",\"filename\":\"formulas-testing.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"blade\",\"moduleSequenceNumber\":756,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tconst currentMachine = ns.getHostname();\\n\\tvar servers = ns.scan(currentMachine);\\n\\tvar scripts = ns.ls(home, \\\"basic-\\\");\\n\\n\\tns.tprint(\\\"Host:  \\\" + currentMachine);\\n\\tfor (let entry in servers) {\\t// depth 0\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\t// depth 1\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== home && subservers.length > 1) {\\n\\t\\t\\t\\tns.tprint(\\\"-----> \\\" + subservers[subentry]);\\n\\t\\t\\t\\tlet subserversd2 = ns.scan(subservers[subentry]); // depth 2\\n\\t\\t\\t\\tfor (let subentryd2 in subserversd2) {\\n\\t\\t\\t\\t\\tif (subserversd2[subentryd2] !== subservers[subentry] && subserversd2[subentryd2] !== servers[entry] && subserversd2.length > 1) {\\n\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------> \\\" + subserversd2[subentryd2]);\\n\\t\\t\\t\\t\\t\\tlet subserversd3 = ns.scan(subserversd2[subentryd2]);\\t// depth 3\\n\\t\\t\\t\\t\\t\\tfor (let subentryd3 in subserversd3) {\\n\\t\\t\\t\\t\\t\\t\\tif (subserversd3[subentryd3] !== subserversd2[subentryd2] && subserversd3[subentryd3] !== subservers[subentry] && subserversd3.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------> \\\" + subserversd3[subentryd3]);\\n\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd4 = ns.scan(subserversd3[subentryd3]);\\t// depth 4\\n\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd4 in subserversd4) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd4[subentryd4] !== subserversd3[subentryd3] && subserversd4[subentryd4] !== subserversd2[subentryd2] && subserversd4.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------------> \\\" + subserversd4[subentryd4]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd5 = ns.scan(subserversd4[subentryd4]);\\t// depth 5\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd5 in subserversd5) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd5[subentryd5] !== subserversd4[subentryd4] && subserversd5[subentryd5] !== subserversd3[subentryd3] && subserversd5.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-------------------------> \\\" + subserversd5[subentryd5]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd6 = ns.scan(subserversd5[subentryd5]);\\t// depth 6\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd6 in subserversd6) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd6[subentryd6] !== subserversd5[subentryd5] && subserversd6[subentryd6] !== subserversd4[subentryd4] && subserversd6.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"------------------------------> \\\" + subserversd6[subentryd6]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd7 = ns.scan(subserversd6[subentryd6]);\\t// depth 7\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor(let subentryd7 in subserversd7) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd7[subentryd7] !== subserversd6[subentryd6] && subserversd7[subentryd7] !== subserversd5[subentryd5] && subserversd7.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-----------------------------------> \\\" + subserversd7[subentryd7]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"gigascan.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.05,\"server\":\"blade\",\"moduleSequenceNumber\":757,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet targetRam = ns.getServerMaxRam(ns.args[0]);\\n\\tlet scriptMem = ns.getScriptRam(ns.args[1]);\\n\\n\\tns.tprint(\\\"Maximum possible threads for \\\" + ns.args[1] + \\\": \\\" + Math.floor(targetRam / scriptMem));\\n\\tns.exit;\\n}\",\"filename\":\"ram-usage.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"blade\",\"moduleSequenceNumber\":758,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerList } from \\\"modules/helper.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet serversSeen = [\\\"home\\\"]; // home + bought servers\\n\\tlet contractList = [];\\n\\n\\tserversSeen = await getServerList(serversSeen, 0, ns);\\n\\n\\tns.tprint(serversSeen);\\n}\",\"filename\":\"search-coding-contracts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"blade\",\"moduleSequenceNumber\":759,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tvar servers = ns.scan(home);\\n\\tvar scripts = ns.ls(home, \\\".ns\\\");\\n\\n\\tfor (let entry in scripts) {\\n\\t\\tns.tprint(\\\"found script: \\\" + scripts[entry]);\\n\\t}\\n\\n\\t// Hack servers (!!! depth = 2 !!!) if needed and populate with scripts\\n\\tfor (let entry in servers) {\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== \\\"home\\\") {\\n\\t\\t\\t\\tns.tprint(\\\"----->   \\\" + subservers[subentry]);\\n\\t\\t\\t\\tif (!ns.hasRootAccess(subservers[subentry])) {\\n\\t\\t\\t\\t\\ttakeover(subservers[subentry]);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tns.tprint(\\\"copying scripts to \\\" + subservers[subentry]);\\n\\t\\t\\t\\tawait ns.scp(scripts, home, subservers[subentry]);\\n\\t\\t\\t\\t//await ns.scp(\\\"setup.ns\\\", home, subservers[subentry]);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (!ns.hasRootAccess(servers[entry])) {\\n\\t\\t\\ttakeover(servers[entry]);\\n\\t\\t}\\n\\t\\tns.tprint(\\\"copying scripts to \\\" + servers[entry]);\\n\\t\\tawait ns.scp(scripts, home, servers[entry]);\\n\\t\\t//await ns.scp(\\\"setup.ns\\\", home, servers[entry]);\\n\\t}\\n\\n\\t/** \\n\\t * \\tAttempts to take over target machine\\t\\n\\t * \\n\\t *  @param {string} tar\\n\\t *  @return {boolean} outcome \\n\\t**/\\n\\tasync function takeover(tar) {\\n\\t\\tlet currentTarget = tar;\\n\\t\\tlet isNotTakenOver = true;\\n\\t\\tlet attemptCounter = 0;\\n\\n\\t\\tif (ns.getServerNumPortsRequired <= 5 && attemptCounter < 50) {\\n\\t\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\n\\t\\t\\t\\tattemptCounter++;\\n\\t\\t\\t}\\n\\n\\t\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.15,\"server\":\"blade\",\"moduleSequenceNumber\":760,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}}],\"serversOnNetwork\":[\"4sigma\",\"The-Cave\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":92,\"hackDifficulty\":92,\"minDifficulty\":31,\"moneyAvailable\":29641876945,\"moneyMax\":741046923625,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":915,\"serverGrowth\":62}},\"nwo\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"nwo\",\"httpPortOpen\":true,\"ip\":\"31.2.5.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"NWO\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Returns an array of all hostnames in the network tree\\n * \\n * @param {string[]} myServers\\n * @param {number} safetyCounter Prevents infnite recursion\\n * @param {NS} ns\\n */\\nexport async function getServerList(myServers, safetyCounter, ns) {\\n\\tlet srvrsSeen = myServers;\\n\\tlet currServScanResult = [];\\n\\n\\tfor (let serverSeen in srvrsSeen) {\\n\\t\\tcurrServScanResult = ns.scan(srvrsSeen[serverSeen]);\\n\\t\\tfor (let entry in currServScanResult) {\\n\\t\\t\\tif (!srvrsSeen.includes(currServScanResult[entry])) {\\n\\t\\t\\t\\tsrvrsSeen.push(currServScanResult[entry]);\\n\\t\\t\\t\\tif ((++safetyCounter) < 250) {\\n\\t\\t\\t\\t\\tawait getServerList(srvrsSeen, safetyCounter, ns);\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tns.exit();\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\t//Filter out invalid values (NaN, null, {}, undefined)\\n\\tsrvrsSeen = srvrsSeen.filter(x => x);\\n\\treturn srvrsSeen;\\n}\\n\\n\\n/** \\n * \\tAttempts to take over target machine\\t\\n * \\n *  @param {string} target\\n * \\t@param {NS} ns\\n *  @return {boolean} outcome \\n**/\\nexport async function takeover(target, ns) {\\n\\tconst home = \\\"home\\\";\\n\\tlet currentTarget = target;\\n\\tlet isNotTakenOver = true;\\n\\tlet attemptCounter = 0;\\n\\n\\tlet scripts = ns.ls(home, \\\".js\\\");\\n\\t//scripts.push(ns.ls(home, \\\".ns\\\")); //in case of deprecated .ns scripts\\n\\n\\tns.tprint(scripts);\\n\\n\\n\\tif (!ns.hasRootAccess(currentTarget) && attemptCounter < 30) {\\n\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\ttry {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t} catch (error) {\\n\\t\\t\\t\\t\\tns.tprint(\\\"not enough ports to nuke \\\" + currentTarget);\\n\\t\\t\\t\\t\\treturn false;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t}\\n\\t\\t\\tattemptCounter++;\\n\\t\\t}\\n\\n\\t\\tawait ns.scp(scripts, home, currentTarget);\\n\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\",\"filename\":\"/modules/helper.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"nwo\",\"moduleSequenceNumber\":761,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.grow(target);\\n\\t}\\n}\",\"filename\":\"basic-grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"nwo\",\"moduleSequenceNumber\":762,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"basic-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"nwo\",\"moduleSequenceNumber\":763,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(target);\\n\\t}\\n}\",\"filename\":\"basic-weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"nwo\",\"moduleSequenceNumber\":764,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerList, takeover } from \\\"modules/helper.js\\\";\\n\\n/** @param {NS} ns **/\\n// TODO: unused + unfinished, based on setup.ns\\nexport async function main(ns) {\\n\\tconst myServers = [\\\"home\\\"];\\n\\n\\tvar servers = await getServerList(myServers, 0, ns);\\n\\n\\tfor (let entry in servers) {\\t\\n\\t\\tawait takeover(servers[entry], ns);\\n\\t}\\n}\",\"filename\":\"deep-setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"nwo\",\"moduleSequenceNumber\":765,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\t//\\n}\",\"filename\":\"formulas-testing.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"nwo\",\"moduleSequenceNumber\":766,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tconst currentMachine = ns.getHostname();\\n\\tvar servers = ns.scan(currentMachine);\\n\\tvar scripts = ns.ls(home, \\\"basic-\\\");\\n\\n\\tns.tprint(\\\"Host:  \\\" + currentMachine);\\n\\tfor (let entry in servers) {\\t// depth 0\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\t// depth 1\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== home && subservers.length > 1) {\\n\\t\\t\\t\\tns.tprint(\\\"-----> \\\" + subservers[subentry]);\\n\\t\\t\\t\\tlet subserversd2 = ns.scan(subservers[subentry]); // depth 2\\n\\t\\t\\t\\tfor (let subentryd2 in subserversd2) {\\n\\t\\t\\t\\t\\tif (subserversd2[subentryd2] !== subservers[subentry] && subserversd2[subentryd2] !== servers[entry] && subserversd2.length > 1) {\\n\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------> \\\" + subserversd2[subentryd2]);\\n\\t\\t\\t\\t\\t\\tlet subserversd3 = ns.scan(subserversd2[subentryd2]);\\t// depth 3\\n\\t\\t\\t\\t\\t\\tfor (let subentryd3 in subserversd3) {\\n\\t\\t\\t\\t\\t\\t\\tif (subserversd3[subentryd3] !== subserversd2[subentryd2] && subserversd3[subentryd3] !== subservers[subentry] && subserversd3.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------> \\\" + subserversd3[subentryd3]);\\n\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd4 = ns.scan(subserversd3[subentryd3]);\\t// depth 4\\n\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd4 in subserversd4) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd4[subentryd4] !== subserversd3[subentryd3] && subserversd4[subentryd4] !== subserversd2[subentryd2] && subserversd4.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------------> \\\" + subserversd4[subentryd4]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd5 = ns.scan(subserversd4[subentryd4]);\\t// depth 5\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd5 in subserversd5) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd5[subentryd5] !== subserversd4[subentryd4] && subserversd5[subentryd5] !== subserversd3[subentryd3] && subserversd5.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-------------------------> \\\" + subserversd5[subentryd5]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd6 = ns.scan(subserversd5[subentryd5]);\\t// depth 6\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd6 in subserversd6) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd6[subentryd6] !== subserversd5[subentryd5] && subserversd6[subentryd6] !== subserversd4[subentryd4] && subserversd6.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"------------------------------> \\\" + subserversd6[subentryd6]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd7 = ns.scan(subserversd6[subentryd6]);\\t// depth 7\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor(let subentryd7 in subserversd7) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd7[subentryd7] !== subserversd6[subentryd6] && subserversd7[subentryd7] !== subserversd5[subentryd5] && subserversd7.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-----------------------------------> \\\" + subserversd7[subentryd7]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"gigascan.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.05,\"server\":\"nwo\",\"moduleSequenceNumber\":767,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet targetRam = ns.getServerMaxRam(ns.args[0]);\\n\\tlet scriptMem = ns.getScriptRam(ns.args[1]);\\n\\n\\tns.tprint(\\\"Maximum possible threads for \\\" + ns.args[1] + \\\": \\\" + Math.floor(targetRam / scriptMem));\\n\\tns.exit;\\n}\",\"filename\":\"ram-usage.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"nwo\",\"moduleSequenceNumber\":768,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerList } from \\\"modules/helper.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet serversSeen = [\\\"home\\\"]; // home + bought servers\\n\\tlet contractList = [];\\n\\n\\tserversSeen = await getServerList(serversSeen, 0, ns);\\n\\n\\tns.tprint(serversSeen);\\n}\",\"filename\":\"search-coding-contracts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"nwo\",\"moduleSequenceNumber\":769,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tvar servers = ns.scan(home);\\n\\tvar scripts = ns.ls(home, \\\".ns\\\");\\n\\n\\tfor (let entry in scripts) {\\n\\t\\tns.tprint(\\\"found script: \\\" + scripts[entry]);\\n\\t}\\n\\n\\t// Hack servers (!!! depth = 2 !!!) if needed and populate with scripts\\n\\tfor (let entry in servers) {\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== \\\"home\\\") {\\n\\t\\t\\t\\tns.tprint(\\\"----->   \\\" + subservers[subentry]);\\n\\t\\t\\t\\tif (!ns.hasRootAccess(subservers[subentry])) {\\n\\t\\t\\t\\t\\ttakeover(subservers[subentry]);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tns.tprint(\\\"copying scripts to \\\" + subservers[subentry]);\\n\\t\\t\\t\\tawait ns.scp(scripts, home, subservers[subentry]);\\n\\t\\t\\t\\t//await ns.scp(\\\"setup.ns\\\", home, subservers[subentry]);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (!ns.hasRootAccess(servers[entry])) {\\n\\t\\t\\ttakeover(servers[entry]);\\n\\t\\t}\\n\\t\\tns.tprint(\\\"copying scripts to \\\" + servers[entry]);\\n\\t\\tawait ns.scp(scripts, home, servers[entry]);\\n\\t\\t//await ns.scp(\\\"setup.ns\\\", home, servers[entry]);\\n\\t}\\n\\n\\t/** \\n\\t * \\tAttempts to take over target machine\\t\\n\\t * \\n\\t *  @param {string} tar\\n\\t *  @return {boolean} outcome \\n\\t**/\\n\\tasync function takeover(tar) {\\n\\t\\tlet currentTarget = tar;\\n\\t\\tlet isNotTakenOver = true;\\n\\t\\tlet attemptCounter = 0;\\n\\n\\t\\tif (ns.getServerNumPortsRequired <= 5 && attemptCounter < 50) {\\n\\t\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\n\\t\\t\\t\\tattemptCounter++;\\n\\t\\t\\t}\\n\\n\\t\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.15,\"server\":\"nwo\",\"moduleSequenceNumber\":770,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}}],\"serversOnNetwork\":[\"omnitek\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":25697800680,\"moneyMax\":642445017000,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1259,\"serverGrowth\":92}},\"clarkinc\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"clarkinc\",\"httpPortOpen\":true,\"ip\":\"39.4.2.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"beyond-man.lit\",\"cost-of-immortality.lit\"],\"organizationName\":\"Clarke Incorporated\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Returns an array of all hostnames in the network tree\\n * \\n * @param {string[]} myServers\\n * @param {number} safetyCounter Prevents infnite recursion\\n * @param {NS} ns\\n */\\nexport async function getServerList(myServers, safetyCounter, ns) {\\n\\tlet srvrsSeen = myServers;\\n\\tlet currServScanResult = [];\\n\\n\\tfor (let serverSeen in srvrsSeen) {\\n\\t\\tcurrServScanResult = ns.scan(srvrsSeen[serverSeen]);\\n\\t\\tfor (let entry in currServScanResult) {\\n\\t\\t\\tif (!srvrsSeen.includes(currServScanResult[entry])) {\\n\\t\\t\\t\\tsrvrsSeen.push(currServScanResult[entry]);\\n\\t\\t\\t\\tif ((++safetyCounter) < 250) {\\n\\t\\t\\t\\t\\tawait getServerList(srvrsSeen, safetyCounter, ns);\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tns.exit();\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\t//Filter out invalid values (NaN, null, {}, undefined)\\n\\tsrvrsSeen = srvrsSeen.filter(x => x);\\n\\treturn srvrsSeen;\\n}\\n\\n\\n/** \\n * \\tAttempts to take over target machine\\t\\n * \\n *  @param {string} target\\n * \\t@param {NS} ns\\n *  @return {boolean} outcome \\n**/\\nexport async function takeover(target, ns) {\\n\\tconst home = \\\"home\\\";\\n\\tlet currentTarget = target;\\n\\tlet isNotTakenOver = true;\\n\\tlet attemptCounter = 0;\\n\\n\\tlet scripts = ns.ls(home, \\\".js\\\");\\n\\t//scripts.push(ns.ls(home, \\\".ns\\\")); //in case of deprecated .ns scripts\\n\\n\\tns.tprint(scripts);\\n\\n\\n\\tif (!ns.hasRootAccess(currentTarget) && attemptCounter < 30) {\\n\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\ttry {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t} catch (error) {\\n\\t\\t\\t\\t\\tns.tprint(\\\"not enough ports to nuke \\\" + currentTarget);\\n\\t\\t\\t\\t\\treturn false;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t}\\n\\t\\t\\tattemptCounter++;\\n\\t\\t}\\n\\n\\t\\tawait ns.scp(scripts, home, currentTarget);\\n\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\",\"filename\":\"/modules/helper.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"clarkinc\",\"moduleSequenceNumber\":771,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.grow(target);\\n\\t}\\n}\",\"filename\":\"basic-grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"clarkinc\",\"moduleSequenceNumber\":772,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"basic-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"clarkinc\",\"moduleSequenceNumber\":773,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(target);\\n\\t}\\n}\",\"filename\":\"basic-weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"clarkinc\",\"moduleSequenceNumber\":774,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerList, takeover } from \\\"modules/helper.js\\\";\\n\\n/** @param {NS} ns **/\\n// TODO: unused + unfinished, based on setup.ns\\nexport async function main(ns) {\\n\\tconst myServers = [\\\"home\\\"];\\n\\n\\tvar servers = await getServerList(myServers, 0, ns);\\n\\n\\tfor (let entry in servers) {\\t\\n\\t\\tawait takeover(servers[entry], ns);\\n\\t}\\n}\",\"filename\":\"deep-setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"clarkinc\",\"moduleSequenceNumber\":775,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\t//\\n}\",\"filename\":\"formulas-testing.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"clarkinc\",\"moduleSequenceNumber\":776,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tconst currentMachine = ns.getHostname();\\n\\tvar servers = ns.scan(currentMachine);\\n\\tvar scripts = ns.ls(home, \\\"basic-\\\");\\n\\n\\tns.tprint(\\\"Host:  \\\" + currentMachine);\\n\\tfor (let entry in servers) {\\t// depth 0\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\t// depth 1\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== home && subservers.length > 1) {\\n\\t\\t\\t\\tns.tprint(\\\"-----> \\\" + subservers[subentry]);\\n\\t\\t\\t\\tlet subserversd2 = ns.scan(subservers[subentry]); // depth 2\\n\\t\\t\\t\\tfor (let subentryd2 in subserversd2) {\\n\\t\\t\\t\\t\\tif (subserversd2[subentryd2] !== subservers[subentry] && subserversd2[subentryd2] !== servers[entry] && subserversd2.length > 1) {\\n\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------> \\\" + subserversd2[subentryd2]);\\n\\t\\t\\t\\t\\t\\tlet subserversd3 = ns.scan(subserversd2[subentryd2]);\\t// depth 3\\n\\t\\t\\t\\t\\t\\tfor (let subentryd3 in subserversd3) {\\n\\t\\t\\t\\t\\t\\t\\tif (subserversd3[subentryd3] !== subserversd2[subentryd2] && subserversd3[subentryd3] !== subservers[subentry] && subserversd3.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------> \\\" + subserversd3[subentryd3]);\\n\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd4 = ns.scan(subserversd3[subentryd3]);\\t// depth 4\\n\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd4 in subserversd4) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd4[subentryd4] !== subserversd3[subentryd3] && subserversd4[subentryd4] !== subserversd2[subentryd2] && subserversd4.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------------> \\\" + subserversd4[subentryd4]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd5 = ns.scan(subserversd4[subentryd4]);\\t// depth 5\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd5 in subserversd5) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd5[subentryd5] !== subserversd4[subentryd4] && subserversd5[subentryd5] !== subserversd3[subentryd3] && subserversd5.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-------------------------> \\\" + subserversd5[subentryd5]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd6 = ns.scan(subserversd5[subentryd5]);\\t// depth 6\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd6 in subserversd6) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd6[subentryd6] !== subserversd5[subentryd5] && subserversd6[subentryd6] !== subserversd4[subentryd4] && subserversd6.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"------------------------------> \\\" + subserversd6[subentryd6]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd7 = ns.scan(subserversd6[subentryd6]);\\t// depth 7\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor(let subentryd7 in subserversd7) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd7[subentryd7] !== subserversd6[subentryd6] && subserversd7[subentryd7] !== subserversd5[subentryd5] && subserversd7.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-----------------------------------> \\\" + subserversd7[subentryd7]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"gigascan.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.05,\"server\":\"clarkinc\",\"moduleSequenceNumber\":777,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet targetRam = ns.getServerMaxRam(ns.args[0]);\\n\\tlet scriptMem = ns.getScriptRam(ns.args[1]);\\n\\n\\tns.tprint(\\\"Maximum possible threads for \\\" + ns.args[1] + \\\": \\\" + Math.floor(targetRam / scriptMem));\\n\\tns.exit;\\n}\",\"filename\":\"ram-usage.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"clarkinc\",\"moduleSequenceNumber\":778,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerList } from \\\"modules/helper.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet serversSeen = [\\\"home\\\"]; // home + bought servers\\n\\tlet contractList = [];\\n\\n\\tserversSeen = await getServerList(serversSeen, 0, ns);\\n\\n\\tns.tprint(serversSeen);\\n}\",\"filename\":\"search-coding-contracts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"clarkinc\",\"moduleSequenceNumber\":779,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tvar servers = ns.scan(home);\\n\\tvar scripts = ns.ls(home, \\\".ns\\\");\\n\\n\\tfor (let entry in scripts) {\\n\\t\\tns.tprint(\\\"found script: \\\" + scripts[entry]);\\n\\t}\\n\\n\\t// Hack servers (!!! depth = 2 !!!) if needed and populate with scripts\\n\\tfor (let entry in servers) {\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== \\\"home\\\") {\\n\\t\\t\\t\\tns.tprint(\\\"----->   \\\" + subservers[subentry]);\\n\\t\\t\\t\\tif (!ns.hasRootAccess(subservers[subentry])) {\\n\\t\\t\\t\\t\\ttakeover(subservers[subentry]);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tns.tprint(\\\"copying scripts to \\\" + subservers[subentry]);\\n\\t\\t\\t\\tawait ns.scp(scripts, home, subservers[subentry]);\\n\\t\\t\\t\\t//await ns.scp(\\\"setup.ns\\\", home, subservers[subentry]);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (!ns.hasRootAccess(servers[entry])) {\\n\\t\\t\\ttakeover(servers[entry]);\\n\\t\\t}\\n\\t\\tns.tprint(\\\"copying scripts to \\\" + servers[entry]);\\n\\t\\tawait ns.scp(scripts, home, servers[entry]);\\n\\t\\t//await ns.scp(\\\"setup.ns\\\", home, servers[entry]);\\n\\t}\\n\\n\\t/** \\n\\t * \\tAttempts to take over target machine\\t\\n\\t * \\n\\t *  @param {string} tar\\n\\t *  @return {boolean} outcome \\n\\t**/\\n\\tasync function takeover(tar) {\\n\\t\\tlet currentTarget = tar;\\n\\t\\tlet isNotTakenOver = true;\\n\\t\\tlet attemptCounter = 0;\\n\\n\\t\\tif (ns.getServerNumPortsRequired <= 5 && attemptCounter < 50) {\\n\\t\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\n\\t\\t\\t\\tattemptCounter++;\\n\\t\\t\\t}\\n\\n\\t\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.15,\"server\":\"clarkinc\",\"moduleSequenceNumber\":780,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}}],\"serversOnNetwork\":[\"omnitek\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":47,\"hackDifficulty\":47,\"minDifficulty\":16,\"moneyAvailable\":23348594898,\"moneyMax\":583714872450,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1102,\"serverGrowth\":68}},\"omnitek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-182647-Sector-12.cct\",\"type\":\"Algorithmic Stock Trader II\",\"data\":[2,114,155,94,72,16,61,103,23,96,120,89,146,200,180,25,141,99],\"reward\":{\"name\":\"Sector-12\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omnitek\",\"httpPortOpen\":true,\"ip\":\"52.1.9.8\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"coded-intelligence.lit\",\"history-of-synthoids.lit\"],\"organizationName\":\"OmniTek Incorporated\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Returns an array of all hostnames in the network tree\\n * \\n * @param {string[]} myServers\\n * @param {number} safetyCounter Prevents infnite recursion\\n * @param {NS} ns\\n */\\nexport async function getServerList(myServers, safetyCounter, ns) {\\n\\tlet srvrsSeen = myServers;\\n\\tlet currServScanResult = [];\\n\\n\\tfor (let serverSeen in srvrsSeen) {\\n\\t\\tcurrServScanResult = ns.scan(srvrsSeen[serverSeen]);\\n\\t\\tfor (let entry in currServScanResult) {\\n\\t\\t\\tif (!srvrsSeen.includes(currServScanResult[entry])) {\\n\\t\\t\\t\\tsrvrsSeen.push(currServScanResult[entry]);\\n\\t\\t\\t\\tif ((++safetyCounter) < 250) {\\n\\t\\t\\t\\t\\tawait getServerList(srvrsSeen, safetyCounter, ns);\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tns.exit();\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\t//Filter out invalid values (NaN, null, {}, undefined)\\n\\tsrvrsSeen = srvrsSeen.filter(x => x);\\n\\treturn srvrsSeen;\\n}\\n\\n\\n/** \\n * \\tAttempts to take over target machine\\t\\n * \\n *  @param {string} target\\n * \\t@param {NS} ns\\n *  @return {boolean} outcome \\n**/\\nexport async function takeover(target, ns) {\\n\\tconst home = \\\"home\\\";\\n\\tlet currentTarget = target;\\n\\tlet isNotTakenOver = true;\\n\\tlet attemptCounter = 0;\\n\\n\\tlet scripts = ns.ls(home, \\\".js\\\");\\n\\t//scripts.push(ns.ls(home, \\\".ns\\\")); //in case of deprecated .ns scripts\\n\\n\\tns.tprint(scripts);\\n\\n\\n\\tif (!ns.hasRootAccess(currentTarget) && attemptCounter < 30) {\\n\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\ttry {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t} catch (error) {\\n\\t\\t\\t\\t\\tns.tprint(\\\"not enough ports to nuke \\\" + currentTarget);\\n\\t\\t\\t\\t\\treturn false;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t}\\n\\t\\t\\tattemptCounter++;\\n\\t\\t}\\n\\n\\t\\tawait ns.scp(scripts, home, currentTarget);\\n\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\",\"filename\":\"/modules/helper.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"omnitek\",\"moduleSequenceNumber\":781,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.grow(target);\\n\\t}\\n}\",\"filename\":\"basic-grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"omnitek\",\"moduleSequenceNumber\":782,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"basic-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"omnitek\",\"moduleSequenceNumber\":783,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(target);\\n\\t}\\n}\",\"filename\":\"basic-weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"omnitek\",\"moduleSequenceNumber\":784,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerList, takeover } from \\\"modules/helper.js\\\";\\n\\n/** @param {NS} ns **/\\n// TODO: unused + unfinished, based on setup.ns\\nexport async function main(ns) {\\n\\tconst myServers = [\\\"home\\\"];\\n\\n\\tvar servers = await getServerList(myServers, 0, ns);\\n\\n\\tfor (let entry in servers) {\\t\\n\\t\\tawait takeover(servers[entry], ns);\\n\\t}\\n}\",\"filename\":\"deep-setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"omnitek\",\"moduleSequenceNumber\":785,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\t//\\n}\",\"filename\":\"formulas-testing.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"omnitek\",\"moduleSequenceNumber\":786,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tconst currentMachine = ns.getHostname();\\n\\tvar servers = ns.scan(currentMachine);\\n\\tvar scripts = ns.ls(home, \\\"basic-\\\");\\n\\n\\tns.tprint(\\\"Host:  \\\" + currentMachine);\\n\\tfor (let entry in servers) {\\t// depth 0\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\t// depth 1\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== home && subservers.length > 1) {\\n\\t\\t\\t\\tns.tprint(\\\"-----> \\\" + subservers[subentry]);\\n\\t\\t\\t\\tlet subserversd2 = ns.scan(subservers[subentry]); // depth 2\\n\\t\\t\\t\\tfor (let subentryd2 in subserversd2) {\\n\\t\\t\\t\\t\\tif (subserversd2[subentryd2] !== subservers[subentry] && subserversd2[subentryd2] !== servers[entry] && subserversd2.length > 1) {\\n\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------> \\\" + subserversd2[subentryd2]);\\n\\t\\t\\t\\t\\t\\tlet subserversd3 = ns.scan(subserversd2[subentryd2]);\\t// depth 3\\n\\t\\t\\t\\t\\t\\tfor (let subentryd3 in subserversd3) {\\n\\t\\t\\t\\t\\t\\t\\tif (subserversd3[subentryd3] !== subserversd2[subentryd2] && subserversd3[subentryd3] !== subservers[subentry] && subserversd3.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------> \\\" + subserversd3[subentryd3]);\\n\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd4 = ns.scan(subserversd3[subentryd3]);\\t// depth 4\\n\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd4 in subserversd4) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd4[subentryd4] !== subserversd3[subentryd3] && subserversd4[subentryd4] !== subserversd2[subentryd2] && subserversd4.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------------> \\\" + subserversd4[subentryd4]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd5 = ns.scan(subserversd4[subentryd4]);\\t// depth 5\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd5 in subserversd5) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd5[subentryd5] !== subserversd4[subentryd4] && subserversd5[subentryd5] !== subserversd3[subentryd3] && subserversd5.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-------------------------> \\\" + subserversd5[subentryd5]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd6 = ns.scan(subserversd5[subentryd5]);\\t// depth 6\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd6 in subserversd6) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd6[subentryd6] !== subserversd5[subentryd5] && subserversd6[subentryd6] !== subserversd4[subentryd4] && subserversd6.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"------------------------------> \\\" + subserversd6[subentryd6]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd7 = ns.scan(subserversd6[subentryd6]);\\t// depth 7\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor(let subentryd7 in subserversd7) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd7[subentryd7] !== subserversd6[subentryd6] && subserversd7[subentryd7] !== subserversd5[subentryd5] && subserversd7.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-----------------------------------> \\\" + subserversd7[subentryd7]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"gigascan.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.05,\"server\":\"omnitek\",\"moduleSequenceNumber\":787,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet targetRam = ns.getServerMaxRam(ns.args[0]);\\n\\tlet scriptMem = ns.getScriptRam(ns.args[1]);\\n\\n\\tns.tprint(\\\"Maximum possible threads for \\\" + ns.args[1] + \\\": \\\" + Math.floor(targetRam / scriptMem));\\n\\tns.exit;\\n}\",\"filename\":\"ram-usage.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"omnitek\",\"moduleSequenceNumber\":788,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerList } from \\\"modules/helper.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet serversSeen = [\\\"home\\\"]; // home + bought servers\\n\\tlet contractList = [];\\n\\n\\tserversSeen = await getServerList(serversSeen, 0, ns);\\n\\n\\tns.tprint(serversSeen);\\n}\",\"filename\":\"search-coding-contracts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"omnitek\",\"moduleSequenceNumber\":789,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tvar servers = ns.scan(home);\\n\\tvar scripts = ns.ls(home, \\\".ns\\\");\\n\\n\\tfor (let entry in scripts) {\\n\\t\\tns.tprint(\\\"found script: \\\" + scripts[entry]);\\n\\t}\\n\\n\\t// Hack servers (!!! depth = 2 !!!) if needed and populate with scripts\\n\\tfor (let entry in servers) {\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== \\\"home\\\") {\\n\\t\\t\\t\\tns.tprint(\\\"----->   \\\" + subservers[subentry]);\\n\\t\\t\\t\\tif (!ns.hasRootAccess(subservers[subentry])) {\\n\\t\\t\\t\\t\\ttakeover(subservers[subentry]);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tns.tprint(\\\"copying scripts to \\\" + subservers[subentry]);\\n\\t\\t\\t\\tawait ns.scp(scripts, home, subservers[subentry]);\\n\\t\\t\\t\\t//await ns.scp(\\\"setup.ns\\\", home, subservers[subentry]);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (!ns.hasRootAccess(servers[entry])) {\\n\\t\\t\\ttakeover(servers[entry]);\\n\\t\\t}\\n\\t\\tns.tprint(\\\"copying scripts to \\\" + servers[entry]);\\n\\t\\tawait ns.scp(scripts, home, servers[entry]);\\n\\t\\t//await ns.scp(\\\"setup.ns\\\", home, servers[entry]);\\n\\t}\\n\\n\\t/** \\n\\t * \\tAttempts to take over target machine\\t\\n\\t * \\n\\t *  @param {string} tar\\n\\t *  @return {boolean} outcome \\n\\t**/\\n\\tasync function takeover(tar) {\\n\\t\\tlet currentTarget = tar;\\n\\t\\tlet isNotTakenOver = true;\\n\\t\\tlet attemptCounter = 0;\\n\\n\\t\\tif (ns.getServerNumPortsRequired <= 5 && attemptCounter < 50) {\\n\\t\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\n\\t\\t\\t\\tattemptCounter++;\\n\\t\\t\\t}\\n\\n\\t\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.15,\"server\":\"omnitek\",\"moduleSequenceNumber\":790,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}}],\"serversOnNetwork\":[\"vitalife\",\"b-and-a\",\"nwo\",\"clarkinc\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":91,\"hackDifficulty\":91,\"minDifficulty\":30,\"moneyAvailable\":21628157751,\"moneyMax\":540703943775,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":926,\"serverGrowth\":95}},\"4sigma\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-441335-CyberSec.cct\",\"type\":\"Sanitize Parentheses in Expression\",\"data\":\")))(a()(())()()()\",\"reward\":{\"name\":\"CyberSec\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"4sigma\",\"httpPortOpen\":true,\"ip\":\"81.8.4.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Four Sigma\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Returns an array of all hostnames in the network tree\\n * \\n * @param {string[]} myServers\\n * @param {number} safetyCounter Prevents infnite recursion\\n * @param {NS} ns\\n */\\nexport async function getServerList(myServers, safetyCounter, ns) {\\n\\tlet srvrsSeen = myServers;\\n\\tlet currServScanResult = [];\\n\\n\\tfor (let serverSeen in srvrsSeen) {\\n\\t\\tcurrServScanResult = ns.scan(srvrsSeen[serverSeen]);\\n\\t\\tfor (let entry in currServScanResult) {\\n\\t\\t\\tif (!srvrsSeen.includes(currServScanResult[entry])) {\\n\\t\\t\\t\\tsrvrsSeen.push(currServScanResult[entry]);\\n\\t\\t\\t\\tif ((++safetyCounter) < 250) {\\n\\t\\t\\t\\t\\tawait getServerList(srvrsSeen, safetyCounter, ns);\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tns.exit();\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\t//Filter out invalid values (NaN, null, {}, undefined)\\n\\tsrvrsSeen = srvrsSeen.filter(x => x);\\n\\treturn srvrsSeen;\\n}\\n\\n\\n/** \\n * \\tAttempts to take over target machine\\t\\n * \\n *  @param {string} target\\n * \\t@param {NS} ns\\n *  @return {boolean} outcome \\n**/\\nexport async function takeover(target, ns) {\\n\\tconst home = \\\"home\\\";\\n\\tlet currentTarget = target;\\n\\tlet isNotTakenOver = true;\\n\\tlet attemptCounter = 0;\\n\\n\\tlet scripts = ns.ls(home, \\\".js\\\");\\n\\t//scripts.push(ns.ls(home, \\\".ns\\\")); //in case of deprecated .ns scripts\\n\\n\\tns.tprint(scripts);\\n\\n\\n\\tif (!ns.hasRootAccess(currentTarget) && attemptCounter < 30) {\\n\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\ttry {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t} catch (error) {\\n\\t\\t\\t\\t\\tns.tprint(\\\"not enough ports to nuke \\\" + currentTarget);\\n\\t\\t\\t\\t\\treturn false;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t}\\n\\t\\t\\tattemptCounter++;\\n\\t\\t}\\n\\n\\t\\tawait ns.scp(scripts, home, currentTarget);\\n\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\",\"filename\":\"/modules/helper.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"4sigma\",\"moduleSequenceNumber\":791,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.grow(target);\\n\\t}\\n}\",\"filename\":\"basic-grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"4sigma\",\"moduleSequenceNumber\":792,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"basic-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"4sigma\",\"moduleSequenceNumber\":793,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(target);\\n\\t}\\n}\",\"filename\":\"basic-weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"4sigma\",\"moduleSequenceNumber\":794,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerList, takeover } from \\\"modules/helper.js\\\";\\n\\n/** @param {NS} ns **/\\n// TODO: unused + unfinished, based on setup.ns\\nexport async function main(ns) {\\n\\tconst myServers = [\\\"home\\\"];\\n\\n\\tvar servers = await getServerList(myServers, 0, ns);\\n\\n\\tfor (let entry in servers) {\\t\\n\\t\\tawait takeover(servers[entry], ns);\\n\\t}\\n}\",\"filename\":\"deep-setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"4sigma\",\"moduleSequenceNumber\":795,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\t//\\n}\",\"filename\":\"formulas-testing.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"4sigma\",\"moduleSequenceNumber\":796,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tconst currentMachine = ns.getHostname();\\n\\tvar servers = ns.scan(currentMachine);\\n\\tvar scripts = ns.ls(home, \\\"basic-\\\");\\n\\n\\tns.tprint(\\\"Host:  \\\" + currentMachine);\\n\\tfor (let entry in servers) {\\t// depth 0\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\t// depth 1\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== home && subservers.length > 1) {\\n\\t\\t\\t\\tns.tprint(\\\"-----> \\\" + subservers[subentry]);\\n\\t\\t\\t\\tlet subserversd2 = ns.scan(subservers[subentry]); // depth 2\\n\\t\\t\\t\\tfor (let subentryd2 in subserversd2) {\\n\\t\\t\\t\\t\\tif (subserversd2[subentryd2] !== subservers[subentry] && subserversd2[subentryd2] !== servers[entry] && subserversd2.length > 1) {\\n\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------> \\\" + subserversd2[subentryd2]);\\n\\t\\t\\t\\t\\t\\tlet subserversd3 = ns.scan(subserversd2[subentryd2]);\\t// depth 3\\n\\t\\t\\t\\t\\t\\tfor (let subentryd3 in subserversd3) {\\n\\t\\t\\t\\t\\t\\t\\tif (subserversd3[subentryd3] !== subserversd2[subentryd2] && subserversd3[subentryd3] !== subservers[subentry] && subserversd3.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------> \\\" + subserversd3[subentryd3]);\\n\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd4 = ns.scan(subserversd3[subentryd3]);\\t// depth 4\\n\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd4 in subserversd4) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd4[subentryd4] !== subserversd3[subentryd3] && subserversd4[subentryd4] !== subserversd2[subentryd2] && subserversd4.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------------> \\\" + subserversd4[subentryd4]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd5 = ns.scan(subserversd4[subentryd4]);\\t// depth 5\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd5 in subserversd5) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd5[subentryd5] !== subserversd4[subentryd4] && subserversd5[subentryd5] !== subserversd3[subentryd3] && subserversd5.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-------------------------> \\\" + subserversd5[subentryd5]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd6 = ns.scan(subserversd5[subentryd5]);\\t// depth 6\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd6 in subserversd6) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd6[subentryd6] !== subserversd5[subentryd5] && subserversd6[subentryd6] !== subserversd4[subentryd4] && subserversd6.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"------------------------------> \\\" + subserversd6[subentryd6]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd7 = ns.scan(subserversd6[subentryd6]);\\t// depth 7\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor(let subentryd7 in subserversd7) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd7[subentryd7] !== subserversd6[subentryd6] && subserversd7[subentryd7] !== subserversd5[subentryd5] && subserversd7.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-----------------------------------> \\\" + subserversd7[subentryd7]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"gigascan.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.05,\"server\":\"4sigma\",\"moduleSequenceNumber\":797,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet targetRam = ns.getServerMaxRam(ns.args[0]);\\n\\tlet scriptMem = ns.getScriptRam(ns.args[1]);\\n\\n\\tns.tprint(\\\"Maximum possible threads for \\\" + ns.args[1] + \\\": \\\" + Math.floor(targetRam / scriptMem));\\n\\tns.exit;\\n}\",\"filename\":\"ram-usage.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"4sigma\",\"moduleSequenceNumber\":798,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerList } from \\\"modules/helper.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet serversSeen = [\\\"home\\\"]; // home + bought servers\\n\\tlet contractList = [];\\n\\n\\tserversSeen = await getServerList(serversSeen, 0, ns);\\n\\n\\tns.tprint(serversSeen);\\n}\",\"filename\":\"search-coding-contracts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"4sigma\",\"moduleSequenceNumber\":799,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tvar servers = ns.scan(home);\\n\\tvar scripts = ns.ls(home, \\\".ns\\\");\\n\\n\\tfor (let entry in scripts) {\\n\\t\\tns.tprint(\\\"found script: \\\" + scripts[entry]);\\n\\t}\\n\\n\\t// Hack servers (!!! depth = 2 !!!) if needed and populate with scripts\\n\\tfor (let entry in servers) {\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== \\\"home\\\") {\\n\\t\\t\\t\\tns.tprint(\\\"----->   \\\" + subservers[subentry]);\\n\\t\\t\\t\\tif (!ns.hasRootAccess(subservers[subentry])) {\\n\\t\\t\\t\\t\\ttakeover(subservers[subentry]);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tns.tprint(\\\"copying scripts to \\\" + subservers[subentry]);\\n\\t\\t\\t\\tawait ns.scp(scripts, home, subservers[subentry]);\\n\\t\\t\\t\\t//await ns.scp(\\\"setup.ns\\\", home, subservers[subentry]);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (!ns.hasRootAccess(servers[entry])) {\\n\\t\\t\\ttakeover(servers[entry]);\\n\\t\\t}\\n\\t\\tns.tprint(\\\"copying scripts to \\\" + servers[entry]);\\n\\t\\tawait ns.scp(scripts, home, servers[entry]);\\n\\t\\t//await ns.scp(\\\"setup.ns\\\", home, servers[entry]);\\n\\t}\\n\\n\\t/** \\n\\t * \\tAttempts to take over target machine\\t\\n\\t * \\n\\t *  @param {string} tar\\n\\t *  @return {boolean} outcome \\n\\t**/\\n\\tasync function takeover(tar) {\\n\\t\\tlet currentTarget = tar;\\n\\t\\tlet isNotTakenOver = true;\\n\\t\\tlet attemptCounter = 0;\\n\\n\\t\\tif (ns.getServerNumPortsRequired <= 5 && attemptCounter < 50) {\\n\\t\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\n\\t\\t\\t\\tattemptCounter++;\\n\\t\\t\\t}\\n\\n\\t\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.15,\"server\":\"4sigma\",\"moduleSequenceNumber\":800,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}}],\"serversOnNetwork\":[\"fulcrumtech\",\"blade\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":68,\"hackDifficulty\":68,\"minDifficulty\":23,\"moneyAvailable\":18841306167,\"moneyMax\":471032654175,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1241,\"serverGrowth\":82}},\"kuai-gong\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"kuai-gong\",\"httpPortOpen\":true,\"ip\":\"17.1.6.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"KuaiGong International\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Returns an array of all hostnames in the network tree\\n * \\n * @param {string[]} myServers\\n * @param {number} safetyCounter Prevents infnite recursion\\n * @param {NS} ns\\n */\\nexport async function getServerList(myServers, safetyCounter, ns) {\\n\\tlet srvrsSeen = myServers;\\n\\tlet currServScanResult = [];\\n\\n\\tfor (let serverSeen in srvrsSeen) {\\n\\t\\tcurrServScanResult = ns.scan(srvrsSeen[serverSeen]);\\n\\t\\tfor (let entry in currServScanResult) {\\n\\t\\t\\tif (!srvrsSeen.includes(currServScanResult[entry])) {\\n\\t\\t\\t\\tsrvrsSeen.push(currServScanResult[entry]);\\n\\t\\t\\t\\tif ((++safetyCounter) < 250) {\\n\\t\\t\\t\\t\\tawait getServerList(srvrsSeen, safetyCounter, ns);\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tns.exit();\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\t//Filter out invalid values (NaN, null, {}, undefined)\\n\\tsrvrsSeen = srvrsSeen.filter(x => x);\\n\\treturn srvrsSeen;\\n}\\n\\n\\n/** \\n * \\tAttempts to take over target machine\\t\\n * \\n *  @param {string} target\\n * \\t@param {NS} ns\\n *  @return {boolean} outcome \\n**/\\nexport async function takeover(target, ns) {\\n\\tconst home = \\\"home\\\";\\n\\tlet currentTarget = target;\\n\\tlet isNotTakenOver = true;\\n\\tlet attemptCounter = 0;\\n\\n\\tlet scripts = ns.ls(home, \\\".js\\\");\\n\\t//scripts.push(ns.ls(home, \\\".ns\\\")); //in case of deprecated .ns scripts\\n\\n\\tns.tprint(scripts);\\n\\n\\n\\tif (!ns.hasRootAccess(currentTarget) && attemptCounter < 30) {\\n\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\ttry {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t} catch (error) {\\n\\t\\t\\t\\t\\tns.tprint(\\\"not enough ports to nuke \\\" + currentTarget);\\n\\t\\t\\t\\t\\treturn false;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t}\\n\\t\\t\\tattemptCounter++;\\n\\t\\t}\\n\\n\\t\\tawait ns.scp(scripts, home, currentTarget);\\n\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\",\"filename\":\"/modules/helper.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"kuai-gong\",\"moduleSequenceNumber\":801,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.grow(target);\\n\\t}\\n}\",\"filename\":\"basic-grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"kuai-gong\",\"moduleSequenceNumber\":802,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"basic-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"kuai-gong\",\"moduleSequenceNumber\":803,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(target);\\n\\t}\\n}\",\"filename\":\"basic-weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"kuai-gong\",\"moduleSequenceNumber\":804,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerList, takeover } from \\\"modules/helper.js\\\";\\n\\n/** @param {NS} ns **/\\n// TODO: unused + unfinished, based on setup.ns\\nexport async function main(ns) {\\n\\tconst myServers = [\\\"home\\\"];\\n\\n\\tvar servers = await getServerList(myServers, 0, ns);\\n\\n\\tfor (let entry in servers) {\\t\\n\\t\\tawait takeover(servers[entry], ns);\\n\\t}\\n}\",\"filename\":\"deep-setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"kuai-gong\",\"moduleSequenceNumber\":805,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\t//\\n}\",\"filename\":\"formulas-testing.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"kuai-gong\",\"moduleSequenceNumber\":806,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tconst currentMachine = ns.getHostname();\\n\\tvar servers = ns.scan(currentMachine);\\n\\tvar scripts = ns.ls(home, \\\"basic-\\\");\\n\\n\\tns.tprint(\\\"Host:  \\\" + currentMachine);\\n\\tfor (let entry in servers) {\\t// depth 0\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\t// depth 1\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== home && subservers.length > 1) {\\n\\t\\t\\t\\tns.tprint(\\\"-----> \\\" + subservers[subentry]);\\n\\t\\t\\t\\tlet subserversd2 = ns.scan(subservers[subentry]); // depth 2\\n\\t\\t\\t\\tfor (let subentryd2 in subserversd2) {\\n\\t\\t\\t\\t\\tif (subserversd2[subentryd2] !== subservers[subentry] && subserversd2[subentryd2] !== servers[entry] && subserversd2.length > 1) {\\n\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------> \\\" + subserversd2[subentryd2]);\\n\\t\\t\\t\\t\\t\\tlet subserversd3 = ns.scan(subserversd2[subentryd2]);\\t// depth 3\\n\\t\\t\\t\\t\\t\\tfor (let subentryd3 in subserversd3) {\\n\\t\\t\\t\\t\\t\\t\\tif (subserversd3[subentryd3] !== subserversd2[subentryd2] && subserversd3[subentryd3] !== subservers[subentry] && subserversd3.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------> \\\" + subserversd3[subentryd3]);\\n\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd4 = ns.scan(subserversd3[subentryd3]);\\t// depth 4\\n\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd4 in subserversd4) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd4[subentryd4] !== subserversd3[subentryd3] && subserversd4[subentryd4] !== subserversd2[subentryd2] && subserversd4.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------------> \\\" + subserversd4[subentryd4]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd5 = ns.scan(subserversd4[subentryd4]);\\t// depth 5\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd5 in subserversd5) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd5[subentryd5] !== subserversd4[subentryd4] && subserversd5[subentryd5] !== subserversd3[subentryd3] && subserversd5.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-------------------------> \\\" + subserversd5[subentryd5]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd6 = ns.scan(subserversd5[subentryd5]);\\t// depth 6\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd6 in subserversd6) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd6[subentryd6] !== subserversd5[subentryd5] && subserversd6[subentryd6] !== subserversd4[subentryd4] && subserversd6.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"------------------------------> \\\" + subserversd6[subentryd6]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd7 = ns.scan(subserversd6[subentryd6]);\\t// depth 7\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor(let subentryd7 in subserversd7) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd7[subentryd7] !== subserversd6[subentryd6] && subserversd7[subentryd7] !== subserversd5[subentryd5] && subserversd7.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-----------------------------------> \\\" + subserversd7[subentryd7]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"gigascan.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.05,\"server\":\"kuai-gong\",\"moduleSequenceNumber\":807,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet targetRam = ns.getServerMaxRam(ns.args[0]);\\n\\tlet scriptMem = ns.getScriptRam(ns.args[1]);\\n\\n\\tns.tprint(\\\"Maximum possible threads for \\\" + ns.args[1] + \\\": \\\" + Math.floor(targetRam / scriptMem));\\n\\tns.exit;\\n}\",\"filename\":\"ram-usage.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"kuai-gong\",\"moduleSequenceNumber\":808,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerList } from \\\"modules/helper.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet serversSeen = [\\\"home\\\"]; // home + bought servers\\n\\tlet contractList = [];\\n\\n\\tserversSeen = await getServerList(serversSeen, 0, ns);\\n\\n\\tns.tprint(serversSeen);\\n}\",\"filename\":\"search-coding-contracts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"kuai-gong\",\"moduleSequenceNumber\":809,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tvar servers = ns.scan(home);\\n\\tvar scripts = ns.ls(home, \\\".ns\\\");\\n\\n\\tfor (let entry in scripts) {\\n\\t\\tns.tprint(\\\"found script: \\\" + scripts[entry]);\\n\\t}\\n\\n\\t// Hack servers (!!! depth = 2 !!!) if needed and populate with scripts\\n\\tfor (let entry in servers) {\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== \\\"home\\\") {\\n\\t\\t\\t\\tns.tprint(\\\"----->   \\\" + subservers[subentry]);\\n\\t\\t\\t\\tif (!ns.hasRootAccess(subservers[subentry])) {\\n\\t\\t\\t\\t\\ttakeover(subservers[subentry]);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tns.tprint(\\\"copying scripts to \\\" + subservers[subentry]);\\n\\t\\t\\t\\tawait ns.scp(scripts, home, subservers[subentry]);\\n\\t\\t\\t\\t//await ns.scp(\\\"setup.ns\\\", home, subservers[subentry]);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (!ns.hasRootAccess(servers[entry])) {\\n\\t\\t\\ttakeover(servers[entry]);\\n\\t\\t}\\n\\t\\tns.tprint(\\\"copying scripts to \\\" + servers[entry]);\\n\\t\\tawait ns.scp(scripts, home, servers[entry]);\\n\\t\\t//await ns.scp(\\\"setup.ns\\\", home, servers[entry]);\\n\\t}\\n\\n\\t/** \\n\\t * \\tAttempts to take over target machine\\t\\n\\t * \\n\\t *  @param {string} tar\\n\\t *  @return {boolean} outcome \\n\\t**/\\n\\tasync function takeover(tar) {\\n\\t\\tlet currentTarget = tar;\\n\\t\\tlet isNotTakenOver = true;\\n\\t\\tlet attemptCounter = 0;\\n\\n\\t\\tif (ns.getServerNumPortsRequired <= 5 && attemptCounter < 50) {\\n\\t\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\n\\t\\t\\t\\tattemptCounter++;\\n\\t\\t\\t}\\n\\n\\t\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.15,\"server\":\"kuai-gong\",\"moduleSequenceNumber\":810,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}}],\"serversOnNetwork\":[\"fulcrumtech\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":97,\"hackDifficulty\":97,\"minDifficulty\":32,\"moneyAvailable\":28585709589,\"moneyMax\":714642739725,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":982,\"serverGrowth\":99}},\"fulcrumtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"fulcrumtech\",\"httpPortOpen\":true,\"ip\":\"43.1.1.5\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Returns an array of all hostnames in the network tree\\n * \\n * @param {string[]} myServers\\n * @param {number} safetyCounter Prevents infnite recursion\\n * @param {NS} ns\\n */\\nexport async function getServerList(myServers, safetyCounter, ns) {\\n\\tlet srvrsSeen = myServers;\\n\\tlet currServScanResult = [];\\n\\n\\tfor (let serverSeen in srvrsSeen) {\\n\\t\\tcurrServScanResult = ns.scan(srvrsSeen[serverSeen]);\\n\\t\\tfor (let entry in currServScanResult) {\\n\\t\\t\\tif (!srvrsSeen.includes(currServScanResult[entry])) {\\n\\t\\t\\t\\tsrvrsSeen.push(currServScanResult[entry]);\\n\\t\\t\\t\\tif ((++safetyCounter) < 250) {\\n\\t\\t\\t\\t\\tawait getServerList(srvrsSeen, safetyCounter, ns);\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tns.exit();\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\t//Filter out invalid values (NaN, null, {}, undefined)\\n\\tsrvrsSeen = srvrsSeen.filter(x => x);\\n\\treturn srvrsSeen;\\n}\\n\\n\\n/** \\n * \\tAttempts to take over target machine\\t\\n * \\n *  @param {string} target\\n * \\t@param {NS} ns\\n *  @return {boolean} outcome \\n**/\\nexport async function takeover(target, ns) {\\n\\tconst home = \\\"home\\\";\\n\\tlet currentTarget = target;\\n\\tlet isNotTakenOver = true;\\n\\tlet attemptCounter = 0;\\n\\n\\tlet scripts = ns.ls(home, \\\".js\\\");\\n\\t//scripts.push(ns.ls(home, \\\".ns\\\")); //in case of deprecated .ns scripts\\n\\n\\tns.tprint(scripts);\\n\\n\\n\\tif (!ns.hasRootAccess(currentTarget) && attemptCounter < 30) {\\n\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\ttry {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t} catch (error) {\\n\\t\\t\\t\\t\\tns.tprint(\\\"not enough ports to nuke \\\" + currentTarget);\\n\\t\\t\\t\\t\\treturn false;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t}\\n\\t\\t\\tattemptCounter++;\\n\\t\\t}\\n\\n\\t\\tawait ns.scp(scripts, home, currentTarget);\\n\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\",\"filename\":\"/modules/helper.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"fulcrumtech\",\"moduleSequenceNumber\":811,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.grow(target);\\n\\t}\\n}\",\"filename\":\"basic-grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"fulcrumtech\",\"moduleSequenceNumber\":812,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"basic-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"fulcrumtech\",\"moduleSequenceNumber\":813,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(target);\\n\\t}\\n}\",\"filename\":\"basic-weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"fulcrumtech\",\"moduleSequenceNumber\":814,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerList, takeover } from \\\"modules/helper.js\\\";\\n\\n/** @param {NS} ns **/\\n// TODO: unused + unfinished, based on setup.ns\\nexport async function main(ns) {\\n\\tconst myServers = [\\\"home\\\"];\\n\\n\\tvar servers = await getServerList(myServers, 0, ns);\\n\\n\\tfor (let entry in servers) {\\t\\n\\t\\tawait takeover(servers[entry], ns);\\n\\t}\\n}\",\"filename\":\"deep-setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"fulcrumtech\",\"moduleSequenceNumber\":815,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\t//\\n}\",\"filename\":\"formulas-testing.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"fulcrumtech\",\"moduleSequenceNumber\":816,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tconst currentMachine = ns.getHostname();\\n\\tvar servers = ns.scan(currentMachine);\\n\\tvar scripts = ns.ls(home, \\\"basic-\\\");\\n\\n\\tns.tprint(\\\"Host:  \\\" + currentMachine);\\n\\tfor (let entry in servers) {\\t// depth 0\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\t// depth 1\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== home && subservers.length > 1) {\\n\\t\\t\\t\\tns.tprint(\\\"-----> \\\" + subservers[subentry]);\\n\\t\\t\\t\\tlet subserversd2 = ns.scan(subservers[subentry]); // depth 2\\n\\t\\t\\t\\tfor (let subentryd2 in subserversd2) {\\n\\t\\t\\t\\t\\tif (subserversd2[subentryd2] !== subservers[subentry] && subserversd2[subentryd2] !== servers[entry] && subserversd2.length > 1) {\\n\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------> \\\" + subserversd2[subentryd2]);\\n\\t\\t\\t\\t\\t\\tlet subserversd3 = ns.scan(subserversd2[subentryd2]);\\t// depth 3\\n\\t\\t\\t\\t\\t\\tfor (let subentryd3 in subserversd3) {\\n\\t\\t\\t\\t\\t\\t\\tif (subserversd3[subentryd3] !== subserversd2[subentryd2] && subserversd3[subentryd3] !== subservers[subentry] && subserversd3.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------> \\\" + subserversd3[subentryd3]);\\n\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd4 = ns.scan(subserversd3[subentryd3]);\\t// depth 4\\n\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd4 in subserversd4) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd4[subentryd4] !== subserversd3[subentryd3] && subserversd4[subentryd4] !== subserversd2[subentryd2] && subserversd4.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------------> \\\" + subserversd4[subentryd4]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd5 = ns.scan(subserversd4[subentryd4]);\\t// depth 5\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd5 in subserversd5) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd5[subentryd5] !== subserversd4[subentryd4] && subserversd5[subentryd5] !== subserversd3[subentryd3] && subserversd5.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-------------------------> \\\" + subserversd5[subentryd5]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd6 = ns.scan(subserversd5[subentryd5]);\\t// depth 6\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd6 in subserversd6) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd6[subentryd6] !== subserversd5[subentryd5] && subserversd6[subentryd6] !== subserversd4[subentryd4] && subserversd6.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"------------------------------> \\\" + subserversd6[subentryd6]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd7 = ns.scan(subserversd6[subentryd6]);\\t// depth 7\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor(let subentryd7 in subserversd7) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd7[subentryd7] !== subserversd6[subentryd6] && subserversd7[subentryd7] !== subserversd5[subentryd5] && subserversd7.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-----------------------------------> \\\" + subserversd7[subentryd7]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"gigascan.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.05,\"server\":\"fulcrumtech\",\"moduleSequenceNumber\":817,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet targetRam = ns.getServerMaxRam(ns.args[0]);\\n\\tlet scriptMem = ns.getScriptRam(ns.args[1]);\\n\\n\\tns.tprint(\\\"Maximum possible threads for \\\" + ns.args[1] + \\\": \\\" + Math.floor(targetRam / scriptMem));\\n\\tns.exit;\\n}\",\"filename\":\"ram-usage.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"fulcrumtech\",\"moduleSequenceNumber\":818,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerList } from \\\"modules/helper.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet serversSeen = [\\\"home\\\"]; // home + bought servers\\n\\tlet contractList = [];\\n\\n\\tserversSeen = await getServerList(serversSeen, 0, ns);\\n\\n\\tns.tprint(serversSeen);\\n}\",\"filename\":\"search-coding-contracts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"fulcrumtech\",\"moduleSequenceNumber\":819,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tvar servers = ns.scan(home);\\n\\tvar scripts = ns.ls(home, \\\".ns\\\");\\n\\n\\tfor (let entry in scripts) {\\n\\t\\tns.tprint(\\\"found script: \\\" + scripts[entry]);\\n\\t}\\n\\n\\t// Hack servers (!!! depth = 2 !!!) if needed and populate with scripts\\n\\tfor (let entry in servers) {\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== \\\"home\\\") {\\n\\t\\t\\t\\tns.tprint(\\\"----->   \\\" + subservers[subentry]);\\n\\t\\t\\t\\tif (!ns.hasRootAccess(subservers[subentry])) {\\n\\t\\t\\t\\t\\ttakeover(subservers[subentry]);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tns.tprint(\\\"copying scripts to \\\" + subservers[subentry]);\\n\\t\\t\\t\\tawait ns.scp(scripts, home, subservers[subentry]);\\n\\t\\t\\t\\t//await ns.scp(\\\"setup.ns\\\", home, subservers[subentry]);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (!ns.hasRootAccess(servers[entry])) {\\n\\t\\t\\ttakeover(servers[entry]);\\n\\t\\t}\\n\\t\\tns.tprint(\\\"copying scripts to \\\" + servers[entry]);\\n\\t\\tawait ns.scp(scripts, home, servers[entry]);\\n\\t\\t//await ns.scp(\\\"setup.ns\\\", home, servers[entry]);\\n\\t}\\n\\n\\t/** \\n\\t * \\tAttempts to take over target machine\\t\\n\\t * \\n\\t *  @param {string} tar\\n\\t *  @return {boolean} outcome \\n\\t**/\\n\\tasync function takeover(tar) {\\n\\t\\tlet currentTarget = tar;\\n\\t\\tlet isNotTakenOver = true;\\n\\t\\tlet attemptCounter = 0;\\n\\n\\t\\tif (ns.getServerNumPortsRequired <= 5 && attemptCounter < 50) {\\n\\t\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\n\\t\\t\\t\\tattemptCounter++;\\n\\t\\t\\t}\\n\\n\\t\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.15,\"server\":\"fulcrumtech\",\"moduleSequenceNumber\":820,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}}],\"serversOnNetwork\":[\"titan-labs\",\"4sigma\",\"kuai-gong\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":87,\"hackDifficulty\":87,\"minDifficulty\":29,\"moneyAvailable\":1420107809,\"moneyMax\":35502695225,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":999,\"serverGrowth\":97}},\"fulcrumassets\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-398739.cct\",\"type\":\"Algorithmic Stock Trader I\",\"data\":[115,168,146,104,135,131,65,184,64,174,117,161,25,182,29,137,158,149,146,52,161,45,4,68,102],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"fulcrumassets\",\"httpPortOpen\":true,\"ip\":\"89.0.1.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Returns an array of all hostnames in the network tree\\n * \\n * @param {string[]} myServers\\n * @param {number} safetyCounter Prevents infnite recursion\\n * @param {NS} ns\\n */\\nexport async function getServerList(myServers, safetyCounter, ns) {\\n\\tlet srvrsSeen = myServers;\\n\\tlet currServScanResult = [];\\n\\n\\tfor (let serverSeen in srvrsSeen) {\\n\\t\\tcurrServScanResult = ns.scan(srvrsSeen[serverSeen]);\\n\\t\\tfor (let entry in currServScanResult) {\\n\\t\\t\\tif (!srvrsSeen.includes(currServScanResult[entry])) {\\n\\t\\t\\t\\tsrvrsSeen.push(currServScanResult[entry]);\\n\\t\\t\\t\\tif ((++safetyCounter) < 250) {\\n\\t\\t\\t\\t\\tawait getServerList(srvrsSeen, safetyCounter, ns);\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tns.exit();\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\t//Filter out invalid values (NaN, null, {}, undefined)\\n\\tsrvrsSeen = srvrsSeen.filter(x => x);\\n\\treturn srvrsSeen;\\n}\\n\\n\\n/** \\n * \\tAttempts to take over target machine\\t\\n * \\n *  @param {string} target\\n * \\t@param {NS} ns\\n *  @return {boolean} outcome \\n**/\\nexport async function takeover(target, ns) {\\n\\tconst home = \\\"home\\\";\\n\\tlet currentTarget = target;\\n\\tlet isNotTakenOver = true;\\n\\tlet attemptCounter = 0;\\n\\n\\tlet scripts = ns.ls(home, \\\".js\\\");\\n\\t//scripts.push(ns.ls(home, \\\".ns\\\")); //in case of deprecated .ns scripts\\n\\n\\tns.tprint(scripts);\\n\\n\\n\\tif (!ns.hasRootAccess(currentTarget) && attemptCounter < 30) {\\n\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\ttry {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t} catch (error) {\\n\\t\\t\\t\\t\\tns.tprint(\\\"not enough ports to nuke \\\" + currentTarget);\\n\\t\\t\\t\\t\\treturn false;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t}\\n\\t\\t\\tattemptCounter++;\\n\\t\\t}\\n\\n\\t\\tawait ns.scp(scripts, home, currentTarget);\\n\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\",\"filename\":\"/modules/helper.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"fulcrumassets\",\"moduleSequenceNumber\":821,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.grow(target);\\n\\t}\\n}\",\"filename\":\"basic-grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"fulcrumassets\",\"moduleSequenceNumber\":822,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"basic-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"fulcrumassets\",\"moduleSequenceNumber\":823,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(target);\\n\\t}\\n}\",\"filename\":\"basic-weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"fulcrumassets\",\"moduleSequenceNumber\":824,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerList, takeover } from \\\"modules/helper.js\\\";\\n\\n/** @param {NS} ns **/\\n// TODO: unused + unfinished, based on setup.ns\\nexport async function main(ns) {\\n\\tconst myServers = [\\\"home\\\"];\\n\\n\\tvar servers = await getServerList(myServers, 0, ns);\\n\\n\\tfor (let entry in servers) {\\t\\n\\t\\tawait takeover(servers[entry], ns);\\n\\t}\\n}\",\"filename\":\"deep-setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"fulcrumassets\",\"moduleSequenceNumber\":825,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\t//\\n}\",\"filename\":\"formulas-testing.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"fulcrumassets\",\"moduleSequenceNumber\":826,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tconst currentMachine = ns.getHostname();\\n\\tvar servers = ns.scan(currentMachine);\\n\\tvar scripts = ns.ls(home, \\\"basic-\\\");\\n\\n\\tns.tprint(\\\"Host:  \\\" + currentMachine);\\n\\tfor (let entry in servers) {\\t// depth 0\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\t// depth 1\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== home && subservers.length > 1) {\\n\\t\\t\\t\\tns.tprint(\\\"-----> \\\" + subservers[subentry]);\\n\\t\\t\\t\\tlet subserversd2 = ns.scan(subservers[subentry]); // depth 2\\n\\t\\t\\t\\tfor (let subentryd2 in subserversd2) {\\n\\t\\t\\t\\t\\tif (subserversd2[subentryd2] !== subservers[subentry] && subserversd2[subentryd2] !== servers[entry] && subserversd2.length > 1) {\\n\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------> \\\" + subserversd2[subentryd2]);\\n\\t\\t\\t\\t\\t\\tlet subserversd3 = ns.scan(subserversd2[subentryd2]);\\t// depth 3\\n\\t\\t\\t\\t\\t\\tfor (let subentryd3 in subserversd3) {\\n\\t\\t\\t\\t\\t\\t\\tif (subserversd3[subentryd3] !== subserversd2[subentryd2] && subserversd3[subentryd3] !== subservers[subentry] && subserversd3.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------> \\\" + subserversd3[subentryd3]);\\n\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd4 = ns.scan(subserversd3[subentryd3]);\\t// depth 4\\n\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd4 in subserversd4) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd4[subentryd4] !== subserversd3[subentryd3] && subserversd4[subentryd4] !== subserversd2[subentryd2] && subserversd4.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------------> \\\" + subserversd4[subentryd4]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd5 = ns.scan(subserversd4[subentryd4]);\\t// depth 5\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd5 in subserversd5) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd5[subentryd5] !== subserversd4[subentryd4] && subserversd5[subentryd5] !== subserversd3[subentryd3] && subserversd5.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-------------------------> \\\" + subserversd5[subentryd5]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd6 = ns.scan(subserversd5[subentryd5]);\\t// depth 6\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd6 in subserversd6) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd6[subentryd6] !== subserversd5[subentryd5] && subserversd6[subentryd6] !== subserversd4[subentryd4] && subserversd6.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"------------------------------> \\\" + subserversd6[subentryd6]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd7 = ns.scan(subserversd6[subentryd6]);\\t// depth 7\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor(let subentryd7 in subserversd7) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd7[subentryd7] !== subserversd6[subentryd6] && subserversd7[subentryd7] !== subserversd5[subentryd5] && subserversd7.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-----------------------------------> \\\" + subserversd7[subentryd7]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"gigascan.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.05,\"server\":\"fulcrumassets\",\"moduleSequenceNumber\":827,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet targetRam = ns.getServerMaxRam(ns.args[0]);\\n\\tlet scriptMem = ns.getScriptRam(ns.args[1]);\\n\\n\\tns.tprint(\\\"Maximum possible threads for \\\" + ns.args[1] + \\\": \\\" + Math.floor(targetRam / scriptMem));\\n\\tns.exit;\\n}\",\"filename\":\"ram-usage.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"fulcrumassets\",\"moduleSequenceNumber\":828,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerList } from \\\"modules/helper.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet serversSeen = [\\\"home\\\"]; // home + bought servers\\n\\tlet contractList = [];\\n\\n\\tserversSeen = await getServerList(serversSeen, 0, ns);\\n\\n\\tns.tprint(serversSeen);\\n}\",\"filename\":\"search-coding-contracts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"fulcrumassets\",\"moduleSequenceNumber\":829,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tvar servers = ns.scan(home);\\n\\tvar scripts = ns.ls(home, \\\".ns\\\");\\n\\n\\tfor (let entry in scripts) {\\n\\t\\tns.tprint(\\\"found script: \\\" + scripts[entry]);\\n\\t}\\n\\n\\t// Hack servers (!!! depth = 2 !!!) if needed and populate with scripts\\n\\tfor (let entry in servers) {\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== \\\"home\\\") {\\n\\t\\t\\t\\tns.tprint(\\\"----->   \\\" + subservers[subentry]);\\n\\t\\t\\t\\tif (!ns.hasRootAccess(subservers[subentry])) {\\n\\t\\t\\t\\t\\ttakeover(subservers[subentry]);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tns.tprint(\\\"copying scripts to \\\" + subservers[subentry]);\\n\\t\\t\\t\\tawait ns.scp(scripts, home, subservers[subentry]);\\n\\t\\t\\t\\t//await ns.scp(\\\"setup.ns\\\", home, subservers[subentry]);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (!ns.hasRootAccess(servers[entry])) {\\n\\t\\t\\ttakeover(servers[entry]);\\n\\t\\t}\\n\\t\\tns.tprint(\\\"copying scripts to \\\" + servers[entry]);\\n\\t\\tawait ns.scp(scripts, home, servers[entry]);\\n\\t\\t//await ns.scp(\\\"setup.ns\\\", home, servers[entry]);\\n\\t}\\n\\n\\t/** \\n\\t * \\tAttempts to take over target machine\\t\\n\\t * \\n\\t *  @param {string} tar\\n\\t *  @return {boolean} outcome \\n\\t**/\\n\\tasync function takeover(tar) {\\n\\t\\tlet currentTarget = tar;\\n\\t\\tlet isNotTakenOver = true;\\n\\t\\tlet attemptCounter = 0;\\n\\n\\t\\tif (ns.getServerNumPortsRequired <= 5 && attemptCounter < 50) {\\n\\t\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\n\\t\\t\\t\\tattemptCounter++;\\n\\t\\t\\t}\\n\\n\\t\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.15,\"server\":\"fulcrumassets\",\"moduleSequenceNumber\":830,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}}],\"serversOnNetwork\":[\"b-and-a\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":1000000,\"moneyMax\":25000000,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1399,\"serverGrowth\":1}},\"stormtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"stormtech\",\"httpPortOpen\":true,\"ip\":\"15.7.8.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Storm Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Returns an array of all hostnames in the network tree\\n * \\n * @param {string[]} myServers\\n * @param {number} safetyCounter Prevents infnite recursion\\n * @param {NS} ns\\n */\\nexport async function getServerList(myServers, safetyCounter, ns) {\\n\\tlet srvrsSeen = myServers;\\n\\tlet currServScanResult = [];\\n\\n\\tfor (let serverSeen in srvrsSeen) {\\n\\t\\tcurrServScanResult = ns.scan(srvrsSeen[serverSeen]);\\n\\t\\tfor (let entry in currServScanResult) {\\n\\t\\t\\tif (!srvrsSeen.includes(currServScanResult[entry])) {\\n\\t\\t\\t\\tsrvrsSeen.push(currServScanResult[entry]);\\n\\t\\t\\t\\tif ((++safetyCounter) < 250) {\\n\\t\\t\\t\\t\\tawait getServerList(srvrsSeen, safetyCounter, ns);\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tns.exit();\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\t//Filter out invalid values (NaN, null, {}, undefined)\\n\\tsrvrsSeen = srvrsSeen.filter(x => x);\\n\\treturn srvrsSeen;\\n}\\n\\n\\n/** \\n * \\tAttempts to take over target machine\\t\\n * \\n *  @param {string} target\\n * \\t@param {NS} ns\\n *  @return {boolean} outcome \\n**/\\nexport async function takeover(target, ns) {\\n\\tconst home = \\\"home\\\";\\n\\tlet currentTarget = target;\\n\\tlet isNotTakenOver = true;\\n\\tlet attemptCounter = 0;\\n\\n\\tlet scripts = ns.ls(home, \\\".js\\\");\\n\\t//scripts.push(ns.ls(home, \\\".ns\\\")); //in case of deprecated .ns scripts\\n\\n\\tns.tprint(scripts);\\n\\n\\n\\tif (!ns.hasRootAccess(currentTarget) && attemptCounter < 30) {\\n\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\ttry {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t} catch (error) {\\n\\t\\t\\t\\t\\tns.tprint(\\\"not enough ports to nuke \\\" + currentTarget);\\n\\t\\t\\t\\t\\treturn false;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t}\\n\\t\\t\\tattemptCounter++;\\n\\t\\t}\\n\\n\\t\\tawait ns.scp(scripts, home, currentTarget);\\n\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\",\"filename\":\"/modules/helper.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"stormtech\",\"moduleSequenceNumber\":831,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.grow(target);\\n\\t}\\n}\",\"filename\":\"basic-grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"stormtech\",\"moduleSequenceNumber\":832,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"basic-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"stormtech\",\"moduleSequenceNumber\":833,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(target);\\n\\t}\\n}\",\"filename\":\"basic-weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"stormtech\",\"moduleSequenceNumber\":834,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerList, takeover } from \\\"modules/helper.js\\\";\\n\\n/** @param {NS} ns **/\\n// TODO: unused + unfinished, based on setup.ns\\nexport async function main(ns) {\\n\\tconst myServers = [\\\"home\\\"];\\n\\n\\tvar servers = await getServerList(myServers, 0, ns);\\n\\n\\tfor (let entry in servers) {\\t\\n\\t\\tawait takeover(servers[entry], ns);\\n\\t}\\n}\",\"filename\":\"deep-setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"stormtech\",\"moduleSequenceNumber\":835,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\t//\\n}\",\"filename\":\"formulas-testing.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"stormtech\",\"moduleSequenceNumber\":836,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tconst currentMachine = ns.getHostname();\\n\\tvar servers = ns.scan(currentMachine);\\n\\tvar scripts = ns.ls(home, \\\"basic-\\\");\\n\\n\\tns.tprint(\\\"Host:  \\\" + currentMachine);\\n\\tfor (let entry in servers) {\\t// depth 0\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\t// depth 1\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== home && subservers.length > 1) {\\n\\t\\t\\t\\tns.tprint(\\\"-----> \\\" + subservers[subentry]);\\n\\t\\t\\t\\tlet subserversd2 = ns.scan(subservers[subentry]); // depth 2\\n\\t\\t\\t\\tfor (let subentryd2 in subserversd2) {\\n\\t\\t\\t\\t\\tif (subserversd2[subentryd2] !== subservers[subentry] && subserversd2[subentryd2] !== servers[entry] && subserversd2.length > 1) {\\n\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------> \\\" + subserversd2[subentryd2]);\\n\\t\\t\\t\\t\\t\\tlet subserversd3 = ns.scan(subserversd2[subentryd2]);\\t// depth 3\\n\\t\\t\\t\\t\\t\\tfor (let subentryd3 in subserversd3) {\\n\\t\\t\\t\\t\\t\\t\\tif (subserversd3[subentryd3] !== subserversd2[subentryd2] && subserversd3[subentryd3] !== subservers[subentry] && subserversd3.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------> \\\" + subserversd3[subentryd3]);\\n\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd4 = ns.scan(subserversd3[subentryd3]);\\t// depth 4\\n\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd4 in subserversd4) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd4[subentryd4] !== subserversd3[subentryd3] && subserversd4[subentryd4] !== subserversd2[subentryd2] && subserversd4.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------------> \\\" + subserversd4[subentryd4]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd5 = ns.scan(subserversd4[subentryd4]);\\t// depth 5\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd5 in subserversd5) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd5[subentryd5] !== subserversd4[subentryd4] && subserversd5[subentryd5] !== subserversd3[subentryd3] && subserversd5.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-------------------------> \\\" + subserversd5[subentryd5]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd6 = ns.scan(subserversd5[subentryd5]);\\t// depth 6\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd6 in subserversd6) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd6[subentryd6] !== subserversd5[subentryd5] && subserversd6[subentryd6] !== subserversd4[subentryd4] && subserversd6.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"------------------------------> \\\" + subserversd6[subentryd6]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd7 = ns.scan(subserversd6[subentryd6]);\\t// depth 7\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor(let subentryd7 in subserversd7) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd7[subentryd7] !== subserversd6[subentryd6] && subserversd7[subentryd7] !== subserversd5[subentryd5] && subserversd7.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-----------------------------------> \\\" + subserversd7[subentryd7]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"gigascan.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.05,\"server\":\"stormtech\",\"moduleSequenceNumber\":837,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet targetRam = ns.getServerMaxRam(ns.args[0]);\\n\\tlet scriptMem = ns.getScriptRam(ns.args[1]);\\n\\n\\tns.tprint(\\\"Maximum possible threads for \\\" + ns.args[1] + \\\": \\\" + Math.floor(targetRam / scriptMem));\\n\\tns.exit;\\n}\",\"filename\":\"ram-usage.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"stormtech\",\"moduleSequenceNumber\":838,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerList } from \\\"modules/helper.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet serversSeen = [\\\"home\\\"]; // home + bought servers\\n\\tlet contractList = [];\\n\\n\\tserversSeen = await getServerList(serversSeen, 0, ns);\\n\\n\\tns.tprint(serversSeen);\\n}\",\"filename\":\"search-coding-contracts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"stormtech\",\"moduleSequenceNumber\":839,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tvar servers = ns.scan(home);\\n\\tvar scripts = ns.ls(home, \\\".ns\\\");\\n\\n\\tfor (let entry in scripts) {\\n\\t\\tns.tprint(\\\"found script: \\\" + scripts[entry]);\\n\\t}\\n\\n\\t// Hack servers (!!! depth = 2 !!!) if needed and populate with scripts\\n\\tfor (let entry in servers) {\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== \\\"home\\\") {\\n\\t\\t\\t\\tns.tprint(\\\"----->   \\\" + subservers[subentry]);\\n\\t\\t\\t\\tif (!ns.hasRootAccess(subservers[subentry])) {\\n\\t\\t\\t\\t\\ttakeover(subservers[subentry]);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tns.tprint(\\\"copying scripts to \\\" + subservers[subentry]);\\n\\t\\t\\t\\tawait ns.scp(scripts, home, subservers[subentry]);\\n\\t\\t\\t\\t//await ns.scp(\\\"setup.ns\\\", home, subservers[subentry]);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (!ns.hasRootAccess(servers[entry])) {\\n\\t\\t\\ttakeover(servers[entry]);\\n\\t\\t}\\n\\t\\tns.tprint(\\\"copying scripts to \\\" + servers[entry]);\\n\\t\\tawait ns.scp(scripts, home, servers[entry]);\\n\\t\\t//await ns.scp(\\\"setup.ns\\\", home, servers[entry]);\\n\\t}\\n\\n\\t/** \\n\\t * \\tAttempts to take over target machine\\t\\n\\t * \\n\\t *  @param {string} tar\\n\\t *  @return {boolean} outcome \\n\\t**/\\n\\tasync function takeover(tar) {\\n\\t\\tlet currentTarget = tar;\\n\\t\\tlet isNotTakenOver = true;\\n\\t\\tlet attemptCounter = 0;\\n\\n\\t\\tif (ns.getServerNumPortsRequired <= 5 && attemptCounter < 50) {\\n\\t\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\n\\t\\t\\t\\tattemptCounter++;\\n\\t\\t\\t}\\n\\n\\t\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.15,\"server\":\"stormtech\",\"moduleSequenceNumber\":840,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}}],\"serversOnNetwork\":[\"run4theh111z\",\".\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":88,\"hackDifficulty\":88,\"minDifficulty\":29,\"moneyAvailable\":1081007058,\"moneyMax\":27025176450,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1037,\"serverGrowth\":84}},\"defcomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-235010.cct\",\"type\":\"Sanitize Parentheses in Expression\",\"data\":\"(((()aa(a())\",\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-308561.cct\",\"type\":\"Find Largest Prime Factor\",\"data\":583060462,\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"defcomm\",\"httpPortOpen\":true,\"ip\":\"34.3.7.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DefComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Returns an array of all hostnames in the network tree\\n * \\n * @param {string[]} myServers\\n * @param {number} safetyCounter Prevents infnite recursion\\n * @param {NS} ns\\n */\\nexport async function getServerList(myServers, safetyCounter, ns) {\\n\\tlet srvrsSeen = myServers;\\n\\tlet currServScanResult = [];\\n\\n\\tfor (let serverSeen in srvrsSeen) {\\n\\t\\tcurrServScanResult = ns.scan(srvrsSeen[serverSeen]);\\n\\t\\tfor (let entry in currServScanResult) {\\n\\t\\t\\tif (!srvrsSeen.includes(currServScanResult[entry])) {\\n\\t\\t\\t\\tsrvrsSeen.push(currServScanResult[entry]);\\n\\t\\t\\t\\tif ((++safetyCounter) < 250) {\\n\\t\\t\\t\\t\\tawait getServerList(srvrsSeen, safetyCounter, ns);\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tns.exit();\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\t//Filter out invalid values (NaN, null, {}, undefined)\\n\\tsrvrsSeen = srvrsSeen.filter(x => x);\\n\\treturn srvrsSeen;\\n}\\n\\n\\n/** \\n * \\tAttempts to take over target machine\\t\\n * \\n *  @param {string} target\\n * \\t@param {NS} ns\\n *  @return {boolean} outcome \\n**/\\nexport async function takeover(target, ns) {\\n\\tconst home = \\\"home\\\";\\n\\tlet currentTarget = target;\\n\\tlet isNotTakenOver = true;\\n\\tlet attemptCounter = 0;\\n\\n\\tlet scripts = ns.ls(home, \\\".js\\\");\\n\\t//scripts.push(ns.ls(home, \\\".ns\\\")); //in case of deprecated .ns scripts\\n\\n\\tns.tprint(scripts);\\n\\n\\n\\tif (!ns.hasRootAccess(currentTarget) && attemptCounter < 30) {\\n\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\ttry {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t} catch (error) {\\n\\t\\t\\t\\t\\tns.tprint(\\\"not enough ports to nuke \\\" + currentTarget);\\n\\t\\t\\t\\t\\treturn false;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t}\\n\\t\\t\\tattemptCounter++;\\n\\t\\t}\\n\\n\\t\\tawait ns.scp(scripts, home, currentTarget);\\n\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\",\"filename\":\"/modules/helper.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"defcomm\",\"moduleSequenceNumber\":841,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.grow(target);\\n\\t}\\n}\",\"filename\":\"basic-grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"defcomm\",\"moduleSequenceNumber\":842,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"basic-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"defcomm\",\"moduleSequenceNumber\":843,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(target);\\n\\t}\\n}\",\"filename\":\"basic-weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"defcomm\",\"moduleSequenceNumber\":844,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerList, takeover } from \\\"modules/helper.js\\\";\\n\\n/** @param {NS} ns **/\\n// TODO: unused + unfinished, based on setup.ns\\nexport async function main(ns) {\\n\\tconst myServers = [\\\"home\\\"];\\n\\n\\tvar servers = await getServerList(myServers, 0, ns);\\n\\n\\tfor (let entry in servers) {\\t\\n\\t\\tawait takeover(servers[entry], ns);\\n\\t}\\n}\",\"filename\":\"deep-setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"defcomm\",\"moduleSequenceNumber\":845,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\t//\\n}\",\"filename\":\"formulas-testing.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"defcomm\",\"moduleSequenceNumber\":846,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tconst currentMachine = ns.getHostname();\\n\\tvar servers = ns.scan(currentMachine);\\n\\tvar scripts = ns.ls(home, \\\"basic-\\\");\\n\\n\\tns.tprint(\\\"Host:  \\\" + currentMachine);\\n\\tfor (let entry in servers) {\\t// depth 0\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\t// depth 1\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== home && subservers.length > 1) {\\n\\t\\t\\t\\tns.tprint(\\\"-----> \\\" + subservers[subentry]);\\n\\t\\t\\t\\tlet subserversd2 = ns.scan(subservers[subentry]); // depth 2\\n\\t\\t\\t\\tfor (let subentryd2 in subserversd2) {\\n\\t\\t\\t\\t\\tif (subserversd2[subentryd2] !== subservers[subentry] && subserversd2[subentryd2] !== servers[entry] && subserversd2.length > 1) {\\n\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------> \\\" + subserversd2[subentryd2]);\\n\\t\\t\\t\\t\\t\\tlet subserversd3 = ns.scan(subserversd2[subentryd2]);\\t// depth 3\\n\\t\\t\\t\\t\\t\\tfor (let subentryd3 in subserversd3) {\\n\\t\\t\\t\\t\\t\\t\\tif (subserversd3[subentryd3] !== subserversd2[subentryd2] && subserversd3[subentryd3] !== subservers[subentry] && subserversd3.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------> \\\" + subserversd3[subentryd3]);\\n\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd4 = ns.scan(subserversd3[subentryd3]);\\t// depth 4\\n\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd4 in subserversd4) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd4[subentryd4] !== subserversd3[subentryd3] && subserversd4[subentryd4] !== subserversd2[subentryd2] && subserversd4.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------------> \\\" + subserversd4[subentryd4]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd5 = ns.scan(subserversd4[subentryd4]);\\t// depth 5\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd5 in subserversd5) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd5[subentryd5] !== subserversd4[subentryd4] && subserversd5[subentryd5] !== subserversd3[subentryd3] && subserversd5.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-------------------------> \\\" + subserversd5[subentryd5]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd6 = ns.scan(subserversd5[subentryd5]);\\t// depth 6\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd6 in subserversd6) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd6[subentryd6] !== subserversd5[subentryd5] && subserversd6[subentryd6] !== subserversd4[subentryd4] && subserversd6.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"------------------------------> \\\" + subserversd6[subentryd6]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd7 = ns.scan(subserversd6[subentryd6]);\\t// depth 7\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor(let subentryd7 in subserversd7) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd7[subentryd7] !== subserversd6[subentryd6] && subserversd7[subentryd7] !== subserversd5[subentryd5] && subserversd7.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-----------------------------------> \\\" + subserversd7[subentryd7]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"gigascan.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.05,\"server\":\"defcomm\",\"moduleSequenceNumber\":847,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet targetRam = ns.getServerMaxRam(ns.args[0]);\\n\\tlet scriptMem = ns.getScriptRam(ns.args[1]);\\n\\n\\tns.tprint(\\\"Maximum possible threads for \\\" + ns.args[1] + \\\": \\\" + Math.floor(targetRam / scriptMem));\\n\\tns.exit;\\n}\",\"filename\":\"ram-usage.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"defcomm\",\"moduleSequenceNumber\":848,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerList } from \\\"modules/helper.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet serversSeen = [\\\"home\\\"]; // home + bought servers\\n\\tlet contractList = [];\\n\\n\\tserversSeen = await getServerList(serversSeen, 0, ns);\\n\\n\\tns.tprint(serversSeen);\\n}\",\"filename\":\"search-coding-contracts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"defcomm\",\"moduleSequenceNumber\":849,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tvar servers = ns.scan(home);\\n\\tvar scripts = ns.ls(home, \\\".ns\\\");\\n\\n\\tfor (let entry in scripts) {\\n\\t\\tns.tprint(\\\"found script: \\\" + scripts[entry]);\\n\\t}\\n\\n\\t// Hack servers (!!! depth = 2 !!!) if needed and populate with scripts\\n\\tfor (let entry in servers) {\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== \\\"home\\\") {\\n\\t\\t\\t\\tns.tprint(\\\"----->   \\\" + subservers[subentry]);\\n\\t\\t\\t\\tif (!ns.hasRootAccess(subservers[subentry])) {\\n\\t\\t\\t\\t\\ttakeover(subservers[subentry]);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tns.tprint(\\\"copying scripts to \\\" + subservers[subentry]);\\n\\t\\t\\t\\tawait ns.scp(scripts, home, subservers[subentry]);\\n\\t\\t\\t\\t//await ns.scp(\\\"setup.ns\\\", home, subservers[subentry]);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (!ns.hasRootAccess(servers[entry])) {\\n\\t\\t\\ttakeover(servers[entry]);\\n\\t\\t}\\n\\t\\tns.tprint(\\\"copying scripts to \\\" + servers[entry]);\\n\\t\\tawait ns.scp(scripts, home, servers[entry]);\\n\\t\\t//await ns.scp(\\\"setup.ns\\\", home, servers[entry]);\\n\\t}\\n\\n\\t/** \\n\\t * \\tAttempts to take over target machine\\t\\n\\t * \\n\\t *  @param {string} tar\\n\\t *  @return {boolean} outcome \\n\\t**/\\n\\tasync function takeover(tar) {\\n\\t\\tlet currentTarget = tar;\\n\\t\\tlet isNotTakenOver = true;\\n\\t\\tlet attemptCounter = 0;\\n\\n\\t\\tif (ns.getServerNumPortsRequired <= 5 && attemptCounter < 50) {\\n\\t\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\n\\t\\t\\t\\tattemptCounter++;\\n\\t\\t\\t}\\n\\n\\t\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.15,\"server\":\"defcomm\",\"moduleSequenceNumber\":850,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}}],\"serversOnNetwork\":[\"deltaone\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":87,\"hackDifficulty\":87,\"minDifficulty\":29,\"moneyAvailable\":937507789,\"moneyMax\":23437694725,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":990,\"serverGrowth\":61}},\"infocomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"infocomm\",\"httpPortOpen\":true,\"ip\":\"29.7.2.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"InfoComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Returns an array of all hostnames in the network tree\\n * \\n * @param {string[]} myServers\\n * @param {number} safetyCounter Prevents infnite recursion\\n * @param {NS} ns\\n */\\nexport async function getServerList(myServers, safetyCounter, ns) {\\n\\tlet srvrsSeen = myServers;\\n\\tlet currServScanResult = [];\\n\\n\\tfor (let serverSeen in srvrsSeen) {\\n\\t\\tcurrServScanResult = ns.scan(srvrsSeen[serverSeen]);\\n\\t\\tfor (let entry in currServScanResult) {\\n\\t\\t\\tif (!srvrsSeen.includes(currServScanResult[entry])) {\\n\\t\\t\\t\\tsrvrsSeen.push(currServScanResult[entry]);\\n\\t\\t\\t\\tif ((++safetyCounter) < 250) {\\n\\t\\t\\t\\t\\tawait getServerList(srvrsSeen, safetyCounter, ns);\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tns.exit();\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\t//Filter out invalid values (NaN, null, {}, undefined)\\n\\tsrvrsSeen = srvrsSeen.filter(x => x);\\n\\treturn srvrsSeen;\\n}\\n\\n\\n/** \\n * \\tAttempts to take over target machine\\t\\n * \\n *  @param {string} target\\n * \\t@param {NS} ns\\n *  @return {boolean} outcome \\n**/\\nexport async function takeover(target, ns) {\\n\\tconst home = \\\"home\\\";\\n\\tlet currentTarget = target;\\n\\tlet isNotTakenOver = true;\\n\\tlet attemptCounter = 0;\\n\\n\\tlet scripts = ns.ls(home, \\\".js\\\");\\n\\t//scripts.push(ns.ls(home, \\\".ns\\\")); //in case of deprecated .ns scripts\\n\\n\\tns.tprint(scripts);\\n\\n\\n\\tif (!ns.hasRootAccess(currentTarget) && attemptCounter < 30) {\\n\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\ttry {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t} catch (error) {\\n\\t\\t\\t\\t\\tns.tprint(\\\"not enough ports to nuke \\\" + currentTarget);\\n\\t\\t\\t\\t\\treturn false;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t}\\n\\t\\t\\tattemptCounter++;\\n\\t\\t}\\n\\n\\t\\tawait ns.scp(scripts, home, currentTarget);\\n\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\",\"filename\":\"/modules/helper.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"infocomm\",\"moduleSequenceNumber\":851,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.grow(target);\\n\\t}\\n}\",\"filename\":\"basic-grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"infocomm\",\"moduleSequenceNumber\":852,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"basic-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"infocomm\",\"moduleSequenceNumber\":853,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(target);\\n\\t}\\n}\",\"filename\":\"basic-weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"infocomm\",\"moduleSequenceNumber\":854,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerList, takeover } from \\\"modules/helper.js\\\";\\n\\n/** @param {NS} ns **/\\n// TODO: unused + unfinished, based on setup.ns\\nexport async function main(ns) {\\n\\tconst myServers = [\\\"home\\\"];\\n\\n\\tvar servers = await getServerList(myServers, 0, ns);\\n\\n\\tfor (let entry in servers) {\\t\\n\\t\\tawait takeover(servers[entry], ns);\\n\\t}\\n}\",\"filename\":\"deep-setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"infocomm\",\"moduleSequenceNumber\":855,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\t//\\n}\",\"filename\":\"formulas-testing.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"infocomm\",\"moduleSequenceNumber\":856,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tconst currentMachine = ns.getHostname();\\n\\tvar servers = ns.scan(currentMachine);\\n\\tvar scripts = ns.ls(home, \\\"basic-\\\");\\n\\n\\tns.tprint(\\\"Host:  \\\" + currentMachine);\\n\\tfor (let entry in servers) {\\t// depth 0\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\t// depth 1\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== home && subservers.length > 1) {\\n\\t\\t\\t\\tns.tprint(\\\"-----> \\\" + subservers[subentry]);\\n\\t\\t\\t\\tlet subserversd2 = ns.scan(subservers[subentry]); // depth 2\\n\\t\\t\\t\\tfor (let subentryd2 in subserversd2) {\\n\\t\\t\\t\\t\\tif (subserversd2[subentryd2] !== subservers[subentry] && subserversd2[subentryd2] !== servers[entry] && subserversd2.length > 1) {\\n\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------> \\\" + subserversd2[subentryd2]);\\n\\t\\t\\t\\t\\t\\tlet subserversd3 = ns.scan(subserversd2[subentryd2]);\\t// depth 3\\n\\t\\t\\t\\t\\t\\tfor (let subentryd3 in subserversd3) {\\n\\t\\t\\t\\t\\t\\t\\tif (subserversd3[subentryd3] !== subserversd2[subentryd2] && subserversd3[subentryd3] !== subservers[subentry] && subserversd3.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------> \\\" + subserversd3[subentryd3]);\\n\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd4 = ns.scan(subserversd3[subentryd3]);\\t// depth 4\\n\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd4 in subserversd4) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd4[subentryd4] !== subserversd3[subentryd3] && subserversd4[subentryd4] !== subserversd2[subentryd2] && subserversd4.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------------> \\\" + subserversd4[subentryd4]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd5 = ns.scan(subserversd4[subentryd4]);\\t// depth 5\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd5 in subserversd5) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd5[subentryd5] !== subserversd4[subentryd4] && subserversd5[subentryd5] !== subserversd3[subentryd3] && subserversd5.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-------------------------> \\\" + subserversd5[subentryd5]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd6 = ns.scan(subserversd5[subentryd5]);\\t// depth 6\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd6 in subserversd6) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd6[subentryd6] !== subserversd5[subentryd5] && subserversd6[subentryd6] !== subserversd4[subentryd4] && subserversd6.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"------------------------------> \\\" + subserversd6[subentryd6]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd7 = ns.scan(subserversd6[subentryd6]);\\t// depth 7\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor(let subentryd7 in subserversd7) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd7[subentryd7] !== subserversd6[subentryd6] && subserversd7[subentryd7] !== subserversd5[subentryd5] && subserversd7.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-----------------------------------> \\\" + subserversd7[subentryd7]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"gigascan.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.05,\"server\":\"infocomm\",\"moduleSequenceNumber\":857,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet targetRam = ns.getServerMaxRam(ns.args[0]);\\n\\tlet scriptMem = ns.getScriptRam(ns.args[1]);\\n\\n\\tns.tprint(\\\"Maximum possible threads for \\\" + ns.args[1] + \\\": \\\" + Math.floor(targetRam / scriptMem));\\n\\tns.exit;\\n}\",\"filename\":\"ram-usage.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"infocomm\",\"moduleSequenceNumber\":858,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerList } from \\\"modules/helper.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet serversSeen = [\\\"home\\\"]; // home + bought servers\\n\\tlet contractList = [];\\n\\n\\tserversSeen = await getServerList(serversSeen, 0, ns);\\n\\n\\tns.tprint(serversSeen);\\n}\",\"filename\":\"search-coding-contracts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"infocomm\",\"moduleSequenceNumber\":859,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tvar servers = ns.scan(home);\\n\\tvar scripts = ns.ls(home, \\\".ns\\\");\\n\\n\\tfor (let entry in scripts) {\\n\\t\\tns.tprint(\\\"found script: \\\" + scripts[entry]);\\n\\t}\\n\\n\\t// Hack servers (!!! depth = 2 !!!) if needed and populate with scripts\\n\\tfor (let entry in servers) {\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== \\\"home\\\") {\\n\\t\\t\\t\\tns.tprint(\\\"----->   \\\" + subservers[subentry]);\\n\\t\\t\\t\\tif (!ns.hasRootAccess(subservers[subentry])) {\\n\\t\\t\\t\\t\\ttakeover(subservers[subentry]);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tns.tprint(\\\"copying scripts to \\\" + subservers[subentry]);\\n\\t\\t\\t\\tawait ns.scp(scripts, home, subservers[subentry]);\\n\\t\\t\\t\\t//await ns.scp(\\\"setup.ns\\\", home, subservers[subentry]);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (!ns.hasRootAccess(servers[entry])) {\\n\\t\\t\\ttakeover(servers[entry]);\\n\\t\\t}\\n\\t\\tns.tprint(\\\"copying scripts to \\\" + servers[entry]);\\n\\t\\tawait ns.scp(scripts, home, servers[entry]);\\n\\t\\t//await ns.scp(\\\"setup.ns\\\", home, servers[entry]);\\n\\t}\\n\\n\\t/** \\n\\t * \\tAttempts to take over target machine\\t\\n\\t * \\n\\t *  @param {string} tar\\n\\t *  @return {boolean} outcome \\n\\t**/\\n\\tasync function takeover(tar) {\\n\\t\\tlet currentTarget = tar;\\n\\t\\tlet isNotTakenOver = true;\\n\\t\\tlet attemptCounter = 0;\\n\\n\\t\\tif (ns.getServerNumPortsRequired <= 5 && attemptCounter < 50) {\\n\\t\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\n\\t\\t\\t\\tattemptCounter++;\\n\\t\\t\\t}\\n\\n\\t\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.15,\"server\":\"infocomm\",\"moduleSequenceNumber\":860,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}}],\"serversOnNetwork\":[\"zeus-med\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":75,\"hackDifficulty\":75,\"minDifficulty\":25,\"moneyAvailable\":858277636,\"moneyMax\":21456940900,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":909,\"serverGrowth\":37}},\"helios\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"helios\",\"httpPortOpen\":true,\"ip\":\"8.7.5.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Helios Labs\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Returns an array of all hostnames in the network tree\\n * \\n * @param {string[]} myServers\\n * @param {number} safetyCounter Prevents infnite recursion\\n * @param {NS} ns\\n */\\nexport async function getServerList(myServers, safetyCounter, ns) {\\n\\tlet srvrsSeen = myServers;\\n\\tlet currServScanResult = [];\\n\\n\\tfor (let serverSeen in srvrsSeen) {\\n\\t\\tcurrServScanResult = ns.scan(srvrsSeen[serverSeen]);\\n\\t\\tfor (let entry in currServScanResult) {\\n\\t\\t\\tif (!srvrsSeen.includes(currServScanResult[entry])) {\\n\\t\\t\\t\\tsrvrsSeen.push(currServScanResult[entry]);\\n\\t\\t\\t\\tif ((++safetyCounter) < 250) {\\n\\t\\t\\t\\t\\tawait getServerList(srvrsSeen, safetyCounter, ns);\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tns.exit();\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\t//Filter out invalid values (NaN, null, {}, undefined)\\n\\tsrvrsSeen = srvrsSeen.filter(x => x);\\n\\treturn srvrsSeen;\\n}\\n\\n\\n/** \\n * \\tAttempts to take over target machine\\t\\n * \\n *  @param {string} target\\n * \\t@param {NS} ns\\n *  @return {boolean} outcome \\n**/\\nexport async function takeover(target, ns) {\\n\\tconst home = \\\"home\\\";\\n\\tlet currentTarget = target;\\n\\tlet isNotTakenOver = true;\\n\\tlet attemptCounter = 0;\\n\\n\\tlet scripts = ns.ls(home, \\\".js\\\");\\n\\t//scripts.push(ns.ls(home, \\\".ns\\\")); //in case of deprecated .ns scripts\\n\\n\\tns.tprint(scripts);\\n\\n\\n\\tif (!ns.hasRootAccess(currentTarget) && attemptCounter < 30) {\\n\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\ttry {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t} catch (error) {\\n\\t\\t\\t\\t\\tns.tprint(\\\"not enough ports to nuke \\\" + currentTarget);\\n\\t\\t\\t\\t\\treturn false;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t}\\n\\t\\t\\tattemptCounter++;\\n\\t\\t}\\n\\n\\t\\tawait ns.scp(scripts, home, currentTarget);\\n\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\",\"filename\":\"/modules/helper.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"helios\",\"moduleSequenceNumber\":861,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.grow(target);\\n\\t}\\n}\",\"filename\":\"basic-grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"helios\",\"moduleSequenceNumber\":862,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"basic-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"helios\",\"moduleSequenceNumber\":863,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(target);\\n\\t}\\n}\",\"filename\":\"basic-weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"helios\",\"moduleSequenceNumber\":864,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerList, takeover } from \\\"modules/helper.js\\\";\\n\\n/** @param {NS} ns **/\\n// TODO: unused + unfinished, based on setup.ns\\nexport async function main(ns) {\\n\\tconst myServers = [\\\"home\\\"];\\n\\n\\tvar servers = await getServerList(myServers, 0, ns);\\n\\n\\tfor (let entry in servers) {\\t\\n\\t\\tawait takeover(servers[entry], ns);\\n\\t}\\n}\",\"filename\":\"deep-setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"helios\",\"moduleSequenceNumber\":865,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\t//\\n}\",\"filename\":\"formulas-testing.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"helios\",\"moduleSequenceNumber\":866,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tconst currentMachine = ns.getHostname();\\n\\tvar servers = ns.scan(currentMachine);\\n\\tvar scripts = ns.ls(home, \\\"basic-\\\");\\n\\n\\tns.tprint(\\\"Host:  \\\" + currentMachine);\\n\\tfor (let entry in servers) {\\t// depth 0\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\t// depth 1\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== home && subservers.length > 1) {\\n\\t\\t\\t\\tns.tprint(\\\"-----> \\\" + subservers[subentry]);\\n\\t\\t\\t\\tlet subserversd2 = ns.scan(subservers[subentry]); // depth 2\\n\\t\\t\\t\\tfor (let subentryd2 in subserversd2) {\\n\\t\\t\\t\\t\\tif (subserversd2[subentryd2] !== subservers[subentry] && subserversd2[subentryd2] !== servers[entry] && subserversd2.length > 1) {\\n\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------> \\\" + subserversd2[subentryd2]);\\n\\t\\t\\t\\t\\t\\tlet subserversd3 = ns.scan(subserversd2[subentryd2]);\\t// depth 3\\n\\t\\t\\t\\t\\t\\tfor (let subentryd3 in subserversd3) {\\n\\t\\t\\t\\t\\t\\t\\tif (subserversd3[subentryd3] !== subserversd2[subentryd2] && subserversd3[subentryd3] !== subservers[subentry] && subserversd3.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------> \\\" + subserversd3[subentryd3]);\\n\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd4 = ns.scan(subserversd3[subentryd3]);\\t// depth 4\\n\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd4 in subserversd4) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd4[subentryd4] !== subserversd3[subentryd3] && subserversd4[subentryd4] !== subserversd2[subentryd2] && subserversd4.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------------> \\\" + subserversd4[subentryd4]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd5 = ns.scan(subserversd4[subentryd4]);\\t// depth 5\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd5 in subserversd5) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd5[subentryd5] !== subserversd4[subentryd4] && subserversd5[subentryd5] !== subserversd3[subentryd3] && subserversd5.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-------------------------> \\\" + subserversd5[subentryd5]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd6 = ns.scan(subserversd5[subentryd5]);\\t// depth 6\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd6 in subserversd6) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd6[subentryd6] !== subserversd5[subentryd5] && subserversd6[subentryd6] !== subserversd4[subentryd4] && subserversd6.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"------------------------------> \\\" + subserversd6[subentryd6]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd7 = ns.scan(subserversd6[subentryd6]);\\t// depth 7\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor(let subentryd7 in subserversd7) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd7[subentryd7] !== subserversd6[subentryd6] && subserversd7[subentryd7] !== subserversd5[subentryd5] && subserversd7.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-----------------------------------> \\\" + subserversd7[subentryd7]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"gigascan.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.05,\"server\":\"helios\",\"moduleSequenceNumber\":867,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet targetRam = ns.getServerMaxRam(ns.args[0]);\\n\\tlet scriptMem = ns.getScriptRam(ns.args[1]);\\n\\n\\tns.tprint(\\\"Maximum possible threads for \\\" + ns.args[1] + \\\": \\\" + Math.floor(targetRam / scriptMem));\\n\\tns.exit;\\n}\",\"filename\":\"ram-usage.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"helios\",\"moduleSequenceNumber\":868,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerList } from \\\"modules/helper.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet serversSeen = [\\\"home\\\"]; // home + bought servers\\n\\tlet contractList = [];\\n\\n\\tserversSeen = await getServerList(serversSeen, 0, ns);\\n\\n\\tns.tprint(serversSeen);\\n}\",\"filename\":\"search-coding-contracts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"helios\",\"moduleSequenceNumber\":869,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tvar servers = ns.scan(home);\\n\\tvar scripts = ns.ls(home, \\\".ns\\\");\\n\\n\\tfor (let entry in scripts) {\\n\\t\\tns.tprint(\\\"found script: \\\" + scripts[entry]);\\n\\t}\\n\\n\\t// Hack servers (!!! depth = 2 !!!) if needed and populate with scripts\\n\\tfor (let entry in servers) {\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== \\\"home\\\") {\\n\\t\\t\\t\\tns.tprint(\\\"----->   \\\" + subservers[subentry]);\\n\\t\\t\\t\\tif (!ns.hasRootAccess(subservers[subentry])) {\\n\\t\\t\\t\\t\\ttakeover(subservers[subentry]);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tns.tprint(\\\"copying scripts to \\\" + subservers[subentry]);\\n\\t\\t\\t\\tawait ns.scp(scripts, home, subservers[subentry]);\\n\\t\\t\\t\\t//await ns.scp(\\\"setup.ns\\\", home, subservers[subentry]);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (!ns.hasRootAccess(servers[entry])) {\\n\\t\\t\\ttakeover(servers[entry]);\\n\\t\\t}\\n\\t\\tns.tprint(\\\"copying scripts to \\\" + servers[entry]);\\n\\t\\tawait ns.scp(scripts, home, servers[entry]);\\n\\t\\t//await ns.scp(\\\"setup.ns\\\", home, servers[entry]);\\n\\t}\\n\\n\\t/** \\n\\t * \\tAttempts to take over target machine\\t\\n\\t * \\n\\t *  @param {string} tar\\n\\t *  @return {boolean} outcome \\n\\t**/\\n\\tasync function takeover(tar) {\\n\\t\\tlet currentTarget = tar;\\n\\t\\tlet isNotTakenOver = true;\\n\\t\\tlet attemptCounter = 0;\\n\\n\\t\\tif (ns.getServerNumPortsRequired <= 5 && attemptCounter < 50) {\\n\\t\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\n\\t\\t\\t\\tattemptCounter++;\\n\\t\\t\\t}\\n\\n\\t\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.15,\"server\":\"helios\",\"moduleSequenceNumber\":870,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}}],\"serversOnNetwork\":[\"run4theh111z\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":93,\"hackDifficulty\":93,\"minDifficulty\":31,\"moneyAvailable\":550660174,\"moneyMax\":13766504350,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":822,\"serverGrowth\":79}},\"vitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"vitalife\",\"httpPortOpen\":true,\"ip\":\"38.1.7.7\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"VitaLife\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Returns an array of all hostnames in the network tree\\n * \\n * @param {string[]} myServers\\n * @param {number} safetyCounter Prevents infnite recursion\\n * @param {NS} ns\\n */\\nexport async function getServerList(myServers, safetyCounter, ns) {\\n\\tlet srvrsSeen = myServers;\\n\\tlet currServScanResult = [];\\n\\n\\tfor (let serverSeen in srvrsSeen) {\\n\\t\\tcurrServScanResult = ns.scan(srvrsSeen[serverSeen]);\\n\\t\\tfor (let entry in currServScanResult) {\\n\\t\\t\\tif (!srvrsSeen.includes(currServScanResult[entry])) {\\n\\t\\t\\t\\tsrvrsSeen.push(currServScanResult[entry]);\\n\\t\\t\\t\\tif ((++safetyCounter) < 250) {\\n\\t\\t\\t\\t\\tawait getServerList(srvrsSeen, safetyCounter, ns);\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tns.exit();\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\t//Filter out invalid values (NaN, null, {}, undefined)\\n\\tsrvrsSeen = srvrsSeen.filter(x => x);\\n\\treturn srvrsSeen;\\n}\\n\\n\\n/** \\n * \\tAttempts to take over target machine\\t\\n * \\n *  @param {string} target\\n * \\t@param {NS} ns\\n *  @return {boolean} outcome \\n**/\\nexport async function takeover(target, ns) {\\n\\tconst home = \\\"home\\\";\\n\\tlet currentTarget = target;\\n\\tlet isNotTakenOver = true;\\n\\tlet attemptCounter = 0;\\n\\n\\tlet scripts = ns.ls(home, \\\".js\\\");\\n\\t//scripts.push(ns.ls(home, \\\".ns\\\")); //in case of deprecated .ns scripts\\n\\n\\tns.tprint(scripts);\\n\\n\\n\\tif (!ns.hasRootAccess(currentTarget) && attemptCounter < 30) {\\n\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\ttry {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t} catch (error) {\\n\\t\\t\\t\\t\\tns.tprint(\\\"not enough ports to nuke \\\" + currentTarget);\\n\\t\\t\\t\\t\\treturn false;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t}\\n\\t\\t\\tattemptCounter++;\\n\\t\\t}\\n\\n\\t\\tawait ns.scp(scripts, home, currentTarget);\\n\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\",\"filename\":\"/modules/helper.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"vitalife\",\"moduleSequenceNumber\":871,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.grow(target);\\n\\t}\\n}\",\"filename\":\"basic-grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"vitalife\",\"moduleSequenceNumber\":872,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"basic-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"vitalife\",\"moduleSequenceNumber\":873,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(target);\\n\\t}\\n}\",\"filename\":\"basic-weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"vitalife\",\"moduleSequenceNumber\":874,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerList, takeover } from \\\"modules/helper.js\\\";\\n\\n/** @param {NS} ns **/\\n// TODO: unused + unfinished, based on setup.ns\\nexport async function main(ns) {\\n\\tconst myServers = [\\\"home\\\"];\\n\\n\\tvar servers = await getServerList(myServers, 0, ns);\\n\\n\\tfor (let entry in servers) {\\t\\n\\t\\tawait takeover(servers[entry], ns);\\n\\t}\\n}\",\"filename\":\"deep-setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"vitalife\",\"moduleSequenceNumber\":875,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\t//\\n}\",\"filename\":\"formulas-testing.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"vitalife\",\"moduleSequenceNumber\":876,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tconst currentMachine = ns.getHostname();\\n\\tvar servers = ns.scan(currentMachine);\\n\\tvar scripts = ns.ls(home, \\\"basic-\\\");\\n\\n\\tns.tprint(\\\"Host:  \\\" + currentMachine);\\n\\tfor (let entry in servers) {\\t// depth 0\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\t// depth 1\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== home && subservers.length > 1) {\\n\\t\\t\\t\\tns.tprint(\\\"-----> \\\" + subservers[subentry]);\\n\\t\\t\\t\\tlet subserversd2 = ns.scan(subservers[subentry]); // depth 2\\n\\t\\t\\t\\tfor (let subentryd2 in subserversd2) {\\n\\t\\t\\t\\t\\tif (subserversd2[subentryd2] !== subservers[subentry] && subserversd2[subentryd2] !== servers[entry] && subserversd2.length > 1) {\\n\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------> \\\" + subserversd2[subentryd2]);\\n\\t\\t\\t\\t\\t\\tlet subserversd3 = ns.scan(subserversd2[subentryd2]);\\t// depth 3\\n\\t\\t\\t\\t\\t\\tfor (let subentryd3 in subserversd3) {\\n\\t\\t\\t\\t\\t\\t\\tif (subserversd3[subentryd3] !== subserversd2[subentryd2] && subserversd3[subentryd3] !== subservers[subentry] && subserversd3.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------> \\\" + subserversd3[subentryd3]);\\n\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd4 = ns.scan(subserversd3[subentryd3]);\\t// depth 4\\n\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd4 in subserversd4) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd4[subentryd4] !== subserversd3[subentryd3] && subserversd4[subentryd4] !== subserversd2[subentryd2] && subserversd4.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------------> \\\" + subserversd4[subentryd4]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd5 = ns.scan(subserversd4[subentryd4]);\\t// depth 5\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd5 in subserversd5) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd5[subentryd5] !== subserversd4[subentryd4] && subserversd5[subentryd5] !== subserversd3[subentryd3] && subserversd5.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-------------------------> \\\" + subserversd5[subentryd5]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd6 = ns.scan(subserversd5[subentryd5]);\\t// depth 6\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd6 in subserversd6) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd6[subentryd6] !== subserversd5[subentryd5] && subserversd6[subentryd6] !== subserversd4[subentryd4] && subserversd6.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"------------------------------> \\\" + subserversd6[subentryd6]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd7 = ns.scan(subserversd6[subentryd6]);\\t// depth 7\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor(let subentryd7 in subserversd7) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd7[subentryd7] !== subserversd6[subentryd6] && subserversd7[subentryd7] !== subserversd5[subentryd5] && subserversd7.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-----------------------------------> \\\" + subserversd7[subentryd7]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"gigascan.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.05,\"server\":\"vitalife\",\"moduleSequenceNumber\":877,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet targetRam = ns.getServerMaxRam(ns.args[0]);\\n\\tlet scriptMem = ns.getScriptRam(ns.args[1]);\\n\\n\\tns.tprint(\\\"Maximum possible threads for \\\" + ns.args[1] + \\\": \\\" + Math.floor(targetRam / scriptMem));\\n\\tns.exit;\\n}\",\"filename\":\"ram-usage.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"vitalife\",\"moduleSequenceNumber\":878,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerList } from \\\"modules/helper.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet serversSeen = [\\\"home\\\"]; // home + bought servers\\n\\tlet contractList = [];\\n\\n\\tserversSeen = await getServerList(serversSeen, 0, ns);\\n\\n\\tns.tprint(serversSeen);\\n}\",\"filename\":\"search-coding-contracts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"vitalife\",\"moduleSequenceNumber\":879,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tvar servers = ns.scan(home);\\n\\tvar scripts = ns.ls(home, \\\".ns\\\");\\n\\n\\tfor (let entry in scripts) {\\n\\t\\tns.tprint(\\\"found script: \\\" + scripts[entry]);\\n\\t}\\n\\n\\t// Hack servers (!!! depth = 2 !!!) if needed and populate with scripts\\n\\tfor (let entry in servers) {\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== \\\"home\\\") {\\n\\t\\t\\t\\tns.tprint(\\\"----->   \\\" + subservers[subentry]);\\n\\t\\t\\t\\tif (!ns.hasRootAccess(subservers[subentry])) {\\n\\t\\t\\t\\t\\ttakeover(subservers[subentry]);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tns.tprint(\\\"copying scripts to \\\" + subservers[subentry]);\\n\\t\\t\\t\\tawait ns.scp(scripts, home, subservers[subentry]);\\n\\t\\t\\t\\t//await ns.scp(\\\"setup.ns\\\", home, subservers[subentry]);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (!ns.hasRootAccess(servers[entry])) {\\n\\t\\t\\ttakeover(servers[entry]);\\n\\t\\t}\\n\\t\\tns.tprint(\\\"copying scripts to \\\" + servers[entry]);\\n\\t\\tawait ns.scp(scripts, home, servers[entry]);\\n\\t\\t//await ns.scp(\\\"setup.ns\\\", home, servers[entry]);\\n\\t}\\n\\n\\t/** \\n\\t * \\tAttempts to take over target machine\\t\\n\\t * \\n\\t *  @param {string} tar\\n\\t *  @return {boolean} outcome \\n\\t**/\\n\\tasync function takeover(tar) {\\n\\t\\tlet currentTarget = tar;\\n\\t\\tlet isNotTakenOver = true;\\n\\t\\tlet attemptCounter = 0;\\n\\n\\t\\tif (ns.getServerNumPortsRequired <= 5 && attemptCounter < 50) {\\n\\t\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\n\\t\\t\\t\\tattemptCounter++;\\n\\t\\t\\t}\\n\\n\\t\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.15,\"server\":\"vitalife\",\"moduleSequenceNumber\":880,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}}],\"serversOnNetwork\":[\"run4theh111z\",\"omnitek\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":83,\"hackDifficulty\":83,\"minDifficulty\":28,\"moneyAvailable\":747742408,\"moneyMax\":18693560200,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":805,\"serverGrowth\":75}},\"icarus\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"icarus\",\"httpPortOpen\":true,\"ip\":\"33.3.0.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Icarus Microsystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Returns an array of all hostnames in the network tree\\n * \\n * @param {string[]} myServers\\n * @param {number} safetyCounter Prevents infnite recursion\\n * @param {NS} ns\\n */\\nexport async function getServerList(myServers, safetyCounter, ns) {\\n\\tlet srvrsSeen = myServers;\\n\\tlet currServScanResult = [];\\n\\n\\tfor (let serverSeen in srvrsSeen) {\\n\\t\\tcurrServScanResult = ns.scan(srvrsSeen[serverSeen]);\\n\\t\\tfor (let entry in currServScanResult) {\\n\\t\\t\\tif (!srvrsSeen.includes(currServScanResult[entry])) {\\n\\t\\t\\t\\tsrvrsSeen.push(currServScanResult[entry]);\\n\\t\\t\\t\\tif ((++safetyCounter) < 250) {\\n\\t\\t\\t\\t\\tawait getServerList(srvrsSeen, safetyCounter, ns);\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tns.exit();\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\t//Filter out invalid values (NaN, null, {}, undefined)\\n\\tsrvrsSeen = srvrsSeen.filter(x => x);\\n\\treturn srvrsSeen;\\n}\\n\\n\\n/** \\n * \\tAttempts to take over target machine\\t\\n * \\n *  @param {string} target\\n * \\t@param {NS} ns\\n *  @return {boolean} outcome \\n**/\\nexport async function takeover(target, ns) {\\n\\tconst home = \\\"home\\\";\\n\\tlet currentTarget = target;\\n\\tlet isNotTakenOver = true;\\n\\tlet attemptCounter = 0;\\n\\n\\tlet scripts = ns.ls(home, \\\".js\\\");\\n\\t//scripts.push(ns.ls(home, \\\".ns\\\")); //in case of deprecated .ns scripts\\n\\n\\tns.tprint(scripts);\\n\\n\\n\\tif (!ns.hasRootAccess(currentTarget) && attemptCounter < 30) {\\n\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\ttry {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t} catch (error) {\\n\\t\\t\\t\\t\\tns.tprint(\\\"not enough ports to nuke \\\" + currentTarget);\\n\\t\\t\\t\\t\\treturn false;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t}\\n\\t\\t\\tattemptCounter++;\\n\\t\\t}\\n\\n\\t\\tawait ns.scp(scripts, home, currentTarget);\\n\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\",\"filename\":\"/modules/helper.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"icarus\",\"moduleSequenceNumber\":881,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.grow(target);\\n\\t}\\n}\",\"filename\":\"basic-grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"icarus\",\"moduleSequenceNumber\":882,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"basic-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"icarus\",\"moduleSequenceNumber\":883,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(target);\\n\\t}\\n}\",\"filename\":\"basic-weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"icarus\",\"moduleSequenceNumber\":884,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerList, takeover } from \\\"modules/helper.js\\\";\\n\\n/** @param {NS} ns **/\\n// TODO: unused + unfinished, based on setup.ns\\nexport async function main(ns) {\\n\\tconst myServers = [\\\"home\\\"];\\n\\n\\tvar servers = await getServerList(myServers, 0, ns);\\n\\n\\tfor (let entry in servers) {\\t\\n\\t\\tawait takeover(servers[entry], ns);\\n\\t}\\n}\",\"filename\":\"deep-setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"icarus\",\"moduleSequenceNumber\":885,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\t//\\n}\",\"filename\":\"formulas-testing.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"icarus\",\"moduleSequenceNumber\":886,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tconst currentMachine = ns.getHostname();\\n\\tvar servers = ns.scan(currentMachine);\\n\\tvar scripts = ns.ls(home, \\\"basic-\\\");\\n\\n\\tns.tprint(\\\"Host:  \\\" + currentMachine);\\n\\tfor (let entry in servers) {\\t// depth 0\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\t// depth 1\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== home && subservers.length > 1) {\\n\\t\\t\\t\\tns.tprint(\\\"-----> \\\" + subservers[subentry]);\\n\\t\\t\\t\\tlet subserversd2 = ns.scan(subservers[subentry]); // depth 2\\n\\t\\t\\t\\tfor (let subentryd2 in subserversd2) {\\n\\t\\t\\t\\t\\tif (subserversd2[subentryd2] !== subservers[subentry] && subserversd2[subentryd2] !== servers[entry] && subserversd2.length > 1) {\\n\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------> \\\" + subserversd2[subentryd2]);\\n\\t\\t\\t\\t\\t\\tlet subserversd3 = ns.scan(subserversd2[subentryd2]);\\t// depth 3\\n\\t\\t\\t\\t\\t\\tfor (let subentryd3 in subserversd3) {\\n\\t\\t\\t\\t\\t\\t\\tif (subserversd3[subentryd3] !== subserversd2[subentryd2] && subserversd3[subentryd3] !== subservers[subentry] && subserversd3.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------> \\\" + subserversd3[subentryd3]);\\n\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd4 = ns.scan(subserversd3[subentryd3]);\\t// depth 4\\n\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd4 in subserversd4) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd4[subentryd4] !== subserversd3[subentryd3] && subserversd4[subentryd4] !== subserversd2[subentryd2] && subserversd4.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------------> \\\" + subserversd4[subentryd4]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd5 = ns.scan(subserversd4[subentryd4]);\\t// depth 5\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd5 in subserversd5) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd5[subentryd5] !== subserversd4[subentryd4] && subserversd5[subentryd5] !== subserversd3[subentryd3] && subserversd5.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-------------------------> \\\" + subserversd5[subentryd5]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd6 = ns.scan(subserversd5[subentryd5]);\\t// depth 6\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd6 in subserversd6) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd6[subentryd6] !== subserversd5[subentryd5] && subserversd6[subentryd6] !== subserversd4[subentryd4] && subserversd6.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"------------------------------> \\\" + subserversd6[subentryd6]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd7 = ns.scan(subserversd6[subentryd6]);\\t// depth 7\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor(let subentryd7 in subserversd7) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd7[subentryd7] !== subserversd6[subentryd6] && subserversd7[subentryd7] !== subserversd5[subentryd5] && subserversd7.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-----------------------------------> \\\" + subserversd7[subentryd7]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"gigascan.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.05,\"server\":\"icarus\",\"moduleSequenceNumber\":887,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet targetRam = ns.getServerMaxRam(ns.args[0]);\\n\\tlet scriptMem = ns.getScriptRam(ns.args[1]);\\n\\n\\tns.tprint(\\\"Maximum possible threads for \\\" + ns.args[1] + \\\": \\\" + Math.floor(targetRam / scriptMem));\\n\\tns.exit;\\n}\",\"filename\":\"ram-usage.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"icarus\",\"moduleSequenceNumber\":888,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerList } from \\\"modules/helper.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet serversSeen = [\\\"home\\\"]; // home + bought servers\\n\\tlet contractList = [];\\n\\n\\tserversSeen = await getServerList(serversSeen, 0, ns);\\n\\n\\tns.tprint(serversSeen);\\n}\",\"filename\":\"search-coding-contracts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"icarus\",\"moduleSequenceNumber\":889,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tvar servers = ns.scan(home);\\n\\tvar scripts = ns.ls(home, \\\".ns\\\");\\n\\n\\tfor (let entry in scripts) {\\n\\t\\tns.tprint(\\\"found script: \\\" + scripts[entry]);\\n\\t}\\n\\n\\t// Hack servers (!!! depth = 2 !!!) if needed and populate with scripts\\n\\tfor (let entry in servers) {\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== \\\"home\\\") {\\n\\t\\t\\t\\tns.tprint(\\\"----->   \\\" + subservers[subentry]);\\n\\t\\t\\t\\tif (!ns.hasRootAccess(subservers[subentry])) {\\n\\t\\t\\t\\t\\ttakeover(subservers[subentry]);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tns.tprint(\\\"copying scripts to \\\" + subservers[subentry]);\\n\\t\\t\\t\\tawait ns.scp(scripts, home, subservers[subentry]);\\n\\t\\t\\t\\t//await ns.scp(\\\"setup.ns\\\", home, subservers[subentry]);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (!ns.hasRootAccess(servers[entry])) {\\n\\t\\t\\ttakeover(servers[entry]);\\n\\t\\t}\\n\\t\\tns.tprint(\\\"copying scripts to \\\" + servers[entry]);\\n\\t\\tawait ns.scp(scripts, home, servers[entry]);\\n\\t\\t//await ns.scp(\\\"setup.ns\\\", home, servers[entry]);\\n\\t}\\n\\n\\t/** \\n\\t * \\tAttempts to take over target machine\\t\\n\\t * \\n\\t *  @param {string} tar\\n\\t *  @return {boolean} outcome \\n\\t**/\\n\\tasync function takeover(tar) {\\n\\t\\tlet currentTarget = tar;\\n\\t\\tlet isNotTakenOver = true;\\n\\t\\tlet attemptCounter = 0;\\n\\n\\t\\tif (ns.getServerNumPortsRequired <= 5 && attemptCounter < 50) {\\n\\t\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\n\\t\\t\\t\\tattemptCounter++;\\n\\t\\t\\t}\\n\\n\\t\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.15,\"server\":\"icarus\",\"moduleSequenceNumber\":890,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}}],\"serversOnNetwork\":[\"deltaone\",\"nova-med\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":88,\"hackDifficulty\":88,\"minDifficulty\":29,\"moneyAvailable\":927200724,\"moneyMax\":23180018100,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":873,\"serverGrowth\":86}},\"univ-energy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-720070.cct\",\"type\":\"Spiralize Matrix\",\"data\":[[31,30,19,45,24,2,19,8,42,10,33,18,23],[30,33,44,25,45,7,41,46,29,44,31,20,19],[37,30,12,42,29,7,19,49,33,47,14,4,3],[33,40,18,3,12,23,6,10,18,9,50,9,35],[26,33,26,48,28,25,22,31,22,8,21,30,21],[41,10,4,43,43,13,34,4,33,6,44,12,23],[42,47,38,48,45,22,43,35,49,38,44,17,24],[37,29,49,48,13,47,13,34,26,15,43,49,31],[18,41,10,42,47,5,4,24,8,36,33,10,27]],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"univ-energy\",\"httpPortOpen\":true,\"ip\":\"11.5.4.9\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[],\"organizationName\":\"Universal Energy\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Returns an array of all hostnames in the network tree\\n * \\n * @param {string[]} myServers\\n * @param {number} safetyCounter Prevents infnite recursion\\n * @param {NS} ns\\n */\\nexport async function getServerList(myServers, safetyCounter, ns) {\\n\\tlet srvrsSeen = myServers;\\n\\tlet currServScanResult = [];\\n\\n\\tfor (let serverSeen in srvrsSeen) {\\n\\t\\tcurrServScanResult = ns.scan(srvrsSeen[serverSeen]);\\n\\t\\tfor (let entry in currServScanResult) {\\n\\t\\t\\tif (!srvrsSeen.includes(currServScanResult[entry])) {\\n\\t\\t\\t\\tsrvrsSeen.push(currServScanResult[entry]);\\n\\t\\t\\t\\tif ((++safetyCounter) < 250) {\\n\\t\\t\\t\\t\\tawait getServerList(srvrsSeen, safetyCounter, ns);\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tns.exit();\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\t//Filter out invalid values (NaN, null, {}, undefined)\\n\\tsrvrsSeen = srvrsSeen.filter(x => x);\\n\\treturn srvrsSeen;\\n}\\n\\n\\n/** \\n * \\tAttempts to take over target machine\\t\\n * \\n *  @param {string} target\\n * \\t@param {NS} ns\\n *  @return {boolean} outcome \\n**/\\nexport async function takeover(target, ns) {\\n\\tconst home = \\\"home\\\";\\n\\tlet currentTarget = target;\\n\\tlet isNotTakenOver = true;\\n\\tlet attemptCounter = 0;\\n\\n\\tlet scripts = ns.ls(home, \\\".js\\\");\\n\\t//scripts.push(ns.ls(home, \\\".ns\\\")); //in case of deprecated .ns scripts\\n\\n\\tns.tprint(scripts);\\n\\n\\n\\tif (!ns.hasRootAccess(currentTarget) && attemptCounter < 30) {\\n\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\ttry {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t} catch (error) {\\n\\t\\t\\t\\t\\tns.tprint(\\\"not enough ports to nuke \\\" + currentTarget);\\n\\t\\t\\t\\t\\treturn false;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t}\\n\\t\\t\\tattemptCounter++;\\n\\t\\t}\\n\\n\\t\\tawait ns.scp(scripts, home, currentTarget);\\n\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\",\"filename\":\"/modules/helper.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"univ-energy\",\"moduleSequenceNumber\":891,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.grow(target);\\n\\t}\\n}\",\"filename\":\"basic-grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"univ-energy\",\"moduleSequenceNumber\":892,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"basic-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"univ-energy\",\"moduleSequenceNumber\":893,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(target);\\n\\t}\\n}\",\"filename\":\"basic-weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"univ-energy\",\"moduleSequenceNumber\":894,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerList, takeover } from \\\"modules/helper.js\\\";\\n\\n/** @param {NS} ns **/\\n// TODO: unused + unfinished, based on setup.ns\\nexport async function main(ns) {\\n\\tconst myServers = [\\\"home\\\"];\\n\\n\\tvar servers = await getServerList(myServers, 0, ns);\\n\\n\\tfor (let entry in servers) {\\t\\n\\t\\tawait takeover(servers[entry], ns);\\n\\t}\\n}\",\"filename\":\"deep-setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"univ-energy\",\"moduleSequenceNumber\":895,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\t//\\n}\",\"filename\":\"formulas-testing.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"univ-energy\",\"moduleSequenceNumber\":896,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tconst currentMachine = ns.getHostname();\\n\\tvar servers = ns.scan(currentMachine);\\n\\tvar scripts = ns.ls(home, \\\"basic-\\\");\\n\\n\\tns.tprint(\\\"Host:  \\\" + currentMachine);\\n\\tfor (let entry in servers) {\\t// depth 0\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\t// depth 1\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== home && subservers.length > 1) {\\n\\t\\t\\t\\tns.tprint(\\\"-----> \\\" + subservers[subentry]);\\n\\t\\t\\t\\tlet subserversd2 = ns.scan(subservers[subentry]); // depth 2\\n\\t\\t\\t\\tfor (let subentryd2 in subserversd2) {\\n\\t\\t\\t\\t\\tif (subserversd2[subentryd2] !== subservers[subentry] && subserversd2[subentryd2] !== servers[entry] && subserversd2.length > 1) {\\n\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------> \\\" + subserversd2[subentryd2]);\\n\\t\\t\\t\\t\\t\\tlet subserversd3 = ns.scan(subserversd2[subentryd2]);\\t// depth 3\\n\\t\\t\\t\\t\\t\\tfor (let subentryd3 in subserversd3) {\\n\\t\\t\\t\\t\\t\\t\\tif (subserversd3[subentryd3] !== subserversd2[subentryd2] && subserversd3[subentryd3] !== subservers[subentry] && subserversd3.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------> \\\" + subserversd3[subentryd3]);\\n\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd4 = ns.scan(subserversd3[subentryd3]);\\t// depth 4\\n\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd4 in subserversd4) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd4[subentryd4] !== subserversd3[subentryd3] && subserversd4[subentryd4] !== subserversd2[subentryd2] && subserversd4.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------------> \\\" + subserversd4[subentryd4]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd5 = ns.scan(subserversd4[subentryd4]);\\t// depth 5\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd5 in subserversd5) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd5[subentryd5] !== subserversd4[subentryd4] && subserversd5[subentryd5] !== subserversd3[subentryd3] && subserversd5.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-------------------------> \\\" + subserversd5[subentryd5]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd6 = ns.scan(subserversd5[subentryd5]);\\t// depth 6\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd6 in subserversd6) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd6[subentryd6] !== subserversd5[subentryd5] && subserversd6[subentryd6] !== subserversd4[subentryd4] && subserversd6.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"------------------------------> \\\" + subserversd6[subentryd6]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd7 = ns.scan(subserversd6[subentryd6]);\\t// depth 7\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor(let subentryd7 in subserversd7) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd7[subentryd7] !== subserversd6[subentryd6] && subserversd7[subentryd7] !== subserversd5[subentryd5] && subserversd7.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-----------------------------------> \\\" + subserversd7[subentryd7]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"gigascan.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.05,\"server\":\"univ-energy\",\"moduleSequenceNumber\":897,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet targetRam = ns.getServerMaxRam(ns.args[0]);\\n\\tlet scriptMem = ns.getScriptRam(ns.args[1]);\\n\\n\\tns.tprint(\\\"Maximum possible threads for \\\" + ns.args[1] + \\\": \\\" + Math.floor(targetRam / scriptMem));\\n\\tns.exit;\\n}\",\"filename\":\"ram-usage.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"univ-energy\",\"moduleSequenceNumber\":898,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerList } from \\\"modules/helper.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet serversSeen = [\\\"home\\\"]; // home + bought servers\\n\\tlet contractList = [];\\n\\n\\tserversSeen = await getServerList(serversSeen, 0, ns);\\n\\n\\tns.tprint(serversSeen);\\n}\",\"filename\":\"search-coding-contracts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"univ-energy\",\"moduleSequenceNumber\":899,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tvar servers = ns.scan(home);\\n\\tvar scripts = ns.ls(home, \\\".ns\\\");\\n\\n\\tfor (let entry in scripts) {\\n\\t\\tns.tprint(\\\"found script: \\\" + scripts[entry]);\\n\\t}\\n\\n\\t// Hack servers (!!! depth = 2 !!!) if needed and populate with scripts\\n\\tfor (let entry in servers) {\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== \\\"home\\\") {\\n\\t\\t\\t\\tns.tprint(\\\"----->   \\\" + subservers[subentry]);\\n\\t\\t\\t\\tif (!ns.hasRootAccess(subservers[subentry])) {\\n\\t\\t\\t\\t\\ttakeover(subservers[subentry]);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tns.tprint(\\\"copying scripts to \\\" + subservers[subentry]);\\n\\t\\t\\t\\tawait ns.scp(scripts, home, subservers[subentry]);\\n\\t\\t\\t\\t//await ns.scp(\\\"setup.ns\\\", home, subservers[subentry]);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (!ns.hasRootAccess(servers[entry])) {\\n\\t\\t\\ttakeover(servers[entry]);\\n\\t\\t}\\n\\t\\tns.tprint(\\\"copying scripts to \\\" + servers[entry]);\\n\\t\\tawait ns.scp(scripts, home, servers[entry]);\\n\\t\\t//await ns.scp(\\\"setup.ns\\\", home, servers[entry]);\\n\\t}\\n\\n\\t/** \\n\\t * \\tAttempts to take over target machine\\t\\n\\t * \\n\\t *  @param {string} tar\\n\\t *  @return {boolean} outcome \\n\\t**/\\n\\tasync function takeover(tar) {\\n\\t\\tlet currentTarget = tar;\\n\\t\\tlet isNotTakenOver = true;\\n\\t\\tlet attemptCounter = 0;\\n\\n\\t\\tif (ns.getServerNumPortsRequired <= 5 && attemptCounter < 50) {\\n\\t\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\n\\t\\t\\t\\tattemptCounter++;\\n\\t\\t\\t}\\n\\n\\t\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.15,\"server\":\"univ-energy\",\"moduleSequenceNumber\":900,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}}],\"serversOnNetwork\":[\"omnia\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":90,\"hackDifficulty\":90,\"minDifficulty\":30,\"moneyAvailable\":1127172165,\"moneyMax\":28179304125,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":862,\"serverGrowth\":84}},\"titan-labs\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-70060.cct\",\"type\":\"Sanitize Parentheses in Expression\",\"data\":\"(a)aa(a(a\",\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"titan-labs\",\"httpPortOpen\":true,\"ip\":\"56.2.9.1\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"coded-intelligence.lit\"],\"organizationName\":\"Titan Laboratories\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Returns an array of all hostnames in the network tree\\n * \\n * @param {string[]} myServers\\n * @param {number} safetyCounter Prevents infnite recursion\\n * @param {NS} ns\\n */\\nexport async function getServerList(myServers, safetyCounter, ns) {\\n\\tlet srvrsSeen = myServers;\\n\\tlet currServScanResult = [];\\n\\n\\tfor (let serverSeen in srvrsSeen) {\\n\\t\\tcurrServScanResult = ns.scan(srvrsSeen[serverSeen]);\\n\\t\\tfor (let entry in currServScanResult) {\\n\\t\\t\\tif (!srvrsSeen.includes(currServScanResult[entry])) {\\n\\t\\t\\t\\tsrvrsSeen.push(currServScanResult[entry]);\\n\\t\\t\\t\\tif ((++safetyCounter) < 250) {\\n\\t\\t\\t\\t\\tawait getServerList(srvrsSeen, safetyCounter, ns);\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tns.exit();\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\t//Filter out invalid values (NaN, null, {}, undefined)\\n\\tsrvrsSeen = srvrsSeen.filter(x => x);\\n\\treturn srvrsSeen;\\n}\\n\\n\\n/** \\n * \\tAttempts to take over target machine\\t\\n * \\n *  @param {string} target\\n * \\t@param {NS} ns\\n *  @return {boolean} outcome \\n**/\\nexport async function takeover(target, ns) {\\n\\tconst home = \\\"home\\\";\\n\\tlet currentTarget = target;\\n\\tlet isNotTakenOver = true;\\n\\tlet attemptCounter = 0;\\n\\n\\tlet scripts = ns.ls(home, \\\".js\\\");\\n\\t//scripts.push(ns.ls(home, \\\".ns\\\")); //in case of deprecated .ns scripts\\n\\n\\tns.tprint(scripts);\\n\\n\\n\\tif (!ns.hasRootAccess(currentTarget) && attemptCounter < 30) {\\n\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\ttry {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t} catch (error) {\\n\\t\\t\\t\\t\\tns.tprint(\\\"not enough ports to nuke \\\" + currentTarget);\\n\\t\\t\\t\\t\\treturn false;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t}\\n\\t\\t\\tattemptCounter++;\\n\\t\\t}\\n\\n\\t\\tawait ns.scp(scripts, home, currentTarget);\\n\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\",\"filename\":\"/modules/helper.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"titan-labs\",\"moduleSequenceNumber\":901,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.grow(target);\\n\\t}\\n}\",\"filename\":\"basic-grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"titan-labs\",\"moduleSequenceNumber\":902,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"basic-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"titan-labs\",\"moduleSequenceNumber\":903,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(target);\\n\\t}\\n}\",\"filename\":\"basic-weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"titan-labs\",\"moduleSequenceNumber\":904,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerList, takeover } from \\\"modules/helper.js\\\";\\n\\n/** @param {NS} ns **/\\n// TODO: unused + unfinished, based on setup.ns\\nexport async function main(ns) {\\n\\tconst myServers = [\\\"home\\\"];\\n\\n\\tvar servers = await getServerList(myServers, 0, ns);\\n\\n\\tfor (let entry in servers) {\\t\\n\\t\\tawait takeover(servers[entry], ns);\\n\\t}\\n}\",\"filename\":\"deep-setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"titan-labs\",\"moduleSequenceNumber\":905,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\t//\\n}\",\"filename\":\"formulas-testing.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"titan-labs\",\"moduleSequenceNumber\":906,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tconst currentMachine = ns.getHostname();\\n\\tvar servers = ns.scan(currentMachine);\\n\\tvar scripts = ns.ls(home, \\\"basic-\\\");\\n\\n\\tns.tprint(\\\"Host:  \\\" + currentMachine);\\n\\tfor (let entry in servers) {\\t// depth 0\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\t// depth 1\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== home && subservers.length > 1) {\\n\\t\\t\\t\\tns.tprint(\\\"-----> \\\" + subservers[subentry]);\\n\\t\\t\\t\\tlet subserversd2 = ns.scan(subservers[subentry]); // depth 2\\n\\t\\t\\t\\tfor (let subentryd2 in subserversd2) {\\n\\t\\t\\t\\t\\tif (subserversd2[subentryd2] !== subservers[subentry] && subserversd2[subentryd2] !== servers[entry] && subserversd2.length > 1) {\\n\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------> \\\" + subserversd2[subentryd2]);\\n\\t\\t\\t\\t\\t\\tlet subserversd3 = ns.scan(subserversd2[subentryd2]);\\t// depth 3\\n\\t\\t\\t\\t\\t\\tfor (let subentryd3 in subserversd3) {\\n\\t\\t\\t\\t\\t\\t\\tif (subserversd3[subentryd3] !== subserversd2[subentryd2] && subserversd3[subentryd3] !== subservers[subentry] && subserversd3.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------> \\\" + subserversd3[subentryd3]);\\n\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd4 = ns.scan(subserversd3[subentryd3]);\\t// depth 4\\n\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd4 in subserversd4) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd4[subentryd4] !== subserversd3[subentryd3] && subserversd4[subentryd4] !== subserversd2[subentryd2] && subserversd4.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------------> \\\" + subserversd4[subentryd4]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd5 = ns.scan(subserversd4[subentryd4]);\\t// depth 5\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd5 in subserversd5) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd5[subentryd5] !== subserversd4[subentryd4] && subserversd5[subentryd5] !== subserversd3[subentryd3] && subserversd5.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-------------------------> \\\" + subserversd5[subentryd5]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd6 = ns.scan(subserversd5[subentryd5]);\\t// depth 6\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd6 in subserversd6) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd6[subentryd6] !== subserversd5[subentryd5] && subserversd6[subentryd6] !== subserversd4[subentryd4] && subserversd6.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"------------------------------> \\\" + subserversd6[subentryd6]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd7 = ns.scan(subserversd6[subentryd6]);\\t// depth 7\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor(let subentryd7 in subserversd7) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd7[subentryd7] !== subserversd6[subentryd6] && subserversd7[subentryd7] !== subserversd5[subentryd5] && subserversd7.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-----------------------------------> \\\" + subserversd7[subentryd7]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"gigascan.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.05,\"server\":\"titan-labs\",\"moduleSequenceNumber\":907,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet targetRam = ns.getServerMaxRam(ns.args[0]);\\n\\tlet scriptMem = ns.getScriptRam(ns.args[1]);\\n\\n\\tns.tprint(\\\"Maximum possible threads for \\\" + ns.args[1] + \\\": \\\" + Math.floor(targetRam / scriptMem));\\n\\tns.exit;\\n}\",\"filename\":\"ram-usage.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"titan-labs\",\"moduleSequenceNumber\":908,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerList } from \\\"modules/helper.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet serversSeen = [\\\"home\\\"]; // home + bought servers\\n\\tlet contractList = [];\\n\\n\\tserversSeen = await getServerList(serversSeen, 0, ns);\\n\\n\\tns.tprint(serversSeen);\\n}\",\"filename\":\"search-coding-contracts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"titan-labs\",\"moduleSequenceNumber\":909,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tvar servers = ns.scan(home);\\n\\tvar scripts = ns.ls(home, \\\".ns\\\");\\n\\n\\tfor (let entry in scripts) {\\n\\t\\tns.tprint(\\\"found script: \\\" + scripts[entry]);\\n\\t}\\n\\n\\t// Hack servers (!!! depth = 2 !!!) if needed and populate with scripts\\n\\tfor (let entry in servers) {\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== \\\"home\\\") {\\n\\t\\t\\t\\tns.tprint(\\\"----->   \\\" + subservers[subentry]);\\n\\t\\t\\t\\tif (!ns.hasRootAccess(subservers[subentry])) {\\n\\t\\t\\t\\t\\ttakeover(subservers[subentry]);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tns.tprint(\\\"copying scripts to \\\" + subservers[subentry]);\\n\\t\\t\\t\\tawait ns.scp(scripts, home, subservers[subentry]);\\n\\t\\t\\t\\t//await ns.scp(\\\"setup.ns\\\", home, subservers[subentry]);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (!ns.hasRootAccess(servers[entry])) {\\n\\t\\t\\ttakeover(servers[entry]);\\n\\t\\t}\\n\\t\\tns.tprint(\\\"copying scripts to \\\" + servers[entry]);\\n\\t\\tawait ns.scp(scripts, home, servers[entry]);\\n\\t\\t//await ns.scp(\\\"setup.ns\\\", home, servers[entry]);\\n\\t}\\n\\n\\t/** \\n\\t * \\tAttempts to take over target machine\\t\\n\\t * \\n\\t *  @param {string} tar\\n\\t *  @return {boolean} outcome \\n\\t**/\\n\\tasync function takeover(tar) {\\n\\t\\tlet currentTarget = tar;\\n\\t\\tlet isNotTakenOver = true;\\n\\t\\tlet attemptCounter = 0;\\n\\n\\t\\tif (ns.getServerNumPortsRequired <= 5 && attemptCounter < 50) {\\n\\t\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\n\\t\\t\\t\\tattemptCounter++;\\n\\t\\t\\t}\\n\\n\\t\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.15,\"server\":\"titan-labs\",\"moduleSequenceNumber\":910,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}}],\"serversOnNetwork\":[\"zb-def\",\"fulcrumtech\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":75,\"hackDifficulty\":75,\"minDifficulty\":25,\"moneyAvailable\":880934683,\"moneyMax\":22023367075,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":839,\"serverGrowth\":80}},\"microdyne\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"microdyne\",\"httpPortOpen\":true,\"ip\":\"19.1.5.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"Microdyne Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Returns an array of all hostnames in the network tree\\n * \\n * @param {string[]} myServers\\n * @param {number} safetyCounter Prevents infnite recursion\\n * @param {NS} ns\\n */\\nexport async function getServerList(myServers, safetyCounter, ns) {\\n\\tlet srvrsSeen = myServers;\\n\\tlet currServScanResult = [];\\n\\n\\tfor (let serverSeen in srvrsSeen) {\\n\\t\\tcurrServScanResult = ns.scan(srvrsSeen[serverSeen]);\\n\\t\\tfor (let entry in currServScanResult) {\\n\\t\\t\\tif (!srvrsSeen.includes(currServScanResult[entry])) {\\n\\t\\t\\t\\tsrvrsSeen.push(currServScanResult[entry]);\\n\\t\\t\\t\\tif ((++safetyCounter) < 250) {\\n\\t\\t\\t\\t\\tawait getServerList(srvrsSeen, safetyCounter, ns);\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tns.exit();\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\t//Filter out invalid values (NaN, null, {}, undefined)\\n\\tsrvrsSeen = srvrsSeen.filter(x => x);\\n\\treturn srvrsSeen;\\n}\\n\\n\\n/** \\n * \\tAttempts to take over target machine\\t\\n * \\n *  @param {string} target\\n * \\t@param {NS} ns\\n *  @return {boolean} outcome \\n**/\\nexport async function takeover(target, ns) {\\n\\tconst home = \\\"home\\\";\\n\\tlet currentTarget = target;\\n\\tlet isNotTakenOver = true;\\n\\tlet attemptCounter = 0;\\n\\n\\tlet scripts = ns.ls(home, \\\".js\\\");\\n\\t//scripts.push(ns.ls(home, \\\".ns\\\")); //in case of deprecated .ns scripts\\n\\n\\tns.tprint(scripts);\\n\\n\\n\\tif (!ns.hasRootAccess(currentTarget) && attemptCounter < 30) {\\n\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\ttry {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t} catch (error) {\\n\\t\\t\\t\\t\\tns.tprint(\\\"not enough ports to nuke \\\" + currentTarget);\\n\\t\\t\\t\\t\\treturn false;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t}\\n\\t\\t\\tattemptCounter++;\\n\\t\\t}\\n\\n\\t\\tawait ns.scp(scripts, home, currentTarget);\\n\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\",\"filename\":\"/modules/helper.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"microdyne\",\"moduleSequenceNumber\":911,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.grow(target);\\n\\t}\\n}\",\"filename\":\"basic-grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"microdyne\",\"moduleSequenceNumber\":912,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"basic-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"microdyne\",\"moduleSequenceNumber\":913,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(target);\\n\\t}\\n}\",\"filename\":\"basic-weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"microdyne\",\"moduleSequenceNumber\":914,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerList, takeover } from \\\"modules/helper.js\\\";\\n\\n/** @param {NS} ns **/\\n// TODO: unused + unfinished, based on setup.ns\\nexport async function main(ns) {\\n\\tconst myServers = [\\\"home\\\"];\\n\\n\\tvar servers = await getServerList(myServers, 0, ns);\\n\\n\\tfor (let entry in servers) {\\t\\n\\t\\tawait takeover(servers[entry], ns);\\n\\t}\\n}\",\"filename\":\"deep-setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"microdyne\",\"moduleSequenceNumber\":915,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\t//\\n}\",\"filename\":\"formulas-testing.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"microdyne\",\"moduleSequenceNumber\":916,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tconst currentMachine = ns.getHostname();\\n\\tvar servers = ns.scan(currentMachine);\\n\\tvar scripts = ns.ls(home, \\\"basic-\\\");\\n\\n\\tns.tprint(\\\"Host:  \\\" + currentMachine);\\n\\tfor (let entry in servers) {\\t// depth 0\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\t// depth 1\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== home && subservers.length > 1) {\\n\\t\\t\\t\\tns.tprint(\\\"-----> \\\" + subservers[subentry]);\\n\\t\\t\\t\\tlet subserversd2 = ns.scan(subservers[subentry]); // depth 2\\n\\t\\t\\t\\tfor (let subentryd2 in subserversd2) {\\n\\t\\t\\t\\t\\tif (subserversd2[subentryd2] !== subservers[subentry] && subserversd2[subentryd2] !== servers[entry] && subserversd2.length > 1) {\\n\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------> \\\" + subserversd2[subentryd2]);\\n\\t\\t\\t\\t\\t\\tlet subserversd3 = ns.scan(subserversd2[subentryd2]);\\t// depth 3\\n\\t\\t\\t\\t\\t\\tfor (let subentryd3 in subserversd3) {\\n\\t\\t\\t\\t\\t\\t\\tif (subserversd3[subentryd3] !== subserversd2[subentryd2] && subserversd3[subentryd3] !== subservers[subentry] && subserversd3.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------> \\\" + subserversd3[subentryd3]);\\n\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd4 = ns.scan(subserversd3[subentryd3]);\\t// depth 4\\n\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd4 in subserversd4) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd4[subentryd4] !== subserversd3[subentryd3] && subserversd4[subentryd4] !== subserversd2[subentryd2] && subserversd4.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------------> \\\" + subserversd4[subentryd4]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd5 = ns.scan(subserversd4[subentryd4]);\\t// depth 5\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd5 in subserversd5) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd5[subentryd5] !== subserversd4[subentryd4] && subserversd5[subentryd5] !== subserversd3[subentryd3] && subserversd5.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-------------------------> \\\" + subserversd5[subentryd5]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd6 = ns.scan(subserversd5[subentryd5]);\\t// depth 6\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd6 in subserversd6) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd6[subentryd6] !== subserversd5[subentryd5] && subserversd6[subentryd6] !== subserversd4[subentryd4] && subserversd6.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"------------------------------> \\\" + subserversd6[subentryd6]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd7 = ns.scan(subserversd6[subentryd6]);\\t// depth 7\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor(let subentryd7 in subserversd7) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd7[subentryd7] !== subserversd6[subentryd6] && subserversd7[subentryd7] !== subserversd5[subentryd5] && subserversd7.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-----------------------------------> \\\" + subserversd7[subentryd7]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"gigascan.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.05,\"server\":\"microdyne\",\"moduleSequenceNumber\":917,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet targetRam = ns.getServerMaxRam(ns.args[0]);\\n\\tlet scriptMem = ns.getScriptRam(ns.args[1]);\\n\\n\\tns.tprint(\\\"Maximum possible threads for \\\" + ns.args[1] + \\\": \\\" + Math.floor(targetRam / scriptMem));\\n\\tns.exit;\\n}\",\"filename\":\"ram-usage.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"microdyne\",\"moduleSequenceNumber\":918,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerList } from \\\"modules/helper.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet serversSeen = [\\\"home\\\"]; // home + bought servers\\n\\tlet contractList = [];\\n\\n\\tserversSeen = await getServerList(serversSeen, 0, ns);\\n\\n\\tns.tprint(serversSeen);\\n}\",\"filename\":\"search-coding-contracts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"microdyne\",\"moduleSequenceNumber\":919,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tvar servers = ns.scan(home);\\n\\tvar scripts = ns.ls(home, \\\".ns\\\");\\n\\n\\tfor (let entry in scripts) {\\n\\t\\tns.tprint(\\\"found script: \\\" + scripts[entry]);\\n\\t}\\n\\n\\t// Hack servers (!!! depth = 2 !!!) if needed and populate with scripts\\n\\tfor (let entry in servers) {\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== \\\"home\\\") {\\n\\t\\t\\t\\tns.tprint(\\\"----->   \\\" + subservers[subentry]);\\n\\t\\t\\t\\tif (!ns.hasRootAccess(subservers[subentry])) {\\n\\t\\t\\t\\t\\ttakeover(subservers[subentry]);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tns.tprint(\\\"copying scripts to \\\" + subservers[subentry]);\\n\\t\\t\\t\\tawait ns.scp(scripts, home, subservers[subentry]);\\n\\t\\t\\t\\t//await ns.scp(\\\"setup.ns\\\", home, subservers[subentry]);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (!ns.hasRootAccess(servers[entry])) {\\n\\t\\t\\ttakeover(servers[entry]);\\n\\t\\t}\\n\\t\\tns.tprint(\\\"copying scripts to \\\" + servers[entry]);\\n\\t\\tawait ns.scp(scripts, home, servers[entry]);\\n\\t\\t//await ns.scp(\\\"setup.ns\\\", home, servers[entry]);\\n\\t}\\n\\n\\t/** \\n\\t * \\tAttempts to take over target machine\\t\\n\\t * \\n\\t *  @param {string} tar\\n\\t *  @return {boolean} outcome \\n\\t**/\\n\\tasync function takeover(tar) {\\n\\t\\tlet currentTarget = tar;\\n\\t\\tlet isNotTakenOver = true;\\n\\t\\tlet attemptCounter = 0;\\n\\n\\t\\tif (ns.getServerNumPortsRequired <= 5 && attemptCounter < 50) {\\n\\t\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\n\\t\\t\\t\\tattemptCounter++;\\n\\t\\t\\t}\\n\\n\\t\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.15,\"server\":\"microdyne\",\"moduleSequenceNumber\":920,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}}],\"serversOnNetwork\":[\"zb-def\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":71,\"hackDifficulty\":71,\"minDifficulty\":24,\"moneyAvailable\":646579252,\"moneyMax\":16164481300,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":860,\"serverGrowth\":72}},\"taiyang-digital\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-157886.cct\",\"type\":\"Algorithmic Stock Trader I\",\"data\":[129,99,65,156,166,44,56,196,173,25,82,149,5,174,113,171,8,9,147,35,166,109,23,131,158,98,106,160,123,112,52,14,63,143,117,68,49],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"taiyang-digital\",\"httpPortOpen\":true,\"ip\":\"6.0.8.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"A-Green-Tomorrow.lit\",\"brighter-than-the-sun.lit\"],\"organizationName\":\"Taiyang Digital\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Returns an array of all hostnames in the network tree\\n * \\n * @param {string[]} myServers\\n * @param {number} safetyCounter Prevents infnite recursion\\n * @param {NS} ns\\n */\\nexport async function getServerList(myServers, safetyCounter, ns) {\\n\\tlet srvrsSeen = myServers;\\n\\tlet currServScanResult = [];\\n\\n\\tfor (let serverSeen in srvrsSeen) {\\n\\t\\tcurrServScanResult = ns.scan(srvrsSeen[serverSeen]);\\n\\t\\tfor (let entry in currServScanResult) {\\n\\t\\t\\tif (!srvrsSeen.includes(currServScanResult[entry])) {\\n\\t\\t\\t\\tsrvrsSeen.push(currServScanResult[entry]);\\n\\t\\t\\t\\tif ((++safetyCounter) < 250) {\\n\\t\\t\\t\\t\\tawait getServerList(srvrsSeen, safetyCounter, ns);\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tns.exit();\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\t//Filter out invalid values (NaN, null, {}, undefined)\\n\\tsrvrsSeen = srvrsSeen.filter(x => x);\\n\\treturn srvrsSeen;\\n}\\n\\n\\n/** \\n * \\tAttempts to take over target machine\\t\\n * \\n *  @param {string} target\\n * \\t@param {NS} ns\\n *  @return {boolean} outcome \\n**/\\nexport async function takeover(target, ns) {\\n\\tconst home = \\\"home\\\";\\n\\tlet currentTarget = target;\\n\\tlet isNotTakenOver = true;\\n\\tlet attemptCounter = 0;\\n\\n\\tlet scripts = ns.ls(home, \\\".js\\\");\\n\\t//scripts.push(ns.ls(home, \\\".ns\\\")); //in case of deprecated .ns scripts\\n\\n\\tns.tprint(scripts);\\n\\n\\n\\tif (!ns.hasRootAccess(currentTarget) && attemptCounter < 30) {\\n\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\ttry {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t} catch (error) {\\n\\t\\t\\t\\t\\tns.tprint(\\\"not enough ports to nuke \\\" + currentTarget);\\n\\t\\t\\t\\t\\treturn false;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t}\\n\\t\\t\\tattemptCounter++;\\n\\t\\t}\\n\\n\\t\\tawait ns.scp(scripts, home, currentTarget);\\n\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\",\"filename\":\"/modules/helper.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"taiyang-digital\",\"moduleSequenceNumber\":921,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.grow(target);\\n\\t}\\n}\",\"filename\":\"basic-grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"taiyang-digital\",\"moduleSequenceNumber\":922,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"basic-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"taiyang-digital\",\"moduleSequenceNumber\":923,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(target);\\n\\t}\\n}\",\"filename\":\"basic-weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"taiyang-digital\",\"moduleSequenceNumber\":924,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerList, takeover } from \\\"modules/helper.js\\\";\\n\\n/** @param {NS} ns **/\\n// TODO: unused + unfinished, based on setup.ns\\nexport async function main(ns) {\\n\\tconst myServers = [\\\"home\\\"];\\n\\n\\tvar servers = await getServerList(myServers, 0, ns);\\n\\n\\tfor (let entry in servers) {\\t\\n\\t\\tawait takeover(servers[entry], ns);\\n\\t}\\n}\",\"filename\":\"deep-setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"taiyang-digital\",\"moduleSequenceNumber\":925,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\t//\\n}\",\"filename\":\"formulas-testing.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"taiyang-digital\",\"moduleSequenceNumber\":926,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tconst currentMachine = ns.getHostname();\\n\\tvar servers = ns.scan(currentMachine);\\n\\tvar scripts = ns.ls(home, \\\"basic-\\\");\\n\\n\\tns.tprint(\\\"Host:  \\\" + currentMachine);\\n\\tfor (let entry in servers) {\\t// depth 0\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\t// depth 1\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== home && subservers.length > 1) {\\n\\t\\t\\t\\tns.tprint(\\\"-----> \\\" + subservers[subentry]);\\n\\t\\t\\t\\tlet subserversd2 = ns.scan(subservers[subentry]); // depth 2\\n\\t\\t\\t\\tfor (let subentryd2 in subserversd2) {\\n\\t\\t\\t\\t\\tif (subserversd2[subentryd2] !== subservers[subentry] && subserversd2[subentryd2] !== servers[entry] && subserversd2.length > 1) {\\n\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------> \\\" + subserversd2[subentryd2]);\\n\\t\\t\\t\\t\\t\\tlet subserversd3 = ns.scan(subserversd2[subentryd2]);\\t// depth 3\\n\\t\\t\\t\\t\\t\\tfor (let subentryd3 in subserversd3) {\\n\\t\\t\\t\\t\\t\\t\\tif (subserversd3[subentryd3] !== subserversd2[subentryd2] && subserversd3[subentryd3] !== subservers[subentry] && subserversd3.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------> \\\" + subserversd3[subentryd3]);\\n\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd4 = ns.scan(subserversd3[subentryd3]);\\t// depth 4\\n\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd4 in subserversd4) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd4[subentryd4] !== subserversd3[subentryd3] && subserversd4[subentryd4] !== subserversd2[subentryd2] && subserversd4.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------------> \\\" + subserversd4[subentryd4]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd5 = ns.scan(subserversd4[subentryd4]);\\t// depth 5\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd5 in subserversd5) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd5[subentryd5] !== subserversd4[subentryd4] && subserversd5[subentryd5] !== subserversd3[subentryd3] && subserversd5.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-------------------------> \\\" + subserversd5[subentryd5]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd6 = ns.scan(subserversd5[subentryd5]);\\t// depth 6\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd6 in subserversd6) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd6[subentryd6] !== subserversd5[subentryd5] && subserversd6[subentryd6] !== subserversd4[subentryd4] && subserversd6.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"------------------------------> \\\" + subserversd6[subentryd6]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd7 = ns.scan(subserversd6[subentryd6]);\\t// depth 7\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor(let subentryd7 in subserversd7) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd7[subentryd7] !== subserversd6[subentryd6] && subserversd7[subentryd7] !== subserversd5[subentryd5] && subserversd7.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-----------------------------------> \\\" + subserversd7[subentryd7]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"gigascan.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.05,\"server\":\"taiyang-digital\",\"moduleSequenceNumber\":927,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet targetRam = ns.getServerMaxRam(ns.args[0]);\\n\\tlet scriptMem = ns.getScriptRam(ns.args[1]);\\n\\n\\tns.tprint(\\\"Maximum possible threads for \\\" + ns.args[1] + \\\": \\\" + Math.floor(targetRam / scriptMem));\\n\\tns.exit;\\n}\",\"filename\":\"ram-usage.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"taiyang-digital\",\"moduleSequenceNumber\":928,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerList } from \\\"modules/helper.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet serversSeen = [\\\"home\\\"]; // home + bought servers\\n\\tlet contractList = [];\\n\\n\\tserversSeen = await getServerList(serversSeen, 0, ns);\\n\\n\\tns.tprint(serversSeen);\\n}\",\"filename\":\"search-coding-contracts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"taiyang-digital\",\"moduleSequenceNumber\":929,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tvar servers = ns.scan(home);\\n\\tvar scripts = ns.ls(home, \\\".ns\\\");\\n\\n\\tfor (let entry in scripts) {\\n\\t\\tns.tprint(\\\"found script: \\\" + scripts[entry]);\\n\\t}\\n\\n\\t// Hack servers (!!! depth = 2 !!!) if needed and populate with scripts\\n\\tfor (let entry in servers) {\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== \\\"home\\\") {\\n\\t\\t\\t\\tns.tprint(\\\"----->   \\\" + subservers[subentry]);\\n\\t\\t\\t\\tif (!ns.hasRootAccess(subservers[subentry])) {\\n\\t\\t\\t\\t\\ttakeover(subservers[subentry]);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tns.tprint(\\\"copying scripts to \\\" + subservers[subentry]);\\n\\t\\t\\t\\tawait ns.scp(scripts, home, subservers[subentry]);\\n\\t\\t\\t\\t//await ns.scp(\\\"setup.ns\\\", home, subservers[subentry]);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (!ns.hasRootAccess(servers[entry])) {\\n\\t\\t\\ttakeover(servers[entry]);\\n\\t\\t}\\n\\t\\tns.tprint(\\\"copying scripts to \\\" + servers[entry]);\\n\\t\\tawait ns.scp(scripts, home, servers[entry]);\\n\\t\\t//await ns.scp(\\\"setup.ns\\\", home, servers[entry]);\\n\\t}\\n\\n\\t/** \\n\\t * \\tAttempts to take over target machine\\t\\n\\t * \\n\\t *  @param {string} tar\\n\\t *  @return {boolean} outcome \\n\\t**/\\n\\tasync function takeover(tar) {\\n\\t\\tlet currentTarget = tar;\\n\\t\\tlet isNotTakenOver = true;\\n\\t\\tlet attemptCounter = 0;\\n\\n\\t\\tif (ns.getServerNumPortsRequired <= 5 && attemptCounter < 50) {\\n\\t\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\n\\t\\t\\t\\tattemptCounter++;\\n\\t\\t\\t}\\n\\n\\t\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.15,\"server\":\"taiyang-digital\",\"moduleSequenceNumber\":930,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}}],\"serversOnNetwork\":[\"solaris\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":77,\"hackDifficulty\":77,\"minDifficulty\":26,\"moneyAvailable\":819640865,\"moneyMax\":20491021625,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":900,\"serverGrowth\":73}},\"galactic-cyber\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"galactic-cyber\",\"httpPortOpen\":true,\"ip\":\"77.3.0.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Galactic Cybersystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Returns an array of all hostnames in the network tree\\n * \\n * @param {string[]} myServers\\n * @param {number} safetyCounter Prevents infnite recursion\\n * @param {NS} ns\\n */\\nexport async function getServerList(myServers, safetyCounter, ns) {\\n\\tlet srvrsSeen = myServers;\\n\\tlet currServScanResult = [];\\n\\n\\tfor (let serverSeen in srvrsSeen) {\\n\\t\\tcurrServScanResult = ns.scan(srvrsSeen[serverSeen]);\\n\\t\\tfor (let entry in currServScanResult) {\\n\\t\\t\\tif (!srvrsSeen.includes(currServScanResult[entry])) {\\n\\t\\t\\t\\tsrvrsSeen.push(currServScanResult[entry]);\\n\\t\\t\\t\\tif ((++safetyCounter) < 250) {\\n\\t\\t\\t\\t\\tawait getServerList(srvrsSeen, safetyCounter, ns);\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tns.exit();\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\t//Filter out invalid values (NaN, null, {}, undefined)\\n\\tsrvrsSeen = srvrsSeen.filter(x => x);\\n\\treturn srvrsSeen;\\n}\\n\\n\\n/** \\n * \\tAttempts to take over target machine\\t\\n * \\n *  @param {string} target\\n * \\t@param {NS} ns\\n *  @return {boolean} outcome \\n**/\\nexport async function takeover(target, ns) {\\n\\tconst home = \\\"home\\\";\\n\\tlet currentTarget = target;\\n\\tlet isNotTakenOver = true;\\n\\tlet attemptCounter = 0;\\n\\n\\tlet scripts = ns.ls(home, \\\".js\\\");\\n\\t//scripts.push(ns.ls(home, \\\".ns\\\")); //in case of deprecated .ns scripts\\n\\n\\tns.tprint(scripts);\\n\\n\\n\\tif (!ns.hasRootAccess(currentTarget) && attemptCounter < 30) {\\n\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\ttry {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t} catch (error) {\\n\\t\\t\\t\\t\\tns.tprint(\\\"not enough ports to nuke \\\" + currentTarget);\\n\\t\\t\\t\\t\\treturn false;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t}\\n\\t\\t\\tattemptCounter++;\\n\\t\\t}\\n\\n\\t\\tawait ns.scp(scripts, home, currentTarget);\\n\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\",\"filename\":\"/modules/helper.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"galactic-cyber\",\"moduleSequenceNumber\":931,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.grow(target);\\n\\t}\\n}\",\"filename\":\"basic-grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"galactic-cyber\",\"moduleSequenceNumber\":932,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"basic-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"galactic-cyber\",\"moduleSequenceNumber\":933,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(target);\\n\\t}\\n}\",\"filename\":\"basic-weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"galactic-cyber\",\"moduleSequenceNumber\":934,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerList, takeover } from \\\"modules/helper.js\\\";\\n\\n/** @param {NS} ns **/\\n// TODO: unused + unfinished, based on setup.ns\\nexport async function main(ns) {\\n\\tconst myServers = [\\\"home\\\"];\\n\\n\\tvar servers = await getServerList(myServers, 0, ns);\\n\\n\\tfor (let entry in servers) {\\t\\n\\t\\tawait takeover(servers[entry], ns);\\n\\t}\\n}\",\"filename\":\"deep-setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"galactic-cyber\",\"moduleSequenceNumber\":935,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\t//\\n}\",\"filename\":\"formulas-testing.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"galactic-cyber\",\"moduleSequenceNumber\":936,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tconst currentMachine = ns.getHostname();\\n\\tvar servers = ns.scan(currentMachine);\\n\\tvar scripts = ns.ls(home, \\\"basic-\\\");\\n\\n\\tns.tprint(\\\"Host:  \\\" + currentMachine);\\n\\tfor (let entry in servers) {\\t// depth 0\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\t// depth 1\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== home && subservers.length > 1) {\\n\\t\\t\\t\\tns.tprint(\\\"-----> \\\" + subservers[subentry]);\\n\\t\\t\\t\\tlet subserversd2 = ns.scan(subservers[subentry]); // depth 2\\n\\t\\t\\t\\tfor (let subentryd2 in subserversd2) {\\n\\t\\t\\t\\t\\tif (subserversd2[subentryd2] !== subservers[subentry] && subserversd2[subentryd2] !== servers[entry] && subserversd2.length > 1) {\\n\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------> \\\" + subserversd2[subentryd2]);\\n\\t\\t\\t\\t\\t\\tlet subserversd3 = ns.scan(subserversd2[subentryd2]);\\t// depth 3\\n\\t\\t\\t\\t\\t\\tfor (let subentryd3 in subserversd3) {\\n\\t\\t\\t\\t\\t\\t\\tif (subserversd3[subentryd3] !== subserversd2[subentryd2] && subserversd3[subentryd3] !== subservers[subentry] && subserversd3.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------> \\\" + subserversd3[subentryd3]);\\n\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd4 = ns.scan(subserversd3[subentryd3]);\\t// depth 4\\n\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd4 in subserversd4) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd4[subentryd4] !== subserversd3[subentryd3] && subserversd4[subentryd4] !== subserversd2[subentryd2] && subserversd4.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------------> \\\" + subserversd4[subentryd4]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd5 = ns.scan(subserversd4[subentryd4]);\\t// depth 5\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd5 in subserversd5) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd5[subentryd5] !== subserversd4[subentryd4] && subserversd5[subentryd5] !== subserversd3[subentryd3] && subserversd5.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-------------------------> \\\" + subserversd5[subentryd5]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd6 = ns.scan(subserversd5[subentryd5]);\\t// depth 6\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd6 in subserversd6) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd6[subentryd6] !== subserversd5[subentryd5] && subserversd6[subentryd6] !== subserversd4[subentryd4] && subserversd6.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"------------------------------> \\\" + subserversd6[subentryd6]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd7 = ns.scan(subserversd6[subentryd6]);\\t// depth 7\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor(let subentryd7 in subserversd7) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd7[subentryd7] !== subserversd6[subentryd6] && subserversd7[subentryd7] !== subserversd5[subentryd5] && subserversd7.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-----------------------------------> \\\" + subserversd7[subentryd7]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"gigascan.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.05,\"server\":\"galactic-cyber\",\"moduleSequenceNumber\":937,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet targetRam = ns.getServerMaxRam(ns.args[0]);\\n\\tlet scriptMem = ns.getScriptRam(ns.args[1]);\\n\\n\\tns.tprint(\\\"Maximum possible threads for \\\" + ns.args[1] + \\\": \\\" + Math.floor(targetRam / scriptMem));\\n\\tns.exit;\\n}\",\"filename\":\"ram-usage.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"galactic-cyber\",\"moduleSequenceNumber\":938,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerList } from \\\"modules/helper.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet serversSeen = [\\\"home\\\"]; // home + bought servers\\n\\tlet contractList = [];\\n\\n\\tserversSeen = await getServerList(serversSeen, 0, ns);\\n\\n\\tns.tprint(serversSeen);\\n}\",\"filename\":\"search-coding-contracts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"galactic-cyber\",\"moduleSequenceNumber\":939,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tvar servers = ns.scan(home);\\n\\tvar scripts = ns.ls(home, \\\".ns\\\");\\n\\n\\tfor (let entry in scripts) {\\n\\t\\tns.tprint(\\\"found script: \\\" + scripts[entry]);\\n\\t}\\n\\n\\t// Hack servers (!!! depth = 2 !!!) if needed and populate with scripts\\n\\tfor (let entry in servers) {\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== \\\"home\\\") {\\n\\t\\t\\t\\tns.tprint(\\\"----->   \\\" + subservers[subentry]);\\n\\t\\t\\t\\tif (!ns.hasRootAccess(subservers[subentry])) {\\n\\t\\t\\t\\t\\ttakeover(subservers[subentry]);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tns.tprint(\\\"copying scripts to \\\" + subservers[subentry]);\\n\\t\\t\\t\\tawait ns.scp(scripts, home, subservers[subentry]);\\n\\t\\t\\t\\t//await ns.scp(\\\"setup.ns\\\", home, subservers[subentry]);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (!ns.hasRootAccess(servers[entry])) {\\n\\t\\t\\ttakeover(servers[entry]);\\n\\t\\t}\\n\\t\\tns.tprint(\\\"copying scripts to \\\" + servers[entry]);\\n\\t\\tawait ns.scp(scripts, home, servers[entry]);\\n\\t\\t//await ns.scp(\\\"setup.ns\\\", home, servers[entry]);\\n\\t}\\n\\n\\t/** \\n\\t * \\tAttempts to take over target machine\\t\\n\\t * \\n\\t *  @param {string} tar\\n\\t *  @return {boolean} outcome \\n\\t**/\\n\\tasync function takeover(tar) {\\n\\t\\tlet currentTarget = tar;\\n\\t\\tlet isNotTakenOver = true;\\n\\t\\tlet attemptCounter = 0;\\n\\n\\t\\tif (ns.getServerNumPortsRequired <= 5 && attemptCounter < 50) {\\n\\t\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\n\\t\\t\\t\\tattemptCounter++;\\n\\t\\t\\t}\\n\\n\\t\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.15,\"server\":\"galactic-cyber\",\"moduleSequenceNumber\":940,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}}],\"serversOnNetwork\":[\"alpha-ent\",\"unitalife\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":60,\"hackDifficulty\":60,\"minDifficulty\":20,\"moneyAvailable\":846910715,\"moneyMax\":21172767875,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":859,\"serverGrowth\":79}},\"aerocorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-798938.cct\",\"type\":\"Subarray with Maximum Sum\",\"data\":[0,9,5,6,-7,0,4],\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-327801.cct\",\"type\":\"Array Jumping Game\",\"data\":[7,10,2,0,3,10,7,6,4,0,0,5,0,2,7,4],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"aerocorp\",\"httpPortOpen\":true,\"ip\":\"78.2.6.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"AeroCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Returns an array of all hostnames in the network tree\\n * \\n * @param {string[]} myServers\\n * @param {number} safetyCounter Prevents infnite recursion\\n * @param {NS} ns\\n */\\nexport async function getServerList(myServers, safetyCounter, ns) {\\n\\tlet srvrsSeen = myServers;\\n\\tlet currServScanResult = [];\\n\\n\\tfor (let serverSeen in srvrsSeen) {\\n\\t\\tcurrServScanResult = ns.scan(srvrsSeen[serverSeen]);\\n\\t\\tfor (let entry in currServScanResult) {\\n\\t\\t\\tif (!srvrsSeen.includes(currServScanResult[entry])) {\\n\\t\\t\\t\\tsrvrsSeen.push(currServScanResult[entry]);\\n\\t\\t\\t\\tif ((++safetyCounter) < 250) {\\n\\t\\t\\t\\t\\tawait getServerList(srvrsSeen, safetyCounter, ns);\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tns.exit();\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\t//Filter out invalid values (NaN, null, {}, undefined)\\n\\tsrvrsSeen = srvrsSeen.filter(x => x);\\n\\treturn srvrsSeen;\\n}\\n\\n\\n/** \\n * \\tAttempts to take over target machine\\t\\n * \\n *  @param {string} target\\n * \\t@param {NS} ns\\n *  @return {boolean} outcome \\n**/\\nexport async function takeover(target, ns) {\\n\\tconst home = \\\"home\\\";\\n\\tlet currentTarget = target;\\n\\tlet isNotTakenOver = true;\\n\\tlet attemptCounter = 0;\\n\\n\\tlet scripts = ns.ls(home, \\\".js\\\");\\n\\t//scripts.push(ns.ls(home, \\\".ns\\\")); //in case of deprecated .ns scripts\\n\\n\\tns.tprint(scripts);\\n\\n\\n\\tif (!ns.hasRootAccess(currentTarget) && attemptCounter < 30) {\\n\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\ttry {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t} catch (error) {\\n\\t\\t\\t\\t\\tns.tprint(\\\"not enough ports to nuke \\\" + currentTarget);\\n\\t\\t\\t\\t\\treturn false;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t}\\n\\t\\t\\tattemptCounter++;\\n\\t\\t}\\n\\n\\t\\tawait ns.scp(scripts, home, currentTarget);\\n\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\",\"filename\":\"/modules/helper.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"aerocorp\",\"moduleSequenceNumber\":941,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.grow(target);\\n\\t}\\n}\",\"filename\":\"basic-grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"aerocorp\",\"moduleSequenceNumber\":942,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"basic-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"aerocorp\",\"moduleSequenceNumber\":943,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(target);\\n\\t}\\n}\",\"filename\":\"basic-weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"aerocorp\",\"moduleSequenceNumber\":944,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerList, takeover } from \\\"modules/helper.js\\\";\\n\\n/** @param {NS} ns **/\\n// TODO: unused + unfinished, based on setup.ns\\nexport async function main(ns) {\\n\\tconst myServers = [\\\"home\\\"];\\n\\n\\tvar servers = await getServerList(myServers, 0, ns);\\n\\n\\tfor (let entry in servers) {\\t\\n\\t\\tawait takeover(servers[entry], ns);\\n\\t}\\n}\",\"filename\":\"deep-setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"aerocorp\",\"moduleSequenceNumber\":945,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\t//\\n}\",\"filename\":\"formulas-testing.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"aerocorp\",\"moduleSequenceNumber\":946,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tconst currentMachine = ns.getHostname();\\n\\tvar servers = ns.scan(currentMachine);\\n\\tvar scripts = ns.ls(home, \\\"basic-\\\");\\n\\n\\tns.tprint(\\\"Host:  \\\" + currentMachine);\\n\\tfor (let entry in servers) {\\t// depth 0\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\t// depth 1\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== home && subservers.length > 1) {\\n\\t\\t\\t\\tns.tprint(\\\"-----> \\\" + subservers[subentry]);\\n\\t\\t\\t\\tlet subserversd2 = ns.scan(subservers[subentry]); // depth 2\\n\\t\\t\\t\\tfor (let subentryd2 in subserversd2) {\\n\\t\\t\\t\\t\\tif (subserversd2[subentryd2] !== subservers[subentry] && subserversd2[subentryd2] !== servers[entry] && subserversd2.length > 1) {\\n\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------> \\\" + subserversd2[subentryd2]);\\n\\t\\t\\t\\t\\t\\tlet subserversd3 = ns.scan(subserversd2[subentryd2]);\\t// depth 3\\n\\t\\t\\t\\t\\t\\tfor (let subentryd3 in subserversd3) {\\n\\t\\t\\t\\t\\t\\t\\tif (subserversd3[subentryd3] !== subserversd2[subentryd2] && subserversd3[subentryd3] !== subservers[subentry] && subserversd3.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------> \\\" + subserversd3[subentryd3]);\\n\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd4 = ns.scan(subserversd3[subentryd3]);\\t// depth 4\\n\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd4 in subserversd4) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd4[subentryd4] !== subserversd3[subentryd3] && subserversd4[subentryd4] !== subserversd2[subentryd2] && subserversd4.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------------> \\\" + subserversd4[subentryd4]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd5 = ns.scan(subserversd4[subentryd4]);\\t// depth 5\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd5 in subserversd5) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd5[subentryd5] !== subserversd4[subentryd4] && subserversd5[subentryd5] !== subserversd3[subentryd3] && subserversd5.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-------------------------> \\\" + subserversd5[subentryd5]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd6 = ns.scan(subserversd5[subentryd5]);\\t// depth 6\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd6 in subserversd6) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd6[subentryd6] !== subserversd5[subentryd5] && subserversd6[subentryd6] !== subserversd4[subentryd4] && subserversd6.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"------------------------------> \\\" + subserversd6[subentryd6]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd7 = ns.scan(subserversd6[subentryd6]);\\t// depth 7\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor(let subentryd7 in subserversd7) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd7[subentryd7] !== subserversd6[subentryd6] && subserversd7[subentryd7] !== subserversd5[subentryd5] && subserversd7.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-----------------------------------> \\\" + subserversd7[subentryd7]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"gigascan.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.05,\"server\":\"aerocorp\",\"moduleSequenceNumber\":947,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet targetRam = ns.getServerMaxRam(ns.args[0]);\\n\\tlet scriptMem = ns.getScriptRam(ns.args[1]);\\n\\n\\tns.tprint(\\\"Maximum possible threads for \\\" + ns.args[1] + \\\": \\\" + Math.floor(targetRam / scriptMem));\\n\\tns.exit;\\n}\",\"filename\":\"ram-usage.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"aerocorp\",\"moduleSequenceNumber\":948,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerList } from \\\"modules/helper.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet serversSeen = [\\\"home\\\"]; // home + bought servers\\n\\tlet contractList = [];\\n\\n\\tserversSeen = await getServerList(serversSeen, 0, ns);\\n\\n\\tns.tprint(serversSeen);\\n}\",\"filename\":\"search-coding-contracts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"aerocorp\",\"moduleSequenceNumber\":949,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tvar servers = ns.scan(home);\\n\\tvar scripts = ns.ls(home, \\\".ns\\\");\\n\\n\\tfor (let entry in scripts) {\\n\\t\\tns.tprint(\\\"found script: \\\" + scripts[entry]);\\n\\t}\\n\\n\\t// Hack servers (!!! depth = 2 !!!) if needed and populate with scripts\\n\\tfor (let entry in servers) {\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== \\\"home\\\") {\\n\\t\\t\\t\\tns.tprint(\\\"----->   \\\" + subservers[subentry]);\\n\\t\\t\\t\\tif (!ns.hasRootAccess(subservers[subentry])) {\\n\\t\\t\\t\\t\\ttakeover(subservers[subentry]);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tns.tprint(\\\"copying scripts to \\\" + subservers[subentry]);\\n\\t\\t\\t\\tawait ns.scp(scripts, home, subservers[subentry]);\\n\\t\\t\\t\\t//await ns.scp(\\\"setup.ns\\\", home, subservers[subentry]);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (!ns.hasRootAccess(servers[entry])) {\\n\\t\\t\\ttakeover(servers[entry]);\\n\\t\\t}\\n\\t\\tns.tprint(\\\"copying scripts to \\\" + servers[entry]);\\n\\t\\tawait ns.scp(scripts, home, servers[entry]);\\n\\t\\t//await ns.scp(\\\"setup.ns\\\", home, servers[entry]);\\n\\t}\\n\\n\\t/** \\n\\t * \\tAttempts to take over target machine\\t\\n\\t * \\n\\t *  @param {string} tar\\n\\t *  @return {boolean} outcome \\n\\t**/\\n\\tasync function takeover(tar) {\\n\\t\\tlet currentTarget = tar;\\n\\t\\tlet isNotTakenOver = true;\\n\\t\\tlet attemptCounter = 0;\\n\\n\\t\\tif (ns.getServerNumPortsRequired <= 5 && attemptCounter < 50) {\\n\\t\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\n\\t\\t\\t\\tattemptCounter++;\\n\\t\\t\\t}\\n\\n\\t\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.15,\"server\":\"aerocorp\",\"moduleSequenceNumber\":950,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}}],\"serversOnNetwork\":[\"aevum-police\",\"omnia\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":85,\"hackDifficulty\":85,\"minDifficulty\":28,\"moneyAvailable\":1073237913,\"moneyMax\":26830947825,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":908,\"serverGrowth\":59}},\"omnia\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omnia\",\"httpPortOpen\":true,\"ip\":\"57.1.3.8\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"history-of-synthoids.lit\"],\"organizationName\":\"Omnia Cybersystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Returns an array of all hostnames in the network tree\\n * \\n * @param {string[]} myServers\\n * @param {number} safetyCounter Prevents infnite recursion\\n * @param {NS} ns\\n */\\nexport async function getServerList(myServers, safetyCounter, ns) {\\n\\tlet srvrsSeen = myServers;\\n\\tlet currServScanResult = [];\\n\\n\\tfor (let serverSeen in srvrsSeen) {\\n\\t\\tcurrServScanResult = ns.scan(srvrsSeen[serverSeen]);\\n\\t\\tfor (let entry in currServScanResult) {\\n\\t\\t\\tif (!srvrsSeen.includes(currServScanResult[entry])) {\\n\\t\\t\\t\\tsrvrsSeen.push(currServScanResult[entry]);\\n\\t\\t\\t\\tif ((++safetyCounter) < 250) {\\n\\t\\t\\t\\t\\tawait getServerList(srvrsSeen, safetyCounter, ns);\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tns.exit();\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\t//Filter out invalid values (NaN, null, {}, undefined)\\n\\tsrvrsSeen = srvrsSeen.filter(x => x);\\n\\treturn srvrsSeen;\\n}\\n\\n\\n/** \\n * \\tAttempts to take over target machine\\t\\n * \\n *  @param {string} target\\n * \\t@param {NS} ns\\n *  @return {boolean} outcome \\n**/\\nexport async function takeover(target, ns) {\\n\\tconst home = \\\"home\\\";\\n\\tlet currentTarget = target;\\n\\tlet isNotTakenOver = true;\\n\\tlet attemptCounter = 0;\\n\\n\\tlet scripts = ns.ls(home, \\\".js\\\");\\n\\t//scripts.push(ns.ls(home, \\\".ns\\\")); //in case of deprecated .ns scripts\\n\\n\\tns.tprint(scripts);\\n\\n\\n\\tif (!ns.hasRootAccess(currentTarget) && attemptCounter < 30) {\\n\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\ttry {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t} catch (error) {\\n\\t\\t\\t\\t\\tns.tprint(\\\"not enough ports to nuke \\\" + currentTarget);\\n\\t\\t\\t\\t\\treturn false;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t}\\n\\t\\t\\tattemptCounter++;\\n\\t\\t}\\n\\n\\t\\tawait ns.scp(scripts, home, currentTarget);\\n\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\",\"filename\":\"/modules/helper.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"omnia\",\"moduleSequenceNumber\":951,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.grow(target);\\n\\t}\\n}\",\"filename\":\"basic-grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"omnia\",\"moduleSequenceNumber\":952,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"basic-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"omnia\",\"moduleSequenceNumber\":953,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(target);\\n\\t}\\n}\",\"filename\":\"basic-weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"omnia\",\"moduleSequenceNumber\":954,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerList, takeover } from \\\"modules/helper.js\\\";\\n\\n/** @param {NS} ns **/\\n// TODO: unused + unfinished, based on setup.ns\\nexport async function main(ns) {\\n\\tconst myServers = [\\\"home\\\"];\\n\\n\\tvar servers = await getServerList(myServers, 0, ns);\\n\\n\\tfor (let entry in servers) {\\t\\n\\t\\tawait takeover(servers[entry], ns);\\n\\t}\\n}\",\"filename\":\"deep-setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"omnia\",\"moduleSequenceNumber\":955,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\t//\\n}\",\"filename\":\"formulas-testing.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"omnia\",\"moduleSequenceNumber\":956,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tconst currentMachine = ns.getHostname();\\n\\tvar servers = ns.scan(currentMachine);\\n\\tvar scripts = ns.ls(home, \\\"basic-\\\");\\n\\n\\tns.tprint(\\\"Host:  \\\" + currentMachine);\\n\\tfor (let entry in servers) {\\t// depth 0\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\t// depth 1\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== home && subservers.length > 1) {\\n\\t\\t\\t\\tns.tprint(\\\"-----> \\\" + subservers[subentry]);\\n\\t\\t\\t\\tlet subserversd2 = ns.scan(subservers[subentry]); // depth 2\\n\\t\\t\\t\\tfor (let subentryd2 in subserversd2) {\\n\\t\\t\\t\\t\\tif (subserversd2[subentryd2] !== subservers[subentry] && subserversd2[subentryd2] !== servers[entry] && subserversd2.length > 1) {\\n\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------> \\\" + subserversd2[subentryd2]);\\n\\t\\t\\t\\t\\t\\tlet subserversd3 = ns.scan(subserversd2[subentryd2]);\\t// depth 3\\n\\t\\t\\t\\t\\t\\tfor (let subentryd3 in subserversd3) {\\n\\t\\t\\t\\t\\t\\t\\tif (subserversd3[subentryd3] !== subserversd2[subentryd2] && subserversd3[subentryd3] !== subservers[subentry] && subserversd3.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------> \\\" + subserversd3[subentryd3]);\\n\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd4 = ns.scan(subserversd3[subentryd3]);\\t// depth 4\\n\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd4 in subserversd4) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd4[subentryd4] !== subserversd3[subentryd3] && subserversd4[subentryd4] !== subserversd2[subentryd2] && subserversd4.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------------> \\\" + subserversd4[subentryd4]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd5 = ns.scan(subserversd4[subentryd4]);\\t// depth 5\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd5 in subserversd5) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd5[subentryd5] !== subserversd4[subentryd4] && subserversd5[subentryd5] !== subserversd3[subentryd3] && subserversd5.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-------------------------> \\\" + subserversd5[subentryd5]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd6 = ns.scan(subserversd5[subentryd5]);\\t// depth 6\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd6 in subserversd6) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd6[subentryd6] !== subserversd5[subentryd5] && subserversd6[subentryd6] !== subserversd4[subentryd4] && subserversd6.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"------------------------------> \\\" + subserversd6[subentryd6]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd7 = ns.scan(subserversd6[subentryd6]);\\t// depth 7\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor(let subentryd7 in subserversd7) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd7[subentryd7] !== subserversd6[subentryd6] && subserversd7[subentryd7] !== subserversd5[subentryd5] && subserversd7.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-----------------------------------> \\\" + subserversd7[subentryd7]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"gigascan.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.05,\"server\":\"omnia\",\"moduleSequenceNumber\":957,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet targetRam = ns.getServerMaxRam(ns.args[0]);\\n\\tlet scriptMem = ns.getScriptRam(ns.args[1]);\\n\\n\\tns.tprint(\\\"Maximum possible threads for \\\" + ns.args[1] + \\\": \\\" + Math.floor(targetRam / scriptMem));\\n\\tns.exit;\\n}\",\"filename\":\"ram-usage.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"omnia\",\"moduleSequenceNumber\":958,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerList } from \\\"modules/helper.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet serversSeen = [\\\"home\\\"]; // home + bought servers\\n\\tlet contractList = [];\\n\\n\\tserversSeen = await getServerList(serversSeen, 0, ns);\\n\\n\\tns.tprint(serversSeen);\\n}\",\"filename\":\"search-coding-contracts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"omnia\",\"moduleSequenceNumber\":959,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tvar servers = ns.scan(home);\\n\\tvar scripts = ns.ls(home, \\\".ns\\\");\\n\\n\\tfor (let entry in scripts) {\\n\\t\\tns.tprint(\\\"found script: \\\" + scripts[entry]);\\n\\t}\\n\\n\\t// Hack servers (!!! depth = 2 !!!) if needed and populate with scripts\\n\\tfor (let entry in servers) {\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== \\\"home\\\") {\\n\\t\\t\\t\\tns.tprint(\\\"----->   \\\" + subservers[subentry]);\\n\\t\\t\\t\\tif (!ns.hasRootAccess(subservers[subentry])) {\\n\\t\\t\\t\\t\\ttakeover(subservers[subentry]);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tns.tprint(\\\"copying scripts to \\\" + subservers[subentry]);\\n\\t\\t\\t\\tawait ns.scp(scripts, home, subservers[subentry]);\\n\\t\\t\\t\\t//await ns.scp(\\\"setup.ns\\\", home, subservers[subentry]);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (!ns.hasRootAccess(servers[entry])) {\\n\\t\\t\\ttakeover(servers[entry]);\\n\\t\\t}\\n\\t\\tns.tprint(\\\"copying scripts to \\\" + servers[entry]);\\n\\t\\tawait ns.scp(scripts, home, servers[entry]);\\n\\t\\t//await ns.scp(\\\"setup.ns\\\", home, servers[entry]);\\n\\t}\\n\\n\\t/** \\n\\t * \\tAttempts to take over target machine\\t\\n\\t * \\n\\t *  @param {string} tar\\n\\t *  @return {boolean} outcome \\n\\t**/\\n\\tasync function takeover(tar) {\\n\\t\\tlet currentTarget = tar;\\n\\t\\tlet isNotTakenOver = true;\\n\\t\\tlet attemptCounter = 0;\\n\\n\\t\\tif (ns.getServerNumPortsRequired <= 5 && attemptCounter < 50) {\\n\\t\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\n\\t\\t\\t\\tattemptCounter++;\\n\\t\\t\\t}\\n\\n\\t\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.15,\"server\":\"omnia\",\"moduleSequenceNumber\":960,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}}],\"serversOnNetwork\":[\"aerocorp\",\"univ-energy\",\"solaris\",\"zeus-med\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":85,\"hackDifficulty\":85,\"minDifficulty\":28,\"moneyAvailable\":929270097,\"moneyMax\":23231752425,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":852,\"serverGrowth\":64}},\"zb-def\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zb-def\",\"httpPortOpen\":true,\"ip\":\"48.9.1.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"ZB Defense Industries\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Returns an array of all hostnames in the network tree\\n * \\n * @param {string[]} myServers\\n * @param {number} safetyCounter Prevents infnite recursion\\n * @param {NS} ns\\n */\\nexport async function getServerList(myServers, safetyCounter, ns) {\\n\\tlet srvrsSeen = myServers;\\n\\tlet currServScanResult = [];\\n\\n\\tfor (let serverSeen in srvrsSeen) {\\n\\t\\tcurrServScanResult = ns.scan(srvrsSeen[serverSeen]);\\n\\t\\tfor (let entry in currServScanResult) {\\n\\t\\t\\tif (!srvrsSeen.includes(currServScanResult[entry])) {\\n\\t\\t\\t\\tsrvrsSeen.push(currServScanResult[entry]);\\n\\t\\t\\t\\tif ((++safetyCounter) < 250) {\\n\\t\\t\\t\\t\\tawait getServerList(srvrsSeen, safetyCounter, ns);\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tns.exit();\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\t//Filter out invalid values (NaN, null, {}, undefined)\\n\\tsrvrsSeen = srvrsSeen.filter(x => x);\\n\\treturn srvrsSeen;\\n}\\n\\n\\n/** \\n * \\tAttempts to take over target machine\\t\\n * \\n *  @param {string} target\\n * \\t@param {NS} ns\\n *  @return {boolean} outcome \\n**/\\nexport async function takeover(target, ns) {\\n\\tconst home = \\\"home\\\";\\n\\tlet currentTarget = target;\\n\\tlet isNotTakenOver = true;\\n\\tlet attemptCounter = 0;\\n\\n\\tlet scripts = ns.ls(home, \\\".js\\\");\\n\\t//scripts.push(ns.ls(home, \\\".ns\\\")); //in case of deprecated .ns scripts\\n\\n\\tns.tprint(scripts);\\n\\n\\n\\tif (!ns.hasRootAccess(currentTarget) && attemptCounter < 30) {\\n\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\ttry {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t} catch (error) {\\n\\t\\t\\t\\t\\tns.tprint(\\\"not enough ports to nuke \\\" + currentTarget);\\n\\t\\t\\t\\t\\treturn false;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t}\\n\\t\\t\\tattemptCounter++;\\n\\t\\t}\\n\\n\\t\\tawait ns.scp(scripts, home, currentTarget);\\n\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\",\"filename\":\"/modules/helper.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"zb-def\",\"moduleSequenceNumber\":961,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.grow(target);\\n\\t}\\n}\",\"filename\":\"basic-grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zb-def\",\"moduleSequenceNumber\":962,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"basic-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"zb-def\",\"moduleSequenceNumber\":963,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(target);\\n\\t}\\n}\",\"filename\":\"basic-weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zb-def\",\"moduleSequenceNumber\":964,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerList, takeover } from \\\"modules/helper.js\\\";\\n\\n/** @param {NS} ns **/\\n// TODO: unused + unfinished, based on setup.ns\\nexport async function main(ns) {\\n\\tconst myServers = [\\\"home\\\"];\\n\\n\\tvar servers = await getServerList(myServers, 0, ns);\\n\\n\\tfor (let entry in servers) {\\t\\n\\t\\tawait takeover(servers[entry], ns);\\n\\t}\\n}\",\"filename\":\"deep-setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"zb-def\",\"moduleSequenceNumber\":965,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\t//\\n}\",\"filename\":\"formulas-testing.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"zb-def\",\"moduleSequenceNumber\":966,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tconst currentMachine = ns.getHostname();\\n\\tvar servers = ns.scan(currentMachine);\\n\\tvar scripts = ns.ls(home, \\\"basic-\\\");\\n\\n\\tns.tprint(\\\"Host:  \\\" + currentMachine);\\n\\tfor (let entry in servers) {\\t// depth 0\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\t// depth 1\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== home && subservers.length > 1) {\\n\\t\\t\\t\\tns.tprint(\\\"-----> \\\" + subservers[subentry]);\\n\\t\\t\\t\\tlet subserversd2 = ns.scan(subservers[subentry]); // depth 2\\n\\t\\t\\t\\tfor (let subentryd2 in subserversd2) {\\n\\t\\t\\t\\t\\tif (subserversd2[subentryd2] !== subservers[subentry] && subserversd2[subentryd2] !== servers[entry] && subserversd2.length > 1) {\\n\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------> \\\" + subserversd2[subentryd2]);\\n\\t\\t\\t\\t\\t\\tlet subserversd3 = ns.scan(subserversd2[subentryd2]);\\t// depth 3\\n\\t\\t\\t\\t\\t\\tfor (let subentryd3 in subserversd3) {\\n\\t\\t\\t\\t\\t\\t\\tif (subserversd3[subentryd3] !== subserversd2[subentryd2] && subserversd3[subentryd3] !== subservers[subentry] && subserversd3.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------> \\\" + subserversd3[subentryd3]);\\n\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd4 = ns.scan(subserversd3[subentryd3]);\\t// depth 4\\n\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd4 in subserversd4) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd4[subentryd4] !== subserversd3[subentryd3] && subserversd4[subentryd4] !== subserversd2[subentryd2] && subserversd4.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------------> \\\" + subserversd4[subentryd4]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd5 = ns.scan(subserversd4[subentryd4]);\\t// depth 5\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd5 in subserversd5) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd5[subentryd5] !== subserversd4[subentryd4] && subserversd5[subentryd5] !== subserversd3[subentryd3] && subserversd5.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-------------------------> \\\" + subserversd5[subentryd5]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd6 = ns.scan(subserversd5[subentryd5]);\\t// depth 6\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd6 in subserversd6) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd6[subentryd6] !== subserversd5[subentryd5] && subserversd6[subentryd6] !== subserversd4[subentryd4] && subserversd6.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"------------------------------> \\\" + subserversd6[subentryd6]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd7 = ns.scan(subserversd6[subentryd6]);\\t// depth 7\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor(let subentryd7 in subserversd7) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd7[subentryd7] !== subserversd6[subentryd6] && subserversd7[subentryd7] !== subserversd5[subentryd5] && subserversd7.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-----------------------------------> \\\" + subserversd7[subentryd7]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"gigascan.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.05,\"server\":\"zb-def\",\"moduleSequenceNumber\":967,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet targetRam = ns.getServerMaxRam(ns.args[0]);\\n\\tlet scriptMem = ns.getScriptRam(ns.args[1]);\\n\\n\\tns.tprint(\\\"Maximum possible threads for \\\" + ns.args[1] + \\\": \\\" + Math.floor(targetRam / scriptMem));\\n\\tns.exit;\\n}\",\"filename\":\"ram-usage.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zb-def\",\"moduleSequenceNumber\":968,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerList } from \\\"modules/helper.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet serversSeen = [\\\"home\\\"]; // home + bought servers\\n\\tlet contractList = [];\\n\\n\\tserversSeen = await getServerList(serversSeen, 0, ns);\\n\\n\\tns.tprint(serversSeen);\\n}\",\"filename\":\"search-coding-contracts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"zb-def\",\"moduleSequenceNumber\":969,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tvar servers = ns.scan(home);\\n\\tvar scripts = ns.ls(home, \\\".ns\\\");\\n\\n\\tfor (let entry in scripts) {\\n\\t\\tns.tprint(\\\"found script: \\\" + scripts[entry]);\\n\\t}\\n\\n\\t// Hack servers (!!! depth = 2 !!!) if needed and populate with scripts\\n\\tfor (let entry in servers) {\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== \\\"home\\\") {\\n\\t\\t\\t\\tns.tprint(\\\"----->   \\\" + subservers[subentry]);\\n\\t\\t\\t\\tif (!ns.hasRootAccess(subservers[subentry])) {\\n\\t\\t\\t\\t\\ttakeover(subservers[subentry]);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tns.tprint(\\\"copying scripts to \\\" + subservers[subentry]);\\n\\t\\t\\t\\tawait ns.scp(scripts, home, subservers[subentry]);\\n\\t\\t\\t\\t//await ns.scp(\\\"setup.ns\\\", home, subservers[subentry]);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (!ns.hasRootAccess(servers[entry])) {\\n\\t\\t\\ttakeover(servers[entry]);\\n\\t\\t}\\n\\t\\tns.tprint(\\\"copying scripts to \\\" + servers[entry]);\\n\\t\\tawait ns.scp(scripts, home, servers[entry]);\\n\\t\\t//await ns.scp(\\\"setup.ns\\\", home, servers[entry]);\\n\\t}\\n\\n\\t/** \\n\\t * \\tAttempts to take over target machine\\t\\n\\t * \\n\\t *  @param {string} tar\\n\\t *  @return {boolean} outcome \\n\\t**/\\n\\tasync function takeover(tar) {\\n\\t\\tlet currentTarget = tar;\\n\\t\\tlet isNotTakenOver = true;\\n\\t\\tlet attemptCounter = 0;\\n\\n\\t\\tif (ns.getServerNumPortsRequired <= 5 && attemptCounter < 50) {\\n\\t\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\n\\t\\t\\t\\tattemptCounter++;\\n\\t\\t\\t}\\n\\n\\t\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.15,\"server\":\"zb-def\",\"moduleSequenceNumber\":970,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}}],\"serversOnNetwork\":[\"solaris\",\"titan-labs\",\"microdyne\",\"run4theh111z\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":62,\"hackDifficulty\":62,\"minDifficulty\":21,\"moneyAvailable\":924984982,\"moneyMax\":23124624550,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":824,\"serverGrowth\":69}},\"applied-energetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"applied-energetics\",\"httpPortOpen\":true,\"ip\":\"36.1.5.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Applied Energetics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Returns an array of all hostnames in the network tree\\n * \\n * @param {string[]} myServers\\n * @param {number} safetyCounter Prevents infnite recursion\\n * @param {NS} ns\\n */\\nexport async function getServerList(myServers, safetyCounter, ns) {\\n\\tlet srvrsSeen = myServers;\\n\\tlet currServScanResult = [];\\n\\n\\tfor (let serverSeen in srvrsSeen) {\\n\\t\\tcurrServScanResult = ns.scan(srvrsSeen[serverSeen]);\\n\\t\\tfor (let entry in currServScanResult) {\\n\\t\\t\\tif (!srvrsSeen.includes(currServScanResult[entry])) {\\n\\t\\t\\t\\tsrvrsSeen.push(currServScanResult[entry]);\\n\\t\\t\\t\\tif ((++safetyCounter) < 250) {\\n\\t\\t\\t\\t\\tawait getServerList(srvrsSeen, safetyCounter, ns);\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tns.exit();\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\t//Filter out invalid values (NaN, null, {}, undefined)\\n\\tsrvrsSeen = srvrsSeen.filter(x => x);\\n\\treturn srvrsSeen;\\n}\\n\\n\\n/** \\n * \\tAttempts to take over target machine\\t\\n * \\n *  @param {string} target\\n * \\t@param {NS} ns\\n *  @return {boolean} outcome \\n**/\\nexport async function takeover(target, ns) {\\n\\tconst home = \\\"home\\\";\\n\\tlet currentTarget = target;\\n\\tlet isNotTakenOver = true;\\n\\tlet attemptCounter = 0;\\n\\n\\tlet scripts = ns.ls(home, \\\".js\\\");\\n\\t//scripts.push(ns.ls(home, \\\".ns\\\")); //in case of deprecated .ns scripts\\n\\n\\tns.tprint(scripts);\\n\\n\\n\\tif (!ns.hasRootAccess(currentTarget) && attemptCounter < 30) {\\n\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\ttry {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t} catch (error) {\\n\\t\\t\\t\\t\\tns.tprint(\\\"not enough ports to nuke \\\" + currentTarget);\\n\\t\\t\\t\\t\\treturn false;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t}\\n\\t\\t\\tattemptCounter++;\\n\\t\\t}\\n\\n\\t\\tawait ns.scp(scripts, home, currentTarget);\\n\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\",\"filename\":\"/modules/helper.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"applied-energetics\",\"moduleSequenceNumber\":971,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.grow(target);\\n\\t}\\n}\",\"filename\":\"basic-grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"applied-energetics\",\"moduleSequenceNumber\":972,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"basic-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"applied-energetics\",\"moduleSequenceNumber\":973,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(target);\\n\\t}\\n}\",\"filename\":\"basic-weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"applied-energetics\",\"moduleSequenceNumber\":974,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerList, takeover } from \\\"modules/helper.js\\\";\\n\\n/** @param {NS} ns **/\\n// TODO: unused + unfinished, based on setup.ns\\nexport async function main(ns) {\\n\\tconst myServers = [\\\"home\\\"];\\n\\n\\tvar servers = await getServerList(myServers, 0, ns);\\n\\n\\tfor (let entry in servers) {\\t\\n\\t\\tawait takeover(servers[entry], ns);\\n\\t}\\n}\",\"filename\":\"deep-setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"applied-energetics\",\"moduleSequenceNumber\":975,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\t//\\n}\",\"filename\":\"formulas-testing.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"applied-energetics\",\"moduleSequenceNumber\":976,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tconst currentMachine = ns.getHostname();\\n\\tvar servers = ns.scan(currentMachine);\\n\\tvar scripts = ns.ls(home, \\\"basic-\\\");\\n\\n\\tns.tprint(\\\"Host:  \\\" + currentMachine);\\n\\tfor (let entry in servers) {\\t// depth 0\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\t// depth 1\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== home && subservers.length > 1) {\\n\\t\\t\\t\\tns.tprint(\\\"-----> \\\" + subservers[subentry]);\\n\\t\\t\\t\\tlet subserversd2 = ns.scan(subservers[subentry]); // depth 2\\n\\t\\t\\t\\tfor (let subentryd2 in subserversd2) {\\n\\t\\t\\t\\t\\tif (subserversd2[subentryd2] !== subservers[subentry] && subserversd2[subentryd2] !== servers[entry] && subserversd2.length > 1) {\\n\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------> \\\" + subserversd2[subentryd2]);\\n\\t\\t\\t\\t\\t\\tlet subserversd3 = ns.scan(subserversd2[subentryd2]);\\t// depth 3\\n\\t\\t\\t\\t\\t\\tfor (let subentryd3 in subserversd3) {\\n\\t\\t\\t\\t\\t\\t\\tif (subserversd3[subentryd3] !== subserversd2[subentryd2] && subserversd3[subentryd3] !== subservers[subentry] && subserversd3.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------> \\\" + subserversd3[subentryd3]);\\n\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd4 = ns.scan(subserversd3[subentryd3]);\\t// depth 4\\n\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd4 in subserversd4) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd4[subentryd4] !== subserversd3[subentryd3] && subserversd4[subentryd4] !== subserversd2[subentryd2] && subserversd4.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------------> \\\" + subserversd4[subentryd4]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd5 = ns.scan(subserversd4[subentryd4]);\\t// depth 5\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd5 in subserversd5) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd5[subentryd5] !== subserversd4[subentryd4] && subserversd5[subentryd5] !== subserversd3[subentryd3] && subserversd5.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-------------------------> \\\" + subserversd5[subentryd5]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd6 = ns.scan(subserversd5[subentryd5]);\\t// depth 6\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd6 in subserversd6) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd6[subentryd6] !== subserversd5[subentryd5] && subserversd6[subentryd6] !== subserversd4[subentryd4] && subserversd6.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"------------------------------> \\\" + subserversd6[subentryd6]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd7 = ns.scan(subserversd6[subentryd6]);\\t// depth 7\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor(let subentryd7 in subserversd7) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd7[subentryd7] !== subserversd6[subentryd6] && subserversd7[subentryd7] !== subserversd5[subentryd5] && subserversd7.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-----------------------------------> \\\" + subserversd7[subentryd7]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"gigascan.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.05,\"server\":\"applied-energetics\",\"moduleSequenceNumber\":977,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet targetRam = ns.getServerMaxRam(ns.args[0]);\\n\\tlet scriptMem = ns.getScriptRam(ns.args[1]);\\n\\n\\tns.tprint(\\\"Maximum possible threads for \\\" + ns.args[1] + \\\": \\\" + Math.floor(targetRam / scriptMem));\\n\\tns.exit;\\n}\",\"filename\":\"ram-usage.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"applied-energetics\",\"moduleSequenceNumber\":978,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerList } from \\\"modules/helper.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet serversSeen = [\\\"home\\\"]; // home + bought servers\\n\\tlet contractList = [];\\n\\n\\tserversSeen = await getServerList(serversSeen, 0, ns);\\n\\n\\tns.tprint(serversSeen);\\n}\",\"filename\":\"search-coding-contracts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"applied-energetics\",\"moduleSequenceNumber\":979,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tvar servers = ns.scan(home);\\n\\tvar scripts = ns.ls(home, \\\".ns\\\");\\n\\n\\tfor (let entry in scripts) {\\n\\t\\tns.tprint(\\\"found script: \\\" + scripts[entry]);\\n\\t}\\n\\n\\t// Hack servers (!!! depth = 2 !!!) if needed and populate with scripts\\n\\tfor (let entry in servers) {\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== \\\"home\\\") {\\n\\t\\t\\t\\tns.tprint(\\\"----->   \\\" + subservers[subentry]);\\n\\t\\t\\t\\tif (!ns.hasRootAccess(subservers[subentry])) {\\n\\t\\t\\t\\t\\ttakeover(subservers[subentry]);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tns.tprint(\\\"copying scripts to \\\" + subservers[subentry]);\\n\\t\\t\\t\\tawait ns.scp(scripts, home, subservers[subentry]);\\n\\t\\t\\t\\t//await ns.scp(\\\"setup.ns\\\", home, subservers[subentry]);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (!ns.hasRootAccess(servers[entry])) {\\n\\t\\t\\ttakeover(servers[entry]);\\n\\t\\t}\\n\\t\\tns.tprint(\\\"copying scripts to \\\" + servers[entry]);\\n\\t\\tawait ns.scp(scripts, home, servers[entry]);\\n\\t\\t//await ns.scp(\\\"setup.ns\\\", home, servers[entry]);\\n\\t}\\n\\n\\t/** \\n\\t * \\tAttempts to take over target machine\\t\\n\\t * \\n\\t *  @param {string} tar\\n\\t *  @return {boolean} outcome \\n\\t**/\\n\\tasync function takeover(tar) {\\n\\t\\tlet currentTarget = tar;\\n\\t\\tlet isNotTakenOver = true;\\n\\t\\tlet attemptCounter = 0;\\n\\n\\t\\tif (ns.getServerNumPortsRequired <= 5 && attemptCounter < 50) {\\n\\t\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\n\\t\\t\\t\\tattemptCounter++;\\n\\t\\t\\t}\\n\\n\\t\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.15,\"server\":\"applied-energetics\",\"moduleSequenceNumber\":980,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}}],\"serversOnNetwork\":[\"nova-med\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":76,\"hackDifficulty\":76,\"minDifficulty\":25,\"moneyAvailable\":755921521,\"moneyMax\":18898038025,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":797,\"serverGrowth\":73}},\"solaris\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-897734.cct\",\"type\":\"Algorithmic Stock Trader II\",\"data\":[137,154,175,89,29,148,193,113,85,160,153,120,108,149,16,153,122,181,8,173,22,5,94,84,156,99,12,187,192,60,45,74,117,157,177,34,174,12,46,142,142,21,188,112,115,149],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"solaris\",\"httpPortOpen\":true,\"ip\":\"76.0.9.6\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"A-Green-Tomorrow.lit\",\"the-failed-frontier.lit\"],\"organizationName\":\"Solaris Space Systems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Returns an array of all hostnames in the network tree\\n * \\n * @param {string[]} myServers\\n * @param {number} safetyCounter Prevents infnite recursion\\n * @param {NS} ns\\n */\\nexport async function getServerList(myServers, safetyCounter, ns) {\\n\\tlet srvrsSeen = myServers;\\n\\tlet currServScanResult = [];\\n\\n\\tfor (let serverSeen in srvrsSeen) {\\n\\t\\tcurrServScanResult = ns.scan(srvrsSeen[serverSeen]);\\n\\t\\tfor (let entry in currServScanResult) {\\n\\t\\t\\tif (!srvrsSeen.includes(currServScanResult[entry])) {\\n\\t\\t\\t\\tsrvrsSeen.push(currServScanResult[entry]);\\n\\t\\t\\t\\tif ((++safetyCounter) < 250) {\\n\\t\\t\\t\\t\\tawait getServerList(srvrsSeen, safetyCounter, ns);\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tns.exit();\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\t//Filter out invalid values (NaN, null, {}, undefined)\\n\\tsrvrsSeen = srvrsSeen.filter(x => x);\\n\\treturn srvrsSeen;\\n}\\n\\n\\n/** \\n * \\tAttempts to take over target machine\\t\\n * \\n *  @param {string} target\\n * \\t@param {NS} ns\\n *  @return {boolean} outcome \\n**/\\nexport async function takeover(target, ns) {\\n\\tconst home = \\\"home\\\";\\n\\tlet currentTarget = target;\\n\\tlet isNotTakenOver = true;\\n\\tlet attemptCounter = 0;\\n\\n\\tlet scripts = ns.ls(home, \\\".js\\\");\\n\\t//scripts.push(ns.ls(home, \\\".ns\\\")); //in case of deprecated .ns scripts\\n\\n\\tns.tprint(scripts);\\n\\n\\n\\tif (!ns.hasRootAccess(currentTarget) && attemptCounter < 30) {\\n\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\ttry {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t} catch (error) {\\n\\t\\t\\t\\t\\tns.tprint(\\\"not enough ports to nuke \\\" + currentTarget);\\n\\t\\t\\t\\t\\treturn false;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t}\\n\\t\\t\\tattemptCounter++;\\n\\t\\t}\\n\\n\\t\\tawait ns.scp(scripts, home, currentTarget);\\n\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\",\"filename\":\"/modules/helper.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"solaris\",\"moduleSequenceNumber\":981,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.grow(target);\\n\\t}\\n}\",\"filename\":\"basic-grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"solaris\",\"moduleSequenceNumber\":982,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"basic-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"solaris\",\"moduleSequenceNumber\":983,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(target);\\n\\t}\\n}\",\"filename\":\"basic-weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"solaris\",\"moduleSequenceNumber\":984,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerList, takeover } from \\\"modules/helper.js\\\";\\n\\n/** @param {NS} ns **/\\n// TODO: unused + unfinished, based on setup.ns\\nexport async function main(ns) {\\n\\tconst myServers = [\\\"home\\\"];\\n\\n\\tvar servers = await getServerList(myServers, 0, ns);\\n\\n\\tfor (let entry in servers) {\\t\\n\\t\\tawait takeover(servers[entry], ns);\\n\\t}\\n}\",\"filename\":\"deep-setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"solaris\",\"moduleSequenceNumber\":985,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\t//\\n}\",\"filename\":\"formulas-testing.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"solaris\",\"moduleSequenceNumber\":986,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tconst currentMachine = ns.getHostname();\\n\\tvar servers = ns.scan(currentMachine);\\n\\tvar scripts = ns.ls(home, \\\"basic-\\\");\\n\\n\\tns.tprint(\\\"Host:  \\\" + currentMachine);\\n\\tfor (let entry in servers) {\\t// depth 0\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\t// depth 1\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== home && subservers.length > 1) {\\n\\t\\t\\t\\tns.tprint(\\\"-----> \\\" + subservers[subentry]);\\n\\t\\t\\t\\tlet subserversd2 = ns.scan(subservers[subentry]); // depth 2\\n\\t\\t\\t\\tfor (let subentryd2 in subserversd2) {\\n\\t\\t\\t\\t\\tif (subserversd2[subentryd2] !== subservers[subentry] && subserversd2[subentryd2] !== servers[entry] && subserversd2.length > 1) {\\n\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------> \\\" + subserversd2[subentryd2]);\\n\\t\\t\\t\\t\\t\\tlet subserversd3 = ns.scan(subserversd2[subentryd2]);\\t// depth 3\\n\\t\\t\\t\\t\\t\\tfor (let subentryd3 in subserversd3) {\\n\\t\\t\\t\\t\\t\\t\\tif (subserversd3[subentryd3] !== subserversd2[subentryd2] && subserversd3[subentryd3] !== subservers[subentry] && subserversd3.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------> \\\" + subserversd3[subentryd3]);\\n\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd4 = ns.scan(subserversd3[subentryd3]);\\t// depth 4\\n\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd4 in subserversd4) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd4[subentryd4] !== subserversd3[subentryd3] && subserversd4[subentryd4] !== subserversd2[subentryd2] && subserversd4.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------------> \\\" + subserversd4[subentryd4]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd5 = ns.scan(subserversd4[subentryd4]);\\t// depth 5\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd5 in subserversd5) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd5[subentryd5] !== subserversd4[subentryd4] && subserversd5[subentryd5] !== subserversd3[subentryd3] && subserversd5.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-------------------------> \\\" + subserversd5[subentryd5]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd6 = ns.scan(subserversd5[subentryd5]);\\t// depth 6\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd6 in subserversd6) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd6[subentryd6] !== subserversd5[subentryd5] && subserversd6[subentryd6] !== subserversd4[subentryd4] && subserversd6.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"------------------------------> \\\" + subserversd6[subentryd6]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd7 = ns.scan(subserversd6[subentryd6]);\\t// depth 7\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor(let subentryd7 in subserversd7) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd7[subentryd7] !== subserversd6[subentryd6] && subserversd7[subentryd7] !== subserversd5[subentryd5] && subserversd7.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-----------------------------------> \\\" + subserversd7[subentryd7]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"gigascan.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.05,\"server\":\"solaris\",\"moduleSequenceNumber\":987,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet targetRam = ns.getServerMaxRam(ns.args[0]);\\n\\tlet scriptMem = ns.getScriptRam(ns.args[1]);\\n\\n\\tns.tprint(\\\"Maximum possible threads for \\\" + ns.args[1] + \\\": \\\" + Math.floor(targetRam / scriptMem));\\n\\tns.exit;\\n}\",\"filename\":\"ram-usage.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"solaris\",\"moduleSequenceNumber\":988,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerList } from \\\"modules/helper.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet serversSeen = [\\\"home\\\"]; // home + bought servers\\n\\tlet contractList = [];\\n\\n\\tserversSeen = await getServerList(serversSeen, 0, ns);\\n\\n\\tns.tprint(serversSeen);\\n}\",\"filename\":\"search-coding-contracts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"solaris\",\"moduleSequenceNumber\":989,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tvar servers = ns.scan(home);\\n\\tvar scripts = ns.ls(home, \\\".ns\\\");\\n\\n\\tfor (let entry in scripts) {\\n\\t\\tns.tprint(\\\"found script: \\\" + scripts[entry]);\\n\\t}\\n\\n\\t// Hack servers (!!! depth = 2 !!!) if needed and populate with scripts\\n\\tfor (let entry in servers) {\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== \\\"home\\\") {\\n\\t\\t\\t\\tns.tprint(\\\"----->   \\\" + subservers[subentry]);\\n\\t\\t\\t\\tif (!ns.hasRootAccess(subservers[subentry])) {\\n\\t\\t\\t\\t\\ttakeover(subservers[subentry]);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tns.tprint(\\\"copying scripts to \\\" + subservers[subentry]);\\n\\t\\t\\t\\tawait ns.scp(scripts, home, subservers[subentry]);\\n\\t\\t\\t\\t//await ns.scp(\\\"setup.ns\\\", home, subservers[subentry]);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (!ns.hasRootAccess(servers[entry])) {\\n\\t\\t\\ttakeover(servers[entry]);\\n\\t\\t}\\n\\t\\tns.tprint(\\\"copying scripts to \\\" + servers[entry]);\\n\\t\\tawait ns.scp(scripts, home, servers[entry]);\\n\\t\\t//await ns.scp(\\\"setup.ns\\\", home, servers[entry]);\\n\\t}\\n\\n\\t/** \\n\\t * \\tAttempts to take over target machine\\t\\n\\t * \\n\\t *  @param {string} tar\\n\\t *  @return {boolean} outcome \\n\\t**/\\n\\tasync function takeover(tar) {\\n\\t\\tlet currentTarget = tar;\\n\\t\\tlet isNotTakenOver = true;\\n\\t\\tlet attemptCounter = 0;\\n\\n\\t\\tif (ns.getServerNumPortsRequired <= 5 && attemptCounter < 50) {\\n\\t\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\n\\t\\t\\t\\tattemptCounter++;\\n\\t\\t\\t}\\n\\n\\t\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.15,\"server\":\"solaris\",\"moduleSequenceNumber\":990,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}}],\"serversOnNetwork\":[\"omnia\",\"taiyang-digital\",\"zb-def\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":77,\"hackDifficulty\":77,\"minDifficulty\":26,\"moneyAvailable\":798429744,\"moneyMax\":19960743600,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":811,\"serverGrowth\":80}},\"deltaone\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-189811.cct\",\"type\":\"Subarray with Maximum Sum\",\"data\":[-9,-6,4,-5,-6,10,6,5,-4,-6,6,0,5,2,7,4,-3,-5,1,-9,9,-5,2,9,-4,-9,5,-2,8,9,9,-6,-5,-8,0,0,9,5,3],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"deltaone\",\"httpPortOpen\":true,\"ip\":\"80.1.5.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DeltaOne\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Returns an array of all hostnames in the network tree\\n * \\n * @param {string[]} myServers\\n * @param {number} safetyCounter Prevents infnite recursion\\n * @param {NS} ns\\n */\\nexport async function getServerList(myServers, safetyCounter, ns) {\\n\\tlet srvrsSeen = myServers;\\n\\tlet currServScanResult = [];\\n\\n\\tfor (let serverSeen in srvrsSeen) {\\n\\t\\tcurrServScanResult = ns.scan(srvrsSeen[serverSeen]);\\n\\t\\tfor (let entry in currServScanResult) {\\n\\t\\t\\tif (!srvrsSeen.includes(currServScanResult[entry])) {\\n\\t\\t\\t\\tsrvrsSeen.push(currServScanResult[entry]);\\n\\t\\t\\t\\tif ((++safetyCounter) < 250) {\\n\\t\\t\\t\\t\\tawait getServerList(srvrsSeen, safetyCounter, ns);\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tns.exit();\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\t//Filter out invalid values (NaN, null, {}, undefined)\\n\\tsrvrsSeen = srvrsSeen.filter(x => x);\\n\\treturn srvrsSeen;\\n}\\n\\n\\n/** \\n * \\tAttempts to take over target machine\\t\\n * \\n *  @param {string} target\\n * \\t@param {NS} ns\\n *  @return {boolean} outcome \\n**/\\nexport async function takeover(target, ns) {\\n\\tconst home = \\\"home\\\";\\n\\tlet currentTarget = target;\\n\\tlet isNotTakenOver = true;\\n\\tlet attemptCounter = 0;\\n\\n\\tlet scripts = ns.ls(home, \\\".js\\\");\\n\\t//scripts.push(ns.ls(home, \\\".ns\\\")); //in case of deprecated .ns scripts\\n\\n\\tns.tprint(scripts);\\n\\n\\n\\tif (!ns.hasRootAccess(currentTarget) && attemptCounter < 30) {\\n\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\ttry {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t} catch (error) {\\n\\t\\t\\t\\t\\tns.tprint(\\\"not enough ports to nuke \\\" + currentTarget);\\n\\t\\t\\t\\t\\treturn false;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t}\\n\\t\\t\\tattemptCounter++;\\n\\t\\t}\\n\\n\\t\\tawait ns.scp(scripts, home, currentTarget);\\n\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\",\"filename\":\"/modules/helper.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"deltaone\",\"moduleSequenceNumber\":991,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.grow(target);\\n\\t}\\n}\",\"filename\":\"basic-grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"deltaone\",\"moduleSequenceNumber\":992,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"basic-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"deltaone\",\"moduleSequenceNumber\":993,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(target);\\n\\t}\\n}\",\"filename\":\"basic-weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"deltaone\",\"moduleSequenceNumber\":994,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerList, takeover } from \\\"modules/helper.js\\\";\\n\\n/** @param {NS} ns **/\\n// TODO: unused + unfinished, based on setup.ns\\nexport async function main(ns) {\\n\\tconst myServers = [\\\"home\\\"];\\n\\n\\tvar servers = await getServerList(myServers, 0, ns);\\n\\n\\tfor (let entry in servers) {\\t\\n\\t\\tawait takeover(servers[entry], ns);\\n\\t}\\n}\",\"filename\":\"deep-setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"deltaone\",\"moduleSequenceNumber\":995,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\t//\\n}\",\"filename\":\"formulas-testing.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"deltaone\",\"moduleSequenceNumber\":996,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tconst currentMachine = ns.getHostname();\\n\\tvar servers = ns.scan(currentMachine);\\n\\tvar scripts = ns.ls(home, \\\"basic-\\\");\\n\\n\\tns.tprint(\\\"Host:  \\\" + currentMachine);\\n\\tfor (let entry in servers) {\\t// depth 0\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\t// depth 1\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== home && subservers.length > 1) {\\n\\t\\t\\t\\tns.tprint(\\\"-----> \\\" + subservers[subentry]);\\n\\t\\t\\t\\tlet subserversd2 = ns.scan(subservers[subentry]); // depth 2\\n\\t\\t\\t\\tfor (let subentryd2 in subserversd2) {\\n\\t\\t\\t\\t\\tif (subserversd2[subentryd2] !== subservers[subentry] && subserversd2[subentryd2] !== servers[entry] && subserversd2.length > 1) {\\n\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------> \\\" + subserversd2[subentryd2]);\\n\\t\\t\\t\\t\\t\\tlet subserversd3 = ns.scan(subserversd2[subentryd2]);\\t// depth 3\\n\\t\\t\\t\\t\\t\\tfor (let subentryd3 in subserversd3) {\\n\\t\\t\\t\\t\\t\\t\\tif (subserversd3[subentryd3] !== subserversd2[subentryd2] && subserversd3[subentryd3] !== subservers[subentry] && subserversd3.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------> \\\" + subserversd3[subentryd3]);\\n\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd4 = ns.scan(subserversd3[subentryd3]);\\t// depth 4\\n\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd4 in subserversd4) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd4[subentryd4] !== subserversd3[subentryd3] && subserversd4[subentryd4] !== subserversd2[subentryd2] && subserversd4.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------------> \\\" + subserversd4[subentryd4]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd5 = ns.scan(subserversd4[subentryd4]);\\t// depth 5\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd5 in subserversd5) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd5[subentryd5] !== subserversd4[subentryd4] && subserversd5[subentryd5] !== subserversd3[subentryd3] && subserversd5.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-------------------------> \\\" + subserversd5[subentryd5]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd6 = ns.scan(subserversd5[subentryd5]);\\t// depth 6\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd6 in subserversd6) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd6[subentryd6] !== subserversd5[subentryd5] && subserversd6[subentryd6] !== subserversd4[subentryd4] && subserversd6.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"------------------------------> \\\" + subserversd6[subentryd6]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd7 = ns.scan(subserversd6[subentryd6]);\\t// depth 7\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor(let subentryd7 in subserversd7) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd7[subentryd7] !== subserversd6[subentryd6] && subserversd7[subentryd7] !== subserversd5[subentryd5] && subserversd7.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-----------------------------------> \\\" + subserversd7[subentryd7]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"gigascan.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.05,\"server\":\"deltaone\",\"moduleSequenceNumber\":997,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet targetRam = ns.getServerMaxRam(ns.args[0]);\\n\\tlet scriptMem = ns.getScriptRam(ns.args[1]);\\n\\n\\tns.tprint(\\\"Maximum possible threads for \\\" + ns.args[1] + \\\": \\\" + Math.floor(targetRam / scriptMem));\\n\\tns.exit;\\n}\",\"filename\":\"ram-usage.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"deltaone\",\"moduleSequenceNumber\":998,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerList } from \\\"modules/helper.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet serversSeen = [\\\"home\\\"]; // home + bought servers\\n\\tlet contractList = [];\\n\\n\\tserversSeen = await getServerList(serversSeen, 0, ns);\\n\\n\\tns.tprint(serversSeen);\\n}\",\"filename\":\"search-coding-contracts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"deltaone\",\"moduleSequenceNumber\":999,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tvar servers = ns.scan(home);\\n\\tvar scripts = ns.ls(home, \\\".ns\\\");\\n\\n\\tfor (let entry in scripts) {\\n\\t\\tns.tprint(\\\"found script: \\\" + scripts[entry]);\\n\\t}\\n\\n\\t// Hack servers (!!! depth = 2 !!!) if needed and populate with scripts\\n\\tfor (let entry in servers) {\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== \\\"home\\\") {\\n\\t\\t\\t\\tns.tprint(\\\"----->   \\\" + subservers[subentry]);\\n\\t\\t\\t\\tif (!ns.hasRootAccess(subservers[subentry])) {\\n\\t\\t\\t\\t\\ttakeover(subservers[subentry]);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tns.tprint(\\\"copying scripts to \\\" + subservers[subentry]);\\n\\t\\t\\t\\tawait ns.scp(scripts, home, subservers[subentry]);\\n\\t\\t\\t\\t//await ns.scp(\\\"setup.ns\\\", home, subservers[subentry]);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (!ns.hasRootAccess(servers[entry])) {\\n\\t\\t\\ttakeover(servers[entry]);\\n\\t\\t}\\n\\t\\tns.tprint(\\\"copying scripts to \\\" + servers[entry]);\\n\\t\\tawait ns.scp(scripts, home, servers[entry]);\\n\\t\\t//await ns.scp(\\\"setup.ns\\\", home, servers[entry]);\\n\\t}\\n\\n\\t/** \\n\\t * \\tAttempts to take over target machine\\t\\n\\t * \\n\\t *  @param {string} tar\\n\\t *  @return {boolean} outcome \\n\\t**/\\n\\tasync function takeover(tar) {\\n\\t\\tlet currentTarget = tar;\\n\\t\\tlet isNotTakenOver = true;\\n\\t\\tlet attemptCounter = 0;\\n\\n\\t\\tif (ns.getServerNumPortsRequired <= 5 && attemptCounter < 50) {\\n\\t\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\n\\t\\t\\t\\tattemptCounter++;\\n\\t\\t\\t}\\n\\n\\t\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.15,\"server\":\"deltaone\",\"moduleSequenceNumber\":1000,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}}],\"serversOnNetwork\":[\"global-pharm\",\"defcomm\",\"icarus\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":77,\"hackDifficulty\":77,\"minDifficulty\":26,\"moneyAvailable\":1479881080,\"moneyMax\":36997027000,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":816,\"serverGrowth\":64}},\"global-pharm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-72502.cct\",\"type\":\"Generate IP Addresses\",\"data\":\"30557072\",\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"global-pharm\",\"httpPortOpen\":true,\"ip\":\"54.0.2.6\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"Global Pharmaceuticals\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Returns an array of all hostnames in the network tree\\n * \\n * @param {string[]} myServers\\n * @param {number} safetyCounter Prevents infnite recursion\\n * @param {NS} ns\\n */\\nexport async function getServerList(myServers, safetyCounter, ns) {\\n\\tlet srvrsSeen = myServers;\\n\\tlet currServScanResult = [];\\n\\n\\tfor (let serverSeen in srvrsSeen) {\\n\\t\\tcurrServScanResult = ns.scan(srvrsSeen[serverSeen]);\\n\\t\\tfor (let entry in currServScanResult) {\\n\\t\\t\\tif (!srvrsSeen.includes(currServScanResult[entry])) {\\n\\t\\t\\t\\tsrvrsSeen.push(currServScanResult[entry]);\\n\\t\\t\\t\\tif ((++safetyCounter) < 250) {\\n\\t\\t\\t\\t\\tawait getServerList(srvrsSeen, safetyCounter, ns);\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tns.exit();\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\t//Filter out invalid values (NaN, null, {}, undefined)\\n\\tsrvrsSeen = srvrsSeen.filter(x => x);\\n\\treturn srvrsSeen;\\n}\\n\\n\\n/** \\n * \\tAttempts to take over target machine\\t\\n * \\n *  @param {string} target\\n * \\t@param {NS} ns\\n *  @return {boolean} outcome \\n**/\\nexport async function takeover(target, ns) {\\n\\tconst home = \\\"home\\\";\\n\\tlet currentTarget = target;\\n\\tlet isNotTakenOver = true;\\n\\tlet attemptCounter = 0;\\n\\n\\tlet scripts = ns.ls(home, \\\".js\\\");\\n\\t//scripts.push(ns.ls(home, \\\".ns\\\")); //in case of deprecated .ns scripts\\n\\n\\tns.tprint(scripts);\\n\\n\\n\\tif (!ns.hasRootAccess(currentTarget) && attemptCounter < 30) {\\n\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\ttry {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t} catch (error) {\\n\\t\\t\\t\\t\\tns.tprint(\\\"not enough ports to nuke \\\" + currentTarget);\\n\\t\\t\\t\\t\\treturn false;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t}\\n\\t\\t\\tattemptCounter++;\\n\\t\\t}\\n\\n\\t\\tawait ns.scp(scripts, home, currentTarget);\\n\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\",\"filename\":\"/modules/helper.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"global-pharm\",\"moduleSequenceNumber\":1001,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.grow(target);\\n\\t}\\n}\",\"filename\":\"basic-grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"global-pharm\",\"moduleSequenceNumber\":1002,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"basic-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"global-pharm\",\"moduleSequenceNumber\":1003,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(target);\\n\\t}\\n}\",\"filename\":\"basic-weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"global-pharm\",\"moduleSequenceNumber\":1004,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerList, takeover } from \\\"modules/helper.js\\\";\\n\\n/** @param {NS} ns **/\\n// TODO: unused + unfinished, based on setup.ns\\nexport async function main(ns) {\\n\\tconst myServers = [\\\"home\\\"];\\n\\n\\tvar servers = await getServerList(myServers, 0, ns);\\n\\n\\tfor (let entry in servers) {\\t\\n\\t\\tawait takeover(servers[entry], ns);\\n\\t}\\n}\",\"filename\":\"deep-setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"global-pharm\",\"moduleSequenceNumber\":1005,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\t//\\n}\",\"filename\":\"formulas-testing.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"global-pharm\",\"moduleSequenceNumber\":1006,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tconst currentMachine = ns.getHostname();\\n\\tvar servers = ns.scan(currentMachine);\\n\\tvar scripts = ns.ls(home, \\\"basic-\\\");\\n\\n\\tns.tprint(\\\"Host:  \\\" + currentMachine);\\n\\tfor (let entry in servers) {\\t// depth 0\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\t// depth 1\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== home && subservers.length > 1) {\\n\\t\\t\\t\\tns.tprint(\\\"-----> \\\" + subservers[subentry]);\\n\\t\\t\\t\\tlet subserversd2 = ns.scan(subservers[subentry]); // depth 2\\n\\t\\t\\t\\tfor (let subentryd2 in subserversd2) {\\n\\t\\t\\t\\t\\tif (subserversd2[subentryd2] !== subservers[subentry] && subserversd2[subentryd2] !== servers[entry] && subserversd2.length > 1) {\\n\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------> \\\" + subserversd2[subentryd2]);\\n\\t\\t\\t\\t\\t\\tlet subserversd3 = ns.scan(subserversd2[subentryd2]);\\t// depth 3\\n\\t\\t\\t\\t\\t\\tfor (let subentryd3 in subserversd3) {\\n\\t\\t\\t\\t\\t\\t\\tif (subserversd3[subentryd3] !== subserversd2[subentryd2] && subserversd3[subentryd3] !== subservers[subentry] && subserversd3.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------> \\\" + subserversd3[subentryd3]);\\n\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd4 = ns.scan(subserversd3[subentryd3]);\\t// depth 4\\n\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd4 in subserversd4) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd4[subentryd4] !== subserversd3[subentryd3] && subserversd4[subentryd4] !== subserversd2[subentryd2] && subserversd4.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------------> \\\" + subserversd4[subentryd4]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd5 = ns.scan(subserversd4[subentryd4]);\\t// depth 5\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd5 in subserversd5) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd5[subentryd5] !== subserversd4[subentryd4] && subserversd5[subentryd5] !== subserversd3[subentryd3] && subserversd5.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-------------------------> \\\" + subserversd5[subentryd5]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd6 = ns.scan(subserversd5[subentryd5]);\\t// depth 6\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd6 in subserversd6) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd6[subentryd6] !== subserversd5[subentryd5] && subserversd6[subentryd6] !== subserversd4[subentryd4] && subserversd6.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"------------------------------> \\\" + subserversd6[subentryd6]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd7 = ns.scan(subserversd6[subentryd6]);\\t// depth 7\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor(let subentryd7 in subserversd7) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd7[subentryd7] !== subserversd6[subentryd6] && subserversd7[subentryd7] !== subserversd5[subentryd5] && subserversd7.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-----------------------------------> \\\" + subserversd7[subentryd7]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"gigascan.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.05,\"server\":\"global-pharm\",\"moduleSequenceNumber\":1007,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet targetRam = ns.getServerMaxRam(ns.args[0]);\\n\\tlet scriptMem = ns.getScriptRam(ns.args[1]);\\n\\n\\tns.tprint(\\\"Maximum possible threads for \\\" + ns.args[1] + \\\": \\\" + Math.floor(targetRam / scriptMem));\\n\\tns.exit;\\n}\",\"filename\":\"ram-usage.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"global-pharm\",\"moduleSequenceNumber\":1008,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerList } from \\\"modules/helper.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet serversSeen = [\\\"home\\\"]; // home + bought servers\\n\\tlet contractList = [];\\n\\n\\tserversSeen = await getServerList(serversSeen, 0, ns);\\n\\n\\tns.tprint(serversSeen);\\n}\",\"filename\":\"search-coding-contracts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"global-pharm\",\"moduleSequenceNumber\":1009,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tvar servers = ns.scan(home);\\n\\tvar scripts = ns.ls(home, \\\".ns\\\");\\n\\n\\tfor (let entry in scripts) {\\n\\t\\tns.tprint(\\\"found script: \\\" + scripts[entry]);\\n\\t}\\n\\n\\t// Hack servers (!!! depth = 2 !!!) if needed and populate with scripts\\n\\tfor (let entry in servers) {\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== \\\"home\\\") {\\n\\t\\t\\t\\tns.tprint(\\\"----->   \\\" + subservers[subentry]);\\n\\t\\t\\t\\tif (!ns.hasRootAccess(subservers[subentry])) {\\n\\t\\t\\t\\t\\ttakeover(subservers[subentry]);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tns.tprint(\\\"copying scripts to \\\" + subservers[subentry]);\\n\\t\\t\\t\\tawait ns.scp(scripts, home, subservers[subentry]);\\n\\t\\t\\t\\t//await ns.scp(\\\"setup.ns\\\", home, subservers[subentry]);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (!ns.hasRootAccess(servers[entry])) {\\n\\t\\t\\ttakeover(servers[entry]);\\n\\t\\t}\\n\\t\\tns.tprint(\\\"copying scripts to \\\" + servers[entry]);\\n\\t\\tawait ns.scp(scripts, home, servers[entry]);\\n\\t\\t//await ns.scp(\\\"setup.ns\\\", home, servers[entry]);\\n\\t}\\n\\n\\t/** \\n\\t * \\tAttempts to take over target machine\\t\\n\\t * \\n\\t *  @param {string} tar\\n\\t *  @return {boolean} outcome \\n\\t**/\\n\\tasync function takeover(tar) {\\n\\t\\tlet currentTarget = tar;\\n\\t\\tlet isNotTakenOver = true;\\n\\t\\tlet attemptCounter = 0;\\n\\n\\t\\tif (ns.getServerNumPortsRequired <= 5 && attemptCounter < 50) {\\n\\t\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\n\\t\\t\\t\\tattemptCounter++;\\n\\t\\t\\t}\\n\\n\\t\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.15,\"server\":\"global-pharm\",\"moduleSequenceNumber\":1010,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}}],\"serversOnNetwork\":[\"rho-construction\",\"deltaone\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":80,\"hackDifficulty\":80,\"minDifficulty\":27,\"moneyAvailable\":1523080328,\"moneyMax\":38077008200,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":763,\"serverGrowth\":87}},\"nova-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"nova-med\",\"httpPortOpen\":true,\"ip\":\"30.6.0.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Nova Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Returns an array of all hostnames in the network tree\\n * \\n * @param {string[]} myServers\\n * @param {number} safetyCounter Prevents infnite recursion\\n * @param {NS} ns\\n */\\nexport async function getServerList(myServers, safetyCounter, ns) {\\n\\tlet srvrsSeen = myServers;\\n\\tlet currServScanResult = [];\\n\\n\\tfor (let serverSeen in srvrsSeen) {\\n\\t\\tcurrServScanResult = ns.scan(srvrsSeen[serverSeen]);\\n\\t\\tfor (let entry in currServScanResult) {\\n\\t\\t\\tif (!srvrsSeen.includes(currServScanResult[entry])) {\\n\\t\\t\\t\\tsrvrsSeen.push(currServScanResult[entry]);\\n\\t\\t\\t\\tif ((++safetyCounter) < 250) {\\n\\t\\t\\t\\t\\tawait getServerList(srvrsSeen, safetyCounter, ns);\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tns.exit();\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\t//Filter out invalid values (NaN, null, {}, undefined)\\n\\tsrvrsSeen = srvrsSeen.filter(x => x);\\n\\treturn srvrsSeen;\\n}\\n\\n\\n/** \\n * \\tAttempts to take over target machine\\t\\n * \\n *  @param {string} target\\n * \\t@param {NS} ns\\n *  @return {boolean} outcome \\n**/\\nexport async function takeover(target, ns) {\\n\\tconst home = \\\"home\\\";\\n\\tlet currentTarget = target;\\n\\tlet isNotTakenOver = true;\\n\\tlet attemptCounter = 0;\\n\\n\\tlet scripts = ns.ls(home, \\\".js\\\");\\n\\t//scripts.push(ns.ls(home, \\\".ns\\\")); //in case of deprecated .ns scripts\\n\\n\\tns.tprint(scripts);\\n\\n\\n\\tif (!ns.hasRootAccess(currentTarget) && attemptCounter < 30) {\\n\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\ttry {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t} catch (error) {\\n\\t\\t\\t\\t\\tns.tprint(\\\"not enough ports to nuke \\\" + currentTarget);\\n\\t\\t\\t\\t\\treturn false;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t}\\n\\t\\t\\tattemptCounter++;\\n\\t\\t}\\n\\n\\t\\tawait ns.scp(scripts, home, currentTarget);\\n\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\",\"filename\":\"/modules/helper.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"nova-med\",\"moduleSequenceNumber\":1011,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.grow(target);\\n\\t}\\n}\",\"filename\":\"basic-grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"nova-med\",\"moduleSequenceNumber\":1012,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"basic-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"nova-med\",\"moduleSequenceNumber\":1013,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(target);\\n\\t}\\n}\",\"filename\":\"basic-weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"nova-med\",\"moduleSequenceNumber\":1014,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerList, takeover } from \\\"modules/helper.js\\\";\\n\\n/** @param {NS} ns **/\\n// TODO: unused + unfinished, based on setup.ns\\nexport async function main(ns) {\\n\\tconst myServers = [\\\"home\\\"];\\n\\n\\tvar servers = await getServerList(myServers, 0, ns);\\n\\n\\tfor (let entry in servers) {\\t\\n\\t\\tawait takeover(servers[entry], ns);\\n\\t}\\n}\",\"filename\":\"deep-setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"nova-med\",\"moduleSequenceNumber\":1015,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\t//\\n}\",\"filename\":\"formulas-testing.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"nova-med\",\"moduleSequenceNumber\":1016,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tconst currentMachine = ns.getHostname();\\n\\tvar servers = ns.scan(currentMachine);\\n\\tvar scripts = ns.ls(home, \\\"basic-\\\");\\n\\n\\tns.tprint(\\\"Host:  \\\" + currentMachine);\\n\\tfor (let entry in servers) {\\t// depth 0\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\t// depth 1\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== home && subservers.length > 1) {\\n\\t\\t\\t\\tns.tprint(\\\"-----> \\\" + subservers[subentry]);\\n\\t\\t\\t\\tlet subserversd2 = ns.scan(subservers[subentry]); // depth 2\\n\\t\\t\\t\\tfor (let subentryd2 in subserversd2) {\\n\\t\\t\\t\\t\\tif (subserversd2[subentryd2] !== subservers[subentry] && subserversd2[subentryd2] !== servers[entry] && subserversd2.length > 1) {\\n\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------> \\\" + subserversd2[subentryd2]);\\n\\t\\t\\t\\t\\t\\tlet subserversd3 = ns.scan(subserversd2[subentryd2]);\\t// depth 3\\n\\t\\t\\t\\t\\t\\tfor (let subentryd3 in subserversd3) {\\n\\t\\t\\t\\t\\t\\t\\tif (subserversd3[subentryd3] !== subserversd2[subentryd2] && subserversd3[subentryd3] !== subservers[subentry] && subserversd3.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------> \\\" + subserversd3[subentryd3]);\\n\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd4 = ns.scan(subserversd3[subentryd3]);\\t// depth 4\\n\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd4 in subserversd4) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd4[subentryd4] !== subserversd3[subentryd3] && subserversd4[subentryd4] !== subserversd2[subentryd2] && subserversd4.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------------> \\\" + subserversd4[subentryd4]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd5 = ns.scan(subserversd4[subentryd4]);\\t// depth 5\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd5 in subserversd5) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd5[subentryd5] !== subserversd4[subentryd4] && subserversd5[subentryd5] !== subserversd3[subentryd3] && subserversd5.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-------------------------> \\\" + subserversd5[subentryd5]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd6 = ns.scan(subserversd5[subentryd5]);\\t// depth 6\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd6 in subserversd6) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd6[subentryd6] !== subserversd5[subentryd5] && subserversd6[subentryd6] !== subserversd4[subentryd4] && subserversd6.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"------------------------------> \\\" + subserversd6[subentryd6]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd7 = ns.scan(subserversd6[subentryd6]);\\t// depth 7\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor(let subentryd7 in subserversd7) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd7[subentryd7] !== subserversd6[subentryd6] && subserversd7[subentryd7] !== subserversd5[subentryd5] && subserversd7.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-----------------------------------> \\\" + subserversd7[subentryd7]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"gigascan.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.05,\"server\":\"nova-med\",\"moduleSequenceNumber\":1017,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet targetRam = ns.getServerMaxRam(ns.args[0]);\\n\\tlet scriptMem = ns.getScriptRam(ns.args[1]);\\n\\n\\tns.tprint(\\\"Maximum possible threads for \\\" + ns.args[1] + \\\": \\\" + Math.floor(targetRam / scriptMem));\\n\\tns.exit;\\n}\",\"filename\":\"ram-usage.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"nova-med\",\"moduleSequenceNumber\":1018,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerList } from \\\"modules/helper.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet serversSeen = [\\\"home\\\"]; // home + bought servers\\n\\tlet contractList = [];\\n\\n\\tserversSeen = await getServerList(serversSeen, 0, ns);\\n\\n\\tns.tprint(serversSeen);\\n}\",\"filename\":\"search-coding-contracts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"nova-med\",\"moduleSequenceNumber\":1019,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tvar servers = ns.scan(home);\\n\\tvar scripts = ns.ls(home, \\\".ns\\\");\\n\\n\\tfor (let entry in scripts) {\\n\\t\\tns.tprint(\\\"found script: \\\" + scripts[entry]);\\n\\t}\\n\\n\\t// Hack servers (!!! depth = 2 !!!) if needed and populate with scripts\\n\\tfor (let entry in servers) {\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== \\\"home\\\") {\\n\\t\\t\\t\\tns.tprint(\\\"----->   \\\" + subservers[subentry]);\\n\\t\\t\\t\\tif (!ns.hasRootAccess(subservers[subentry])) {\\n\\t\\t\\t\\t\\ttakeover(subservers[subentry]);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tns.tprint(\\\"copying scripts to \\\" + subservers[subentry]);\\n\\t\\t\\t\\tawait ns.scp(scripts, home, subservers[subentry]);\\n\\t\\t\\t\\t//await ns.scp(\\\"setup.ns\\\", home, subservers[subentry]);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (!ns.hasRootAccess(servers[entry])) {\\n\\t\\t\\ttakeover(servers[entry]);\\n\\t\\t}\\n\\t\\tns.tprint(\\\"copying scripts to \\\" + servers[entry]);\\n\\t\\tawait ns.scp(scripts, home, servers[entry]);\\n\\t\\t//await ns.scp(\\\"setup.ns\\\", home, servers[entry]);\\n\\t}\\n\\n\\t/** \\n\\t * \\tAttempts to take over target machine\\t\\n\\t * \\n\\t *  @param {string} tar\\n\\t *  @return {boolean} outcome \\n\\t**/\\n\\tasync function takeover(tar) {\\n\\t\\tlet currentTarget = tar;\\n\\t\\tlet isNotTakenOver = true;\\n\\t\\tlet attemptCounter = 0;\\n\\n\\t\\tif (ns.getServerNumPortsRequired <= 5 && attemptCounter < 50) {\\n\\t\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\n\\t\\t\\t\\tattemptCounter++;\\n\\t\\t\\t}\\n\\n\\t\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.15,\"server\":\"nova-med\",\"moduleSequenceNumber\":1020,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}}],\"serversOnNetwork\":[\"icarus\",\"applied-energetics\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":66,\"hackDifficulty\":66,\"minDifficulty\":22,\"moneyAvailable\":1205354628,\"moneyMax\":30133865700,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":843,\"serverGrowth\":69}},\"zeus-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zeus-med\",\"httpPortOpen\":true,\"ip\":\"12.9.7.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Zeus Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Returns an array of all hostnames in the network tree\\n * \\n * @param {string[]} myServers\\n * @param {number} safetyCounter Prevents infnite recursion\\n * @param {NS} ns\\n */\\nexport async function getServerList(myServers, safetyCounter, ns) {\\n\\tlet srvrsSeen = myServers;\\n\\tlet currServScanResult = [];\\n\\n\\tfor (let serverSeen in srvrsSeen) {\\n\\t\\tcurrServScanResult = ns.scan(srvrsSeen[serverSeen]);\\n\\t\\tfor (let entry in currServScanResult) {\\n\\t\\t\\tif (!srvrsSeen.includes(currServScanResult[entry])) {\\n\\t\\t\\t\\tsrvrsSeen.push(currServScanResult[entry]);\\n\\t\\t\\t\\tif ((++safetyCounter) < 250) {\\n\\t\\t\\t\\t\\tawait getServerList(srvrsSeen, safetyCounter, ns);\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tns.exit();\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\t//Filter out invalid values (NaN, null, {}, undefined)\\n\\tsrvrsSeen = srvrsSeen.filter(x => x);\\n\\treturn srvrsSeen;\\n}\\n\\n\\n/** \\n * \\tAttempts to take over target machine\\t\\n * \\n *  @param {string} target\\n * \\t@param {NS} ns\\n *  @return {boolean} outcome \\n**/\\nexport async function takeover(target, ns) {\\n\\tconst home = \\\"home\\\";\\n\\tlet currentTarget = target;\\n\\tlet isNotTakenOver = true;\\n\\tlet attemptCounter = 0;\\n\\n\\tlet scripts = ns.ls(home, \\\".js\\\");\\n\\t//scripts.push(ns.ls(home, \\\".ns\\\")); //in case of deprecated .ns scripts\\n\\n\\tns.tprint(scripts);\\n\\n\\n\\tif (!ns.hasRootAccess(currentTarget) && attemptCounter < 30) {\\n\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\ttry {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t} catch (error) {\\n\\t\\t\\t\\t\\tns.tprint(\\\"not enough ports to nuke \\\" + currentTarget);\\n\\t\\t\\t\\t\\treturn false;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t}\\n\\t\\t\\tattemptCounter++;\\n\\t\\t}\\n\\n\\t\\tawait ns.scp(scripts, home, currentTarget);\\n\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\",\"filename\":\"/modules/helper.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"zeus-med\",\"moduleSequenceNumber\":1021,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.grow(target);\\n\\t}\\n}\",\"filename\":\"basic-grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zeus-med\",\"moduleSequenceNumber\":1022,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"basic-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"zeus-med\",\"moduleSequenceNumber\":1023,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(target);\\n\\t}\\n}\",\"filename\":\"basic-weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zeus-med\",\"moduleSequenceNumber\":1024,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerList, takeover } from \\\"modules/helper.js\\\";\\n\\n/** @param {NS} ns **/\\n// TODO: unused + unfinished, based on setup.ns\\nexport async function main(ns) {\\n\\tconst myServers = [\\\"home\\\"];\\n\\n\\tvar servers = await getServerList(myServers, 0, ns);\\n\\n\\tfor (let entry in servers) {\\t\\n\\t\\tawait takeover(servers[entry], ns);\\n\\t}\\n}\",\"filename\":\"deep-setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"zeus-med\",\"moduleSequenceNumber\":1025,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\t//\\n}\",\"filename\":\"formulas-testing.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"zeus-med\",\"moduleSequenceNumber\":1026,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tconst currentMachine = ns.getHostname();\\n\\tvar servers = ns.scan(currentMachine);\\n\\tvar scripts = ns.ls(home, \\\"basic-\\\");\\n\\n\\tns.tprint(\\\"Host:  \\\" + currentMachine);\\n\\tfor (let entry in servers) {\\t// depth 0\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\t// depth 1\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== home && subservers.length > 1) {\\n\\t\\t\\t\\tns.tprint(\\\"-----> \\\" + subservers[subentry]);\\n\\t\\t\\t\\tlet subserversd2 = ns.scan(subservers[subentry]); // depth 2\\n\\t\\t\\t\\tfor (let subentryd2 in subserversd2) {\\n\\t\\t\\t\\t\\tif (subserversd2[subentryd2] !== subservers[subentry] && subserversd2[subentryd2] !== servers[entry] && subserversd2.length > 1) {\\n\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------> \\\" + subserversd2[subentryd2]);\\n\\t\\t\\t\\t\\t\\tlet subserversd3 = ns.scan(subserversd2[subentryd2]);\\t// depth 3\\n\\t\\t\\t\\t\\t\\tfor (let subentryd3 in subserversd3) {\\n\\t\\t\\t\\t\\t\\t\\tif (subserversd3[subentryd3] !== subserversd2[subentryd2] && subserversd3[subentryd3] !== subservers[subentry] && subserversd3.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------> \\\" + subserversd3[subentryd3]);\\n\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd4 = ns.scan(subserversd3[subentryd3]);\\t// depth 4\\n\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd4 in subserversd4) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd4[subentryd4] !== subserversd3[subentryd3] && subserversd4[subentryd4] !== subserversd2[subentryd2] && subserversd4.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------------> \\\" + subserversd4[subentryd4]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd5 = ns.scan(subserversd4[subentryd4]);\\t// depth 5\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd5 in subserversd5) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd5[subentryd5] !== subserversd4[subentryd4] && subserversd5[subentryd5] !== subserversd3[subentryd3] && subserversd5.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-------------------------> \\\" + subserversd5[subentryd5]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd6 = ns.scan(subserversd5[subentryd5]);\\t// depth 6\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd6 in subserversd6) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd6[subentryd6] !== subserversd5[subentryd5] && subserversd6[subentryd6] !== subserversd4[subentryd4] && subserversd6.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"------------------------------> \\\" + subserversd6[subentryd6]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd7 = ns.scan(subserversd6[subentryd6]);\\t// depth 7\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor(let subentryd7 in subserversd7) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd7[subentryd7] !== subserversd6[subentryd6] && subserversd7[subentryd7] !== subserversd5[subentryd5] && subserversd7.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-----------------------------------> \\\" + subserversd7[subentryd7]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"gigascan.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.05,\"server\":\"zeus-med\",\"moduleSequenceNumber\":1027,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet targetRam = ns.getServerMaxRam(ns.args[0]);\\n\\tlet scriptMem = ns.getScriptRam(ns.args[1]);\\n\\n\\tns.tprint(\\\"Maximum possible threads for \\\" + ns.args[1] + \\\": \\\" + Math.floor(targetRam / scriptMem));\\n\\tns.exit;\\n}\",\"filename\":\"ram-usage.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zeus-med\",\"moduleSequenceNumber\":1028,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerList } from \\\"modules/helper.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet serversSeen = [\\\"home\\\"]; // home + bought servers\\n\\tlet contractList = [];\\n\\n\\tserversSeen = await getServerList(serversSeen, 0, ns);\\n\\n\\tns.tprint(serversSeen);\\n}\",\"filename\":\"search-coding-contracts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"zeus-med\",\"moduleSequenceNumber\":1029,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tvar servers = ns.scan(home);\\n\\tvar scripts = ns.ls(home, \\\".ns\\\");\\n\\n\\tfor (let entry in scripts) {\\n\\t\\tns.tprint(\\\"found script: \\\" + scripts[entry]);\\n\\t}\\n\\n\\t// Hack servers (!!! depth = 2 !!!) if needed and populate with scripts\\n\\tfor (let entry in servers) {\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== \\\"home\\\") {\\n\\t\\t\\t\\tns.tprint(\\\"----->   \\\" + subservers[subentry]);\\n\\t\\t\\t\\tif (!ns.hasRootAccess(subservers[subentry])) {\\n\\t\\t\\t\\t\\ttakeover(subservers[subentry]);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tns.tprint(\\\"copying scripts to \\\" + subservers[subentry]);\\n\\t\\t\\t\\tawait ns.scp(scripts, home, subservers[subentry]);\\n\\t\\t\\t\\t//await ns.scp(\\\"setup.ns\\\", home, subservers[subentry]);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (!ns.hasRootAccess(servers[entry])) {\\n\\t\\t\\ttakeover(servers[entry]);\\n\\t\\t}\\n\\t\\tns.tprint(\\\"copying scripts to \\\" + servers[entry]);\\n\\t\\tawait ns.scp(scripts, home, servers[entry]);\\n\\t\\t//await ns.scp(\\\"setup.ns\\\", home, servers[entry]);\\n\\t}\\n\\n\\t/** \\n\\t * \\tAttempts to take over target machine\\t\\n\\t * \\n\\t *  @param {string} tar\\n\\t *  @return {boolean} outcome \\n\\t**/\\n\\tasync function takeover(tar) {\\n\\t\\tlet currentTarget = tar;\\n\\t\\tlet isNotTakenOver = true;\\n\\t\\tlet attemptCounter = 0;\\n\\n\\t\\tif (ns.getServerNumPortsRequired <= 5 && attemptCounter < 50) {\\n\\t\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\n\\t\\t\\t\\tattemptCounter++;\\n\\t\\t\\t}\\n\\n\\t\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.15,\"server\":\"zeus-med\",\"moduleSequenceNumber\":1030,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}}],\"serversOnNetwork\":[\"omnia\",\"infocomm\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":76,\"hackDifficulty\":76,\"minDifficulty\":25,\"moneyAvailable\":1427344094,\"moneyMax\":35683602350,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":820,\"serverGrowth\":78}},\"unitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-160793.cct\",\"type\":\"Algorithmic Stock Trader I\",\"data\":[60,128,145,151,62,116,104,118,145,40,195,79,186,53,92,180,44,14,104,180,30],\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-749529.cct\",\"type\":\"Generate IP Addresses\",\"data\":\"20522818083\",\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"unitalife\",\"httpPortOpen\":true,\"ip\":\"43.6.9.4\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"UnitaLife Group\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Returns an array of all hostnames in the network tree\\n * \\n * @param {string[]} myServers\\n * @param {number} safetyCounter Prevents infnite recursion\\n * @param {NS} ns\\n */\\nexport async function getServerList(myServers, safetyCounter, ns) {\\n\\tlet srvrsSeen = myServers;\\n\\tlet currServScanResult = [];\\n\\n\\tfor (let serverSeen in srvrsSeen) {\\n\\t\\tcurrServScanResult = ns.scan(srvrsSeen[serverSeen]);\\n\\t\\tfor (let entry in currServScanResult) {\\n\\t\\t\\tif (!srvrsSeen.includes(currServScanResult[entry])) {\\n\\t\\t\\t\\tsrvrsSeen.push(currServScanResult[entry]);\\n\\t\\t\\t\\tif ((++safetyCounter) < 250) {\\n\\t\\t\\t\\t\\tawait getServerList(srvrsSeen, safetyCounter, ns);\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tns.exit();\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\t//Filter out invalid values (NaN, null, {}, undefined)\\n\\tsrvrsSeen = srvrsSeen.filter(x => x);\\n\\treturn srvrsSeen;\\n}\\n\\n\\n/** \\n * \\tAttempts to take over target machine\\t\\n * \\n *  @param {string} target\\n * \\t@param {NS} ns\\n *  @return {boolean} outcome \\n**/\\nexport async function takeover(target, ns) {\\n\\tconst home = \\\"home\\\";\\n\\tlet currentTarget = target;\\n\\tlet isNotTakenOver = true;\\n\\tlet attemptCounter = 0;\\n\\n\\tlet scripts = ns.ls(home, \\\".js\\\");\\n\\t//scripts.push(ns.ls(home, \\\".ns\\\")); //in case of deprecated .ns scripts\\n\\n\\tns.tprint(scripts);\\n\\n\\n\\tif (!ns.hasRootAccess(currentTarget) && attemptCounter < 30) {\\n\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\ttry {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t} catch (error) {\\n\\t\\t\\t\\t\\tns.tprint(\\\"not enough ports to nuke \\\" + currentTarget);\\n\\t\\t\\t\\t\\treturn false;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t}\\n\\t\\t\\tattemptCounter++;\\n\\t\\t}\\n\\n\\t\\tawait ns.scp(scripts, home, currentTarget);\\n\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\",\"filename\":\"/modules/helper.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"unitalife\",\"moduleSequenceNumber\":1031,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.grow(target);\\n\\t}\\n}\",\"filename\":\"basic-grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"unitalife\",\"moduleSequenceNumber\":1032,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"basic-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"unitalife\",\"moduleSequenceNumber\":1033,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(target);\\n\\t}\\n}\",\"filename\":\"basic-weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"unitalife\",\"moduleSequenceNumber\":1034,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerList, takeover } from \\\"modules/helper.js\\\";\\n\\n/** @param {NS} ns **/\\n// TODO: unused + unfinished, based on setup.ns\\nexport async function main(ns) {\\n\\tconst myServers = [\\\"home\\\"];\\n\\n\\tvar servers = await getServerList(myServers, 0, ns);\\n\\n\\tfor (let entry in servers) {\\t\\n\\t\\tawait takeover(servers[entry], ns);\\n\\t}\\n}\",\"filename\":\"deep-setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"unitalife\",\"moduleSequenceNumber\":1035,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\t//\\n}\",\"filename\":\"formulas-testing.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"unitalife\",\"moduleSequenceNumber\":1036,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tconst currentMachine = ns.getHostname();\\n\\tvar servers = ns.scan(currentMachine);\\n\\tvar scripts = ns.ls(home, \\\"basic-\\\");\\n\\n\\tns.tprint(\\\"Host:  \\\" + currentMachine);\\n\\tfor (let entry in servers) {\\t// depth 0\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\t// depth 1\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== home && subservers.length > 1) {\\n\\t\\t\\t\\tns.tprint(\\\"-----> \\\" + subservers[subentry]);\\n\\t\\t\\t\\tlet subserversd2 = ns.scan(subservers[subentry]); // depth 2\\n\\t\\t\\t\\tfor (let subentryd2 in subserversd2) {\\n\\t\\t\\t\\t\\tif (subserversd2[subentryd2] !== subservers[subentry] && subserversd2[subentryd2] !== servers[entry] && subserversd2.length > 1) {\\n\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------> \\\" + subserversd2[subentryd2]);\\n\\t\\t\\t\\t\\t\\tlet subserversd3 = ns.scan(subserversd2[subentryd2]);\\t// depth 3\\n\\t\\t\\t\\t\\t\\tfor (let subentryd3 in subserversd3) {\\n\\t\\t\\t\\t\\t\\t\\tif (subserversd3[subentryd3] !== subserversd2[subentryd2] && subserversd3[subentryd3] !== subservers[subentry] && subserversd3.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------> \\\" + subserversd3[subentryd3]);\\n\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd4 = ns.scan(subserversd3[subentryd3]);\\t// depth 4\\n\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd4 in subserversd4) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd4[subentryd4] !== subserversd3[subentryd3] && subserversd4[subentryd4] !== subserversd2[subentryd2] && subserversd4.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------------> \\\" + subserversd4[subentryd4]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd5 = ns.scan(subserversd4[subentryd4]);\\t// depth 5\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd5 in subserversd5) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd5[subentryd5] !== subserversd4[subentryd4] && subserversd5[subentryd5] !== subserversd3[subentryd3] && subserversd5.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-------------------------> \\\" + subserversd5[subentryd5]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd6 = ns.scan(subserversd5[subentryd5]);\\t// depth 6\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd6 in subserversd6) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd6[subentryd6] !== subserversd5[subentryd5] && subserversd6[subentryd6] !== subserversd4[subentryd4] && subserversd6.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"------------------------------> \\\" + subserversd6[subentryd6]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd7 = ns.scan(subserversd6[subentryd6]);\\t// depth 7\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor(let subentryd7 in subserversd7) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd7[subentryd7] !== subserversd6[subentryd6] && subserversd7[subentryd7] !== subserversd5[subentryd5] && subserversd7.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-----------------------------------> \\\" + subserversd7[subentryd7]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"gigascan.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.05,\"server\":\"unitalife\",\"moduleSequenceNumber\":1037,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet targetRam = ns.getServerMaxRam(ns.args[0]);\\n\\tlet scriptMem = ns.getScriptRam(ns.args[1]);\\n\\n\\tns.tprint(\\\"Maximum possible threads for \\\" + ns.args[1] + \\\": \\\" + Math.floor(targetRam / scriptMem));\\n\\tns.exit;\\n}\",\"filename\":\"ram-usage.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"unitalife\",\"moduleSequenceNumber\":1038,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerList } from \\\"modules/helper.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet serversSeen = [\\\"home\\\"]; // home + bought servers\\n\\tlet contractList = [];\\n\\n\\tserversSeen = await getServerList(serversSeen, 0, ns);\\n\\n\\tns.tprint(serversSeen);\\n}\",\"filename\":\"search-coding-contracts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"unitalife\",\"moduleSequenceNumber\":1039,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tvar servers = ns.scan(home);\\n\\tvar scripts = ns.ls(home, \\\".ns\\\");\\n\\n\\tfor (let entry in scripts) {\\n\\t\\tns.tprint(\\\"found script: \\\" + scripts[entry]);\\n\\t}\\n\\n\\t// Hack servers (!!! depth = 2 !!!) if needed and populate with scripts\\n\\tfor (let entry in servers) {\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== \\\"home\\\") {\\n\\t\\t\\t\\tns.tprint(\\\"----->   \\\" + subservers[subentry]);\\n\\t\\t\\t\\tif (!ns.hasRootAccess(subservers[subentry])) {\\n\\t\\t\\t\\t\\ttakeover(subservers[subentry]);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tns.tprint(\\\"copying scripts to \\\" + subservers[subentry]);\\n\\t\\t\\t\\tawait ns.scp(scripts, home, subservers[subentry]);\\n\\t\\t\\t\\t//await ns.scp(\\\"setup.ns\\\", home, subservers[subentry]);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (!ns.hasRootAccess(servers[entry])) {\\n\\t\\t\\ttakeover(servers[entry]);\\n\\t\\t}\\n\\t\\tns.tprint(\\\"copying scripts to \\\" + servers[entry]);\\n\\t\\tawait ns.scp(scripts, home, servers[entry]);\\n\\t\\t//await ns.scp(\\\"setup.ns\\\", home, servers[entry]);\\n\\t}\\n\\n\\t/** \\n\\t * \\tAttempts to take over target machine\\t\\n\\t * \\n\\t *  @param {string} tar\\n\\t *  @return {boolean} outcome \\n\\t**/\\n\\tasync function takeover(tar) {\\n\\t\\tlet currentTarget = tar;\\n\\t\\tlet isNotTakenOver = true;\\n\\t\\tlet attemptCounter = 0;\\n\\n\\t\\tif (ns.getServerNumPortsRequired <= 5 && attemptCounter < 50) {\\n\\t\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\n\\t\\t\\t\\tattemptCounter++;\\n\\t\\t\\t}\\n\\n\\t\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.15,\"server\":\"unitalife\",\"moduleSequenceNumber\":1040,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}}],\"serversOnNetwork\":[\"galactic-cyber\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":80,\"hackDifficulty\":80,\"minDifficulty\":27,\"moneyAvailable\":1007859469,\"moneyMax\":25196486725,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":803,\"serverGrowth\":79}},\"lexo-corp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"lexo-corp\",\"httpPortOpen\":true,\"ip\":\"78.5.5.6\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"LexoCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Returns an array of all hostnames in the network tree\\n * \\n * @param {string[]} myServers\\n * @param {number} safetyCounter Prevents infnite recursion\\n * @param {NS} ns\\n */\\nexport async function getServerList(myServers, safetyCounter, ns) {\\n\\tlet srvrsSeen = myServers;\\n\\tlet currServScanResult = [];\\n\\n\\tfor (let serverSeen in srvrsSeen) {\\n\\t\\tcurrServScanResult = ns.scan(srvrsSeen[serverSeen]);\\n\\t\\tfor (let entry in currServScanResult) {\\n\\t\\t\\tif (!srvrsSeen.includes(currServScanResult[entry])) {\\n\\t\\t\\t\\tsrvrsSeen.push(currServScanResult[entry]);\\n\\t\\t\\t\\tif ((++safetyCounter) < 250) {\\n\\t\\t\\t\\t\\tawait getServerList(srvrsSeen, safetyCounter, ns);\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tns.exit();\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\t//Filter out invalid values (NaN, null, {}, undefined)\\n\\tsrvrsSeen = srvrsSeen.filter(x => x);\\n\\treturn srvrsSeen;\\n}\\n\\n\\n/** \\n * \\tAttempts to take over target machine\\t\\n * \\n *  @param {string} target\\n * \\t@param {NS} ns\\n *  @return {boolean} outcome \\n**/\\nexport async function takeover(target, ns) {\\n\\tconst home = \\\"home\\\";\\n\\tlet currentTarget = target;\\n\\tlet isNotTakenOver = true;\\n\\tlet attemptCounter = 0;\\n\\n\\tlet scripts = ns.ls(home, \\\".js\\\");\\n\\t//scripts.push(ns.ls(home, \\\".ns\\\")); //in case of deprecated .ns scripts\\n\\n\\tns.tprint(scripts);\\n\\n\\n\\tif (!ns.hasRootAccess(currentTarget) && attemptCounter < 30) {\\n\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\ttry {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t} catch (error) {\\n\\t\\t\\t\\t\\tns.tprint(\\\"not enough ports to nuke \\\" + currentTarget);\\n\\t\\t\\t\\t\\treturn false;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t}\\n\\t\\t\\tattemptCounter++;\\n\\t\\t}\\n\\n\\t\\tawait ns.scp(scripts, home, currentTarget);\\n\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\",\"filename\":\"/modules/helper.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":1041,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.grow(target);\\n\\t}\\n}\",\"filename\":\"basic-grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":1042,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"basic-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":1043,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(target);\\n\\t}\\n}\",\"filename\":\"basic-weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":1044,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerList, takeover } from \\\"modules/helper.js\\\";\\n\\n/** @param {NS} ns **/\\n// TODO: unused + unfinished, based on setup.ns\\nexport async function main(ns) {\\n\\tconst myServers = [\\\"home\\\"];\\n\\n\\tvar servers = await getServerList(myServers, 0, ns);\\n\\n\\tfor (let entry in servers) {\\t\\n\\t\\tawait takeover(servers[entry], ns);\\n\\t}\\n}\",\"filename\":\"deep-setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":1045,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\t//\\n}\",\"filename\":\"formulas-testing.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":1046,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tconst currentMachine = ns.getHostname();\\n\\tvar servers = ns.scan(currentMachine);\\n\\tvar scripts = ns.ls(home, \\\"basic-\\\");\\n\\n\\tns.tprint(\\\"Host:  \\\" + currentMachine);\\n\\tfor (let entry in servers) {\\t// depth 0\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\t// depth 1\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== home && subservers.length > 1) {\\n\\t\\t\\t\\tns.tprint(\\\"-----> \\\" + subservers[subentry]);\\n\\t\\t\\t\\tlet subserversd2 = ns.scan(subservers[subentry]); // depth 2\\n\\t\\t\\t\\tfor (let subentryd2 in subserversd2) {\\n\\t\\t\\t\\t\\tif (subserversd2[subentryd2] !== subservers[subentry] && subserversd2[subentryd2] !== servers[entry] && subserversd2.length > 1) {\\n\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------> \\\" + subserversd2[subentryd2]);\\n\\t\\t\\t\\t\\t\\tlet subserversd3 = ns.scan(subserversd2[subentryd2]);\\t// depth 3\\n\\t\\t\\t\\t\\t\\tfor (let subentryd3 in subserversd3) {\\n\\t\\t\\t\\t\\t\\t\\tif (subserversd3[subentryd3] !== subserversd2[subentryd2] && subserversd3[subentryd3] !== subservers[subentry] && subserversd3.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------> \\\" + subserversd3[subentryd3]);\\n\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd4 = ns.scan(subserversd3[subentryd3]);\\t// depth 4\\n\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd4 in subserversd4) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd4[subentryd4] !== subserversd3[subentryd3] && subserversd4[subentryd4] !== subserversd2[subentryd2] && subserversd4.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------------> \\\" + subserversd4[subentryd4]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd5 = ns.scan(subserversd4[subentryd4]);\\t// depth 5\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd5 in subserversd5) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd5[subentryd5] !== subserversd4[subentryd4] && subserversd5[subentryd5] !== subserversd3[subentryd3] && subserversd5.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-------------------------> \\\" + subserversd5[subentryd5]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd6 = ns.scan(subserversd5[subentryd5]);\\t// depth 6\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd6 in subserversd6) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd6[subentryd6] !== subserversd5[subentryd5] && subserversd6[subentryd6] !== subserversd4[subentryd4] && subserversd6.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"------------------------------> \\\" + subserversd6[subentryd6]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd7 = ns.scan(subserversd6[subentryd6]);\\t// depth 7\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor(let subentryd7 in subserversd7) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd7[subentryd7] !== subserversd6[subentryd6] && subserversd7[subentryd7] !== subserversd5[subentryd5] && subserversd7.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-----------------------------------> \\\" + subserversd7[subentryd7]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"gigascan.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.05,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":1047,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet targetRam = ns.getServerMaxRam(ns.args[0]);\\n\\tlet scriptMem = ns.getScriptRam(ns.args[1]);\\n\\n\\tns.tprint(\\\"Maximum possible threads for \\\" + ns.args[1] + \\\": \\\" + Math.floor(targetRam / scriptMem));\\n\\tns.exit;\\n}\",\"filename\":\"ram-usage.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":1048,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerList } from \\\"modules/helper.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet serversSeen = [\\\"home\\\"]; // home + bought servers\\n\\tlet contractList = [];\\n\\n\\tserversSeen = await getServerList(serversSeen, 0, ns);\\n\\n\\tns.tprint(serversSeen);\\n}\",\"filename\":\"search-coding-contracts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":1049,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tvar servers = ns.scan(home);\\n\\tvar scripts = ns.ls(home, \\\".ns\\\");\\n\\n\\tfor (let entry in scripts) {\\n\\t\\tns.tprint(\\\"found script: \\\" + scripts[entry]);\\n\\t}\\n\\n\\t// Hack servers (!!! depth = 2 !!!) if needed and populate with scripts\\n\\tfor (let entry in servers) {\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== \\\"home\\\") {\\n\\t\\t\\t\\tns.tprint(\\\"----->   \\\" + subservers[subentry]);\\n\\t\\t\\t\\tif (!ns.hasRootAccess(subservers[subentry])) {\\n\\t\\t\\t\\t\\ttakeover(subservers[subentry]);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tns.tprint(\\\"copying scripts to \\\" + subservers[subentry]);\\n\\t\\t\\t\\tawait ns.scp(scripts, home, subservers[subentry]);\\n\\t\\t\\t\\t//await ns.scp(\\\"setup.ns\\\", home, subservers[subentry]);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (!ns.hasRootAccess(servers[entry])) {\\n\\t\\t\\ttakeover(servers[entry]);\\n\\t\\t}\\n\\t\\tns.tprint(\\\"copying scripts to \\\" + servers[entry]);\\n\\t\\tawait ns.scp(scripts, home, servers[entry]);\\n\\t\\t//await ns.scp(\\\"setup.ns\\\", home, servers[entry]);\\n\\t}\\n\\n\\t/** \\n\\t * \\tAttempts to take over target machine\\t\\n\\t * \\n\\t *  @param {string} tar\\n\\t *  @return {boolean} outcome \\n\\t**/\\n\\tasync function takeover(tar) {\\n\\t\\tlet currentTarget = tar;\\n\\t\\tlet isNotTakenOver = true;\\n\\t\\tlet attemptCounter = 0;\\n\\n\\t\\tif (ns.getServerNumPortsRequired <= 5 && attemptCounter < 50) {\\n\\t\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\n\\t\\t\\t\\tattemptCounter++;\\n\\t\\t\\t}\\n\\n\\t\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.15,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":1050,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}}],\"serversOnNetwork\":[\"syscore\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":68,\"hackDifficulty\":68,\"minDifficulty\":23,\"moneyAvailable\":725506250,\"moneyMax\":18137656250,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":670,\"serverGrowth\":61}},\"rho-construction\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-982791.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[2,6],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"rho-construction\",\"httpPortOpen\":true,\"ip\":\"44.7.5.7\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Rho Construction\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Returns an array of all hostnames in the network tree\\n * \\n * @param {string[]} myServers\\n * @param {number} safetyCounter Prevents infnite recursion\\n * @param {NS} ns\\n */\\nexport async function getServerList(myServers, safetyCounter, ns) {\\n\\tlet srvrsSeen = myServers;\\n\\tlet currServScanResult = [];\\n\\n\\tfor (let serverSeen in srvrsSeen) {\\n\\t\\tcurrServScanResult = ns.scan(srvrsSeen[serverSeen]);\\n\\t\\tfor (let entry in currServScanResult) {\\n\\t\\t\\tif (!srvrsSeen.includes(currServScanResult[entry])) {\\n\\t\\t\\t\\tsrvrsSeen.push(currServScanResult[entry]);\\n\\t\\t\\t\\tif ((++safetyCounter) < 250) {\\n\\t\\t\\t\\t\\tawait getServerList(srvrsSeen, safetyCounter, ns);\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tns.exit();\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\t//Filter out invalid values (NaN, null, {}, undefined)\\n\\tsrvrsSeen = srvrsSeen.filter(x => x);\\n\\treturn srvrsSeen;\\n}\\n\\n\\n/** \\n * \\tAttempts to take over target machine\\t\\n * \\n *  @param {string} target\\n * \\t@param {NS} ns\\n *  @return {boolean} outcome \\n**/\\nexport async function takeover(target, ns) {\\n\\tconst home = \\\"home\\\";\\n\\tlet currentTarget = target;\\n\\tlet isNotTakenOver = true;\\n\\tlet attemptCounter = 0;\\n\\n\\tlet scripts = ns.ls(home, \\\".js\\\");\\n\\t//scripts.push(ns.ls(home, \\\".ns\\\")); //in case of deprecated .ns scripts\\n\\n\\tns.tprint(scripts);\\n\\n\\n\\tif (!ns.hasRootAccess(currentTarget) && attemptCounter < 30) {\\n\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\ttry {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t} catch (error) {\\n\\t\\t\\t\\t\\tns.tprint(\\\"not enough ports to nuke \\\" + currentTarget);\\n\\t\\t\\t\\t\\treturn false;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t}\\n\\t\\t\\tattemptCounter++;\\n\\t\\t}\\n\\n\\t\\tawait ns.scp(scripts, home, currentTarget);\\n\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\",\"filename\":\"/modules/helper.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"rho-construction\",\"moduleSequenceNumber\":1051,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.grow(target);\\n\\t}\\n}\",\"filename\":\"basic-grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"rho-construction\",\"moduleSequenceNumber\":1052,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"basic-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"rho-construction\",\"moduleSequenceNumber\":1053,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(target);\\n\\t}\\n}\",\"filename\":\"basic-weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"rho-construction\",\"moduleSequenceNumber\":1054,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerList, takeover } from \\\"modules/helper.js\\\";\\n\\n/** @param {NS} ns **/\\n// TODO: unused + unfinished, based on setup.ns\\nexport async function main(ns) {\\n\\tconst myServers = [\\\"home\\\"];\\n\\n\\tvar servers = await getServerList(myServers, 0, ns);\\n\\n\\tfor (let entry in servers) {\\t\\n\\t\\tawait takeover(servers[entry], ns);\\n\\t}\\n}\",\"filename\":\"deep-setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"rho-construction\",\"moduleSequenceNumber\":1055,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\t//\\n}\",\"filename\":\"formulas-testing.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"rho-construction\",\"moduleSequenceNumber\":1056,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tconst currentMachine = ns.getHostname();\\n\\tvar servers = ns.scan(currentMachine);\\n\\tvar scripts = ns.ls(home, \\\"basic-\\\");\\n\\n\\tns.tprint(\\\"Host:  \\\" + currentMachine);\\n\\tfor (let entry in servers) {\\t// depth 0\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\t// depth 1\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== home && subservers.length > 1) {\\n\\t\\t\\t\\tns.tprint(\\\"-----> \\\" + subservers[subentry]);\\n\\t\\t\\t\\tlet subserversd2 = ns.scan(subservers[subentry]); // depth 2\\n\\t\\t\\t\\tfor (let subentryd2 in subserversd2) {\\n\\t\\t\\t\\t\\tif (subserversd2[subentryd2] !== subservers[subentry] && subserversd2[subentryd2] !== servers[entry] && subserversd2.length > 1) {\\n\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------> \\\" + subserversd2[subentryd2]);\\n\\t\\t\\t\\t\\t\\tlet subserversd3 = ns.scan(subserversd2[subentryd2]);\\t// depth 3\\n\\t\\t\\t\\t\\t\\tfor (let subentryd3 in subserversd3) {\\n\\t\\t\\t\\t\\t\\t\\tif (subserversd3[subentryd3] !== subserversd2[subentryd2] && subserversd3[subentryd3] !== subservers[subentry] && subserversd3.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------> \\\" + subserversd3[subentryd3]);\\n\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd4 = ns.scan(subserversd3[subentryd3]);\\t// depth 4\\n\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd4 in subserversd4) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd4[subentryd4] !== subserversd3[subentryd3] && subserversd4[subentryd4] !== subserversd2[subentryd2] && subserversd4.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------------> \\\" + subserversd4[subentryd4]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd5 = ns.scan(subserversd4[subentryd4]);\\t// depth 5\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd5 in subserversd5) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd5[subentryd5] !== subserversd4[subentryd4] && subserversd5[subentryd5] !== subserversd3[subentryd3] && subserversd5.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-------------------------> \\\" + subserversd5[subentryd5]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd6 = ns.scan(subserversd5[subentryd5]);\\t// depth 6\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd6 in subserversd6) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd6[subentryd6] !== subserversd5[subentryd5] && subserversd6[subentryd6] !== subserversd4[subentryd4] && subserversd6.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"------------------------------> \\\" + subserversd6[subentryd6]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd7 = ns.scan(subserversd6[subentryd6]);\\t// depth 7\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor(let subentryd7 in subserversd7) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd7[subentryd7] !== subserversd6[subentryd6] && subserversd7[subentryd7] !== subserversd5[subentryd5] && subserversd7.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-----------------------------------> \\\" + subserversd7[subentryd7]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"gigascan.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.05,\"server\":\"rho-construction\",\"moduleSequenceNumber\":1057,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet targetRam = ns.getServerMaxRam(ns.args[0]);\\n\\tlet scriptMem = ns.getScriptRam(ns.args[1]);\\n\\n\\tns.tprint(\\\"Maximum possible threads for \\\" + ns.args[1] + \\\": \\\" + Math.floor(targetRam / scriptMem));\\n\\tns.exit;\\n}\",\"filename\":\"ram-usage.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"rho-construction\",\"moduleSequenceNumber\":1058,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerList } from \\\"modules/helper.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet serversSeen = [\\\"home\\\"]; // home + bought servers\\n\\tlet contractList = [];\\n\\n\\tserversSeen = await getServerList(serversSeen, 0, ns);\\n\\n\\tns.tprint(serversSeen);\\n}\",\"filename\":\"search-coding-contracts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"rho-construction\",\"moduleSequenceNumber\":1059,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tvar servers = ns.scan(home);\\n\\tvar scripts = ns.ls(home, \\\".ns\\\");\\n\\n\\tfor (let entry in scripts) {\\n\\t\\tns.tprint(\\\"found script: \\\" + scripts[entry]);\\n\\t}\\n\\n\\t// Hack servers (!!! depth = 2 !!!) if needed and populate with scripts\\n\\tfor (let entry in servers) {\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== \\\"home\\\") {\\n\\t\\t\\t\\tns.tprint(\\\"----->   \\\" + subservers[subentry]);\\n\\t\\t\\t\\tif (!ns.hasRootAccess(subservers[subentry])) {\\n\\t\\t\\t\\t\\ttakeover(subservers[subentry]);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tns.tprint(\\\"copying scripts to \\\" + subservers[subentry]);\\n\\t\\t\\t\\tawait ns.scp(scripts, home, subservers[subentry]);\\n\\t\\t\\t\\t//await ns.scp(\\\"setup.ns\\\", home, subservers[subentry]);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (!ns.hasRootAccess(servers[entry])) {\\n\\t\\t\\ttakeover(servers[entry]);\\n\\t\\t}\\n\\t\\tns.tprint(\\\"copying scripts to \\\" + servers[entry]);\\n\\t\\tawait ns.scp(scripts, home, servers[entry]);\\n\\t\\t//await ns.scp(\\\"setup.ns\\\", home, servers[entry]);\\n\\t}\\n\\n\\t/** \\n\\t * \\tAttempts to take over target machine\\t\\n\\t * \\n\\t *  @param {string} tar\\n\\t *  @return {boolean} outcome \\n\\t**/\\n\\tasync function takeover(tar) {\\n\\t\\tlet currentTarget = tar;\\n\\t\\tlet isNotTakenOver = true;\\n\\t\\tlet attemptCounter = 0;\\n\\n\\t\\tif (ns.getServerNumPortsRequired <= 5 && attemptCounter < 50) {\\n\\t\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\n\\t\\t\\t\\tattemptCounter++;\\n\\t\\t\\t}\\n\\n\\t\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.15,\"server\":\"rho-construction\",\"moduleSequenceNumber\":1060,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}}],\"serversOnNetwork\":[\"catalyst\",\"global-pharm\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":60,\"hackDifficulty\":60,\"minDifficulty\":20,\"moneyAvailable\":619191047,\"moneyMax\":15479776175,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":488,\"serverGrowth\":46}},\"alpha-ent\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"alpha-ent\",\"httpPortOpen\":true,\"ip\":\"1.3.3.6\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"Alpha Enterprises\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Returns an array of all hostnames in the network tree\\n * \\n * @param {string[]} myServers\\n * @param {number} safetyCounter Prevents infnite recursion\\n * @param {NS} ns\\n */\\nexport async function getServerList(myServers, safetyCounter, ns) {\\n\\tlet srvrsSeen = myServers;\\n\\tlet currServScanResult = [];\\n\\n\\tfor (let serverSeen in srvrsSeen) {\\n\\t\\tcurrServScanResult = ns.scan(srvrsSeen[serverSeen]);\\n\\t\\tfor (let entry in currServScanResult) {\\n\\t\\t\\tif (!srvrsSeen.includes(currServScanResult[entry])) {\\n\\t\\t\\t\\tsrvrsSeen.push(currServScanResult[entry]);\\n\\t\\t\\t\\tif ((++safetyCounter) < 250) {\\n\\t\\t\\t\\t\\tawait getServerList(srvrsSeen, safetyCounter, ns);\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tns.exit();\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\t//Filter out invalid values (NaN, null, {}, undefined)\\n\\tsrvrsSeen = srvrsSeen.filter(x => x);\\n\\treturn srvrsSeen;\\n}\\n\\n\\n/** \\n * \\tAttempts to take over target machine\\t\\n * \\n *  @param {string} target\\n * \\t@param {NS} ns\\n *  @return {boolean} outcome \\n**/\\nexport async function takeover(target, ns) {\\n\\tconst home = \\\"home\\\";\\n\\tlet currentTarget = target;\\n\\tlet isNotTakenOver = true;\\n\\tlet attemptCounter = 0;\\n\\n\\tlet scripts = ns.ls(home, \\\".js\\\");\\n\\t//scripts.push(ns.ls(home, \\\".ns\\\")); //in case of deprecated .ns scripts\\n\\n\\tns.tprint(scripts);\\n\\n\\n\\tif (!ns.hasRootAccess(currentTarget) && attemptCounter < 30) {\\n\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\ttry {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t} catch (error) {\\n\\t\\t\\t\\t\\tns.tprint(\\\"not enough ports to nuke \\\" + currentTarget);\\n\\t\\t\\t\\t\\treturn false;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t}\\n\\t\\t\\tattemptCounter++;\\n\\t\\t}\\n\\n\\t\\tawait ns.scp(scripts, home, currentTarget);\\n\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\",\"filename\":\"/modules/helper.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":1061,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.grow(target);\\n\\t}\\n}\",\"filename\":\"basic-grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":1062,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"basic-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":1063,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(target);\\n\\t}\\n}\",\"filename\":\"basic-weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":1064,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerList, takeover } from \\\"modules/helper.js\\\";\\n\\n/** @param {NS} ns **/\\n// TODO: unused + unfinished, based on setup.ns\\nexport async function main(ns) {\\n\\tconst myServers = [\\\"home\\\"];\\n\\n\\tvar servers = await getServerList(myServers, 0, ns);\\n\\n\\tfor (let entry in servers) {\\t\\n\\t\\tawait takeover(servers[entry], ns);\\n\\t}\\n}\",\"filename\":\"deep-setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":1065,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\t//\\n}\",\"filename\":\"formulas-testing.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":1066,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tconst currentMachine = ns.getHostname();\\n\\tvar servers = ns.scan(currentMachine);\\n\\tvar scripts = ns.ls(home, \\\"basic-\\\");\\n\\n\\tns.tprint(\\\"Host:  \\\" + currentMachine);\\n\\tfor (let entry in servers) {\\t// depth 0\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\t// depth 1\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== home && subservers.length > 1) {\\n\\t\\t\\t\\tns.tprint(\\\"-----> \\\" + subservers[subentry]);\\n\\t\\t\\t\\tlet subserversd2 = ns.scan(subservers[subentry]); // depth 2\\n\\t\\t\\t\\tfor (let subentryd2 in subserversd2) {\\n\\t\\t\\t\\t\\tif (subserversd2[subentryd2] !== subservers[subentry] && subserversd2[subentryd2] !== servers[entry] && subserversd2.length > 1) {\\n\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------> \\\" + subserversd2[subentryd2]);\\n\\t\\t\\t\\t\\t\\tlet subserversd3 = ns.scan(subserversd2[subentryd2]);\\t// depth 3\\n\\t\\t\\t\\t\\t\\tfor (let subentryd3 in subserversd3) {\\n\\t\\t\\t\\t\\t\\t\\tif (subserversd3[subentryd3] !== subserversd2[subentryd2] && subserversd3[subentryd3] !== subservers[subentry] && subserversd3.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------> \\\" + subserversd3[subentryd3]);\\n\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd4 = ns.scan(subserversd3[subentryd3]);\\t// depth 4\\n\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd4 in subserversd4) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd4[subentryd4] !== subserversd3[subentryd3] && subserversd4[subentryd4] !== subserversd2[subentryd2] && subserversd4.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------------> \\\" + subserversd4[subentryd4]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd5 = ns.scan(subserversd4[subentryd4]);\\t// depth 5\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd5 in subserversd5) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd5[subentryd5] !== subserversd4[subentryd4] && subserversd5[subentryd5] !== subserversd3[subentryd3] && subserversd5.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-------------------------> \\\" + subserversd5[subentryd5]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd6 = ns.scan(subserversd5[subentryd5]);\\t// depth 6\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd6 in subserversd6) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd6[subentryd6] !== subserversd5[subentryd5] && subserversd6[subentryd6] !== subserversd4[subentryd4] && subserversd6.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"------------------------------> \\\" + subserversd6[subentryd6]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd7 = ns.scan(subserversd6[subentryd6]);\\t// depth 7\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor(let subentryd7 in subserversd7) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd7[subentryd7] !== subserversd6[subentryd6] && subserversd7[subentryd7] !== subserversd5[subentryd5] && subserversd7.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-----------------------------------> \\\" + subserversd7[subentryd7]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"gigascan.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.05,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":1067,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet targetRam = ns.getServerMaxRam(ns.args[0]);\\n\\tlet scriptMem = ns.getScriptRam(ns.args[1]);\\n\\n\\tns.tprint(\\\"Maximum possible threads for \\\" + ns.args[1] + \\\": \\\" + Math.floor(targetRam / scriptMem));\\n\\tns.exit;\\n}\",\"filename\":\"ram-usage.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":1068,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerList } from \\\"modules/helper.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet serversSeen = [\\\"home\\\"]; // home + bought servers\\n\\tlet contractList = [];\\n\\n\\tserversSeen = await getServerList(serversSeen, 0, ns);\\n\\n\\tns.tprint(serversSeen);\\n}\",\"filename\":\"search-coding-contracts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":1069,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tvar servers = ns.scan(home);\\n\\tvar scripts = ns.ls(home, \\\".ns\\\");\\n\\n\\tfor (let entry in scripts) {\\n\\t\\tns.tprint(\\\"found script: \\\" + scripts[entry]);\\n\\t}\\n\\n\\t// Hack servers (!!! depth = 2 !!!) if needed and populate with scripts\\n\\tfor (let entry in servers) {\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== \\\"home\\\") {\\n\\t\\t\\t\\tns.tprint(\\\"----->   \\\" + subservers[subentry]);\\n\\t\\t\\t\\tif (!ns.hasRootAccess(subservers[subentry])) {\\n\\t\\t\\t\\t\\ttakeover(subservers[subentry]);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tns.tprint(\\\"copying scripts to \\\" + subservers[subentry]);\\n\\t\\t\\t\\tawait ns.scp(scripts, home, subservers[subentry]);\\n\\t\\t\\t\\t//await ns.scp(\\\"setup.ns\\\", home, subservers[subentry]);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (!ns.hasRootAccess(servers[entry])) {\\n\\t\\t\\ttakeover(servers[entry]);\\n\\t\\t}\\n\\t\\tns.tprint(\\\"copying scripts to \\\" + servers[entry]);\\n\\t\\tawait ns.scp(scripts, home, servers[entry]);\\n\\t\\t//await ns.scp(\\\"setup.ns\\\", home, servers[entry]);\\n\\t}\\n\\n\\t/** \\n\\t * \\tAttempts to take over target machine\\t\\n\\t * \\n\\t *  @param {string} tar\\n\\t *  @return {boolean} outcome \\n\\t**/\\n\\tasync function takeover(tar) {\\n\\t\\tlet currentTarget = tar;\\n\\t\\tlet isNotTakenOver = true;\\n\\t\\tlet attemptCounter = 0;\\n\\n\\t\\tif (ns.getServerNumPortsRequired <= 5 && attemptCounter < 50) {\\n\\t\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\n\\t\\t\\t\\tattemptCounter++;\\n\\t\\t\\t}\\n\\n\\t\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.15,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":1070,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}}],\"serversOnNetwork\":[\"rothman-uni\",\"galactic-cyber\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":67,\"hackDifficulty\":67,\"minDifficulty\":22,\"moneyAvailable\":736124288,\"moneyMax\":18403107200,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":525,\"serverGrowth\":55}},\"aevum-police\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"aevum-police\",\"httpPortOpen\":true,\"ip\":\"49.3.5.4\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Aevum Police Headquarters\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Returns an array of all hostnames in the network tree\\n * \\n * @param {string[]} myServers\\n * @param {number} safetyCounter Prevents infnite recursion\\n * @param {NS} ns\\n */\\nexport async function getServerList(myServers, safetyCounter, ns) {\\n\\tlet srvrsSeen = myServers;\\n\\tlet currServScanResult = [];\\n\\n\\tfor (let serverSeen in srvrsSeen) {\\n\\t\\tcurrServScanResult = ns.scan(srvrsSeen[serverSeen]);\\n\\t\\tfor (let entry in currServScanResult) {\\n\\t\\t\\tif (!srvrsSeen.includes(currServScanResult[entry])) {\\n\\t\\t\\t\\tsrvrsSeen.push(currServScanResult[entry]);\\n\\t\\t\\t\\tif ((++safetyCounter) < 250) {\\n\\t\\t\\t\\t\\tawait getServerList(srvrsSeen, safetyCounter, ns);\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tns.exit();\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\t//Filter out invalid values (NaN, null, {}, undefined)\\n\\tsrvrsSeen = srvrsSeen.filter(x => x);\\n\\treturn srvrsSeen;\\n}\\n\\n\\n/** \\n * \\tAttempts to take over target machine\\t\\n * \\n *  @param {string} target\\n * \\t@param {NS} ns\\n *  @return {boolean} outcome \\n**/\\nexport async function takeover(target, ns) {\\n\\tconst home = \\\"home\\\";\\n\\tlet currentTarget = target;\\n\\tlet isNotTakenOver = true;\\n\\tlet attemptCounter = 0;\\n\\n\\tlet scripts = ns.ls(home, \\\".js\\\");\\n\\t//scripts.push(ns.ls(home, \\\".ns\\\")); //in case of deprecated .ns scripts\\n\\n\\tns.tprint(scripts);\\n\\n\\n\\tif (!ns.hasRootAccess(currentTarget) && attemptCounter < 30) {\\n\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\ttry {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t} catch (error) {\\n\\t\\t\\t\\t\\tns.tprint(\\\"not enough ports to nuke \\\" + currentTarget);\\n\\t\\t\\t\\t\\treturn false;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t}\\n\\t\\t\\tattemptCounter++;\\n\\t\\t}\\n\\n\\t\\tawait ns.scp(scripts, home, currentTarget);\\n\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\",\"filename\":\"/modules/helper.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"aevum-police\",\"moduleSequenceNumber\":1071,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.grow(target);\\n\\t}\\n}\",\"filename\":\"basic-grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"aevum-police\",\"moduleSequenceNumber\":1072,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"basic-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"aevum-police\",\"moduleSequenceNumber\":1073,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(target);\\n\\t}\\n}\",\"filename\":\"basic-weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"aevum-police\",\"moduleSequenceNumber\":1074,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerList, takeover } from \\\"modules/helper.js\\\";\\n\\n/** @param {NS} ns **/\\n// TODO: unused + unfinished, based on setup.ns\\nexport async function main(ns) {\\n\\tconst myServers = [\\\"home\\\"];\\n\\n\\tvar servers = await getServerList(myServers, 0, ns);\\n\\n\\tfor (let entry in servers) {\\t\\n\\t\\tawait takeover(servers[entry], ns);\\n\\t}\\n}\",\"filename\":\"deep-setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"aevum-police\",\"moduleSequenceNumber\":1075,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\t//\\n}\",\"filename\":\"formulas-testing.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"aevum-police\",\"moduleSequenceNumber\":1076,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tconst currentMachine = ns.getHostname();\\n\\tvar servers = ns.scan(currentMachine);\\n\\tvar scripts = ns.ls(home, \\\"basic-\\\");\\n\\n\\tns.tprint(\\\"Host:  \\\" + currentMachine);\\n\\tfor (let entry in servers) {\\t// depth 0\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\t// depth 1\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== home && subservers.length > 1) {\\n\\t\\t\\t\\tns.tprint(\\\"-----> \\\" + subservers[subentry]);\\n\\t\\t\\t\\tlet subserversd2 = ns.scan(subservers[subentry]); // depth 2\\n\\t\\t\\t\\tfor (let subentryd2 in subserversd2) {\\n\\t\\t\\t\\t\\tif (subserversd2[subentryd2] !== subservers[subentry] && subserversd2[subentryd2] !== servers[entry] && subserversd2.length > 1) {\\n\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------> \\\" + subserversd2[subentryd2]);\\n\\t\\t\\t\\t\\t\\tlet subserversd3 = ns.scan(subserversd2[subentryd2]);\\t// depth 3\\n\\t\\t\\t\\t\\t\\tfor (let subentryd3 in subserversd3) {\\n\\t\\t\\t\\t\\t\\t\\tif (subserversd3[subentryd3] !== subserversd2[subentryd2] && subserversd3[subentryd3] !== subservers[subentry] && subserversd3.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------> \\\" + subserversd3[subentryd3]);\\n\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd4 = ns.scan(subserversd3[subentryd3]);\\t// depth 4\\n\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd4 in subserversd4) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd4[subentryd4] !== subserversd3[subentryd3] && subserversd4[subentryd4] !== subserversd2[subentryd2] && subserversd4.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------------> \\\" + subserversd4[subentryd4]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd5 = ns.scan(subserversd4[subentryd4]);\\t// depth 5\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd5 in subserversd5) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd5[subentryd5] !== subserversd4[subentryd4] && subserversd5[subentryd5] !== subserversd3[subentryd3] && subserversd5.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-------------------------> \\\" + subserversd5[subentryd5]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd6 = ns.scan(subserversd5[subentryd5]);\\t// depth 6\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd6 in subserversd6) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd6[subentryd6] !== subserversd5[subentryd5] && subserversd6[subentryd6] !== subserversd4[subentryd4] && subserversd6.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"------------------------------> \\\" + subserversd6[subentryd6]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd7 = ns.scan(subserversd6[subentryd6]);\\t// depth 7\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor(let subentryd7 in subserversd7) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd7[subentryd7] !== subserversd6[subentryd6] && subserversd7[subentryd7] !== subserversd5[subentryd5] && subserversd7.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-----------------------------------> \\\" + subserversd7[subentryd7]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"gigascan.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.05,\"server\":\"aevum-police\",\"moduleSequenceNumber\":1077,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet targetRam = ns.getServerMaxRam(ns.args[0]);\\n\\tlet scriptMem = ns.getScriptRam(ns.args[1]);\\n\\n\\tns.tprint(\\\"Maximum possible threads for \\\" + ns.args[1] + \\\": \\\" + Math.floor(targetRam / scriptMem));\\n\\tns.exit;\\n}\",\"filename\":\"ram-usage.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"aevum-police\",\"moduleSequenceNumber\":1078,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerList } from \\\"modules/helper.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet serversSeen = [\\\"home\\\"]; // home + bought servers\\n\\tlet contractList = [];\\n\\n\\tserversSeen = await getServerList(serversSeen, 0, ns);\\n\\n\\tns.tprint(serversSeen);\\n}\",\"filename\":\"search-coding-contracts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"aevum-police\",\"moduleSequenceNumber\":1079,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tvar servers = ns.scan(home);\\n\\tvar scripts = ns.ls(home, \\\".ns\\\");\\n\\n\\tfor (let entry in scripts) {\\n\\t\\tns.tprint(\\\"found script: \\\" + scripts[entry]);\\n\\t}\\n\\n\\t// Hack servers (!!! depth = 2 !!!) if needed and populate with scripts\\n\\tfor (let entry in servers) {\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== \\\"home\\\") {\\n\\t\\t\\t\\tns.tprint(\\\"----->   \\\" + subservers[subentry]);\\n\\t\\t\\t\\tif (!ns.hasRootAccess(subservers[subentry])) {\\n\\t\\t\\t\\t\\ttakeover(subservers[subentry]);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tns.tprint(\\\"copying scripts to \\\" + subservers[subentry]);\\n\\t\\t\\t\\tawait ns.scp(scripts, home, subservers[subentry]);\\n\\t\\t\\t\\t//await ns.scp(\\\"setup.ns\\\", home, subservers[subentry]);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (!ns.hasRootAccess(servers[entry])) {\\n\\t\\t\\ttakeover(servers[entry]);\\n\\t\\t}\\n\\t\\tns.tprint(\\\"copying scripts to \\\" + servers[entry]);\\n\\t\\tawait ns.scp(scripts, home, servers[entry]);\\n\\t\\t//await ns.scp(\\\"setup.ns\\\", home, servers[entry]);\\n\\t}\\n\\n\\t/** \\n\\t * \\tAttempts to take over target machine\\t\\n\\t * \\n\\t *  @param {string} tar\\n\\t *  @return {boolean} outcome \\n\\t**/\\n\\tasync function takeover(tar) {\\n\\t\\tlet currentTarget = tar;\\n\\t\\tlet isNotTakenOver = true;\\n\\t\\tlet attemptCounter = 0;\\n\\n\\t\\tif (ns.getServerNumPortsRequired <= 5 && attemptCounter < 50) {\\n\\t\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\n\\t\\t\\t\\tattemptCounter++;\\n\\t\\t\\t}\\n\\n\\t\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.15,\"server\":\"aevum-police\",\"moduleSequenceNumber\":1080,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}}],\"serversOnNetwork\":[\"catalyst\",\"aerocorp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":79,\"hackDifficulty\":79,\"minDifficulty\":26,\"moneyAvailable\":249107121,\"moneyMax\":6227678025,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":401,\"serverGrowth\":31}},\"rothman-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"rothman-uni\",\"httpPortOpen\":true,\"ip\":\"26.8.6.0\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"tensions-in-tech-race.lit\"],\"organizationName\":\"Rothman University\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Returns an array of all hostnames in the network tree\\n * \\n * @param {string[]} myServers\\n * @param {number} safetyCounter Prevents infnite recursion\\n * @param {NS} ns\\n */\\nexport async function getServerList(myServers, safetyCounter, ns) {\\n\\tlet srvrsSeen = myServers;\\n\\tlet currServScanResult = [];\\n\\n\\tfor (let serverSeen in srvrsSeen) {\\n\\t\\tcurrServScanResult = ns.scan(srvrsSeen[serverSeen]);\\n\\t\\tfor (let entry in currServScanResult) {\\n\\t\\t\\tif (!srvrsSeen.includes(currServScanResult[entry])) {\\n\\t\\t\\t\\tsrvrsSeen.push(currServScanResult[entry]);\\n\\t\\t\\t\\tif ((++safetyCounter) < 250) {\\n\\t\\t\\t\\t\\tawait getServerList(srvrsSeen, safetyCounter, ns);\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tns.exit();\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\t//Filter out invalid values (NaN, null, {}, undefined)\\n\\tsrvrsSeen = srvrsSeen.filter(x => x);\\n\\treturn srvrsSeen;\\n}\\n\\n\\n/** \\n * \\tAttempts to take over target machine\\t\\n * \\n *  @param {string} target\\n * \\t@param {NS} ns\\n *  @return {boolean} outcome \\n**/\\nexport async function takeover(target, ns) {\\n\\tconst home = \\\"home\\\";\\n\\tlet currentTarget = target;\\n\\tlet isNotTakenOver = true;\\n\\tlet attemptCounter = 0;\\n\\n\\tlet scripts = ns.ls(home, \\\".js\\\");\\n\\t//scripts.push(ns.ls(home, \\\".ns\\\")); //in case of deprecated .ns scripts\\n\\n\\tns.tprint(scripts);\\n\\n\\n\\tif (!ns.hasRootAccess(currentTarget) && attemptCounter < 30) {\\n\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\ttry {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t} catch (error) {\\n\\t\\t\\t\\t\\tns.tprint(\\\"not enough ports to nuke \\\" + currentTarget);\\n\\t\\t\\t\\t\\treturn false;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t}\\n\\t\\t\\tattemptCounter++;\\n\\t\\t}\\n\\n\\t\\tawait ns.scp(scripts, home, currentTarget);\\n\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\",\"filename\":\"/modules/helper.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":1081,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.grow(target);\\n\\t}\\n}\",\"filename\":\"basic-grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":1082,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"basic-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":1083,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(target);\\n\\t}\\n}\",\"filename\":\"basic-weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":1084,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerList, takeover } from \\\"modules/helper.js\\\";\\n\\n/** @param {NS} ns **/\\n// TODO: unused + unfinished, based on setup.ns\\nexport async function main(ns) {\\n\\tconst myServers = [\\\"home\\\"];\\n\\n\\tvar servers = await getServerList(myServers, 0, ns);\\n\\n\\tfor (let entry in servers) {\\t\\n\\t\\tawait takeover(servers[entry], ns);\\n\\t}\\n}\",\"filename\":\"deep-setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":1085,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\t//\\n}\",\"filename\":\"formulas-testing.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":1086,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tconst currentMachine = ns.getHostname();\\n\\tvar servers = ns.scan(currentMachine);\\n\\tvar scripts = ns.ls(home, \\\"basic-\\\");\\n\\n\\tns.tprint(\\\"Host:  \\\" + currentMachine);\\n\\tfor (let entry in servers) {\\t// depth 0\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\t// depth 1\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== home && subservers.length > 1) {\\n\\t\\t\\t\\tns.tprint(\\\"-----> \\\" + subservers[subentry]);\\n\\t\\t\\t\\tlet subserversd2 = ns.scan(subservers[subentry]); // depth 2\\n\\t\\t\\t\\tfor (let subentryd2 in subserversd2) {\\n\\t\\t\\t\\t\\tif (subserversd2[subentryd2] !== subservers[subentry] && subserversd2[subentryd2] !== servers[entry] && subserversd2.length > 1) {\\n\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------> \\\" + subserversd2[subentryd2]);\\n\\t\\t\\t\\t\\t\\tlet subserversd3 = ns.scan(subserversd2[subentryd2]);\\t// depth 3\\n\\t\\t\\t\\t\\t\\tfor (let subentryd3 in subserversd3) {\\n\\t\\t\\t\\t\\t\\t\\tif (subserversd3[subentryd3] !== subserversd2[subentryd2] && subserversd3[subentryd3] !== subservers[subentry] && subserversd3.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------> \\\" + subserversd3[subentryd3]);\\n\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd4 = ns.scan(subserversd3[subentryd3]);\\t// depth 4\\n\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd4 in subserversd4) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd4[subentryd4] !== subserversd3[subentryd3] && subserversd4[subentryd4] !== subserversd2[subentryd2] && subserversd4.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------------> \\\" + subserversd4[subentryd4]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd5 = ns.scan(subserversd4[subentryd4]);\\t// depth 5\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd5 in subserversd5) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd5[subentryd5] !== subserversd4[subentryd4] && subserversd5[subentryd5] !== subserversd3[subentryd3] && subserversd5.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-------------------------> \\\" + subserversd5[subentryd5]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd6 = ns.scan(subserversd5[subentryd5]);\\t// depth 6\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd6 in subserversd6) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd6[subentryd6] !== subserversd5[subentryd5] && subserversd6[subentryd6] !== subserversd4[subentryd4] && subserversd6.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"------------------------------> \\\" + subserversd6[subentryd6]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd7 = ns.scan(subserversd6[subentryd6]);\\t// depth 7\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor(let subentryd7 in subserversd7) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd7[subentryd7] !== subserversd6[subentryd6] && subserversd7[subentryd7] !== subserversd5[subentryd5] && subserversd7.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-----------------------------------> \\\" + subserversd7[subentryd7]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"gigascan.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.05,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":1087,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet targetRam = ns.getServerMaxRam(ns.args[0]);\\n\\tlet scriptMem = ns.getScriptRam(ns.args[1]);\\n\\n\\tns.tprint(\\\"Maximum possible threads for \\\" + ns.args[1] + \\\": \\\" + Math.floor(targetRam / scriptMem));\\n\\tns.exit;\\n}\",\"filename\":\"ram-usage.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":1088,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerList } from \\\"modules/helper.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet serversSeen = [\\\"home\\\"]; // home + bought servers\\n\\tlet contractList = [];\\n\\n\\tserversSeen = await getServerList(serversSeen, 0, ns);\\n\\n\\tns.tprint(serversSeen);\\n}\",\"filename\":\"search-coding-contracts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":1089,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tvar servers = ns.scan(home);\\n\\tvar scripts = ns.ls(home, \\\".ns\\\");\\n\\n\\tfor (let entry in scripts) {\\n\\t\\tns.tprint(\\\"found script: \\\" + scripts[entry]);\\n\\t}\\n\\n\\t// Hack servers (!!! depth = 2 !!!) if needed and populate with scripts\\n\\tfor (let entry in servers) {\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== \\\"home\\\") {\\n\\t\\t\\t\\tns.tprint(\\\"----->   \\\" + subservers[subentry]);\\n\\t\\t\\t\\tif (!ns.hasRootAccess(subservers[subentry])) {\\n\\t\\t\\t\\t\\ttakeover(subservers[subentry]);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tns.tprint(\\\"copying scripts to \\\" + subservers[subentry]);\\n\\t\\t\\t\\tawait ns.scp(scripts, home, subservers[subentry]);\\n\\t\\t\\t\\t//await ns.scp(\\\"setup.ns\\\", home, subservers[subentry]);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (!ns.hasRootAccess(servers[entry])) {\\n\\t\\t\\ttakeover(servers[entry]);\\n\\t\\t}\\n\\t\\tns.tprint(\\\"copying scripts to \\\" + servers[entry]);\\n\\t\\tawait ns.scp(scripts, home, servers[entry]);\\n\\t\\t//await ns.scp(\\\"setup.ns\\\", home, servers[entry]);\\n\\t}\\n\\n\\t/** \\n\\t * \\tAttempts to take over target machine\\t\\n\\t * \\n\\t *  @param {string} tar\\n\\t *  @return {boolean} outcome \\n\\t**/\\n\\tasync function takeover(tar) {\\n\\t\\tlet currentTarget = tar;\\n\\t\\tlet isNotTakenOver = true;\\n\\t\\tlet attemptCounter = 0;\\n\\n\\t\\tif (ns.getServerNumPortsRequired <= 5 && attemptCounter < 50) {\\n\\t\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\n\\t\\t\\t\\tattemptCounter++;\\n\\t\\t\\t}\\n\\n\\t\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.15,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":1090,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}}],\"serversOnNetwork\":[\"netlink\",\"alpha-ent\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":46,\"hackDifficulty\":46,\"minDifficulty\":15,\"moneyAvailable\":194333246,\"moneyMax\":4858331150,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":425,\"serverGrowth\":42}},\"zb-institute\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zb-institute\",\"httpPortOpen\":true,\"ip\":\"39.4.5.4\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"ZB Institute of Technology\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Returns an array of all hostnames in the network tree\\n * \\n * @param {string[]} myServers\\n * @param {number} safetyCounter Prevents infnite recursion\\n * @param {NS} ns\\n */\\nexport async function getServerList(myServers, safetyCounter, ns) {\\n\\tlet srvrsSeen = myServers;\\n\\tlet currServScanResult = [];\\n\\n\\tfor (let serverSeen in srvrsSeen) {\\n\\t\\tcurrServScanResult = ns.scan(srvrsSeen[serverSeen]);\\n\\t\\tfor (let entry in currServScanResult) {\\n\\t\\t\\tif (!srvrsSeen.includes(currServScanResult[entry])) {\\n\\t\\t\\t\\tsrvrsSeen.push(currServScanResult[entry]);\\n\\t\\t\\t\\tif ((++safetyCounter) < 250) {\\n\\t\\t\\t\\t\\tawait getServerList(srvrsSeen, safetyCounter, ns);\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tns.exit();\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\t//Filter out invalid values (NaN, null, {}, undefined)\\n\\tsrvrsSeen = srvrsSeen.filter(x => x);\\n\\treturn srvrsSeen;\\n}\\n\\n\\n/** \\n * \\tAttempts to take over target machine\\t\\n * \\n *  @param {string} target\\n * \\t@param {NS} ns\\n *  @return {boolean} outcome \\n**/\\nexport async function takeover(target, ns) {\\n\\tconst home = \\\"home\\\";\\n\\tlet currentTarget = target;\\n\\tlet isNotTakenOver = true;\\n\\tlet attemptCounter = 0;\\n\\n\\tlet scripts = ns.ls(home, \\\".js\\\");\\n\\t//scripts.push(ns.ls(home, \\\".ns\\\")); //in case of deprecated .ns scripts\\n\\n\\tns.tprint(scripts);\\n\\n\\n\\tif (!ns.hasRootAccess(currentTarget) && attemptCounter < 30) {\\n\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\ttry {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t} catch (error) {\\n\\t\\t\\t\\t\\tns.tprint(\\\"not enough ports to nuke \\\" + currentTarget);\\n\\t\\t\\t\\t\\treturn false;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t}\\n\\t\\t\\tattemptCounter++;\\n\\t\\t}\\n\\n\\t\\tawait ns.scp(scripts, home, currentTarget);\\n\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\",\"filename\":\"/modules/helper.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"zb-institute\",\"moduleSequenceNumber\":1091,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.grow(target);\\n\\t}\\n}\",\"filename\":\"basic-grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zb-institute\",\"moduleSequenceNumber\":1092,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"basic-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"zb-institute\",\"moduleSequenceNumber\":1093,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(target);\\n\\t}\\n}\",\"filename\":\"basic-weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zb-institute\",\"moduleSequenceNumber\":1094,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerList, takeover } from \\\"modules/helper.js\\\";\\n\\n/** @param {NS} ns **/\\n// TODO: unused + unfinished, based on setup.ns\\nexport async function main(ns) {\\n\\tconst myServers = [\\\"home\\\"];\\n\\n\\tvar servers = await getServerList(myServers, 0, ns);\\n\\n\\tfor (let entry in servers) {\\t\\n\\t\\tawait takeover(servers[entry], ns);\\n\\t}\\n}\",\"filename\":\"deep-setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"zb-institute\",\"moduleSequenceNumber\":1095,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\t//\\n}\",\"filename\":\"formulas-testing.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"zb-institute\",\"moduleSequenceNumber\":1096,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tconst currentMachine = ns.getHostname();\\n\\tvar servers = ns.scan(currentMachine);\\n\\tvar scripts = ns.ls(home, \\\"basic-\\\");\\n\\n\\tns.tprint(\\\"Host:  \\\" + currentMachine);\\n\\tfor (let entry in servers) {\\t// depth 0\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\t// depth 1\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== home && subservers.length > 1) {\\n\\t\\t\\t\\tns.tprint(\\\"-----> \\\" + subservers[subentry]);\\n\\t\\t\\t\\tlet subserversd2 = ns.scan(subservers[subentry]); // depth 2\\n\\t\\t\\t\\tfor (let subentryd2 in subserversd2) {\\n\\t\\t\\t\\t\\tif (subserversd2[subentryd2] !== subservers[subentry] && subserversd2[subentryd2] !== servers[entry] && subserversd2.length > 1) {\\n\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------> \\\" + subserversd2[subentryd2]);\\n\\t\\t\\t\\t\\t\\tlet subserversd3 = ns.scan(subserversd2[subentryd2]);\\t// depth 3\\n\\t\\t\\t\\t\\t\\tfor (let subentryd3 in subserversd3) {\\n\\t\\t\\t\\t\\t\\t\\tif (subserversd3[subentryd3] !== subserversd2[subentryd2] && subserversd3[subentryd3] !== subservers[subentry] && subserversd3.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------> \\\" + subserversd3[subentryd3]);\\n\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd4 = ns.scan(subserversd3[subentryd3]);\\t// depth 4\\n\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd4 in subserversd4) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd4[subentryd4] !== subserversd3[subentryd3] && subserversd4[subentryd4] !== subserversd2[subentryd2] && subserversd4.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------------> \\\" + subserversd4[subentryd4]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd5 = ns.scan(subserversd4[subentryd4]);\\t// depth 5\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd5 in subserversd5) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd5[subentryd5] !== subserversd4[subentryd4] && subserversd5[subentryd5] !== subserversd3[subentryd3] && subserversd5.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-------------------------> \\\" + subserversd5[subentryd5]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd6 = ns.scan(subserversd5[subentryd5]);\\t// depth 6\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd6 in subserversd6) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd6[subentryd6] !== subserversd5[subentryd5] && subserversd6[subentryd6] !== subserversd4[subentryd4] && subserversd6.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"------------------------------> \\\" + subserversd6[subentryd6]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd7 = ns.scan(subserversd6[subentryd6]);\\t// depth 7\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor(let subentryd7 in subserversd7) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd7[subentryd7] !== subserversd6[subentryd6] && subserversd7[subentryd7] !== subserversd5[subentryd5] && subserversd7.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-----------------------------------> \\\" + subserversd7[subentryd7]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"gigascan.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.05,\"server\":\"zb-institute\",\"moduleSequenceNumber\":1097,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet targetRam = ns.getServerMaxRam(ns.args[0]);\\n\\tlet scriptMem = ns.getScriptRam(ns.args[1]);\\n\\n\\tns.tprint(\\\"Maximum possible threads for \\\" + ns.args[1] + \\\": \\\" + Math.floor(targetRam / scriptMem));\\n\\tns.exit;\\n}\",\"filename\":\"ram-usage.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zb-institute\",\"moduleSequenceNumber\":1098,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerList } from \\\"modules/helper.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet serversSeen = [\\\"home\\\"]; // home + bought servers\\n\\tlet contractList = [];\\n\\n\\tserversSeen = await getServerList(serversSeen, 0, ns);\\n\\n\\tns.tprint(serversSeen);\\n}\",\"filename\":\"search-coding-contracts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"zb-institute\",\"moduleSequenceNumber\":1099,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tvar servers = ns.scan(home);\\n\\tvar scripts = ns.ls(home, \\\".ns\\\");\\n\\n\\tfor (let entry in scripts) {\\n\\t\\tns.tprint(\\\"found script: \\\" + scripts[entry]);\\n\\t}\\n\\n\\t// Hack servers (!!! depth = 2 !!!) if needed and populate with scripts\\n\\tfor (let entry in servers) {\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== \\\"home\\\") {\\n\\t\\t\\t\\tns.tprint(\\\"----->   \\\" + subservers[subentry]);\\n\\t\\t\\t\\tif (!ns.hasRootAccess(subservers[subentry])) {\\n\\t\\t\\t\\t\\ttakeover(subservers[subentry]);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tns.tprint(\\\"copying scripts to \\\" + subservers[subentry]);\\n\\t\\t\\t\\tawait ns.scp(scripts, home, subservers[subentry]);\\n\\t\\t\\t\\t//await ns.scp(\\\"setup.ns\\\", home, subservers[subentry]);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (!ns.hasRootAccess(servers[entry])) {\\n\\t\\t\\ttakeover(servers[entry]);\\n\\t\\t}\\n\\t\\tns.tprint(\\\"copying scripts to \\\" + servers[entry]);\\n\\t\\tawait ns.scp(scripts, home, servers[entry]);\\n\\t\\t//await ns.scp(\\\"setup.ns\\\", home, servers[entry]);\\n\\t}\\n\\n\\t/** \\n\\t * \\tAttempts to take over target machine\\t\\n\\t * \\n\\t *  @param {string} tar\\n\\t *  @return {boolean} outcome \\n\\t**/\\n\\tasync function takeover(tar) {\\n\\t\\tlet currentTarget = tar;\\n\\t\\tlet isNotTakenOver = true;\\n\\t\\tlet attemptCounter = 0;\\n\\n\\t\\tif (ns.getServerNumPortsRequired <= 5 && attemptCounter < 50) {\\n\\t\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\n\\t\\t\\t\\tattemptCounter++;\\n\\t\\t\\t}\\n\\n\\t\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.15,\"server\":\"zb-institute\",\"moduleSequenceNumber\":1100,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}}],\"serversOnNetwork\":[\"avmnite-02h\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":67,\"hackDifficulty\":67,\"minDifficulty\":22,\"moneyAvailable\":1004137175,\"moneyMax\":25103429375,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":750,\"serverGrowth\":80}},\"summit-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-474710.cct\",\"type\":\"Algorithmic Stock Trader II\",\"data\":[109,17,45,4,178,22,40,66,78,34,160,116,26,103,68,161,121,31,180,126,103],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"summit-uni\",\"httpPortOpen\":true,\"ip\":\"94.6.5.7\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"synthetic-muscles.lit\"],\"organizationName\":\"Summit University\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Returns an array of all hostnames in the network tree\\n * \\n * @param {string[]} myServers\\n * @param {number} safetyCounter Prevents infnite recursion\\n * @param {NS} ns\\n */\\nexport async function getServerList(myServers, safetyCounter, ns) {\\n\\tlet srvrsSeen = myServers;\\n\\tlet currServScanResult = [];\\n\\n\\tfor (let serverSeen in srvrsSeen) {\\n\\t\\tcurrServScanResult = ns.scan(srvrsSeen[serverSeen]);\\n\\t\\tfor (let entry in currServScanResult) {\\n\\t\\t\\tif (!srvrsSeen.includes(currServScanResult[entry])) {\\n\\t\\t\\t\\tsrvrsSeen.push(currServScanResult[entry]);\\n\\t\\t\\t\\tif ((++safetyCounter) < 250) {\\n\\t\\t\\t\\t\\tawait getServerList(srvrsSeen, safetyCounter, ns);\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tns.exit();\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\t//Filter out invalid values (NaN, null, {}, undefined)\\n\\tsrvrsSeen = srvrsSeen.filter(x => x);\\n\\treturn srvrsSeen;\\n}\\n\\n\\n/** \\n * \\tAttempts to take over target machine\\t\\n * \\n *  @param {string} target\\n * \\t@param {NS} ns\\n *  @return {boolean} outcome \\n**/\\nexport async function takeover(target, ns) {\\n\\tconst home = \\\"home\\\";\\n\\tlet currentTarget = target;\\n\\tlet isNotTakenOver = true;\\n\\tlet attemptCounter = 0;\\n\\n\\tlet scripts = ns.ls(home, \\\".js\\\");\\n\\t//scripts.push(ns.ls(home, \\\".ns\\\")); //in case of deprecated .ns scripts\\n\\n\\tns.tprint(scripts);\\n\\n\\n\\tif (!ns.hasRootAccess(currentTarget) && attemptCounter < 30) {\\n\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\ttry {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t} catch (error) {\\n\\t\\t\\t\\t\\tns.tprint(\\\"not enough ports to nuke \\\" + currentTarget);\\n\\t\\t\\t\\t\\treturn false;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t}\\n\\t\\t\\tattemptCounter++;\\n\\t\\t}\\n\\n\\t\\tawait ns.scp(scripts, home, currentTarget);\\n\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\",\"filename\":\"/modules/helper.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"summit-uni\",\"moduleSequenceNumber\":1101,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.grow(target);\\n\\t}\\n}\",\"filename\":\"basic-grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"summit-uni\",\"moduleSequenceNumber\":1102,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"basic-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"summit-uni\",\"moduleSequenceNumber\":1103,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(target);\\n\\t}\\n}\",\"filename\":\"basic-weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"summit-uni\",\"moduleSequenceNumber\":1104,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerList, takeover } from \\\"modules/helper.js\\\";\\n\\n/** @param {NS} ns **/\\n// TODO: unused + unfinished, based on setup.ns\\nexport async function main(ns) {\\n\\tconst myServers = [\\\"home\\\"];\\n\\n\\tvar servers = await getServerList(myServers, 0, ns);\\n\\n\\tfor (let entry in servers) {\\t\\n\\t\\tawait takeover(servers[entry], ns);\\n\\t}\\n}\",\"filename\":\"deep-setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"summit-uni\",\"moduleSequenceNumber\":1105,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\t//\\n}\",\"filename\":\"formulas-testing.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"summit-uni\",\"moduleSequenceNumber\":1106,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tconst currentMachine = ns.getHostname();\\n\\tvar servers = ns.scan(currentMachine);\\n\\tvar scripts = ns.ls(home, \\\"basic-\\\");\\n\\n\\tns.tprint(\\\"Host:  \\\" + currentMachine);\\n\\tfor (let entry in servers) {\\t// depth 0\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\t// depth 1\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== home && subservers.length > 1) {\\n\\t\\t\\t\\tns.tprint(\\\"-----> \\\" + subservers[subentry]);\\n\\t\\t\\t\\tlet subserversd2 = ns.scan(subservers[subentry]); // depth 2\\n\\t\\t\\t\\tfor (let subentryd2 in subserversd2) {\\n\\t\\t\\t\\t\\tif (subserversd2[subentryd2] !== subservers[subentry] && subserversd2[subentryd2] !== servers[entry] && subserversd2.length > 1) {\\n\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------> \\\" + subserversd2[subentryd2]);\\n\\t\\t\\t\\t\\t\\tlet subserversd3 = ns.scan(subserversd2[subentryd2]);\\t// depth 3\\n\\t\\t\\t\\t\\t\\tfor (let subentryd3 in subserversd3) {\\n\\t\\t\\t\\t\\t\\t\\tif (subserversd3[subentryd3] !== subserversd2[subentryd2] && subserversd3[subentryd3] !== subservers[subentry] && subserversd3.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------> \\\" + subserversd3[subentryd3]);\\n\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd4 = ns.scan(subserversd3[subentryd3]);\\t// depth 4\\n\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd4 in subserversd4) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd4[subentryd4] !== subserversd3[subentryd3] && subserversd4[subentryd4] !== subserversd2[subentryd2] && subserversd4.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------------> \\\" + subserversd4[subentryd4]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd5 = ns.scan(subserversd4[subentryd4]);\\t// depth 5\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd5 in subserversd5) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd5[subentryd5] !== subserversd4[subentryd4] && subserversd5[subentryd5] !== subserversd3[subentryd3] && subserversd5.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-------------------------> \\\" + subserversd5[subentryd5]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd6 = ns.scan(subserversd5[subentryd5]);\\t// depth 6\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd6 in subserversd6) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd6[subentryd6] !== subserversd5[subentryd5] && subserversd6[subentryd6] !== subserversd4[subentryd4] && subserversd6.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"------------------------------> \\\" + subserversd6[subentryd6]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd7 = ns.scan(subserversd6[subentryd6]);\\t// depth 7\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor(let subentryd7 in subserversd7) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd7[subentryd7] !== subserversd6[subentryd6] && subserversd7[subentryd7] !== subserversd5[subentryd5] && subserversd7.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-----------------------------------> \\\" + subserversd7[subentryd7]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"gigascan.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.05,\"server\":\"summit-uni\",\"moduleSequenceNumber\":1107,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet targetRam = ns.getServerMaxRam(ns.args[0]);\\n\\tlet scriptMem = ns.getScriptRam(ns.args[1]);\\n\\n\\tns.tprint(\\\"Maximum possible threads for \\\" + ns.args[1] + \\\": \\\" + Math.floor(targetRam / scriptMem));\\n\\tns.exit;\\n}\",\"filename\":\"ram-usage.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"summit-uni\",\"moduleSequenceNumber\":1108,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerList } from \\\"modules/helper.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet serversSeen = [\\\"home\\\"]; // home + bought servers\\n\\tlet contractList = [];\\n\\n\\tserversSeen = await getServerList(serversSeen, 0, ns);\\n\\n\\tns.tprint(serversSeen);\\n}\",\"filename\":\"search-coding-contracts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"summit-uni\",\"moduleSequenceNumber\":1109,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tvar servers = ns.scan(home);\\n\\tvar scripts = ns.ls(home, \\\".ns\\\");\\n\\n\\tfor (let entry in scripts) {\\n\\t\\tns.tprint(\\\"found script: \\\" + scripts[entry]);\\n\\t}\\n\\n\\t// Hack servers (!!! depth = 2 !!!) if needed and populate with scripts\\n\\tfor (let entry in servers) {\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== \\\"home\\\") {\\n\\t\\t\\t\\tns.tprint(\\\"----->   \\\" + subservers[subentry]);\\n\\t\\t\\t\\tif (!ns.hasRootAccess(subservers[subentry])) {\\n\\t\\t\\t\\t\\ttakeover(subservers[subentry]);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tns.tprint(\\\"copying scripts to \\\" + subservers[subentry]);\\n\\t\\t\\t\\tawait ns.scp(scripts, home, subservers[subentry]);\\n\\t\\t\\t\\t//await ns.scp(\\\"setup.ns\\\", home, subservers[subentry]);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (!ns.hasRootAccess(servers[entry])) {\\n\\t\\t\\ttakeover(servers[entry]);\\n\\t\\t}\\n\\t\\tns.tprint(\\\"copying scripts to \\\" + servers[entry]);\\n\\t\\tawait ns.scp(scripts, home, servers[entry]);\\n\\t\\t//await ns.scp(\\\"setup.ns\\\", home, servers[entry]);\\n\\t}\\n\\n\\t/** \\n\\t * \\tAttempts to take over target machine\\t\\n\\t * \\n\\t *  @param {string} tar\\n\\t *  @return {boolean} outcome \\n\\t**/\\n\\tasync function takeover(tar) {\\n\\t\\tlet currentTarget = tar;\\n\\t\\tlet isNotTakenOver = true;\\n\\t\\tlet attemptCounter = 0;\\n\\n\\t\\tif (ns.getServerNumPortsRequired <= 5 && attemptCounter < 50) {\\n\\t\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\n\\t\\t\\t\\tattemptCounter++;\\n\\t\\t\\t}\\n\\n\\t\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.15,\"server\":\"summit-uni\",\"moduleSequenceNumber\":1110,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}}],\"serversOnNetwork\":[\"comptek\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":50,\"hackDifficulty\":50,\"minDifficulty\":17,\"moneyAvailable\":334801500,\"moneyMax\":8370037500,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":467,\"serverGrowth\":59}},\"syscore\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-699977-Netburners.cct\",\"type\":\"Minimum Path Sum in a Triangle\",\"data\":[[8],[4,7],[9,6,3],[8,9,5,4],[8,7,3,8,5]],\"reward\":{\"name\":\"Netburners\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"syscore\",\"httpPortOpen\":true,\"ip\":\"56.5.0.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"SysCore Securities\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Returns an array of all hostnames in the network tree\\n * \\n * @param {string[]} myServers\\n * @param {number} safetyCounter Prevents infnite recursion\\n * @param {NS} ns\\n */\\nexport async function getServerList(myServers, safetyCounter, ns) {\\n\\tlet srvrsSeen = myServers;\\n\\tlet currServScanResult = [];\\n\\n\\tfor (let serverSeen in srvrsSeen) {\\n\\t\\tcurrServScanResult = ns.scan(srvrsSeen[serverSeen]);\\n\\t\\tfor (let entry in currServScanResult) {\\n\\t\\t\\tif (!srvrsSeen.includes(currServScanResult[entry])) {\\n\\t\\t\\t\\tsrvrsSeen.push(currServScanResult[entry]);\\n\\t\\t\\t\\tif ((++safetyCounter) < 250) {\\n\\t\\t\\t\\t\\tawait getServerList(srvrsSeen, safetyCounter, ns);\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tns.exit();\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\t//Filter out invalid values (NaN, null, {}, undefined)\\n\\tsrvrsSeen = srvrsSeen.filter(x => x);\\n\\treturn srvrsSeen;\\n}\\n\\n\\n/** \\n * \\tAttempts to take over target machine\\t\\n * \\n *  @param {string} target\\n * \\t@param {NS} ns\\n *  @return {boolean} outcome \\n**/\\nexport async function takeover(target, ns) {\\n\\tconst home = \\\"home\\\";\\n\\tlet currentTarget = target;\\n\\tlet isNotTakenOver = true;\\n\\tlet attemptCounter = 0;\\n\\n\\tlet scripts = ns.ls(home, \\\".js\\\");\\n\\t//scripts.push(ns.ls(home, \\\".ns\\\")); //in case of deprecated .ns scripts\\n\\n\\tns.tprint(scripts);\\n\\n\\n\\tif (!ns.hasRootAccess(currentTarget) && attemptCounter < 30) {\\n\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\ttry {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t} catch (error) {\\n\\t\\t\\t\\t\\tns.tprint(\\\"not enough ports to nuke \\\" + currentTarget);\\n\\t\\t\\t\\t\\treturn false;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t}\\n\\t\\t\\tattemptCounter++;\\n\\t\\t}\\n\\n\\t\\tawait ns.scp(scripts, home, currentTarget);\\n\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\",\"filename\":\"/modules/helper.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"syscore\",\"moduleSequenceNumber\":1111,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.grow(target);\\n\\t}\\n}\",\"filename\":\"basic-grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"syscore\",\"moduleSequenceNumber\":1112,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"basic-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"syscore\",\"moduleSequenceNumber\":1113,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(target);\\n\\t}\\n}\",\"filename\":\"basic-weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"syscore\",\"moduleSequenceNumber\":1114,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerList, takeover } from \\\"modules/helper.js\\\";\\n\\n/** @param {NS} ns **/\\n// TODO: unused + unfinished, based on setup.ns\\nexport async function main(ns) {\\n\\tconst myServers = [\\\"home\\\"];\\n\\n\\tvar servers = await getServerList(myServers, 0, ns);\\n\\n\\tfor (let entry in servers) {\\t\\n\\t\\tawait takeover(servers[entry], ns);\\n\\t}\\n}\",\"filename\":\"deep-setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"syscore\",\"moduleSequenceNumber\":1115,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\t//\\n}\",\"filename\":\"formulas-testing.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"syscore\",\"moduleSequenceNumber\":1116,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tconst currentMachine = ns.getHostname();\\n\\tvar servers = ns.scan(currentMachine);\\n\\tvar scripts = ns.ls(home, \\\"basic-\\\");\\n\\n\\tns.tprint(\\\"Host:  \\\" + currentMachine);\\n\\tfor (let entry in servers) {\\t// depth 0\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\t// depth 1\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== home && subservers.length > 1) {\\n\\t\\t\\t\\tns.tprint(\\\"-----> \\\" + subservers[subentry]);\\n\\t\\t\\t\\tlet subserversd2 = ns.scan(subservers[subentry]); // depth 2\\n\\t\\t\\t\\tfor (let subentryd2 in subserversd2) {\\n\\t\\t\\t\\t\\tif (subserversd2[subentryd2] !== subservers[subentry] && subserversd2[subentryd2] !== servers[entry] && subserversd2.length > 1) {\\n\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------> \\\" + subserversd2[subentryd2]);\\n\\t\\t\\t\\t\\t\\tlet subserversd3 = ns.scan(subserversd2[subentryd2]);\\t// depth 3\\n\\t\\t\\t\\t\\t\\tfor (let subentryd3 in subserversd3) {\\n\\t\\t\\t\\t\\t\\t\\tif (subserversd3[subentryd3] !== subserversd2[subentryd2] && subserversd3[subentryd3] !== subservers[subentry] && subserversd3.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------> \\\" + subserversd3[subentryd3]);\\n\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd4 = ns.scan(subserversd3[subentryd3]);\\t// depth 4\\n\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd4 in subserversd4) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd4[subentryd4] !== subserversd3[subentryd3] && subserversd4[subentryd4] !== subserversd2[subentryd2] && subserversd4.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------------> \\\" + subserversd4[subentryd4]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd5 = ns.scan(subserversd4[subentryd4]);\\t// depth 5\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd5 in subserversd5) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd5[subentryd5] !== subserversd4[subentryd4] && subserversd5[subentryd5] !== subserversd3[subentryd3] && subserversd5.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-------------------------> \\\" + subserversd5[subentryd5]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd6 = ns.scan(subserversd5[subentryd5]);\\t// depth 6\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd6 in subserversd6) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd6[subentryd6] !== subserversd5[subentryd5] && subserversd6[subentryd6] !== subserversd4[subentryd4] && subserversd6.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"------------------------------> \\\" + subserversd6[subentryd6]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd7 = ns.scan(subserversd6[subentryd6]);\\t// depth 7\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor(let subentryd7 in subserversd7) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd7[subentryd7] !== subserversd6[subentryd6] && subserversd7[subentryd7] !== subserversd5[subentryd5] && subserversd7.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-----------------------------------> \\\" + subserversd7[subentryd7]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"gigascan.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.05,\"server\":\"syscore\",\"moduleSequenceNumber\":1117,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet targetRam = ns.getServerMaxRam(ns.args[0]);\\n\\tlet scriptMem = ns.getScriptRam(ns.args[1]);\\n\\n\\tns.tprint(\\\"Maximum possible threads for \\\" + ns.args[1] + \\\": \\\" + Math.floor(targetRam / scriptMem));\\n\\tns.exit;\\n}\",\"filename\":\"ram-usage.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"syscore\",\"moduleSequenceNumber\":1118,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerList } from \\\"modules/helper.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet serversSeen = [\\\"home\\\"]; // home + bought servers\\n\\tlet contractList = [];\\n\\n\\tserversSeen = await getServerList(serversSeen, 0, ns);\\n\\n\\tns.tprint(serversSeen);\\n}\",\"filename\":\"search-coding-contracts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"syscore\",\"moduleSequenceNumber\":1119,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tvar servers = ns.scan(home);\\n\\tvar scripts = ns.ls(home, \\\".ns\\\");\\n\\n\\tfor (let entry in scripts) {\\n\\t\\tns.tprint(\\\"found script: \\\" + scripts[entry]);\\n\\t}\\n\\n\\t// Hack servers (!!! depth = 2 !!!) if needed and populate with scripts\\n\\tfor (let entry in servers) {\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== \\\"home\\\") {\\n\\t\\t\\t\\tns.tprint(\\\"----->   \\\" + subservers[subentry]);\\n\\t\\t\\t\\tif (!ns.hasRootAccess(subservers[subentry])) {\\n\\t\\t\\t\\t\\ttakeover(subservers[subentry]);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tns.tprint(\\\"copying scripts to \\\" + subservers[subentry]);\\n\\t\\t\\t\\tawait ns.scp(scripts, home, subservers[subentry]);\\n\\t\\t\\t\\t//await ns.scp(\\\"setup.ns\\\", home, subservers[subentry]);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (!ns.hasRootAccess(servers[entry])) {\\n\\t\\t\\ttakeover(servers[entry]);\\n\\t\\t}\\n\\t\\tns.tprint(\\\"copying scripts to \\\" + servers[entry]);\\n\\t\\tawait ns.scp(scripts, home, servers[entry]);\\n\\t\\t//await ns.scp(\\\"setup.ns\\\", home, servers[entry]);\\n\\t}\\n\\n\\t/** \\n\\t * \\tAttempts to take over target machine\\t\\n\\t * \\n\\t *  @param {string} tar\\n\\t *  @return {boolean} outcome \\n\\t**/\\n\\tasync function takeover(tar) {\\n\\t\\tlet currentTarget = tar;\\n\\t\\tlet isNotTakenOver = true;\\n\\t\\tlet attemptCounter = 0;\\n\\n\\t\\tif (ns.getServerNumPortsRequired <= 5 && attemptCounter < 50) {\\n\\t\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\n\\t\\t\\t\\tattemptCounter++;\\n\\t\\t\\t}\\n\\n\\t\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.15,\"server\":\"syscore\",\"moduleSequenceNumber\":1120,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}}],\"serversOnNetwork\":[\"avmnite-02h\",\"lexo-corp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":75,\"hackDifficulty\":75,\"minDifficulty\":25,\"moneyAvailable\":403108933,\"moneyMax\":10077723325,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":574,\"serverGrowth\":61}},\"catalyst\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-373953-Sector-12.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[12,13],\"reward\":{\"name\":\"Sector-12\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"catalyst\",\"httpPortOpen\":true,\"ip\":\"37.4.2.1\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"tensions-in-tech-race.lit\"],\"organizationName\":\"Catalyst Ventures\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Returns an array of all hostnames in the network tree\\n * \\n * @param {string[]} myServers\\n * @param {number} safetyCounter Prevents infnite recursion\\n * @param {NS} ns\\n */\\nexport async function getServerList(myServers, safetyCounter, ns) {\\n\\tlet srvrsSeen = myServers;\\n\\tlet currServScanResult = [];\\n\\n\\tfor (let serverSeen in srvrsSeen) {\\n\\t\\tcurrServScanResult = ns.scan(srvrsSeen[serverSeen]);\\n\\t\\tfor (let entry in currServScanResult) {\\n\\t\\t\\tif (!srvrsSeen.includes(currServScanResult[entry])) {\\n\\t\\t\\t\\tsrvrsSeen.push(currServScanResult[entry]);\\n\\t\\t\\t\\tif ((++safetyCounter) < 250) {\\n\\t\\t\\t\\t\\tawait getServerList(srvrsSeen, safetyCounter, ns);\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tns.exit();\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\t//Filter out invalid values (NaN, null, {}, undefined)\\n\\tsrvrsSeen = srvrsSeen.filter(x => x);\\n\\treturn srvrsSeen;\\n}\\n\\n\\n/** \\n * \\tAttempts to take over target machine\\t\\n * \\n *  @param {string} target\\n * \\t@param {NS} ns\\n *  @return {boolean} outcome \\n**/\\nexport async function takeover(target, ns) {\\n\\tconst home = \\\"home\\\";\\n\\tlet currentTarget = target;\\n\\tlet isNotTakenOver = true;\\n\\tlet attemptCounter = 0;\\n\\n\\tlet scripts = ns.ls(home, \\\".js\\\");\\n\\t//scripts.push(ns.ls(home, \\\".ns\\\")); //in case of deprecated .ns scripts\\n\\n\\tns.tprint(scripts);\\n\\n\\n\\tif (!ns.hasRootAccess(currentTarget) && attemptCounter < 30) {\\n\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\ttry {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t} catch (error) {\\n\\t\\t\\t\\t\\tns.tprint(\\\"not enough ports to nuke \\\" + currentTarget);\\n\\t\\t\\t\\t\\treturn false;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t}\\n\\t\\t\\tattemptCounter++;\\n\\t\\t}\\n\\n\\t\\tawait ns.scp(scripts, home, currentTarget);\\n\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\",\"filename\":\"/modules/helper.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"catalyst\",\"moduleSequenceNumber\":1121,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.grow(target);\\n\\t}\\n}\",\"filename\":\"basic-grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"catalyst\",\"moduleSequenceNumber\":1122,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"basic-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"catalyst\",\"moduleSequenceNumber\":1123,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(target);\\n\\t}\\n}\",\"filename\":\"basic-weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"catalyst\",\"moduleSequenceNumber\":1124,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerList, takeover } from \\\"modules/helper.js\\\";\\n\\n/** @param {NS} ns **/\\n// TODO: unused + unfinished, based on setup.ns\\nexport async function main(ns) {\\n\\tconst myServers = [\\\"home\\\"];\\n\\n\\tvar servers = await getServerList(myServers, 0, ns);\\n\\n\\tfor (let entry in servers) {\\t\\n\\t\\tawait takeover(servers[entry], ns);\\n\\t}\\n}\",\"filename\":\"deep-setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"catalyst\",\"moduleSequenceNumber\":1125,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\t//\\n}\",\"filename\":\"formulas-testing.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"catalyst\",\"moduleSequenceNumber\":1126,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tconst currentMachine = ns.getHostname();\\n\\tvar servers = ns.scan(currentMachine);\\n\\tvar scripts = ns.ls(home, \\\"basic-\\\");\\n\\n\\tns.tprint(\\\"Host:  \\\" + currentMachine);\\n\\tfor (let entry in servers) {\\t// depth 0\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\t// depth 1\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== home && subservers.length > 1) {\\n\\t\\t\\t\\tns.tprint(\\\"-----> \\\" + subservers[subentry]);\\n\\t\\t\\t\\tlet subserversd2 = ns.scan(subservers[subentry]); // depth 2\\n\\t\\t\\t\\tfor (let subentryd2 in subserversd2) {\\n\\t\\t\\t\\t\\tif (subserversd2[subentryd2] !== subservers[subentry] && subserversd2[subentryd2] !== servers[entry] && subserversd2.length > 1) {\\n\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------> \\\" + subserversd2[subentryd2]);\\n\\t\\t\\t\\t\\t\\tlet subserversd3 = ns.scan(subserversd2[subentryd2]);\\t// depth 3\\n\\t\\t\\t\\t\\t\\tfor (let subentryd3 in subserversd3) {\\n\\t\\t\\t\\t\\t\\t\\tif (subserversd3[subentryd3] !== subserversd2[subentryd2] && subserversd3[subentryd3] !== subservers[subentry] && subserversd3.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------> \\\" + subserversd3[subentryd3]);\\n\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd4 = ns.scan(subserversd3[subentryd3]);\\t// depth 4\\n\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd4 in subserversd4) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd4[subentryd4] !== subserversd3[subentryd3] && subserversd4[subentryd4] !== subserversd2[subentryd2] && subserversd4.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------------> \\\" + subserversd4[subentryd4]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd5 = ns.scan(subserversd4[subentryd4]);\\t// depth 5\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd5 in subserversd5) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd5[subentryd5] !== subserversd4[subentryd4] && subserversd5[subentryd5] !== subserversd3[subentryd3] && subserversd5.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-------------------------> \\\" + subserversd5[subentryd5]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd6 = ns.scan(subserversd5[subentryd5]);\\t// depth 6\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd6 in subserversd6) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd6[subentryd6] !== subserversd5[subentryd5] && subserversd6[subentryd6] !== subserversd4[subentryd4] && subserversd6.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"------------------------------> \\\" + subserversd6[subentryd6]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd7 = ns.scan(subserversd6[subentryd6]);\\t// depth 7\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor(let subentryd7 in subserversd7) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd7[subentryd7] !== subserversd6[subentryd6] && subserversd7[subentryd7] !== subserversd5[subentryd5] && subserversd7.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-----------------------------------> \\\" + subserversd7[subentryd7]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"gigascan.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.05,\"server\":\"catalyst\",\"moduleSequenceNumber\":1127,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet targetRam = ns.getServerMaxRam(ns.args[0]);\\n\\tlet scriptMem = ns.getScriptRam(ns.args[1]);\\n\\n\\tns.tprint(\\\"Maximum possible threads for \\\" + ns.args[1] + \\\": \\\" + Math.floor(targetRam / scriptMem));\\n\\tns.exit;\\n}\",\"filename\":\"ram-usage.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"catalyst\",\"moduleSequenceNumber\":1128,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerList } from \\\"modules/helper.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet serversSeen = [\\\"home\\\"]; // home + bought servers\\n\\tlet contractList = [];\\n\\n\\tserversSeen = await getServerList(serversSeen, 0, ns);\\n\\n\\tns.tprint(serversSeen);\\n}\",\"filename\":\"search-coding-contracts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"catalyst\",\"moduleSequenceNumber\":1129,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tvar servers = ns.scan(home);\\n\\tvar scripts = ns.ls(home, \\\".ns\\\");\\n\\n\\tfor (let entry in scripts) {\\n\\t\\tns.tprint(\\\"found script: \\\" + scripts[entry]);\\n\\t}\\n\\n\\t// Hack servers (!!! depth = 2 !!!) if needed and populate with scripts\\n\\tfor (let entry in servers) {\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== \\\"home\\\") {\\n\\t\\t\\t\\tns.tprint(\\\"----->   \\\" + subservers[subentry]);\\n\\t\\t\\t\\tif (!ns.hasRootAccess(subservers[subentry])) {\\n\\t\\t\\t\\t\\ttakeover(subservers[subentry]);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tns.tprint(\\\"copying scripts to \\\" + subservers[subentry]);\\n\\t\\t\\t\\tawait ns.scp(scripts, home, subservers[subentry]);\\n\\t\\t\\t\\t//await ns.scp(\\\"setup.ns\\\", home, subservers[subentry]);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (!ns.hasRootAccess(servers[entry])) {\\n\\t\\t\\ttakeover(servers[entry]);\\n\\t\\t}\\n\\t\\tns.tprint(\\\"copying scripts to \\\" + servers[entry]);\\n\\t\\tawait ns.scp(scripts, home, servers[entry]);\\n\\t\\t//await ns.scp(\\\"setup.ns\\\", home, servers[entry]);\\n\\t}\\n\\n\\t/** \\n\\t * \\tAttempts to take over target machine\\t\\n\\t * \\n\\t *  @param {string} tar\\n\\t *  @return {boolean} outcome \\n\\t**/\\n\\tasync function takeover(tar) {\\n\\t\\tlet currentTarget = tar;\\n\\t\\tlet isNotTakenOver = true;\\n\\t\\tlet attemptCounter = 0;\\n\\n\\t\\tif (ns.getServerNumPortsRequired <= 5 && attemptCounter < 50) {\\n\\t\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\n\\t\\t\\t\\tattemptCounter++;\\n\\t\\t\\t}\\n\\n\\t\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.15,\"server\":\"catalyst\",\"moduleSequenceNumber\":1130,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}}],\"serversOnNetwork\":[\"crush-fitness\",\"rho-construction\",\"aevum-police\",\"millenium-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":69,\"hackDifficulty\":69,\"minDifficulty\":23,\"moneyAvailable\":375770408,\"moneyMax\":9394260200,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":403,\"serverGrowth\":37}},\"the-hub\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"the-hub\",\"httpPortOpen\":false,\"ip\":\"3.7.6.6\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"The Hub\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Returns an array of all hostnames in the network tree\\n * \\n * @param {string[]} serversSeen\\n * @param {number} safetyCounter Prevents infnite recursion\\n * @param {NS} ns\\n */\\nexport async function getServerList(serversSeen, safetyCounter, ns) {\\n\\tlet srvrsSeen = serversSeen;\\n\\tlet currServScanResult = [];\\n\\n\\tfor (let serverSeen in srvrsSeen) {\\n\\t\\tcurrServScanResult = ns.scan(srvrsSeen[serverSeen]);\\n\\t\\tfor (let entry in currServScanResult) {\\n\\t\\t\\tif (!srvrsSeen.includes(currServScanResult[entry])) {\\n\\t\\t\\t\\tsrvrsSeen.push(currServScanResult[entry]);\\n\\t\\t\\t\\tif ((++safetyCounter) < 250) {\\n\\t\\t\\t\\t\\tawait getServerList(srvrsSeen, safetyCounter, ns);\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tns.exit();\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\t//Filter out invalid values (NaN, null, {}, undefined)\\n\\tsrvrsSeen = srvrsSeen.filter(x => x);\\n\\treturn srvrsSeen;\\n}\\n\\n\\n/** \\n * \\tAttempts to take over target machine\\t\\n * \\n *  @param {string} target\\n * \\t@param {NS} ns\\n *  @return {boolean} outcome \\n**/\\nexport async function takeover(target, ns) {\\n\\tconst home = \\\"home\\\";\\n\\tlet currentTarget = target;\\n\\tlet isNotTakenOver = true;\\n\\tlet attemptCounter = 0;\\n\\n\\tlet scripts = ns.ls(home, \\\".ns\\\");\\n\\tscripts.push(ns.ls(home, \\\".js\\\"));\\n\\n\\tif (!ns.hasRootAccess(currentTarget) && attemptCounter < 30) {\\n\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\ttry {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t} catch (error) {\\n\\t\\t\\t\\t\\tns.tprint(\\\"not enough ports to nuke \\\" + currentTarget);\\n\\t\\t\\t\\t\\treturn false;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t}\\n\\t\\t\\tattemptCounter++;\\n\\t\\t}\\n\\n\\t\\tawait ns.scp(scripts, home, currentTarget);\\n\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\",\"filename\":\"/modules/helper.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"the-hub\",\"moduleSequenceNumber\":1131,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.grow(target);\\n\\t}\\n}\",\"filename\":\"basic-grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"the-hub\",\"moduleSequenceNumber\":1132,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"basic-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"the-hub\",\"moduleSequenceNumber\":1133,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(target);\\n\\t}\\n}\",\"filename\":\"basic-weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"the-hub\",\"moduleSequenceNumber\":1134,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerList, takeover } from \\\"modules/helper.js\\\";\\n\\n/** @param {NS} ns **/\\n// TODO: unused + unfinished, based on setup.ns\\nexport async function main(ns) {\\n\\tconst myServers = [\\\"home\\\"];\\n\\n\\tvar servers = await getServerList(myServers, 0, ns);\\n\\n\\tfor (let entry in servers) {\\t\\n\\t\\tawait takeover(servers[entry], ns);\\n\\t}\\n}\",\"filename\":\"deep-setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"the-hub\",\"moduleSequenceNumber\":1135,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\t//\\n}\",\"filename\":\"formulas-testing.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"the-hub\",\"moduleSequenceNumber\":1136,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tconst currentMachine = ns.getHostname();\\n\\tvar servers = ns.scan(currentMachine);\\n\\tvar scripts = ns.ls(home, \\\"basic-\\\");\\n\\n\\tns.tprint(\\\"Host:  \\\" + currentMachine);\\n\\tfor (let entry in servers) {\\t// depth 0\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\t// depth 1\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== home && subservers.length > 1) {\\n\\t\\t\\t\\tns.tprint(\\\"-----> \\\" + subservers[subentry]);\\n\\t\\t\\t\\tlet subserversd2 = ns.scan(subservers[subentry]); // depth 2\\n\\t\\t\\t\\tfor (let subentryd2 in subserversd2) {\\n\\t\\t\\t\\t\\tif (subserversd2[subentryd2] !== subservers[subentry] && subserversd2[subentryd2] !== servers[entry] && subserversd2.length > 1) {\\n\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------> \\\" + subserversd2[subentryd2]);\\n\\t\\t\\t\\t\\t\\tlet subserversd3 = ns.scan(subserversd2[subentryd2]);\\t// depth 3\\n\\t\\t\\t\\t\\t\\tfor (let subentryd3 in subserversd3) {\\n\\t\\t\\t\\t\\t\\t\\tif (subserversd3[subentryd3] !== subserversd2[subentryd2] && subserversd3[subentryd3] !== subservers[subentry] && subserversd3.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------> \\\" + subserversd3[subentryd3]);\\n\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd4 = ns.scan(subserversd3[subentryd3]);\\t// depth 4\\n\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd4 in subserversd4) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd4[subentryd4] !== subserversd3[subentryd3] && subserversd4[subentryd4] !== subserversd2[subentryd2] && subserversd4.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------------> \\\" + subserversd4[subentryd4]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd5 = ns.scan(subserversd4[subentryd4]);\\t// depth 5\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd5 in subserversd5) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd5[subentryd5] !== subserversd4[subentryd4] && subserversd5[subentryd5] !== subserversd3[subentryd3] && subserversd5.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-------------------------> \\\" + subserversd5[subentryd5]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd6 = ns.scan(subserversd5[subentryd5]);\\t// depth 6\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd6 in subserversd6) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd6[subentryd6] !== subserversd5[subentryd5] && subserversd6[subentryd6] !== subserversd4[subentryd4] && subserversd6.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"------------------------------> \\\" + subserversd6[subentryd6]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd7 = ns.scan(subserversd6[subentryd6]);\\t// depth 7\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor(let subentryd7 in subserversd7) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd7[subentryd7] !== subserversd6[subentryd6] && subserversd7[subentryd7] !== subserversd5[subentryd5] && subserversd7.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-----------------------------------> \\\" + subserversd7[subentryd7]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"gigascan.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.05,\"server\":\"the-hub\",\"moduleSequenceNumber\":1137,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet targetRam = ns.getServerMaxRam(ns.args[0]);\\n\\tlet scriptMem = ns.getScriptRam(ns.args[1]);\\n\\n\\tns.tprint(\\\"Maximum possible threads for \\\" + ns.args[1] + \\\": \\\" + Math.floor(targetRam / scriptMem));\\n\\tns.exit;\\n}\",\"filename\":\"ram-usage.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"the-hub\",\"moduleSequenceNumber\":1138,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerList } from \\\"modules/helper.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet serversSeen = [\\\"home\\\"]; // home + bought servers\\n\\tlet contractList = [];\\n\\n\\tserversSeen = await getServerList(serversSeen, 0, ns);\\n\\n\\tns.tprint(serversSeen);\\n}\",\"filename\":\"search-coding-contracts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"the-hub\",\"moduleSequenceNumber\":1139,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tvar servers = ns.scan(home);\\n\\tvar scripts = ns.ls(home, \\\".ns\\\");\\n\\n\\tfor (let entry in scripts) {\\n\\t\\tns.tprint(\\\"found script: \\\" + scripts[entry]);\\n\\t}\\n\\n\\t// Hack servers (!!! depth = 2 !!!) if needed and populate with scripts\\n\\tfor (let entry in servers) {\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== \\\"home\\\") {\\n\\t\\t\\t\\tns.tprint(\\\"----->   \\\" + subservers[subentry]);\\n\\t\\t\\t\\tif (!ns.hasRootAccess(subservers[subentry])) {\\n\\t\\t\\t\\t\\ttakeover(subservers[subentry]);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tns.tprint(\\\"copying scripts to \\\" + subservers[subentry]);\\n\\t\\t\\t\\tawait ns.scp(scripts, home, subservers[subentry]);\\n\\t\\t\\t\\t//await ns.scp(\\\"setup.ns\\\", home, subservers[subentry]);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (!ns.hasRootAccess(servers[entry])) {\\n\\t\\t\\ttakeover(servers[entry]);\\n\\t\\t}\\n\\t\\tns.tprint(\\\"copying scripts to \\\" + servers[entry]);\\n\\t\\tawait ns.scp(scripts, home, servers[entry]);\\n\\t\\t//await ns.scp(\\\"setup.ns\\\", home, servers[entry]);\\n\\t}\\n\\n\\t/** \\n\\t * \\tAttempts to take over target machine\\t\\n\\t * \\n\\t *  @param {string} tar\\n\\t *  @return {boolean} outcome \\n\\t**/\\n\\tasync function takeover(tar) {\\n\\t\\tlet currentTarget = tar;\\n\\t\\tlet isNotTakenOver = true;\\n\\t\\tlet attemptCounter = 0;\\n\\n\\t\\tif (ns.getServerNumPortsRequired <= 5 && attemptCounter < 50) {\\n\\t\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\n\\t\\t\\t\\tattemptCounter++;\\n\\t\\t\\t}\\n\\n\\t\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.15,\"server\":\"the-hub\",\"moduleSequenceNumber\":1140,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}}],\"serversOnNetwork\":[\"omega-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":38,\"hackDifficulty\":38,\"minDifficulty\":13,\"moneyAvailable\":154484508,\"moneyMax\":3862112700,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":323,\"serverGrowth\":50}},\"comptek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-41065.cct\",\"type\":\"Array Jumping Game\",\"data\":[0,5,0,8,7,8,0,7,8,0,0,6,5,0,0,8,5,1,4],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"comptek\",\"httpPortOpen\":true,\"ip\":\"60.6.2.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"CompuTek\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Returns an array of all hostnames in the network tree\\n * \\n * @param {string[]} serversSeen\\n * @param {number} safetyCounter Prevents infnite recursion\\n * @param {NS} ns\\n */\\nexport async function getServerList(serversSeen, safetyCounter, ns) {\\n\\tlet srvrsSeen = serversSeen;\\n\\tlet currServScanResult = [];\\n\\n\\tfor (let serverSeen in srvrsSeen) {\\n\\t\\tcurrServScanResult = ns.scan(srvrsSeen[serverSeen]);\\n\\t\\tfor (let entry in currServScanResult) {\\n\\t\\t\\tif (!srvrsSeen.includes(currServScanResult[entry])) {\\n\\t\\t\\t\\tsrvrsSeen.push(currServScanResult[entry]);\\n\\t\\t\\t\\tif ((++safetyCounter) < 250) {\\n\\t\\t\\t\\t\\tawait getServerList(srvrsSeen, safetyCounter, ns);\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tns.exit();\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\t//Filter out invalid values (NaN, null, {}, undefined)\\n\\tsrvrsSeen = srvrsSeen.filter(x => x);\\n\\treturn srvrsSeen;\\n}\\n\\n\\n/** \\n * \\tAttempts to take over target machine\\t\\n * \\n *  @param {string} target\\n * \\t@param {NS} ns\\n *  @return {boolean} outcome \\n**/\\nexport async function takeover(target, ns) {\\n\\tconst home = \\\"home\\\";\\n\\tlet currentTarget = target;\\n\\tlet isNotTakenOver = true;\\n\\tlet attemptCounter = 0;\\n\\n\\tlet scripts = ns.ls(home, \\\".js\\\");\\n\\tscripts.push(ns.ls(home, \\\".ns\\\")); //in case of deprecated .ns scripts\\n\\n\\tns.tprint(scripts);\\n\\n\\n\\tif (!ns.hasRootAccess(currentTarget) && attemptCounter < 30) {\\n\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\ttry {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t} catch (error) {\\n\\t\\t\\t\\t\\tns.tprint(\\\"not enough ports to nuke \\\" + currentTarget);\\n\\t\\t\\t\\t\\treturn false;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t}\\n\\t\\t\\tattemptCounter++;\\n\\t\\t}\\n\\n\\t\\tawait ns.scp(scripts, home, currentTarget);\\n\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\",\"filename\":\"/modules/helper.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"comptek\",\"moduleSequenceNumber\":1141,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.grow(target);\\n\\t}\\n}\",\"filename\":\"basic-grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"comptek\",\"moduleSequenceNumber\":1142,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"basic-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"comptek\",\"moduleSequenceNumber\":1143,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(target);\\n\\t}\\n}\",\"filename\":\"basic-weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"comptek\",\"moduleSequenceNumber\":1144,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerList, takeover } from \\\"modules/helper.js\\\";\\n\\n/** @param {NS} ns **/\\n// TODO: unused + unfinished, based on setup.ns\\nexport async function main(ns) {\\n\\tconst myServers = [\\\"home\\\"];\\n\\n\\tvar servers = await getServerList(myServers, 0, ns);\\n\\n\\tfor (let entry in servers) {\\t\\n\\t\\tawait takeover(servers[entry], ns);\\n\\t}\\n}\",\"filename\":\"deep-setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"comptek\",\"moduleSequenceNumber\":1145,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\t//\\n}\",\"filename\":\"formulas-testing.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"comptek\",\"moduleSequenceNumber\":1146,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tconst currentMachine = ns.getHostname();\\n\\tvar servers = ns.scan(currentMachine);\\n\\tvar scripts = ns.ls(home, \\\"basic-\\\");\\n\\n\\tns.tprint(\\\"Host:  \\\" + currentMachine);\\n\\tfor (let entry in servers) {\\t// depth 0\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\t// depth 1\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== home && subservers.length > 1) {\\n\\t\\t\\t\\tns.tprint(\\\"-----> \\\" + subservers[subentry]);\\n\\t\\t\\t\\tlet subserversd2 = ns.scan(subservers[subentry]); // depth 2\\n\\t\\t\\t\\tfor (let subentryd2 in subserversd2) {\\n\\t\\t\\t\\t\\tif (subserversd2[subentryd2] !== subservers[subentry] && subserversd2[subentryd2] !== servers[entry] && subserversd2.length > 1) {\\n\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------> \\\" + subserversd2[subentryd2]);\\n\\t\\t\\t\\t\\t\\tlet subserversd3 = ns.scan(subserversd2[subentryd2]);\\t// depth 3\\n\\t\\t\\t\\t\\t\\tfor (let subentryd3 in subserversd3) {\\n\\t\\t\\t\\t\\t\\t\\tif (subserversd3[subentryd3] !== subserversd2[subentryd2] && subserversd3[subentryd3] !== subservers[subentry] && subserversd3.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------> \\\" + subserversd3[subentryd3]);\\n\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd4 = ns.scan(subserversd3[subentryd3]);\\t// depth 4\\n\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd4 in subserversd4) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd4[subentryd4] !== subserversd3[subentryd3] && subserversd4[subentryd4] !== subserversd2[subentryd2] && subserversd4.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------------> \\\" + subserversd4[subentryd4]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd5 = ns.scan(subserversd4[subentryd4]);\\t// depth 5\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd5 in subserversd5) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd5[subentryd5] !== subserversd4[subentryd4] && subserversd5[subentryd5] !== subserversd3[subentryd3] && subserversd5.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-------------------------> \\\" + subserversd5[subentryd5]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd6 = ns.scan(subserversd5[subentryd5]);\\t// depth 6\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd6 in subserversd6) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd6[subentryd6] !== subserversd5[subentryd5] && subserversd6[subentryd6] !== subserversd4[subentryd4] && subserversd6.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"------------------------------> \\\" + subserversd6[subentryd6]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd7 = ns.scan(subserversd6[subentryd6]);\\t// depth 7\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor(let subentryd7 in subserversd7) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd7[subentryd7] !== subserversd6[subentryd6] && subserversd7[subentryd7] !== subserversd5[subentryd5] && subserversd7.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-----------------------------------> \\\" + subserversd7[subentryd7]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"gigascan.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.05,\"server\":\"comptek\",\"moduleSequenceNumber\":1147,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet targetRam = ns.getServerMaxRam(ns.args[0]);\\n\\tlet scriptMem = ns.getScriptRam(ns.args[1]);\\n\\n\\tns.tprint(\\\"Maximum possible threads for \\\" + ns.args[1] + \\\": \\\" + Math.floor(targetRam / scriptMem));\\n\\tns.exit;\\n}\",\"filename\":\"ram-usage.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"comptek\",\"moduleSequenceNumber\":1148,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerList } from \\\"modules/helper.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet serversSeen = [\\\"home\\\"]; // home + bought servers\\n\\tlet contractList = [];\\n\\n\\tserversSeen = await getServerList(serversSeen, 0, ns);\\n\\n\\tns.tprint(serversSeen);\\n}\",\"filename\":\"search-coding-contracts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"comptek\",\"moduleSequenceNumber\":1149,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tvar servers = ns.scan(home);\\n\\tvar scripts = ns.ls(home, \\\".ns\\\");\\n\\n\\tfor (let entry in scripts) {\\n\\t\\tns.tprint(\\\"found script: \\\" + scripts[entry]);\\n\\t}\\n\\n\\t// Hack servers (!!! depth = 2 !!!) if needed and populate with scripts\\n\\tfor (let entry in servers) {\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== \\\"home\\\") {\\n\\t\\t\\t\\tns.tprint(\\\"----->   \\\" + subservers[subentry]);\\n\\t\\t\\t\\tif (!ns.hasRootAccess(subservers[subentry])) {\\n\\t\\t\\t\\t\\ttakeover(subservers[subentry]);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tns.tprint(\\\"copying scripts to \\\" + subservers[subentry]);\\n\\t\\t\\t\\tawait ns.scp(scripts, home, subservers[subentry]);\\n\\t\\t\\t\\t//await ns.scp(\\\"setup.ns\\\", home, subservers[subentry]);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (!ns.hasRootAccess(servers[entry])) {\\n\\t\\t\\ttakeover(servers[entry]);\\n\\t\\t}\\n\\t\\tns.tprint(\\\"copying scripts to \\\" + servers[entry]);\\n\\t\\tawait ns.scp(scripts, home, servers[entry]);\\n\\t\\t//await ns.scp(\\\"setup.ns\\\", home, servers[entry]);\\n\\t}\\n\\n\\t/** \\n\\t * \\tAttempts to take over target machine\\t\\n\\t * \\n\\t *  @param {string} tar\\n\\t *  @return {boolean} outcome \\n\\t**/\\n\\tasync function takeover(tar) {\\n\\t\\tlet currentTarget = tar;\\n\\t\\tlet isNotTakenOver = true;\\n\\t\\tlet attemptCounter = 0;\\n\\n\\t\\tif (ns.getServerNumPortsRequired <= 5 && attemptCounter < 50) {\\n\\t\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\n\\t\\t\\t\\tattemptCounter++;\\n\\t\\t\\t}\\n\\n\\t\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.15,\"server\":\"comptek\",\"moduleSequenceNumber\":1150,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}}],\"serversOnNetwork\":[\"neo-net\",\"summit-uni\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":59,\"hackDifficulty\":59,\"minDifficulty\":20,\"moneyAvailable\":220577561,\"moneyMax\":5514439025,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":338,\"serverGrowth\":58}},\"netlink\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-438337.cct\",\"type\":\"Algorithmic Stock Trader I\",\"data\":[116,166,127,196,91,7,136,110,92,28,200,42,187,194,134,152,51,196,111,143,98,67,9,76,50,7,95,169,105,85,145,111,73,176,131,175,87,36,130,69,15,168,67,89,175,62,76,105,122],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"netlink\",\"httpPortOpen\":true,\"ip\":\"5.8.1.6\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"NetLink Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Returns an array of all hostnames in the network tree\\n * \\n * @param {string[]} myServers\\n * @param {number} safetyCounter Prevents infnite recursion\\n * @param {NS} ns\\n */\\nexport async function getServerList(myServers, safetyCounter, ns) {\\n\\tlet srvrsSeen = myServers;\\n\\tlet currServScanResult = [];\\n\\n\\tfor (let serverSeen in srvrsSeen) {\\n\\t\\tcurrServScanResult = ns.scan(srvrsSeen[serverSeen]);\\n\\t\\tfor (let entry in currServScanResult) {\\n\\t\\t\\tif (!srvrsSeen.includes(currServScanResult[entry])) {\\n\\t\\t\\t\\tsrvrsSeen.push(currServScanResult[entry]);\\n\\t\\t\\t\\tif ((++safetyCounter) < 250) {\\n\\t\\t\\t\\t\\tawait getServerList(srvrsSeen, safetyCounter, ns);\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tns.exit();\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\t//Filter out invalid values (NaN, null, {}, undefined)\\n\\tsrvrsSeen = srvrsSeen.filter(x => x);\\n\\treturn srvrsSeen;\\n}\\n\\n\\n/** \\n * \\tAttempts to take over target machine\\t\\n * \\n *  @param {string} target\\n * \\t@param {NS} ns\\n *  @return {boolean} outcome \\n**/\\nexport async function takeover(target, ns) {\\n\\tconst home = \\\"home\\\";\\n\\tlet currentTarget = target;\\n\\tlet isNotTakenOver = true;\\n\\tlet attemptCounter = 0;\\n\\n\\tlet scripts = ns.ls(home, \\\".js\\\");\\n\\t//scripts.push(ns.ls(home, \\\".ns\\\")); //in case of deprecated .ns scripts\\n\\n\\tns.tprint(scripts);\\n\\n\\n\\tif (!ns.hasRootAccess(currentTarget) && attemptCounter < 30) {\\n\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\ttry {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t} catch (error) {\\n\\t\\t\\t\\t\\tns.tprint(\\\"not enough ports to nuke \\\" + currentTarget);\\n\\t\\t\\t\\t\\treturn false;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t}\\n\\t\\t\\tattemptCounter++;\\n\\t\\t}\\n\\n\\t\\tawait ns.scp(scripts, home, currentTarget);\\n\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\",\"filename\":\"/modules/helper.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"netlink\",\"moduleSequenceNumber\":1151,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.grow(target);\\n\\t}\\n}\",\"filename\":\"basic-grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"netlink\",\"moduleSequenceNumber\":1152,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"basic-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"netlink\",\"moduleSequenceNumber\":1153,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(target);\\n\\t}\\n}\",\"filename\":\"basic-weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"netlink\",\"moduleSequenceNumber\":1154,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerList, takeover } from \\\"modules/helper.js\\\";\\n\\n/** @param {NS} ns **/\\n// TODO: unused + unfinished, based on setup.ns\\nexport async function main(ns) {\\n\\tconst myServers = [\\\"home\\\"];\\n\\n\\tvar servers = await getServerList(myServers, 0, ns);\\n\\n\\tfor (let entry in servers) {\\t\\n\\t\\tawait takeover(servers[entry], ns);\\n\\t}\\n}\",\"filename\":\"deep-setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"netlink\",\"moduleSequenceNumber\":1155,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\t//\\n}\",\"filename\":\"formulas-testing.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"netlink\",\"moduleSequenceNumber\":1156,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tconst currentMachine = ns.getHostname();\\n\\tvar servers = ns.scan(currentMachine);\\n\\tvar scripts = ns.ls(home, \\\"basic-\\\");\\n\\n\\tns.tprint(\\\"Host:  \\\" + currentMachine);\\n\\tfor (let entry in servers) {\\t// depth 0\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\t// depth 1\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== home && subservers.length > 1) {\\n\\t\\t\\t\\tns.tprint(\\\"-----> \\\" + subservers[subentry]);\\n\\t\\t\\t\\tlet subserversd2 = ns.scan(subservers[subentry]); // depth 2\\n\\t\\t\\t\\tfor (let subentryd2 in subserversd2) {\\n\\t\\t\\t\\t\\tif (subserversd2[subentryd2] !== subservers[subentry] && subserversd2[subentryd2] !== servers[entry] && subserversd2.length > 1) {\\n\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------> \\\" + subserversd2[subentryd2]);\\n\\t\\t\\t\\t\\t\\tlet subserversd3 = ns.scan(subserversd2[subentryd2]);\\t// depth 3\\n\\t\\t\\t\\t\\t\\tfor (let subentryd3 in subserversd3) {\\n\\t\\t\\t\\t\\t\\t\\tif (subserversd3[subentryd3] !== subserversd2[subentryd2] && subserversd3[subentryd3] !== subservers[subentry] && subserversd3.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------> \\\" + subserversd3[subentryd3]);\\n\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd4 = ns.scan(subserversd3[subentryd3]);\\t// depth 4\\n\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd4 in subserversd4) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd4[subentryd4] !== subserversd3[subentryd3] && subserversd4[subentryd4] !== subserversd2[subentryd2] && subserversd4.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------------> \\\" + subserversd4[subentryd4]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd5 = ns.scan(subserversd4[subentryd4]);\\t// depth 5\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd5 in subserversd5) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd5[subentryd5] !== subserversd4[subentryd4] && subserversd5[subentryd5] !== subserversd3[subentryd3] && subserversd5.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-------------------------> \\\" + subserversd5[subentryd5]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd6 = ns.scan(subserversd5[subentryd5]);\\t// depth 6\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd6 in subserversd6) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd6[subentryd6] !== subserversd5[subentryd5] && subserversd6[subentryd6] !== subserversd4[subentryd4] && subserversd6.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"------------------------------> \\\" + subserversd6[subentryd6]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd7 = ns.scan(subserversd6[subentryd6]);\\t// depth 7\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor(let subentryd7 in subserversd7) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd7[subentryd7] !== subserversd6[subentryd6] && subserversd7[subentryd7] !== subserversd5[subentryd5] && subserversd7.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-----------------------------------> \\\" + subserversd7[subentryd7]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"gigascan.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.05,\"server\":\"netlink\",\"moduleSequenceNumber\":1157,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet targetRam = ns.getServerMaxRam(ns.args[0]);\\n\\tlet scriptMem = ns.getScriptRam(ns.args[1]);\\n\\n\\tns.tprint(\\\"Maximum possible threads for \\\" + ns.args[1] + \\\": \\\" + Math.floor(targetRam / scriptMem));\\n\\tns.exit;\\n}\",\"filename\":\"ram-usage.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"netlink\",\"moduleSequenceNumber\":1158,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerList } from \\\"modules/helper.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet serversSeen = [\\\"home\\\"]; // home + bought servers\\n\\tlet contractList = [];\\n\\n\\tserversSeen = await getServerList(serversSeen, 0, ns);\\n\\n\\tns.tprint(serversSeen);\\n}\",\"filename\":\"search-coding-contracts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"netlink\",\"moduleSequenceNumber\":1159,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tvar servers = ns.scan(home);\\n\\tvar scripts = ns.ls(home, \\\".ns\\\");\\n\\n\\tfor (let entry in scripts) {\\n\\t\\tns.tprint(\\\"found script: \\\" + scripts[entry]);\\n\\t}\\n\\n\\t// Hack servers (!!! depth = 2 !!!) if needed and populate with scripts\\n\\tfor (let entry in servers) {\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== \\\"home\\\") {\\n\\t\\t\\t\\tns.tprint(\\\"----->   \\\" + subservers[subentry]);\\n\\t\\t\\t\\tif (!ns.hasRootAccess(subservers[subentry])) {\\n\\t\\t\\t\\t\\ttakeover(subservers[subentry]);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tns.tprint(\\\"copying scripts to \\\" + subservers[subentry]);\\n\\t\\t\\t\\tawait ns.scp(scripts, home, subservers[subentry]);\\n\\t\\t\\t\\t//await ns.scp(\\\"setup.ns\\\", home, subservers[subentry]);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (!ns.hasRootAccess(servers[entry])) {\\n\\t\\t\\ttakeover(servers[entry]);\\n\\t\\t}\\n\\t\\tns.tprint(\\\"copying scripts to \\\" + servers[entry]);\\n\\t\\tawait ns.scp(scripts, home, servers[entry]);\\n\\t\\t//await ns.scp(\\\"setup.ns\\\", home, servers[entry]);\\n\\t}\\n\\n\\t/** \\n\\t * \\tAttempts to take over target machine\\t\\n\\t * \\n\\t *  @param {string} tar\\n\\t *  @return {boolean} outcome \\n\\t**/\\n\\tasync function takeover(tar) {\\n\\t\\tlet currentTarget = tar;\\n\\t\\tlet isNotTakenOver = true;\\n\\t\\tlet attemptCounter = 0;\\n\\n\\t\\tif (ns.getServerNumPortsRequired <= 5 && attemptCounter < 50) {\\n\\t\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\n\\t\\t\\t\\tattemptCounter++;\\n\\t\\t\\t}\\n\\n\\t\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.15,\"server\":\"netlink\",\"moduleSequenceNumber\":1160,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}}],\"serversOnNetwork\":[\"omega-net\",\"rothman-uni\",\"I.I.I.I\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":62,\"hackDifficulty\":62,\"minDifficulty\":21,\"moneyAvailable\":275000000,\"moneyMax\":6875000000,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":376,\"serverGrowth\":71}},\"johnson-ortho\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"johnson-ortho\",\"httpPortOpen\":false,\"ip\":\"33.5.3.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Johnson Orthopedics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Returns an array of all hostnames in the network tree\\n * \\n * @param {string[]} serversSeen\\n * @param {number} safetyCounter Prevents infnite recursion\\n * @param {NS} ns\\n */\\nexport async function getServerList(serversSeen, safetyCounter, ns) {\\n\\tlet srvrsSeen = serversSeen;\\n\\tlet currServScanResult = [];\\n\\n\\tfor (let serverSeen in srvrsSeen) {\\n\\t\\tcurrServScanResult = ns.scan(srvrsSeen[serverSeen]);\\n\\t\\tfor (let entry in currServScanResult) {\\n\\t\\t\\tif (!srvrsSeen.includes(currServScanResult[entry])) {\\n\\t\\t\\t\\tsrvrsSeen.push(currServScanResult[entry]);\\n\\t\\t\\t\\tif ((++safetyCounter) < 250) {\\n\\t\\t\\t\\t\\tawait getServerList(srvrsSeen, safetyCounter, ns);\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tns.exit();\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\t//Filter out invalid values (NaN, null, {}, undefined)\\n\\tsrvrsSeen = srvrsSeen.filter(x => x);\\n\\treturn srvrsSeen;\\n}\\n\\n\\n/** \\n * \\tAttempts to take over target machine\\t\\n * \\n *  @param {string} target\\n * \\t@param {NS} ns\\n *  @return {boolean} outcome \\n**/\\nexport async function takeover(target, ns) {\\n\\tconst home = \\\"home\\\";\\n\\tlet currentTarget = target;\\n\\tlet isNotTakenOver = true;\\n\\tlet attemptCounter = 0;\\n\\n\\tlet scripts = ns.ls(home, \\\".ns\\\");\\n\\tscripts.push(ns.ls(home, \\\".js\\\"));\\n\\n\\tif (!ns.hasRootAccess(currentTarget) && attemptCounter < 30) {\\n\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\ttry {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t} catch (error) {\\n\\t\\t\\t\\t\\tns.tprint(\\\"not enough ports to nuke \\\" + currentTarget);\\n\\t\\t\\t\\t\\treturn false;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t}\\n\\t\\t\\tattemptCounter++;\\n\\t\\t}\\n\\n\\t\\tawait ns.scp(scripts, home, currentTarget);\\n\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\",\"filename\":\"/modules/helper.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":1161,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.grow(target);\\n\\t}\\n}\",\"filename\":\"basic-grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":1162,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"basic-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":1163,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(target);\\n\\t}\\n}\",\"filename\":\"basic-weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":1164,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerList, takeover } from \\\"modules/helper.js\\\";\\n\\n/** @param {NS} ns **/\\n// TODO: unused + unfinished, based on setup.ns\\nexport async function main(ns) {\\n\\tconst myServers = [\\\"home\\\"];\\n\\n\\tvar servers = await getServerList(myServers, 0, ns);\\n\\n\\tfor (let entry in servers) {\\t\\n\\t\\tawait takeover(servers[entry], ns);\\n\\t}\\n}\",\"filename\":\"deep-setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":1165,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\t//\\n}\",\"filename\":\"formulas-testing.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":1166,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tconst currentMachine = ns.getHostname();\\n\\tvar servers = ns.scan(currentMachine);\\n\\tvar scripts = ns.ls(home, \\\"basic-\\\");\\n\\n\\tns.tprint(\\\"Host:  \\\" + currentMachine);\\n\\tfor (let entry in servers) {\\t// depth 0\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\t// depth 1\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== home && subservers.length > 1) {\\n\\t\\t\\t\\tns.tprint(\\\"-----> \\\" + subservers[subentry]);\\n\\t\\t\\t\\tlet subserversd2 = ns.scan(subservers[subentry]); // depth 2\\n\\t\\t\\t\\tfor (let subentryd2 in subserversd2) {\\n\\t\\t\\t\\t\\tif (subserversd2[subentryd2] !== subservers[subentry] && subserversd2[subentryd2] !== servers[entry] && subserversd2.length > 1) {\\n\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------> \\\" + subserversd2[subentryd2]);\\n\\t\\t\\t\\t\\t\\tlet subserversd3 = ns.scan(subserversd2[subentryd2]);\\t// depth 3\\n\\t\\t\\t\\t\\t\\tfor (let subentryd3 in subserversd3) {\\n\\t\\t\\t\\t\\t\\t\\tif (subserversd3[subentryd3] !== subserversd2[subentryd2] && subserversd3[subentryd3] !== subservers[subentry] && subserversd3.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------> \\\" + subserversd3[subentryd3]);\\n\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd4 = ns.scan(subserversd3[subentryd3]);\\t// depth 4\\n\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd4 in subserversd4) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd4[subentryd4] !== subserversd3[subentryd3] && subserversd4[subentryd4] !== subserversd2[subentryd2] && subserversd4.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------------> \\\" + subserversd4[subentryd4]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd5 = ns.scan(subserversd4[subentryd4]);\\t// depth 5\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd5 in subserversd5) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd5[subentryd5] !== subserversd4[subentryd4] && subserversd5[subentryd5] !== subserversd3[subentryd3] && subserversd5.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-------------------------> \\\" + subserversd5[subentryd5]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd6 = ns.scan(subserversd5[subentryd5]);\\t// depth 6\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd6 in subserversd6) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd6[subentryd6] !== subserversd5[subentryd5] && subserversd6[subentryd6] !== subserversd4[subentryd4] && subserversd6.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"------------------------------> \\\" + subserversd6[subentryd6]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd7 = ns.scan(subserversd6[subentryd6]);\\t// depth 7\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor(let subentryd7 in subserversd7) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd7[subentryd7] !== subserversd6[subentryd6] && subserversd7[subentryd7] !== subserversd5[subentryd5] && subserversd7.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-----------------------------------> \\\" + subserversd7[subentryd7]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"gigascan.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.05,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":1167,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet targetRam = ns.getServerMaxRam(ns.args[0]);\\n\\tlet scriptMem = ns.getScriptRam(ns.args[1]);\\n\\n\\tns.tprint(\\\"Maximum possible threads for \\\" + ns.args[1] + \\\": \\\" + Math.floor(targetRam / scriptMem));\\n\\tns.exit;\\n}\",\"filename\":\"ram-usage.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":1168,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerList } from \\\"modules/helper.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet serversSeen = [\\\"home\\\"]; // home + bought servers\\n\\tlet contractList = [];\\n\\n\\tserversSeen = await getServerList(serversSeen, 0, ns);\\n\\n\\tns.tprint(serversSeen);\\n}\",\"filename\":\"search-coding-contracts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":1169,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tvar servers = ns.scan(home);\\n\\tvar scripts = ns.ls(home, \\\".ns\\\");\\n\\n\\tfor (let entry in scripts) {\\n\\t\\tns.tprint(\\\"found script: \\\" + scripts[entry]);\\n\\t}\\n\\n\\t// Hack servers (!!! depth = 2 !!!) if needed and populate with scripts\\n\\tfor (let entry in servers) {\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== \\\"home\\\") {\\n\\t\\t\\t\\tns.tprint(\\\"----->   \\\" + subservers[subentry]);\\n\\t\\t\\t\\tif (!ns.hasRootAccess(subservers[subentry])) {\\n\\t\\t\\t\\t\\ttakeover(subservers[subentry]);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tns.tprint(\\\"copying scripts to \\\" + subservers[subentry]);\\n\\t\\t\\t\\tawait ns.scp(scripts, home, subservers[subentry]);\\n\\t\\t\\t\\t//await ns.scp(\\\"setup.ns\\\", home, subservers[subentry]);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (!ns.hasRootAccess(servers[entry])) {\\n\\t\\t\\ttakeover(servers[entry]);\\n\\t\\t}\\n\\t\\tns.tprint(\\\"copying scripts to \\\" + servers[entry]);\\n\\t\\tawait ns.scp(scripts, home, servers[entry]);\\n\\t\\t//await ns.scp(\\\"setup.ns\\\", home, servers[entry]);\\n\\t}\\n\\n\\t/** \\n\\t * \\tAttempts to take over target machine\\t\\n\\t * \\n\\t *  @param {string} tar\\n\\t *  @return {boolean} outcome \\n\\t**/\\n\\tasync function takeover(tar) {\\n\\t\\tlet currentTarget = tar;\\n\\t\\tlet isNotTakenOver = true;\\n\\t\\tlet attemptCounter = 0;\\n\\n\\t\\tif (ns.getServerNumPortsRequired <= 5 && attemptCounter < 50) {\\n\\t\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\n\\t\\t\\t\\tattemptCounter++;\\n\\t\\t\\t}\\n\\n\\t\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.15,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":1170,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}}],\"serversOnNetwork\":[\"neo-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":63,\"hackDifficulty\":63,\"minDifficulty\":21,\"moneyAvailable\":79463090,\"moneyMax\":1986577250,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":266,\"serverGrowth\":37}},\"n00dles\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-566612.cct\",\"type\":\"Subarray with Maximum Sum\",\"data\":[5,-2,-7,4,8,-7,-8,-10,-7,8,8,1,5],\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-348377.cct\",\"type\":\"Sanitize Parentheses in Expression\",\"data\":\"(a))(((\",\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"n00dles\",\"httpPortOpen\":false,\"ip\":\"24.9.1.8\",\"isConnectedTo\":false,\"maxRam\":4,\"messages\":[],\"organizationName\":\"Noodle Bar\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.grow(target);\\n\\t}\\n}\",\"filename\":\"basic-grow.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"n00dles\",\"moduleSequenceNumber\":1171,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"basic-hack.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"n00dles\",\"moduleSequenceNumber\":1172,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(target);\\n\\t}\\n}\",\"filename\":\"basic-weaken.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"n00dles\",\"moduleSequenceNumber\":1173,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerList, takeover } from \\\"modules/helper.js\\\";\\n\\n/** @param {NS} ns **/\\n// TODO: unused + unfinished, based on setup.ns\\nexport async function main(ns) {\\n\\tconst myServers = [\\\"home\\\"];\\n\\n\\tvar servers = await getServerList(myServers, 0, ns);\\n\\n\\tfor (let entry in servers) {\\t\\n\\t\\tawait takeover(servers[entry], ns);\\n\\t}\\n}\",\"filename\":\"deep-setup.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"n00dles\",\"moduleSequenceNumber\":1174}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\t//\\n}\",\"filename\":\"formulas-testing.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"n00dles\",\"moduleSequenceNumber\":1175,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tconst currentMachine = ns.getHostname();\\n\\tvar servers = ns.scan(currentMachine);\\n\\tvar scripts = ns.ls(home, \\\"basic-\\\");\\n\\n\\tns.tprint(\\\"Host:  \\\" + currentMachine);\\n\\tfor (let entry in servers) {\\t// depth 0\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\t// depth 1\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== home && subservers.length > 1) {\\n\\t\\t\\t\\tns.tprint(\\\"-----> \\\" + subservers[subentry]);\\n\\t\\t\\t\\tlet subserversd2 = ns.scan(subservers[subentry]); // depth 2\\n\\t\\t\\t\\tfor (let subentryd2 in subserversd2) {\\n\\t\\t\\t\\t\\tif (subserversd2[subentryd2] !== subservers[subentry] && subserversd2[subentryd2] !== servers[entry] && subserversd2.length > 1) {\\n\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------> \\\" + subserversd2[subentryd2]);\\n\\t\\t\\t\\t\\t\\tlet subserversd3 = ns.scan(subserversd2[subentryd2]);\\t// depth 3\\n\\t\\t\\t\\t\\t\\tfor (let subentryd3 in subserversd3) {\\n\\t\\t\\t\\t\\t\\t\\tif (subserversd3[subentryd3] !== subserversd2[subentryd2] && subserversd3[subentryd3] !== subservers[subentry] && subserversd3.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------> \\\" + subserversd3[subentryd3]);\\n\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd4 = ns.scan(subserversd3[subentryd3]);\\t// depth 4\\n\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd4 in subserversd4) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd4[subentryd4] !== subserversd3[subentryd3] && subserversd4[subentryd4] !== subserversd2[subentryd2] && subserversd4.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------------> \\\" + subserversd4[subentryd4]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd5 = ns.scan(subserversd4[subentryd4]);\\t// depth 5\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd5 in subserversd5) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd5[subentryd5] !== subserversd4[subentryd4] && subserversd5[subentryd5] !== subserversd3[subentryd3] && subserversd5.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-------------------------> \\\" + subserversd5[subentryd5]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd6 = ns.scan(subserversd5[subentryd5]);\\t// depth 6\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd6 in subserversd6) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd6[subentryd6] !== subserversd5[subentryd5] && subserversd6[subentryd6] !== subserversd4[subentryd4] && subserversd6.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"------------------------------> \\\" + subserversd6[subentryd6]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd7 = ns.scan(subserversd6[subentryd6]);\\t// depth 7\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor(let subentryd7 in subserversd7) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd7[subentryd7] !== subserversd6[subentryd6] && subserversd7[subentryd7] !== subserversd5[subentryd5] && subserversd7.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-----------------------------------> \\\" + subserversd7[subentryd7]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"gigascan.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.05,\"server\":\"n00dles\",\"moduleSequenceNumber\":1176,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet targetRam = ns.getServerMaxRam(ns.args[0]);\\n\\tlet scriptMem = ns.getScriptRam(ns.args[1]);\\n\\n\\tns.tprint(\\\"Maximum possible threads for \\\" + ns.args[1] + \\\": \\\" + Math.floor(targetRam / scriptMem));\\n\\tns.exit;\\n}\",\"filename\":\"ram-usage.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"n00dles\",\"moduleSequenceNumber\":1177,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerList } from \\\"modules/helper.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet serversSeen = [\\\"home\\\"]; // home + bought servers\\n\\tlet contractList = [];\\n\\n\\tserversSeen = await getServerList(serversSeen, 0, ns);\\n\\n\\tns.tprint(serversSeen);\\n}\",\"filename\":\"search-coding-contracts.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"n00dles\",\"moduleSequenceNumber\":1178}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tvar servers = ns.scan(home);\\n\\tvar scripts = ns.ls(home, \\\".ns\\\");\\n\\n\\tfor (let entry in scripts) {\\n\\t\\tns.tprint(\\\"found script: \\\" + scripts[entry]);\\n\\t}\\n\\n\\t// Hack servers (!!! depth = 2 !!!) if needed and populate with scripts\\n\\tfor (let entry in servers) {\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== \\\"home\\\") {\\n\\t\\t\\t\\tns.tprint(\\\"----->   \\\" + subservers[subentry]);\\n\\t\\t\\t\\tif (!ns.hasRootAccess(subservers[subentry])) {\\n\\t\\t\\t\\t\\ttakeover(subservers[subentry]);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tns.tprint(\\\"copying scripts to \\\" + subservers[subentry]);\\n\\t\\t\\t\\tawait ns.scp(scripts, home, subservers[subentry]);\\n\\t\\t\\t\\t//await ns.scp(\\\"setup.ns\\\", home, subservers[subentry]);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (!ns.hasRootAccess(servers[entry])) {\\n\\t\\t\\ttakeover(servers[entry]);\\n\\t\\t}\\n\\t\\tns.tprint(\\\"copying scripts to \\\" + servers[entry]);\\n\\t\\tawait ns.scp(scripts, home, servers[entry]);\\n\\t\\t//await ns.scp(\\\"setup.ns\\\", home, servers[entry]);\\n\\t}\\n\\n\\t/** \\n\\t * \\tAttempts to take over target machine\\t\\n\\t * \\n\\t *  @param {string} tar\\n\\t *  @return {boolean} outcome \\n\\t**/\\n\\tasync function takeover(tar) {\\n\\t\\tlet currentTarget = tar;\\n\\t\\tlet isNotTakenOver = true;\\n\\t\\tlet attemptCounter = 0;\\n\\n\\t\\tif (ns.getServerNumPortsRequired <= 5 && attemptCounter < 50) {\\n\\t\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\n\\t\\t\\t\\tattemptCounter++;\\n\\t\\t\\t}\\n\\n\\t\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"setup.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.15,\"server\":\"n00dles\",\"moduleSequenceNumber\":1179,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Returns an array of all hostnames in the network tree\\n * \\n * @param {string[]} serversSeen\\n * @param {number} safetyCounter Prevents infnite recursion\\n * @param {NS} ns\\n */\\nexport async function getServerList(serversSeen, safetyCounter, ns) {\\n\\tlet srvrsSeen = serversSeen;\\n\\tlet currServScanResult = [];\\n\\n\\tfor (let serverSeen in srvrsSeen) {\\n\\t\\tcurrServScanResult = ns.scan(srvrsSeen[serverSeen]);\\n\\t\\tfor (let entry in currServScanResult) {\\n\\t\\t\\tif (!srvrsSeen.includes(currServScanResult[entry])) {\\n\\t\\t\\t\\tsrvrsSeen.push(currServScanResult[entry]);\\n\\t\\t\\t\\tif ((++safetyCounter) < 250) {\\n\\t\\t\\t\\t\\tawait getServerList(srvrsSeen, safetyCounter, ns);\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tns.exit();\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\t//Filter out invalid values (NaN, null, {}, undefined)\\n\\tsrvrsSeen = srvrsSeen.filter(x => x);\\n\\treturn srvrsSeen;\\n}\\n\\n\\n/** \\n * \\tAttempts to take over target machine\\t\\n * \\n *  @param {string} target\\n * \\t@param {NS} ns\\n *  @return {boolean} outcome \\n**/\\nexport async function takeover(target, ns) {\\n\\tconst home = \\\"home\\\";\\n\\tlet currentTarget = target;\\n\\tlet isNotTakenOver = true;\\n\\tlet attemptCounter = 0;\\n\\n\\tlet scripts = ns.ls(home, \\\".ns\\\");\\n\\tscripts.push(ns.ls(home, \\\".js\\\"));\\n\\n\\tif (!ns.hasRootAccess(currentTarget) && attemptCounter < 30) {\\n\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\ttry {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t} catch (error) {\\n\\t\\t\\t\\t\\tns.tprint(\\\"not enough ports to nuke \\\" + currentTarget);\\n\\t\\t\\t\\t\\treturn false;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t}\\n\\t\\t\\tattemptCounter++;\\n\\t\\t}\\n\\n\\t\\tawait ns.scp(scripts, home, currentTarget);\\n\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\",\"filename\":\"/modules/helper.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"n00dles\",\"moduleSequenceNumber\":1180,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":70000,\"moneyMax\":1750000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":3000}},\"foodnstuff\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"foodnstuff\",\"httpPortOpen\":false,\"ip\":\"41.5.5.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"FoodNStuff\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.grow(target);\\n\\t}\\n}\",\"filename\":\"basic-grow.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":1181,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"basic-hack.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":1182,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(target);\\n\\t}\\n}\",\"filename\":\"basic-weaken.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":1183,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerList, takeover } from \\\"modules/helper.js\\\";\\n\\n/** @param {NS} ns **/\\n// TODO: unused + unfinished, based on setup.ns\\nexport async function main(ns) {\\n\\tconst myServers = [\\\"home\\\"];\\n\\n\\tvar servers = await getServerList(myServers, 0, ns);\\n\\n\\tfor (let entry in servers) {\\t\\n\\t\\tawait takeover(servers[entry], ns);\\n\\t}\\n}\",\"filename\":\"deep-setup.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":1184}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\t//\\n}\",\"filename\":\"formulas-testing.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":1185,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tconst currentMachine = ns.getHostname();\\n\\tvar servers = ns.scan(currentMachine);\\n\\tvar scripts = ns.ls(home, \\\"basic-\\\");\\n\\n\\tns.tprint(\\\"Host:  \\\" + currentMachine);\\n\\tfor (let entry in servers) {\\t// depth 0\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\t// depth 1\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== home && subservers.length > 1) {\\n\\t\\t\\t\\tns.tprint(\\\"-----> \\\" + subservers[subentry]);\\n\\t\\t\\t\\tlet subserversd2 = ns.scan(subservers[subentry]); // depth 2\\n\\t\\t\\t\\tfor (let subentryd2 in subserversd2) {\\n\\t\\t\\t\\t\\tif (subserversd2[subentryd2] !== subservers[subentry] && subserversd2[subentryd2] !== servers[entry] && subserversd2.length > 1) {\\n\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------> \\\" + subserversd2[subentryd2]);\\n\\t\\t\\t\\t\\t\\tlet subserversd3 = ns.scan(subserversd2[subentryd2]);\\t// depth 3\\n\\t\\t\\t\\t\\t\\tfor (let subentryd3 in subserversd3) {\\n\\t\\t\\t\\t\\t\\t\\tif (subserversd3[subentryd3] !== subserversd2[subentryd2] && subserversd3[subentryd3] !== subservers[subentry] && subserversd3.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------> \\\" + subserversd3[subentryd3]);\\n\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd4 = ns.scan(subserversd3[subentryd3]);\\t// depth 4\\n\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd4 in subserversd4) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd4[subentryd4] !== subserversd3[subentryd3] && subserversd4[subentryd4] !== subserversd2[subentryd2] && subserversd4.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------------> \\\" + subserversd4[subentryd4]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd5 = ns.scan(subserversd4[subentryd4]);\\t// depth 5\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd5 in subserversd5) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd5[subentryd5] !== subserversd4[subentryd4] && subserversd5[subentryd5] !== subserversd3[subentryd3] && subserversd5.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-------------------------> \\\" + subserversd5[subentryd5]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd6 = ns.scan(subserversd5[subentryd5]);\\t// depth 6\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd6 in subserversd6) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd6[subentryd6] !== subserversd5[subentryd5] && subserversd6[subentryd6] !== subserversd4[subentryd4] && subserversd6.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"------------------------------> \\\" + subserversd6[subentryd6]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd7 = ns.scan(subserversd6[subentryd6]);\\t// depth 7\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor(let subentryd7 in subserversd7) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd7[subentryd7] !== subserversd6[subentryd6] && subserversd7[subentryd7] !== subserversd5[subentryd5] && subserversd7.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-----------------------------------> \\\" + subserversd7[subentryd7]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"gigascan.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.05,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":1186,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet targetRam = ns.getServerMaxRam(ns.args[0]);\\n\\tlet scriptMem = ns.getScriptRam(ns.args[1]);\\n\\n\\tns.tprint(\\\"Maximum possible threads for \\\" + ns.args[1] + \\\": \\\" + Math.floor(targetRam / scriptMem));\\n\\tns.exit;\\n}\",\"filename\":\"ram-usage.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":1187,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerList } from \\\"modules/helper.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet serversSeen = [\\\"home\\\"]; // home + bought servers\\n\\tlet contractList = [];\\n\\n\\tserversSeen = await getServerList(serversSeen, 0, ns);\\n\\n\\tns.tprint(serversSeen);\\n}\",\"filename\":\"search-coding-contracts.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":1188}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tvar servers = ns.scan(home);\\n\\tvar scripts = ns.ls(home, \\\".ns\\\");\\n\\n\\tfor (let entry in scripts) {\\n\\t\\tns.tprint(\\\"found script: \\\" + scripts[entry]);\\n\\t}\\n\\n\\t// Hack servers (!!! depth = 2 !!!) if needed and populate with scripts\\n\\tfor (let entry in servers) {\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== \\\"home\\\") {\\n\\t\\t\\t\\tns.tprint(\\\"----->   \\\" + subservers[subentry]);\\n\\t\\t\\t\\tif (!ns.hasRootAccess(subservers[subentry])) {\\n\\t\\t\\t\\t\\ttakeover(subservers[subentry]);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tns.tprint(\\\"copying scripts to \\\" + subservers[subentry]);\\n\\t\\t\\t\\tawait ns.scp(scripts, home, subservers[subentry]);\\n\\t\\t\\t\\t//await ns.scp(\\\"setup.ns\\\", home, subservers[subentry]);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (!ns.hasRootAccess(servers[entry])) {\\n\\t\\t\\ttakeover(servers[entry]);\\n\\t\\t}\\n\\t\\tns.tprint(\\\"copying scripts to \\\" + servers[entry]);\\n\\t\\tawait ns.scp(scripts, home, servers[entry]);\\n\\t\\t//await ns.scp(\\\"setup.ns\\\", home, servers[entry]);\\n\\t}\\n\\n\\t/** \\n\\t * \\tAttempts to take over target machine\\t\\n\\t * \\n\\t *  @param {string} tar\\n\\t *  @return {boolean} outcome \\n\\t**/\\n\\tasync function takeover(tar) {\\n\\t\\tlet currentTarget = tar;\\n\\t\\tlet isNotTakenOver = true;\\n\\t\\tlet attemptCounter = 0;\\n\\n\\t\\tif (ns.getServerNumPortsRequired <= 5 && attemptCounter < 50) {\\n\\t\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\n\\t\\t\\t\\tattemptCounter++;\\n\\t\\t\\t}\\n\\n\\t\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"setup.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.15,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":1189,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Returns an array of all hostnames in the network tree\\n * \\n * @param {string[]} serversSeen\\n * @param {number} safetyCounter Prevents infnite recursion\\n * @param {NS} ns\\n */\\nexport async function getServerList(serversSeen, safetyCounter, ns) {\\n\\tlet srvrsSeen = serversSeen;\\n\\tlet currServScanResult = [];\\n\\n\\tfor (let serverSeen in srvrsSeen) {\\n\\t\\tcurrServScanResult = ns.scan(srvrsSeen[serverSeen]);\\n\\t\\tfor (let entry in currServScanResult) {\\n\\t\\t\\tif (!srvrsSeen.includes(currServScanResult[entry])) {\\n\\t\\t\\t\\tsrvrsSeen.push(currServScanResult[entry]);\\n\\t\\t\\t\\tif ((++safetyCounter) < 250) {\\n\\t\\t\\t\\t\\tawait getServerList(srvrsSeen, safetyCounter, ns);\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tns.exit();\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\t//Filter out invalid values (NaN, null, {}, undefined)\\n\\tsrvrsSeen = srvrsSeen.filter(x => x);\\n\\treturn srvrsSeen;\\n}\\n\\n\\n/** \\n * \\tAttempts to take over target machine\\t\\n * \\n *  @param {string} target\\n * \\t@param {NS} ns\\n *  @return {boolean} outcome \\n**/\\nexport async function takeover(target, ns) {\\n\\tconst home = \\\"home\\\";\\n\\tlet currentTarget = target;\\n\\tlet isNotTakenOver = true;\\n\\tlet attemptCounter = 0;\\n\\n\\tlet scripts = ns.ls(home, \\\".ns\\\");\\n\\tscripts.push(ns.ls(home, \\\".js\\\"));\\n\\n\\tif (!ns.hasRootAccess(currentTarget) && attemptCounter < 30) {\\n\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\ttry {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t} catch (error) {\\n\\t\\t\\t\\t\\tns.tprint(\\\"not enough ports to nuke \\\" + currentTarget);\\n\\t\\t\\t\\t\\treturn false;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t}\\n\\t\\t\\tattemptCounter++;\\n\\t\\t}\\n\\n\\t\\tawait ns.scp(scripts, home, currentTarget);\\n\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\",\"filename\":\"/modules/helper.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":1190,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":10,\"hackDifficulty\":6.274,\"minDifficulty\":3,\"moneyAvailable\":940.9720133586184,\"moneyMax\":50000000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":5}},\"sigma-cosmetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"sigma-cosmetics\",\"httpPortOpen\":false,\"ip\":\"61.4.4.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Sigma Cosmetics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.grow(target);\\n\\t}\\n}\",\"filename\":\"basic-grow.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":1191,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"basic-hack.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":1192,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(target);\\n\\t}\\n}\",\"filename\":\"basic-weaken.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":1193,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerList, takeover } from \\\"modules/helper.js\\\";\\n\\n/** @param {NS} ns **/\\n// TODO: unused + unfinished, based on setup.ns\\nexport async function main(ns) {\\n\\tconst myServers = [\\\"home\\\"];\\n\\n\\tvar servers = await getServerList(myServers, 0, ns);\\n\\n\\tfor (let entry in servers) {\\t\\n\\t\\tawait takeover(servers[entry], ns);\\n\\t}\\n}\",\"filename\":\"deep-setup.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":1194}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\t//\\n}\",\"filename\":\"formulas-testing.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":1195,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tconst currentMachine = ns.getHostname();\\n\\tvar servers = ns.scan(currentMachine);\\n\\tvar scripts = ns.ls(home, \\\"basic-\\\");\\n\\n\\tns.tprint(\\\"Host:  \\\" + currentMachine);\\n\\tfor (let entry in servers) {\\t// depth 0\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\t// depth 1\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== home && subservers.length > 1) {\\n\\t\\t\\t\\tns.tprint(\\\"-----> \\\" + subservers[subentry]);\\n\\t\\t\\t\\tlet subserversd2 = ns.scan(subservers[subentry]); // depth 2\\n\\t\\t\\t\\tfor (let subentryd2 in subserversd2) {\\n\\t\\t\\t\\t\\tif (subserversd2[subentryd2] !== subservers[subentry] && subserversd2[subentryd2] !== servers[entry] && subserversd2.length > 1) {\\n\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------> \\\" + subserversd2[subentryd2]);\\n\\t\\t\\t\\t\\t\\tlet subserversd3 = ns.scan(subserversd2[subentryd2]);\\t// depth 3\\n\\t\\t\\t\\t\\t\\tfor (let subentryd3 in subserversd3) {\\n\\t\\t\\t\\t\\t\\t\\tif (subserversd3[subentryd3] !== subserversd2[subentryd2] && subserversd3[subentryd3] !== subservers[subentry] && subserversd3.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------> \\\" + subserversd3[subentryd3]);\\n\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd4 = ns.scan(subserversd3[subentryd3]);\\t// depth 4\\n\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd4 in subserversd4) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd4[subentryd4] !== subserversd3[subentryd3] && subserversd4[subentryd4] !== subserversd2[subentryd2] && subserversd4.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------------> \\\" + subserversd4[subentryd4]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd5 = ns.scan(subserversd4[subentryd4]);\\t// depth 5\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd5 in subserversd5) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd5[subentryd5] !== subserversd4[subentryd4] && subserversd5[subentryd5] !== subserversd3[subentryd3] && subserversd5.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-------------------------> \\\" + subserversd5[subentryd5]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd6 = ns.scan(subserversd5[subentryd5]);\\t// depth 6\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd6 in subserversd6) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd6[subentryd6] !== subserversd5[subentryd5] && subserversd6[subentryd6] !== subserversd4[subentryd4] && subserversd6.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"------------------------------> \\\" + subserversd6[subentryd6]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd7 = ns.scan(subserversd6[subentryd6]);\\t// depth 7\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor(let subentryd7 in subserversd7) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd7[subentryd7] !== subserversd6[subentryd6] && subserversd7[subentryd7] !== subserversd5[subentryd5] && subserversd7.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-----------------------------------> \\\" + subserversd7[subentryd7]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"gigascan.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.05,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":1196,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet targetRam = ns.getServerMaxRam(ns.args[0]);\\n\\tlet scriptMem = ns.getScriptRam(ns.args[1]);\\n\\n\\tns.tprint(\\\"Maximum possible threads for \\\" + ns.args[1] + \\\": \\\" + Math.floor(targetRam / scriptMem));\\n\\tns.exit;\\n}\",\"filename\":\"ram-usage.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":1197,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerList } from \\\"modules/helper.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet serversSeen = [\\\"home\\\"]; // home + bought servers\\n\\tlet contractList = [];\\n\\n\\tserversSeen = await getServerList(serversSeen, 0, ns);\\n\\n\\tns.tprint(serversSeen);\\n}\",\"filename\":\"search-coding-contracts.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":1198}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tvar servers = ns.scan(home);\\n\\tvar scripts = ns.ls(home, \\\".ns\\\");\\n\\n\\tfor (let entry in scripts) {\\n\\t\\tns.tprint(\\\"found script: \\\" + scripts[entry]);\\n\\t}\\n\\n\\t// Hack servers (!!! depth = 2 !!!) if needed and populate with scripts\\n\\tfor (let entry in servers) {\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== \\\"home\\\") {\\n\\t\\t\\t\\tns.tprint(\\\"----->   \\\" + subservers[subentry]);\\n\\t\\t\\t\\tif (!ns.hasRootAccess(subservers[subentry])) {\\n\\t\\t\\t\\t\\ttakeover(subservers[subentry]);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tns.tprint(\\\"copying scripts to \\\" + subservers[subentry]);\\n\\t\\t\\t\\tawait ns.scp(scripts, home, subservers[subentry]);\\n\\t\\t\\t\\t//await ns.scp(\\\"setup.ns\\\", home, subservers[subentry]);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (!ns.hasRootAccess(servers[entry])) {\\n\\t\\t\\ttakeover(servers[entry]);\\n\\t\\t}\\n\\t\\tns.tprint(\\\"copying scripts to \\\" + servers[entry]);\\n\\t\\tawait ns.scp(scripts, home, servers[entry]);\\n\\t\\t//await ns.scp(\\\"setup.ns\\\", home, servers[entry]);\\n\\t}\\n\\n\\t/** \\n\\t * \\tAttempts to take over target machine\\t\\n\\t * \\n\\t *  @param {string} tar\\n\\t *  @return {boolean} outcome \\n\\t**/\\n\\tasync function takeover(tar) {\\n\\t\\tlet currentTarget = tar;\\n\\t\\tlet isNotTakenOver = true;\\n\\t\\tlet attemptCounter = 0;\\n\\n\\t\\tif (ns.getServerNumPortsRequired <= 5 && attemptCounter < 50) {\\n\\t\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\n\\t\\t\\t\\tattemptCounter++;\\n\\t\\t\\t}\\n\\n\\t\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"setup.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.15,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":1199,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Returns an array of all hostnames in the network tree\\n * \\n * @param {string[]} serversSeen\\n * @param {number} safetyCounter Prevents infnite recursion\\n * @param {NS} ns\\n */\\nexport async function getServerList(serversSeen, safetyCounter, ns) {\\n\\tlet srvrsSeen = serversSeen;\\n\\tlet currServScanResult = [];\\n\\n\\tfor (let serverSeen in srvrsSeen) {\\n\\t\\tcurrServScanResult = ns.scan(srvrsSeen[serverSeen]);\\n\\t\\tfor (let entry in currServScanResult) {\\n\\t\\t\\tif (!srvrsSeen.includes(currServScanResult[entry])) {\\n\\t\\t\\t\\tsrvrsSeen.push(currServScanResult[entry]);\\n\\t\\t\\t\\tif ((++safetyCounter) < 250) {\\n\\t\\t\\t\\t\\tawait getServerList(srvrsSeen, safetyCounter, ns);\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tns.exit();\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\t//Filter out invalid values (NaN, null, {}, undefined)\\n\\tsrvrsSeen = srvrsSeen.filter(x => x);\\n\\treturn srvrsSeen;\\n}\\n\\n\\n/** \\n * \\tAttempts to take over target machine\\t\\n * \\n *  @param {string} target\\n * \\t@param {NS} ns\\n *  @return {boolean} outcome \\n**/\\nexport async function takeover(target, ns) {\\n\\tconst home = \\\"home\\\";\\n\\tlet currentTarget = target;\\n\\tlet isNotTakenOver = true;\\n\\tlet attemptCounter = 0;\\n\\n\\tlet scripts = ns.ls(home, \\\".ns\\\");\\n\\tscripts.push(ns.ls(home, \\\".js\\\"));\\n\\n\\tif (!ns.hasRootAccess(currentTarget) && attemptCounter < 30) {\\n\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\ttry {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t} catch (error) {\\n\\t\\t\\t\\t\\tns.tprint(\\\"not enough ports to nuke \\\" + currentTarget);\\n\\t\\t\\t\\t\\treturn false;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t}\\n\\t\\t\\tattemptCounter++;\\n\\t\\t}\\n\\n\\t\\tawait ns.scp(scripts, home, currentTarget);\\n\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\",\"filename\":\"/modules/helper.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":1200,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":10,\"hackDifficulty\":10,\"minDifficulty\":3,\"moneyAvailable\":2300000,\"moneyMax\":57500000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":5,\"serverGrowth\":10}},\"joesguns\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"joesguns\",\"httpPortOpen\":false,\"ip\":\"23.8.3.1\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Joe's Guns\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.grow(target);\\n\\t}\\n}\",\"filename\":\"basic-grow.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"joesguns\",\"moduleSequenceNumber\":1201,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"basic-hack.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"joesguns\",\"moduleSequenceNumber\":1202,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(target);\\n\\t}\\n}\",\"filename\":\"basic-weaken.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"joesguns\",\"moduleSequenceNumber\":1203,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerList, takeover } from \\\"modules/helper.js\\\";\\n\\n/** @param {NS} ns **/\\n// TODO: unused + unfinished, based on setup.ns\\nexport async function main(ns) {\\n\\tconst myServers = [\\\"home\\\"];\\n\\n\\tvar servers = await getServerList(myServers, 0, ns);\\n\\n\\tfor (let entry in servers) {\\t\\n\\t\\tawait takeover(servers[entry], ns);\\n\\t}\\n}\",\"filename\":\"deep-setup.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"joesguns\",\"moduleSequenceNumber\":1204}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\t//\\n}\",\"filename\":\"formulas-testing.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"joesguns\",\"moduleSequenceNumber\":1205,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tconst currentMachine = ns.getHostname();\\n\\tvar servers = ns.scan(currentMachine);\\n\\tvar scripts = ns.ls(home, \\\"basic-\\\");\\n\\n\\tns.tprint(\\\"Host:  \\\" + currentMachine);\\n\\tfor (let entry in servers) {\\t// depth 0\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\t// depth 1\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== home && subservers.length > 1) {\\n\\t\\t\\t\\tns.tprint(\\\"-----> \\\" + subservers[subentry]);\\n\\t\\t\\t\\tlet subserversd2 = ns.scan(subservers[subentry]); // depth 2\\n\\t\\t\\t\\tfor (let subentryd2 in subserversd2) {\\n\\t\\t\\t\\t\\tif (subserversd2[subentryd2] !== subservers[subentry] && subserversd2[subentryd2] !== servers[entry] && subserversd2.length > 1) {\\n\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------> \\\" + subserversd2[subentryd2]);\\n\\t\\t\\t\\t\\t\\tlet subserversd3 = ns.scan(subserversd2[subentryd2]);\\t// depth 3\\n\\t\\t\\t\\t\\t\\tfor (let subentryd3 in subserversd3) {\\n\\t\\t\\t\\t\\t\\t\\tif (subserversd3[subentryd3] !== subserversd2[subentryd2] && subserversd3[subentryd3] !== subservers[subentry] && subserversd3.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------> \\\" + subserversd3[subentryd3]);\\n\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd4 = ns.scan(subserversd3[subentryd3]);\\t// depth 4\\n\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd4 in subserversd4) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd4[subentryd4] !== subserversd3[subentryd3] && subserversd4[subentryd4] !== subserversd2[subentryd2] && subserversd4.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------------> \\\" + subserversd4[subentryd4]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd5 = ns.scan(subserversd4[subentryd4]);\\t// depth 5\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd5 in subserversd5) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd5[subentryd5] !== subserversd4[subentryd4] && subserversd5[subentryd5] !== subserversd3[subentryd3] && subserversd5.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-------------------------> \\\" + subserversd5[subentryd5]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd6 = ns.scan(subserversd5[subentryd5]);\\t// depth 6\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd6 in subserversd6) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd6[subentryd6] !== subserversd5[subentryd5] && subserversd6[subentryd6] !== subserversd4[subentryd4] && subserversd6.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"------------------------------> \\\" + subserversd6[subentryd6]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd7 = ns.scan(subserversd6[subentryd6]);\\t// depth 7\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor(let subentryd7 in subserversd7) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd7[subentryd7] !== subserversd6[subentryd6] && subserversd7[subentryd7] !== subserversd5[subentryd5] && subserversd7.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-----------------------------------> \\\" + subserversd7[subentryd7]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"gigascan.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.05,\"server\":\"joesguns\",\"moduleSequenceNumber\":1206,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet targetRam = ns.getServerMaxRam(ns.args[0]);\\n\\tlet scriptMem = ns.getScriptRam(ns.args[1]);\\n\\n\\tns.tprint(\\\"Maximum possible threads for \\\" + ns.args[1] + \\\": \\\" + Math.floor(targetRam / scriptMem));\\n\\tns.exit;\\n}\",\"filename\":\"ram-usage.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"joesguns\",\"moduleSequenceNumber\":1207,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerList } from \\\"modules/helper.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet serversSeen = [\\\"home\\\"]; // home + bought servers\\n\\tlet contractList = [];\\n\\n\\tserversSeen = await getServerList(serversSeen, 0, ns);\\n\\n\\tns.tprint(serversSeen);\\n}\",\"filename\":\"search-coding-contracts.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"joesguns\",\"moduleSequenceNumber\":1208}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tvar servers = ns.scan(home);\\n\\tvar scripts = ns.ls(home, \\\".ns\\\");\\n\\n\\tfor (let entry in scripts) {\\n\\t\\tns.tprint(\\\"found script: \\\" + scripts[entry]);\\n\\t}\\n\\n\\t// Hack servers (!!! depth = 2 !!!) if needed and populate with scripts\\n\\tfor (let entry in servers) {\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== \\\"home\\\") {\\n\\t\\t\\t\\tns.tprint(\\\"----->   \\\" + subservers[subentry]);\\n\\t\\t\\t\\tif (!ns.hasRootAccess(subservers[subentry])) {\\n\\t\\t\\t\\t\\ttakeover(subservers[subentry]);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tns.tprint(\\\"copying scripts to \\\" + subservers[subentry]);\\n\\t\\t\\t\\tawait ns.scp(scripts, home, subservers[subentry]);\\n\\t\\t\\t\\t//await ns.scp(\\\"setup.ns\\\", home, subservers[subentry]);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (!ns.hasRootAccess(servers[entry])) {\\n\\t\\t\\ttakeover(servers[entry]);\\n\\t\\t}\\n\\t\\tns.tprint(\\\"copying scripts to \\\" + servers[entry]);\\n\\t\\tawait ns.scp(scripts, home, servers[entry]);\\n\\t\\t//await ns.scp(\\\"setup.ns\\\", home, servers[entry]);\\n\\t}\\n\\n\\t/** \\n\\t * \\tAttempts to take over target machine\\t\\n\\t * \\n\\t *  @param {string} tar\\n\\t *  @return {boolean} outcome \\n\\t**/\\n\\tasync function takeover(tar) {\\n\\t\\tlet currentTarget = tar;\\n\\t\\tlet isNotTakenOver = true;\\n\\t\\tlet attemptCounter = 0;\\n\\n\\t\\tif (ns.getServerNumPortsRequired <= 5 && attemptCounter < 50) {\\n\\t\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\n\\t\\t\\t\\tattemptCounter++;\\n\\t\\t\\t}\\n\\n\\t\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"setup.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.15,\"server\":\"joesguns\",\"moduleSequenceNumber\":1209,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Returns an array of all hostnames in the network tree\\n * \\n * @param {string[]} serversSeen\\n * @param {number} safetyCounter Prevents infnite recursion\\n * @param {NS} ns\\n */\\nexport async function getServerList(serversSeen, safetyCounter, ns) {\\n\\tlet srvrsSeen = serversSeen;\\n\\tlet currServScanResult = [];\\n\\n\\tfor (let serverSeen in srvrsSeen) {\\n\\t\\tcurrServScanResult = ns.scan(srvrsSeen[serverSeen]);\\n\\t\\tfor (let entry in currServScanResult) {\\n\\t\\t\\tif (!srvrsSeen.includes(currServScanResult[entry])) {\\n\\t\\t\\t\\tsrvrsSeen.push(currServScanResult[entry]);\\n\\t\\t\\t\\tif ((++safetyCounter) < 250) {\\n\\t\\t\\t\\t\\tawait getServerList(srvrsSeen, safetyCounter, ns);\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tns.exit();\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\t//Filter out invalid values (NaN, null, {}, undefined)\\n\\tsrvrsSeen = srvrsSeen.filter(x => x);\\n\\treturn srvrsSeen;\\n}\\n\\n\\n/** \\n * \\tAttempts to take over target machine\\t\\n * \\n *  @param {string} target\\n * \\t@param {NS} ns\\n *  @return {boolean} outcome \\n**/\\nexport async function takeover(target, ns) {\\n\\tconst home = \\\"home\\\";\\n\\tlet currentTarget = target;\\n\\tlet isNotTakenOver = true;\\n\\tlet attemptCounter = 0;\\n\\n\\tlet scripts = ns.ls(home, \\\".ns\\\");\\n\\tscripts.push(ns.ls(home, \\\".js\\\"));\\n\\n\\tif (!ns.hasRootAccess(currentTarget) && attemptCounter < 30) {\\n\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\ttry {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t} catch (error) {\\n\\t\\t\\t\\t\\tns.tprint(\\\"not enough ports to nuke \\\" + currentTarget);\\n\\t\\t\\t\\t\\treturn false;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t}\\n\\t\\t\\tattemptCounter++;\\n\\t\\t}\\n\\n\\t\\tawait ns.scp(scripts, home, currentTarget);\\n\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\",\"filename\":\"/modules/helper.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"joesguns\",\"moduleSequenceNumber\":1210,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}}],\"serversOnNetwork\":[\"home\",\"max-hardware\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":15,\"minDifficulty\":5,\"moneyAvailable\":2500000,\"moneyMax\":62500000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":10,\"serverGrowth\":20}},\"zer0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-295971-Netburners.cct\",\"type\":\"Array Jumping Game\",\"data\":[0,0,5,0,3,10],\"reward\":{\"name\":\"Netburners\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zer0\",\"httpPortOpen\":false,\"ip\":\"22.3.4.8\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"ZER0 Nightclub\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Returns an array of all hostnames in the network tree\\n * \\n * @param {string[]} serversSeen\\n * @param {number} safetyCounter Prevents infnite recursion\\n * @param {NS} ns\\n */\\nexport async function getServerList(serversSeen, safetyCounter, ns) {\\n\\tlet srvrsSeen = serversSeen;\\n\\tlet currServScanResult = [];\\n\\n\\tfor (let serverSeen in srvrsSeen) {\\n\\t\\tcurrServScanResult = ns.scan(srvrsSeen[serverSeen]);\\n\\t\\tfor (let entry in currServScanResult) {\\n\\t\\t\\tif (!srvrsSeen.includes(currServScanResult[entry])) {\\n\\t\\t\\t\\tsrvrsSeen.push(currServScanResult[entry]);\\n\\t\\t\\t\\tif ((++safetyCounter) < 250) {\\n\\t\\t\\t\\t\\tawait getServerList(srvrsSeen, safetyCounter, ns);\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tns.exit();\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\t//Filter out invalid values (NaN, null, {}, undefined)\\n\\tsrvrsSeen = srvrsSeen.filter(x => x);\\n\\treturn srvrsSeen;\\n}\\n\\n\\n/** \\n * \\tAttempts to take over target machine\\t\\n * \\n *  @param {string} target\\n * \\t@param {NS} ns\\n *  @return {boolean} outcome \\n**/\\nexport async function takeover(target, ns) {\\n\\tconst home = \\\"home\\\";\\n\\tlet currentTarget = target;\\n\\tlet isNotTakenOver = true;\\n\\tlet attemptCounter = 0;\\n\\n\\tlet scripts = ns.ls(home, \\\".ns\\\");\\n\\tscripts.push(ns.ls(home, \\\".js\\\"));\\n\\n\\tif (!ns.hasRootAccess(currentTarget) && attemptCounter < 30) {\\n\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\ttry {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t} catch (error) {\\n\\t\\t\\t\\t\\tns.tprint(\\\"not enough ports to nuke \\\" + currentTarget);\\n\\t\\t\\t\\t\\treturn false;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t}\\n\\t\\t\\tattemptCounter++;\\n\\t\\t}\\n\\n\\t\\tawait ns.scp(scripts, home, currentTarget);\\n\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\",\"filename\":\"/modules/helper.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"zer0\",\"moduleSequenceNumber\":1211,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.grow(target);\\n\\t}\\n}\",\"filename\":\"basic-grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zer0\",\"moduleSequenceNumber\":1212,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"basic-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"zer0\",\"moduleSequenceNumber\":1213,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(target);\\n\\t}\\n}\",\"filename\":\"basic-weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zer0\",\"moduleSequenceNumber\":1214,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerList, takeover } from \\\"modules/helper.js\\\";\\n\\n/** @param {NS} ns **/\\n// TODO: unused + unfinished, based on setup.ns\\nexport async function main(ns) {\\n\\tconst myServers = [\\\"home\\\"];\\n\\n\\tvar servers = await getServerList(myServers, 0, ns);\\n\\n\\tfor (let entry in servers) {\\t\\n\\t\\tawait takeover(servers[entry], ns);\\n\\t}\\n}\",\"filename\":\"deep-setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"zer0\",\"moduleSequenceNumber\":1215,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\t//\\n}\",\"filename\":\"formulas-testing.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"zer0\",\"moduleSequenceNumber\":1216,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tconst currentMachine = ns.getHostname();\\n\\tvar servers = ns.scan(currentMachine);\\n\\tvar scripts = ns.ls(home, \\\"basic-\\\");\\n\\n\\tns.tprint(\\\"Host:  \\\" + currentMachine);\\n\\tfor (let entry in servers) {\\t// depth 0\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\t// depth 1\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== home && subservers.length > 1) {\\n\\t\\t\\t\\tns.tprint(\\\"-----> \\\" + subservers[subentry]);\\n\\t\\t\\t\\tlet subserversd2 = ns.scan(subservers[subentry]); // depth 2\\n\\t\\t\\t\\tfor (let subentryd2 in subserversd2) {\\n\\t\\t\\t\\t\\tif (subserversd2[subentryd2] !== subservers[subentry] && subserversd2[subentryd2] !== servers[entry] && subserversd2.length > 1) {\\n\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------> \\\" + subserversd2[subentryd2]);\\n\\t\\t\\t\\t\\t\\tlet subserversd3 = ns.scan(subserversd2[subentryd2]);\\t// depth 3\\n\\t\\t\\t\\t\\t\\tfor (let subentryd3 in subserversd3) {\\n\\t\\t\\t\\t\\t\\t\\tif (subserversd3[subentryd3] !== subserversd2[subentryd2] && subserversd3[subentryd3] !== subservers[subentry] && subserversd3.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------> \\\" + subserversd3[subentryd3]);\\n\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd4 = ns.scan(subserversd3[subentryd3]);\\t// depth 4\\n\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd4 in subserversd4) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd4[subentryd4] !== subserversd3[subentryd3] && subserversd4[subentryd4] !== subserversd2[subentryd2] && subserversd4.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------------> \\\" + subserversd4[subentryd4]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd5 = ns.scan(subserversd4[subentryd4]);\\t// depth 5\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd5 in subserversd5) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd5[subentryd5] !== subserversd4[subentryd4] && subserversd5[subentryd5] !== subserversd3[subentryd3] && subserversd5.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-------------------------> \\\" + subserversd5[subentryd5]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd6 = ns.scan(subserversd5[subentryd5]);\\t// depth 6\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd6 in subserversd6) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd6[subentryd6] !== subserversd5[subentryd5] && subserversd6[subentryd6] !== subserversd4[subentryd4] && subserversd6.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"------------------------------> \\\" + subserversd6[subentryd6]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd7 = ns.scan(subserversd6[subentryd6]);\\t// depth 7\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor(let subentryd7 in subserversd7) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd7[subentryd7] !== subserversd6[subentryd6] && subserversd7[subentryd7] !== subserversd5[subentryd5] && subserversd7.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-----------------------------------> \\\" + subserversd7[subentryd7]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"gigascan.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.05,\"server\":\"zer0\",\"moduleSequenceNumber\":1217,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet targetRam = ns.getServerMaxRam(ns.args[0]);\\n\\tlet scriptMem = ns.getScriptRam(ns.args[1]);\\n\\n\\tns.tprint(\\\"Maximum possible threads for \\\" + ns.args[1] + \\\": \\\" + Math.floor(targetRam / scriptMem));\\n\\tns.exit;\\n}\",\"filename\":\"ram-usage.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zer0\",\"moduleSequenceNumber\":1218,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerList } from \\\"modules/helper.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet serversSeen = [\\\"home\\\"]; // home + bought servers\\n\\tlet contractList = [];\\n\\n\\tserversSeen = await getServerList(serversSeen, 0, ns);\\n\\n\\tns.tprint(serversSeen);\\n}\",\"filename\":\"search-coding-contracts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"zer0\",\"moduleSequenceNumber\":1219,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tvar servers = ns.scan(home);\\n\\tvar scripts = ns.ls(home, \\\".ns\\\");\\n\\n\\tfor (let entry in scripts) {\\n\\t\\tns.tprint(\\\"found script: \\\" + scripts[entry]);\\n\\t}\\n\\n\\t// Hack servers (!!! depth = 2 !!!) if needed and populate with scripts\\n\\tfor (let entry in servers) {\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== \\\"home\\\") {\\n\\t\\t\\t\\tns.tprint(\\\"----->   \\\" + subservers[subentry]);\\n\\t\\t\\t\\tif (!ns.hasRootAccess(subservers[subentry])) {\\n\\t\\t\\t\\t\\ttakeover(subservers[subentry]);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tns.tprint(\\\"copying scripts to \\\" + subservers[subentry]);\\n\\t\\t\\t\\tawait ns.scp(scripts, home, subservers[subentry]);\\n\\t\\t\\t\\t//await ns.scp(\\\"setup.ns\\\", home, subservers[subentry]);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (!ns.hasRootAccess(servers[entry])) {\\n\\t\\t\\ttakeover(servers[entry]);\\n\\t\\t}\\n\\t\\tns.tprint(\\\"copying scripts to \\\" + servers[entry]);\\n\\t\\tawait ns.scp(scripts, home, servers[entry]);\\n\\t\\t//await ns.scp(\\\"setup.ns\\\", home, servers[entry]);\\n\\t}\\n\\n\\t/** \\n\\t * \\tAttempts to take over target machine\\t\\n\\t * \\n\\t *  @param {string} tar\\n\\t *  @return {boolean} outcome \\n\\t**/\\n\\tasync function takeover(tar) {\\n\\t\\tlet currentTarget = tar;\\n\\t\\tlet isNotTakenOver = true;\\n\\t\\tlet attemptCounter = 0;\\n\\n\\t\\tif (ns.getServerNumPortsRequired <= 5 && attemptCounter < 50) {\\n\\t\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\n\\t\\t\\t\\tattemptCounter++;\\n\\t\\t\\t}\\n\\n\\t\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.15,\"server\":\"zer0\",\"moduleSequenceNumber\":1220,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}}],\"serversOnNetwork\":[\"hong-fang-tea\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":25,\"minDifficulty\":8,\"moneyAvailable\":7500000,\"moneyMax\":187500000,\"numOpenPortsRequired\":1,\"openPortCount\":2,\"requiredHackingSkill\":75,\"serverGrowth\":40}},\"nectar-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"nectar-net\",\"httpPortOpen\":false,\"ip\":\"67.5.6.6\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Nectar Nightclub Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.grow(target);\\n\\t}\\n}\",\"filename\":\"basic-grow.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"nectar-net\",\"moduleSequenceNumber\":1221,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"basic-hack.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"nectar-net\",\"moduleSequenceNumber\":1222,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(target);\\n\\t}\\n}\",\"filename\":\"basic-weaken.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"nectar-net\",\"moduleSequenceNumber\":1223,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerList, takeover } from \\\"modules/helper.js\\\";\\n\\n/** @param {NS} ns **/\\n// TODO: unused + unfinished, based on setup.ns\\nexport async function main(ns) {\\n\\tconst myServers = [\\\"home\\\"];\\n\\n\\tvar servers = await getServerList(myServers, 0, ns);\\n\\n\\tfor (let entry in servers) {\\t\\n\\t\\tawait takeover(servers[entry], ns);\\n\\t}\\n}\",\"filename\":\"deep-setup.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"nectar-net\",\"moduleSequenceNumber\":1224}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\t//\\n}\",\"filename\":\"formulas-testing.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"nectar-net\",\"moduleSequenceNumber\":1225,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tconst currentMachine = ns.getHostname();\\n\\tvar servers = ns.scan(currentMachine);\\n\\tvar scripts = ns.ls(home, \\\"basic-\\\");\\n\\n\\tns.tprint(\\\"Host:  \\\" + currentMachine);\\n\\tfor (let entry in servers) {\\t// depth 0\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\t// depth 1\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== home && subservers.length > 1) {\\n\\t\\t\\t\\tns.tprint(\\\"-----> \\\" + subservers[subentry]);\\n\\t\\t\\t\\tlet subserversd2 = ns.scan(subservers[subentry]); // depth 2\\n\\t\\t\\t\\tfor (let subentryd2 in subserversd2) {\\n\\t\\t\\t\\t\\tif (subserversd2[subentryd2] !== subservers[subentry] && subserversd2[subentryd2] !== servers[entry] && subserversd2.length > 1) {\\n\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------> \\\" + subserversd2[subentryd2]);\\n\\t\\t\\t\\t\\t\\tlet subserversd3 = ns.scan(subserversd2[subentryd2]);\\t// depth 3\\n\\t\\t\\t\\t\\t\\tfor (let subentryd3 in subserversd3) {\\n\\t\\t\\t\\t\\t\\t\\tif (subserversd3[subentryd3] !== subserversd2[subentryd2] && subserversd3[subentryd3] !== subservers[subentry] && subserversd3.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------> \\\" + subserversd3[subentryd3]);\\n\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd4 = ns.scan(subserversd3[subentryd3]);\\t// depth 4\\n\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd4 in subserversd4) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd4[subentryd4] !== subserversd3[subentryd3] && subserversd4[subentryd4] !== subserversd2[subentryd2] && subserversd4.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------------> \\\" + subserversd4[subentryd4]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd5 = ns.scan(subserversd4[subentryd4]);\\t// depth 5\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd5 in subserversd5) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd5[subentryd5] !== subserversd4[subentryd4] && subserversd5[subentryd5] !== subserversd3[subentryd3] && subserversd5.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-------------------------> \\\" + subserversd5[subentryd5]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd6 = ns.scan(subserversd5[subentryd5]);\\t// depth 6\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd6 in subserversd6) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd6[subentryd6] !== subserversd5[subentryd5] && subserversd6[subentryd6] !== subserversd4[subentryd4] && subserversd6.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"------------------------------> \\\" + subserversd6[subentryd6]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd7 = ns.scan(subserversd6[subentryd6]);\\t// depth 7\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor(let subentryd7 in subserversd7) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd7[subentryd7] !== subserversd6[subentryd6] && subserversd7[subentryd7] !== subserversd5[subentryd5] && subserversd7.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-----------------------------------> \\\" + subserversd7[subentryd7]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"gigascan.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.05,\"server\":\"nectar-net\",\"moduleSequenceNumber\":1226,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet targetRam = ns.getServerMaxRam(ns.args[0]);\\n\\tlet scriptMem = ns.getScriptRam(ns.args[1]);\\n\\n\\tns.tprint(\\\"Maximum possible threads for \\\" + ns.args[1] + \\\": \\\" + Math.floor(targetRam / scriptMem));\\n\\tns.exit;\\n}\",\"filename\":\"ram-usage.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"nectar-net\",\"moduleSequenceNumber\":1227,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerList } from \\\"modules/helper.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet serversSeen = [\\\"home\\\"]; // home + bought servers\\n\\tlet contractList = [];\\n\\n\\tserversSeen = await getServerList(serversSeen, 0, ns);\\n\\n\\tns.tprint(serversSeen);\\n}\",\"filename\":\"search-coding-contracts.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"nectar-net\",\"moduleSequenceNumber\":1228}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tvar servers = ns.scan(home);\\n\\tvar scripts = ns.ls(home, \\\".ns\\\");\\n\\n\\tfor (let entry in scripts) {\\n\\t\\tns.tprint(\\\"found script: \\\" + scripts[entry]);\\n\\t}\\n\\n\\t// Hack servers (!!! depth = 2 !!!) if needed and populate with scripts\\n\\tfor (let entry in servers) {\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== \\\"home\\\") {\\n\\t\\t\\t\\tns.tprint(\\\"----->   \\\" + subservers[subentry]);\\n\\t\\t\\t\\tif (!ns.hasRootAccess(subservers[subentry])) {\\n\\t\\t\\t\\t\\ttakeover(subservers[subentry]);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tns.tprint(\\\"copying scripts to \\\" + subservers[subentry]);\\n\\t\\t\\t\\tawait ns.scp(scripts, home, subservers[subentry]);\\n\\t\\t\\t\\t//await ns.scp(\\\"setup.ns\\\", home, subservers[subentry]);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (!ns.hasRootAccess(servers[entry])) {\\n\\t\\t\\ttakeover(servers[entry]);\\n\\t\\t}\\n\\t\\tns.tprint(\\\"copying scripts to \\\" + servers[entry]);\\n\\t\\tawait ns.scp(scripts, home, servers[entry]);\\n\\t\\t//await ns.scp(\\\"setup.ns\\\", home, servers[entry]);\\n\\t}\\n\\n\\t/** \\n\\t * \\tAttempts to take over target machine\\t\\n\\t * \\n\\t *  @param {string} tar\\n\\t *  @return {boolean} outcome \\n\\t**/\\n\\tasync function takeover(tar) {\\n\\t\\tlet currentTarget = tar;\\n\\t\\tlet isNotTakenOver = true;\\n\\t\\tlet attemptCounter = 0;\\n\\n\\t\\tif (ns.getServerNumPortsRequired <= 5 && attemptCounter < 50) {\\n\\t\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\n\\t\\t\\t\\tattemptCounter++;\\n\\t\\t\\t}\\n\\n\\t\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"setup.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.15,\"server\":\"nectar-net\",\"moduleSequenceNumber\":1229,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Returns an array of all hostnames in the network tree\\n * \\n * @param {string[]} serversSeen\\n * @param {number} safetyCounter Prevents infnite recursion\\n * @param {NS} ns\\n */\\nexport async function getServerList(serversSeen, safetyCounter, ns) {\\n\\tlet srvrsSeen = serversSeen;\\n\\tlet currServScanResult = [];\\n\\n\\tfor (let serverSeen in srvrsSeen) {\\n\\t\\tcurrServScanResult = ns.scan(srvrsSeen[serverSeen]);\\n\\t\\tfor (let entry in currServScanResult) {\\n\\t\\t\\tif (!srvrsSeen.includes(currServScanResult[entry])) {\\n\\t\\t\\t\\tsrvrsSeen.push(currServScanResult[entry]);\\n\\t\\t\\t\\tif ((++safetyCounter) < 250) {\\n\\t\\t\\t\\t\\tawait getServerList(srvrsSeen, safetyCounter, ns);\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tns.exit();\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\t//Filter out invalid values (NaN, null, {}, undefined)\\n\\tsrvrsSeen = srvrsSeen.filter(x => x);\\n\\treturn srvrsSeen;\\n}\\n\\n\\n/** \\n * \\tAttempts to take over target machine\\t\\n * \\n *  @param {string} target\\n * \\t@param {NS} ns\\n *  @return {boolean} outcome \\n**/\\nexport async function takeover(target, ns) {\\n\\tconst home = \\\"home\\\";\\n\\tlet currentTarget = target;\\n\\tlet isNotTakenOver = true;\\n\\tlet attemptCounter = 0;\\n\\n\\tlet scripts = ns.ls(home, \\\".ns\\\");\\n\\tscripts.push(ns.ls(home, \\\".js\\\"));\\n\\n\\tif (!ns.hasRootAccess(currentTarget) && attemptCounter < 30) {\\n\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\ttry {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t} catch (error) {\\n\\t\\t\\t\\t\\tns.tprint(\\\"not enough ports to nuke \\\" + currentTarget);\\n\\t\\t\\t\\t\\treturn false;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t}\\n\\t\\t\\tattemptCounter++;\\n\\t\\t}\\n\\n\\t\\tawait ns.scp(scripts, home, currentTarget);\\n\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\",\"filename\":\"/modules/helper.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"nectar-net\",\"moduleSequenceNumber\":1230,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}}],\"serversOnNetwork\":[\"hong-fang-tea\",\"phantasy\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":20,\"minDifficulty\":7,\"moneyAvailable\":2750000,\"moneyMax\":68750000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":20,\"serverGrowth\":25}},\"neo-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"neo-net\",\"httpPortOpen\":false,\"ip\":\"90.1.7.0\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"Neo Nightclub Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Returns an array of all hostnames in the network tree\\n * \\n * @param {string[]} serversSeen\\n * @param {number} safetyCounter Prevents infnite recursion\\n * @param {NS} ns\\n */\\nexport async function getServerList(serversSeen, safetyCounter, ns) {\\n\\tlet srvrsSeen = serversSeen;\\n\\tlet currServScanResult = [];\\n\\n\\tfor (let serverSeen in srvrsSeen) {\\n\\t\\tcurrServScanResult = ns.scan(srvrsSeen[serverSeen]);\\n\\t\\tfor (let entry in currServScanResult) {\\n\\t\\t\\tif (!srvrsSeen.includes(currServScanResult[entry])) {\\n\\t\\t\\t\\tsrvrsSeen.push(currServScanResult[entry]);\\n\\t\\t\\t\\tif ((++safetyCounter) < 250) {\\n\\t\\t\\t\\t\\tawait getServerList(srvrsSeen, safetyCounter, ns);\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tns.exit();\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\t//Filter out invalid values (NaN, null, {}, undefined)\\n\\tsrvrsSeen = srvrsSeen.filter(x => x);\\n\\treturn srvrsSeen;\\n}\\n\\n\\n/** \\n * \\tAttempts to take over target machine\\t\\n * \\n *  @param {string} target\\n * \\t@param {NS} ns\\n *  @return {boolean} outcome \\n**/\\nexport async function takeover(target, ns) {\\n\\tconst home = \\\"home\\\";\\n\\tlet currentTarget = target;\\n\\tlet isNotTakenOver = true;\\n\\tlet attemptCounter = 0;\\n\\n\\tlet scripts = ns.ls(home, \\\".ns\\\");\\n\\tscripts.push(ns.ls(home, \\\".js\\\"));\\n\\n\\tif (!ns.hasRootAccess(currentTarget) && attemptCounter < 30) {\\n\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\ttry {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t} catch (error) {\\n\\t\\t\\t\\t\\tns.tprint(\\\"not enough ports to nuke \\\" + currentTarget);\\n\\t\\t\\t\\t\\treturn false;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t}\\n\\t\\t\\tattemptCounter++;\\n\\t\\t}\\n\\n\\t\\tawait ns.scp(scripts, home, currentTarget);\\n\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\",\"filename\":\"/modules/helper.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"neo-net\",\"moduleSequenceNumber\":1231,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.grow(target);\\n\\t}\\n}\",\"filename\":\"basic-grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"neo-net\",\"moduleSequenceNumber\":1232,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"basic-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"neo-net\",\"moduleSequenceNumber\":1233,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(target);\\n\\t}\\n}\",\"filename\":\"basic-weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"neo-net\",\"moduleSequenceNumber\":1234,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerList, takeover } from \\\"modules/helper.js\\\";\\n\\n/** @param {NS} ns **/\\n// TODO: unused + unfinished, based on setup.ns\\nexport async function main(ns) {\\n\\tconst myServers = [\\\"home\\\"];\\n\\n\\tvar servers = await getServerList(myServers, 0, ns);\\n\\n\\tfor (let entry in servers) {\\t\\n\\t\\tawait takeover(servers[entry], ns);\\n\\t}\\n}\",\"filename\":\"deep-setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"neo-net\",\"moduleSequenceNumber\":1235,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\t//\\n}\",\"filename\":\"formulas-testing.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"neo-net\",\"moduleSequenceNumber\":1236,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tconst currentMachine = ns.getHostname();\\n\\tvar servers = ns.scan(currentMachine);\\n\\tvar scripts = ns.ls(home, \\\"basic-\\\");\\n\\n\\tns.tprint(\\\"Host:  \\\" + currentMachine);\\n\\tfor (let entry in servers) {\\t// depth 0\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\t// depth 1\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== home && subservers.length > 1) {\\n\\t\\t\\t\\tns.tprint(\\\"-----> \\\" + subservers[subentry]);\\n\\t\\t\\t\\tlet subserversd2 = ns.scan(subservers[subentry]); // depth 2\\n\\t\\t\\t\\tfor (let subentryd2 in subserversd2) {\\n\\t\\t\\t\\t\\tif (subserversd2[subentryd2] !== subservers[subentry] && subserversd2[subentryd2] !== servers[entry] && subserversd2.length > 1) {\\n\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------> \\\" + subserversd2[subentryd2]);\\n\\t\\t\\t\\t\\t\\tlet subserversd3 = ns.scan(subserversd2[subentryd2]);\\t// depth 3\\n\\t\\t\\t\\t\\t\\tfor (let subentryd3 in subserversd3) {\\n\\t\\t\\t\\t\\t\\t\\tif (subserversd3[subentryd3] !== subserversd2[subentryd2] && subserversd3[subentryd3] !== subservers[subentry] && subserversd3.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------> \\\" + subserversd3[subentryd3]);\\n\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd4 = ns.scan(subserversd3[subentryd3]);\\t// depth 4\\n\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd4 in subserversd4) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd4[subentryd4] !== subserversd3[subentryd3] && subserversd4[subentryd4] !== subserversd2[subentryd2] && subserversd4.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------------> \\\" + subserversd4[subentryd4]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd5 = ns.scan(subserversd4[subentryd4]);\\t// depth 5\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd5 in subserversd5) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd5[subentryd5] !== subserversd4[subentryd4] && subserversd5[subentryd5] !== subserversd3[subentryd3] && subserversd5.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-------------------------> \\\" + subserversd5[subentryd5]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd6 = ns.scan(subserversd5[subentryd5]);\\t// depth 6\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd6 in subserversd6) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd6[subentryd6] !== subserversd5[subentryd5] && subserversd6[subentryd6] !== subserversd4[subentryd4] && subserversd6.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"------------------------------> \\\" + subserversd6[subentryd6]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd7 = ns.scan(subserversd6[subentryd6]);\\t// depth 7\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor(let subentryd7 in subserversd7) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd7[subentryd7] !== subserversd6[subentryd6] && subserversd7[subentryd7] !== subserversd5[subentryd5] && subserversd7.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-----------------------------------> \\\" + subserversd7[subentryd7]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"gigascan.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.05,\"server\":\"neo-net\",\"moduleSequenceNumber\":1237,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet targetRam = ns.getServerMaxRam(ns.args[0]);\\n\\tlet scriptMem = ns.getScriptRam(ns.args[1]);\\n\\n\\tns.tprint(\\\"Maximum possible threads for \\\" + ns.args[1] + \\\": \\\" + Math.floor(targetRam / scriptMem));\\n\\tns.exit;\\n}\",\"filename\":\"ram-usage.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"neo-net\",\"moduleSequenceNumber\":1238,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerList } from \\\"modules/helper.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet serversSeen = [\\\"home\\\"]; // home + bought servers\\n\\tlet contractList = [];\\n\\n\\tserversSeen = await getServerList(serversSeen, 0, ns);\\n\\n\\tns.tprint(serversSeen);\\n}\",\"filename\":\"search-coding-contracts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"neo-net\",\"moduleSequenceNumber\":1239,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tvar servers = ns.scan(home);\\n\\tvar scripts = ns.ls(home, \\\".ns\\\");\\n\\n\\tfor (let entry in scripts) {\\n\\t\\tns.tprint(\\\"found script: \\\" + scripts[entry]);\\n\\t}\\n\\n\\t// Hack servers (!!! depth = 2 !!!) if needed and populate with scripts\\n\\tfor (let entry in servers) {\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== \\\"home\\\") {\\n\\t\\t\\t\\tns.tprint(\\\"----->   \\\" + subservers[subentry]);\\n\\t\\t\\t\\tif (!ns.hasRootAccess(subservers[subentry])) {\\n\\t\\t\\t\\t\\ttakeover(subservers[subentry]);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tns.tprint(\\\"copying scripts to \\\" + subservers[subentry]);\\n\\t\\t\\t\\tawait ns.scp(scripts, home, subservers[subentry]);\\n\\t\\t\\t\\t//await ns.scp(\\\"setup.ns\\\", home, subservers[subentry]);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (!ns.hasRootAccess(servers[entry])) {\\n\\t\\t\\ttakeover(servers[entry]);\\n\\t\\t}\\n\\t\\tns.tprint(\\\"copying scripts to \\\" + servers[entry]);\\n\\t\\tawait ns.scp(scripts, home, servers[entry]);\\n\\t\\t//await ns.scp(\\\"setup.ns\\\", home, servers[entry]);\\n\\t}\\n\\n\\t/** \\n\\t * \\tAttempts to take over target machine\\t\\n\\t * \\n\\t *  @param {string} tar\\n\\t *  @return {boolean} outcome \\n\\t**/\\n\\tasync function takeover(tar) {\\n\\t\\tlet currentTarget = tar;\\n\\t\\tlet isNotTakenOver = true;\\n\\t\\tlet attemptCounter = 0;\\n\\n\\t\\tif (ns.getServerNumPortsRequired <= 5 && attemptCounter < 50) {\\n\\t\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\n\\t\\t\\t\\tattemptCounter++;\\n\\t\\t\\t}\\n\\n\\t\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.15,\"server\":\"neo-net\",\"moduleSequenceNumber\":1240,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}}],\"serversOnNetwork\":[\"CSEC\",\"comptek\",\"johnson-ortho\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":25,\"minDifficulty\":8,\"moneyAvailable\":5000000,\"moneyMax\":125000000,\"numOpenPortsRequired\":1,\"openPortCount\":2,\"requiredHackingSkill\":50,\"serverGrowth\":25}},\"silver-helix\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-958241-CentralIntelligenceAgency.cct\",\"type\":\"Algorithmic Stock Trader IV\",\"data\":[7,[56,195,86,68,118,78,29,129,185,23,65,14,188,170,111,192,186,180,127,161,188,178,164,54,79,185]],\"reward\":{\"name\":\"Central Intelligence Agency\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"silver-helix\",\"httpPortOpen\":false,\"ip\":\"9.7.1.9\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"new-triads.lit\"],\"organizationName\":\"Silver Helix\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Returns an array of all hostnames in the network tree\\n * \\n * @param {string[]} serversSeen\\n * @param {number} safetyCounter Prevents infnite recursion\\n * @param {NS} ns\\n */\\nexport async function getServerList(serversSeen, safetyCounter, ns) {\\n\\tlet srvrsSeen = serversSeen;\\n\\tlet currServScanResult = [];\\n\\n\\tfor (let serverSeen in srvrsSeen) {\\n\\t\\tcurrServScanResult = ns.scan(srvrsSeen[serverSeen]);\\n\\t\\tfor (let entry in currServScanResult) {\\n\\t\\t\\tif (!srvrsSeen.includes(currServScanResult[entry])) {\\n\\t\\t\\t\\tsrvrsSeen.push(currServScanResult[entry]);\\n\\t\\t\\t\\tif ((++safetyCounter) < 250) {\\n\\t\\t\\t\\t\\tawait getServerList(srvrsSeen, safetyCounter, ns);\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tns.exit();\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\t//Filter out invalid values (NaN, null, {}, undefined)\\n\\tsrvrsSeen = srvrsSeen.filter(x => x);\\n\\treturn srvrsSeen;\\n}\\n\\n\\n/** \\n * \\tAttempts to take over target machine\\t\\n * \\n *  @param {string} target\\n * \\t@param {NS} ns\\n *  @return {boolean} outcome \\n**/\\nexport async function takeover(target, ns) {\\n\\tconst home = \\\"home\\\";\\n\\tlet currentTarget = target;\\n\\tlet isNotTakenOver = true;\\n\\tlet attemptCounter = 0;\\n\\n\\tlet scripts = ns.ls(home, \\\".ns\\\");\\n\\tscripts.push(ns.ls(home, \\\".js\\\"));\\n\\n\\tif (!ns.hasRootAccess(currentTarget) && attemptCounter < 30) {\\n\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\ttry {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t} catch (error) {\\n\\t\\t\\t\\t\\tns.tprint(\\\"not enough ports to nuke \\\" + currentTarget);\\n\\t\\t\\t\\t\\treturn false;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t}\\n\\t\\t\\tattemptCounter++;\\n\\t\\t}\\n\\n\\t\\tawait ns.scp(scripts, home, currentTarget);\\n\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\",\"filename\":\"/modules/helper.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"silver-helix\",\"moduleSequenceNumber\":1241,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.grow(target);\\n\\t}\\n}\",\"filename\":\"basic-grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"silver-helix\",\"moduleSequenceNumber\":1242,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"basic-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"silver-helix\",\"moduleSequenceNumber\":1243,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(target);\\n\\t}\\n}\",\"filename\":\"basic-weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"silver-helix\",\"moduleSequenceNumber\":1244,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerList, takeover } from \\\"modules/helper.js\\\";\\n\\n/** @param {NS} ns **/\\n// TODO: unused + unfinished, based on setup.ns\\nexport async function main(ns) {\\n\\tconst myServers = [\\\"home\\\"];\\n\\n\\tvar servers = await getServerList(myServers, 0, ns);\\n\\n\\tfor (let entry in servers) {\\t\\n\\t\\tawait takeover(servers[entry], ns);\\n\\t}\\n}\",\"filename\":\"deep-setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"silver-helix\",\"moduleSequenceNumber\":1245,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\t//\\n}\",\"filename\":\"formulas-testing.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"silver-helix\",\"moduleSequenceNumber\":1246,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tconst currentMachine = ns.getHostname();\\n\\tvar servers = ns.scan(currentMachine);\\n\\tvar scripts = ns.ls(home, \\\"basic-\\\");\\n\\n\\tns.tprint(\\\"Host:  \\\" + currentMachine);\\n\\tfor (let entry in servers) {\\t// depth 0\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\t// depth 1\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== home && subservers.length > 1) {\\n\\t\\t\\t\\tns.tprint(\\\"-----> \\\" + subservers[subentry]);\\n\\t\\t\\t\\tlet subserversd2 = ns.scan(subservers[subentry]); // depth 2\\n\\t\\t\\t\\tfor (let subentryd2 in subserversd2) {\\n\\t\\t\\t\\t\\tif (subserversd2[subentryd2] !== subservers[subentry] && subserversd2[subentryd2] !== servers[entry] && subserversd2.length > 1) {\\n\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------> \\\" + subserversd2[subentryd2]);\\n\\t\\t\\t\\t\\t\\tlet subserversd3 = ns.scan(subserversd2[subentryd2]);\\t// depth 3\\n\\t\\t\\t\\t\\t\\tfor (let subentryd3 in subserversd3) {\\n\\t\\t\\t\\t\\t\\t\\tif (subserversd3[subentryd3] !== subserversd2[subentryd2] && subserversd3[subentryd3] !== subservers[subentry] && subserversd3.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------> \\\" + subserversd3[subentryd3]);\\n\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd4 = ns.scan(subserversd3[subentryd3]);\\t// depth 4\\n\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd4 in subserversd4) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd4[subentryd4] !== subserversd3[subentryd3] && subserversd4[subentryd4] !== subserversd2[subentryd2] && subserversd4.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------------> \\\" + subserversd4[subentryd4]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd5 = ns.scan(subserversd4[subentryd4]);\\t// depth 5\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd5 in subserversd5) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd5[subentryd5] !== subserversd4[subentryd4] && subserversd5[subentryd5] !== subserversd3[subentryd3] && subserversd5.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-------------------------> \\\" + subserversd5[subentryd5]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd6 = ns.scan(subserversd5[subentryd5]);\\t// depth 6\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd6 in subserversd6) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd6[subentryd6] !== subserversd5[subentryd5] && subserversd6[subentryd6] !== subserversd4[subentryd4] && subserversd6.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"------------------------------> \\\" + subserversd6[subentryd6]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd7 = ns.scan(subserversd6[subentryd6]);\\t// depth 7\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor(let subentryd7 in subserversd7) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd7[subentryd7] !== subserversd6[subentryd6] && subserversd7[subentryd7] !== subserversd5[subentryd5] && subserversd7.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-----------------------------------> \\\" + subserversd7[subentryd7]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"gigascan.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.05,\"server\":\"silver-helix\",\"moduleSequenceNumber\":1247,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet targetRam = ns.getServerMaxRam(ns.args[0]);\\n\\tlet scriptMem = ns.getScriptRam(ns.args[1]);\\n\\n\\tns.tprint(\\\"Maximum possible threads for \\\" + ns.args[1] + \\\": \\\" + Math.floor(targetRam / scriptMem));\\n\\tns.exit;\\n}\",\"filename\":\"ram-usage.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"silver-helix\",\"moduleSequenceNumber\":1248,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerList } from \\\"modules/helper.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet serversSeen = [\\\"home\\\"]; // home + bought servers\\n\\tlet contractList = [];\\n\\n\\tserversSeen = await getServerList(serversSeen, 0, ns);\\n\\n\\tns.tprint(serversSeen);\\n}\",\"filename\":\"search-coding-contracts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"silver-helix\",\"moduleSequenceNumber\":1249,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tvar servers = ns.scan(home);\\n\\tvar scripts = ns.ls(home, \\\".ns\\\");\\n\\n\\tfor (let entry in scripts) {\\n\\t\\tns.tprint(\\\"found script: \\\" + scripts[entry]);\\n\\t}\\n\\n\\t// Hack servers (!!! depth = 2 !!!) if needed and populate with scripts\\n\\tfor (let entry in servers) {\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== \\\"home\\\") {\\n\\t\\t\\t\\tns.tprint(\\\"----->   \\\" + subservers[subentry]);\\n\\t\\t\\t\\tif (!ns.hasRootAccess(subservers[subentry])) {\\n\\t\\t\\t\\t\\ttakeover(subservers[subentry]);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tns.tprint(\\\"copying scripts to \\\" + subservers[subentry]);\\n\\t\\t\\t\\tawait ns.scp(scripts, home, subservers[subentry]);\\n\\t\\t\\t\\t//await ns.scp(\\\"setup.ns\\\", home, subservers[subentry]);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (!ns.hasRootAccess(servers[entry])) {\\n\\t\\t\\ttakeover(servers[entry]);\\n\\t\\t}\\n\\t\\tns.tprint(\\\"copying scripts to \\\" + servers[entry]);\\n\\t\\tawait ns.scp(scripts, home, servers[entry]);\\n\\t\\t//await ns.scp(\\\"setup.ns\\\", home, servers[entry]);\\n\\t}\\n\\n\\t/** \\n\\t * \\tAttempts to take over target machine\\t\\n\\t * \\n\\t *  @param {string} tar\\n\\t *  @return {boolean} outcome \\n\\t**/\\n\\tasync function takeover(tar) {\\n\\t\\tlet currentTarget = tar;\\n\\t\\tlet isNotTakenOver = true;\\n\\t\\tlet attemptCounter = 0;\\n\\n\\t\\tif (ns.getServerNumPortsRequired <= 5 && attemptCounter < 50) {\\n\\t\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\n\\t\\t\\t\\tattemptCounter++;\\n\\t\\t\\t}\\n\\n\\t\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.15,\"server\":\"silver-helix\",\"moduleSequenceNumber\":1250,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}}],\"serversOnNetwork\":[\"CSEC\",\"crush-fitness\",\"avmnite-02h\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":13.42,\"minDifficulty\":10,\"moneyAvailable\":2289.0510490440543,\"moneyMax\":1125000000,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":150,\"serverGrowth\":30}},\"hong-fang-tea\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hong-fang-tea\",\"httpPortOpen\":false,\"ip\":\"36.0.2.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"brighter-than-the-sun.lit\"],\"organizationName\":\"HongFang Teahouse\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.grow(target);\\n\\t}\\n}\",\"filename\":\"basic-grow.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":1251,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"basic-hack.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":1252,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(target);\\n\\t}\\n}\",\"filename\":\"basic-weaken.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":1253,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerList, takeover } from \\\"modules/helper.js\\\";\\n\\n/** @param {NS} ns **/\\n// TODO: unused + unfinished, based on setup.ns\\nexport async function main(ns) {\\n\\tconst myServers = [\\\"home\\\"];\\n\\n\\tvar servers = await getServerList(myServers, 0, ns);\\n\\n\\tfor (let entry in servers) {\\t\\n\\t\\tawait takeover(servers[entry], ns);\\n\\t}\\n}\",\"filename\":\"deep-setup.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":1254}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\t//\\n}\",\"filename\":\"formulas-testing.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":1255,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tconst currentMachine = ns.getHostname();\\n\\tvar servers = ns.scan(currentMachine);\\n\\tvar scripts = ns.ls(home, \\\"basic-\\\");\\n\\n\\tns.tprint(\\\"Host:  \\\" + currentMachine);\\n\\tfor (let entry in servers) {\\t// depth 0\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\t// depth 1\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== home && subservers.length > 1) {\\n\\t\\t\\t\\tns.tprint(\\\"-----> \\\" + subservers[subentry]);\\n\\t\\t\\t\\tlet subserversd2 = ns.scan(subservers[subentry]); // depth 2\\n\\t\\t\\t\\tfor (let subentryd2 in subserversd2) {\\n\\t\\t\\t\\t\\tif (subserversd2[subentryd2] !== subservers[subentry] && subserversd2[subentryd2] !== servers[entry] && subserversd2.length > 1) {\\n\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------> \\\" + subserversd2[subentryd2]);\\n\\t\\t\\t\\t\\t\\tlet subserversd3 = ns.scan(subserversd2[subentryd2]);\\t// depth 3\\n\\t\\t\\t\\t\\t\\tfor (let subentryd3 in subserversd3) {\\n\\t\\t\\t\\t\\t\\t\\tif (subserversd3[subentryd3] !== subserversd2[subentryd2] && subserversd3[subentryd3] !== subservers[subentry] && subserversd3.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------> \\\" + subserversd3[subentryd3]);\\n\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd4 = ns.scan(subserversd3[subentryd3]);\\t// depth 4\\n\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd4 in subserversd4) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd4[subentryd4] !== subserversd3[subentryd3] && subserversd4[subentryd4] !== subserversd2[subentryd2] && subserversd4.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------------> \\\" + subserversd4[subentryd4]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd5 = ns.scan(subserversd4[subentryd4]);\\t// depth 5\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd5 in subserversd5) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd5[subentryd5] !== subserversd4[subentryd4] && subserversd5[subentryd5] !== subserversd3[subentryd3] && subserversd5.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-------------------------> \\\" + subserversd5[subentryd5]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd6 = ns.scan(subserversd5[subentryd5]);\\t// depth 6\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd6 in subserversd6) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd6[subentryd6] !== subserversd5[subentryd5] && subserversd6[subentryd6] !== subserversd4[subentryd4] && subserversd6.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"------------------------------> \\\" + subserversd6[subentryd6]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd7 = ns.scan(subserversd6[subentryd6]);\\t// depth 7\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor(let subentryd7 in subserversd7) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd7[subentryd7] !== subserversd6[subentryd6] && subserversd7[subentryd7] !== subserversd5[subentryd5] && subserversd7.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-----------------------------------> \\\" + subserversd7[subentryd7]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"gigascan.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.05,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":1256,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet targetRam = ns.getServerMaxRam(ns.args[0]);\\n\\tlet scriptMem = ns.getScriptRam(ns.args[1]);\\n\\n\\tns.tprint(\\\"Maximum possible threads for \\\" + ns.args[1] + \\\": \\\" + Math.floor(targetRam / scriptMem));\\n\\tns.exit;\\n}\",\"filename\":\"ram-usage.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":1257,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerList } from \\\"modules/helper.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet serversSeen = [\\\"home\\\"]; // home + bought servers\\n\\tlet contractList = [];\\n\\n\\tserversSeen = await getServerList(serversSeen, 0, ns);\\n\\n\\tns.tprint(serversSeen);\\n}\",\"filename\":\"search-coding-contracts.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":1258}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tvar servers = ns.scan(home);\\n\\tvar scripts = ns.ls(home, \\\".ns\\\");\\n\\n\\tfor (let entry in scripts) {\\n\\t\\tns.tprint(\\\"found script: \\\" + scripts[entry]);\\n\\t}\\n\\n\\t// Hack servers (!!! depth = 2 !!!) if needed and populate with scripts\\n\\tfor (let entry in servers) {\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== \\\"home\\\") {\\n\\t\\t\\t\\tns.tprint(\\\"----->   \\\" + subservers[subentry]);\\n\\t\\t\\t\\tif (!ns.hasRootAccess(subservers[subentry])) {\\n\\t\\t\\t\\t\\ttakeover(subservers[subentry]);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tns.tprint(\\\"copying scripts to \\\" + subservers[subentry]);\\n\\t\\t\\t\\tawait ns.scp(scripts, home, subservers[subentry]);\\n\\t\\t\\t\\t//await ns.scp(\\\"setup.ns\\\", home, subservers[subentry]);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (!ns.hasRootAccess(servers[entry])) {\\n\\t\\t\\ttakeover(servers[entry]);\\n\\t\\t}\\n\\t\\tns.tprint(\\\"copying scripts to \\\" + servers[entry]);\\n\\t\\tawait ns.scp(scripts, home, servers[entry]);\\n\\t\\t//await ns.scp(\\\"setup.ns\\\", home, servers[entry]);\\n\\t}\\n\\n\\t/** \\n\\t * \\tAttempts to take over target machine\\t\\n\\t * \\n\\t *  @param {string} tar\\n\\t *  @return {boolean} outcome \\n\\t**/\\n\\tasync function takeover(tar) {\\n\\t\\tlet currentTarget = tar;\\n\\t\\tlet isNotTakenOver = true;\\n\\t\\tlet attemptCounter = 0;\\n\\n\\t\\tif (ns.getServerNumPortsRequired <= 5 && attemptCounter < 50) {\\n\\t\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\n\\t\\t\\t\\tattemptCounter++;\\n\\t\\t\\t}\\n\\n\\t\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"setup.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.15,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":1259,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Returns an array of all hostnames in the network tree\\n * \\n * @param {string[]} serversSeen\\n * @param {number} safetyCounter Prevents infnite recursion\\n * @param {NS} ns\\n */\\nexport async function getServerList(serversSeen, safetyCounter, ns) {\\n\\tlet srvrsSeen = serversSeen;\\n\\tlet currServScanResult = [];\\n\\n\\tfor (let serverSeen in srvrsSeen) {\\n\\t\\tcurrServScanResult = ns.scan(srvrsSeen[serverSeen]);\\n\\t\\tfor (let entry in currServScanResult) {\\n\\t\\t\\tif (!srvrsSeen.includes(currServScanResult[entry])) {\\n\\t\\t\\t\\tsrvrsSeen.push(currServScanResult[entry]);\\n\\t\\t\\t\\tif ((++safetyCounter) < 250) {\\n\\t\\t\\t\\t\\tawait getServerList(srvrsSeen, safetyCounter, ns);\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tns.exit();\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\t//Filter out invalid values (NaN, null, {}, undefined)\\n\\tsrvrsSeen = srvrsSeen.filter(x => x);\\n\\treturn srvrsSeen;\\n}\\n\\n\\n/** \\n * \\tAttempts to take over target machine\\t\\n * \\n *  @param {string} target\\n * \\t@param {NS} ns\\n *  @return {boolean} outcome \\n**/\\nexport async function takeover(target, ns) {\\n\\tconst home = \\\"home\\\";\\n\\tlet currentTarget = target;\\n\\tlet isNotTakenOver = true;\\n\\tlet attemptCounter = 0;\\n\\n\\tlet scripts = ns.ls(home, \\\".ns\\\");\\n\\tscripts.push(ns.ls(home, \\\".js\\\"));\\n\\n\\tif (!ns.hasRootAccess(currentTarget) && attemptCounter < 30) {\\n\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\ttry {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t} catch (error) {\\n\\t\\t\\t\\t\\tns.tprint(\\\"not enough ports to nuke \\\" + currentTarget);\\n\\t\\t\\t\\t\\treturn false;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t}\\n\\t\\t\\tattemptCounter++;\\n\\t\\t}\\n\\n\\t\\tawait ns.scp(scripts, home, currentTarget);\\n\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\",\"filename\":\"/modules/helper.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":1260,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}}],\"serversOnNetwork\":[\"home\",\"zer0\",\"nectar-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":15,\"minDifficulty\":5,\"moneyAvailable\":3000000,\"moneyMax\":75000000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":30,\"serverGrowth\":20}},\"harakiri-sushi\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-390647.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[3,6],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"harakiri-sushi\",\"httpPortOpen\":false,\"ip\":\"46.3.4.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"HaraKiri Sushi Bar Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.grow(target);\\n\\t}\\n}\",\"filename\":\"basic-grow.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":1261,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"basic-hack.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":1262,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(target);\\n\\t}\\n}\",\"filename\":\"basic-weaken.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":1263,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerList, takeover } from \\\"modules/helper.js\\\";\\n\\n/** @param {NS} ns **/\\n// TODO: unused + unfinished, based on setup.ns\\nexport async function main(ns) {\\n\\tconst myServers = [\\\"home\\\"];\\n\\n\\tvar servers = await getServerList(myServers, 0, ns);\\n\\n\\tfor (let entry in servers) {\\t\\n\\t\\tawait takeover(servers[entry], ns);\\n\\t}\\n}\",\"filename\":\"deep-setup.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":1264}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\t//\\n}\",\"filename\":\"formulas-testing.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":1265,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tconst currentMachine = ns.getHostname();\\n\\tvar servers = ns.scan(currentMachine);\\n\\tvar scripts = ns.ls(home, \\\"basic-\\\");\\n\\n\\tns.tprint(\\\"Host:  \\\" + currentMachine);\\n\\tfor (let entry in servers) {\\t// depth 0\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\t// depth 1\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== home && subservers.length > 1) {\\n\\t\\t\\t\\tns.tprint(\\\"-----> \\\" + subservers[subentry]);\\n\\t\\t\\t\\tlet subserversd2 = ns.scan(subservers[subentry]); // depth 2\\n\\t\\t\\t\\tfor (let subentryd2 in subserversd2) {\\n\\t\\t\\t\\t\\tif (subserversd2[subentryd2] !== subservers[subentry] && subserversd2[subentryd2] !== servers[entry] && subserversd2.length > 1) {\\n\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------> \\\" + subserversd2[subentryd2]);\\n\\t\\t\\t\\t\\t\\tlet subserversd3 = ns.scan(subserversd2[subentryd2]);\\t// depth 3\\n\\t\\t\\t\\t\\t\\tfor (let subentryd3 in subserversd3) {\\n\\t\\t\\t\\t\\t\\t\\tif (subserversd3[subentryd3] !== subserversd2[subentryd2] && subserversd3[subentryd3] !== subservers[subentry] && subserversd3.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------> \\\" + subserversd3[subentryd3]);\\n\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd4 = ns.scan(subserversd3[subentryd3]);\\t// depth 4\\n\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd4 in subserversd4) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd4[subentryd4] !== subserversd3[subentryd3] && subserversd4[subentryd4] !== subserversd2[subentryd2] && subserversd4.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------------> \\\" + subserversd4[subentryd4]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd5 = ns.scan(subserversd4[subentryd4]);\\t// depth 5\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd5 in subserversd5) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd5[subentryd5] !== subserversd4[subentryd4] && subserversd5[subentryd5] !== subserversd3[subentryd3] && subserversd5.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-------------------------> \\\" + subserversd5[subentryd5]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd6 = ns.scan(subserversd5[subentryd5]);\\t// depth 6\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd6 in subserversd6) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd6[subentryd6] !== subserversd5[subentryd5] && subserversd6[subentryd6] !== subserversd4[subentryd4] && subserversd6.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"------------------------------> \\\" + subserversd6[subentryd6]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd7 = ns.scan(subserversd6[subentryd6]);\\t// depth 7\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor(let subentryd7 in subserversd7) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd7[subentryd7] !== subserversd6[subentryd6] && subserversd7[subentryd7] !== subserversd5[subentryd5] && subserversd7.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-----------------------------------> \\\" + subserversd7[subentryd7]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"gigascan.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.05,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":1266,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet targetRam = ns.getServerMaxRam(ns.args[0]);\\n\\tlet scriptMem = ns.getScriptRam(ns.args[1]);\\n\\n\\tns.tprint(\\\"Maximum possible threads for \\\" + ns.args[1] + \\\": \\\" + Math.floor(targetRam / scriptMem));\\n\\tns.exit;\\n}\",\"filename\":\"ram-usage.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":1267,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerList } from \\\"modules/helper.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet serversSeen = [\\\"home\\\"]; // home + bought servers\\n\\tlet contractList = [];\\n\\n\\tserversSeen = await getServerList(serversSeen, 0, ns);\\n\\n\\tns.tprint(serversSeen);\\n}\",\"filename\":\"search-coding-contracts.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":1268}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tvar servers = ns.scan(home);\\n\\tvar scripts = ns.ls(home, \\\".ns\\\");\\n\\n\\tfor (let entry in scripts) {\\n\\t\\tns.tprint(\\\"found script: \\\" + scripts[entry]);\\n\\t}\\n\\n\\t// Hack servers (!!! depth = 2 !!!) if needed and populate with scripts\\n\\tfor (let entry in servers) {\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== \\\"home\\\") {\\n\\t\\t\\t\\tns.tprint(\\\"----->   \\\" + subservers[subentry]);\\n\\t\\t\\t\\tif (!ns.hasRootAccess(subservers[subentry])) {\\n\\t\\t\\t\\t\\ttakeover(subservers[subentry]);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tns.tprint(\\\"copying scripts to \\\" + subservers[subentry]);\\n\\t\\t\\t\\tawait ns.scp(scripts, home, subservers[subentry]);\\n\\t\\t\\t\\t//await ns.scp(\\\"setup.ns\\\", home, subservers[subentry]);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (!ns.hasRootAccess(servers[entry])) {\\n\\t\\t\\ttakeover(servers[entry]);\\n\\t\\t}\\n\\t\\tns.tprint(\\\"copying scripts to \\\" + servers[entry]);\\n\\t\\tawait ns.scp(scripts, home, servers[entry]);\\n\\t\\t//await ns.scp(\\\"setup.ns\\\", home, servers[entry]);\\n\\t}\\n\\n\\t/** \\n\\t * \\tAttempts to take over target machine\\t\\n\\t * \\n\\t *  @param {string} tar\\n\\t *  @return {boolean} outcome \\n\\t**/\\n\\tasync function takeover(tar) {\\n\\t\\tlet currentTarget = tar;\\n\\t\\tlet isNotTakenOver = true;\\n\\t\\tlet attemptCounter = 0;\\n\\n\\t\\tif (ns.getServerNumPortsRequired <= 5 && attemptCounter < 50) {\\n\\t\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\n\\t\\t\\t\\tattemptCounter++;\\n\\t\\t\\t}\\n\\n\\t\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"setup.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.15,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":1269,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Returns an array of all hostnames in the network tree\\n * \\n * @param {string[]} serversSeen\\n * @param {number} safetyCounter Prevents infnite recursion\\n * @param {NS} ns\\n */\\nexport async function getServerList(serversSeen, safetyCounter, ns) {\\n\\tlet srvrsSeen = serversSeen;\\n\\tlet currServScanResult = [];\\n\\n\\tfor (let serverSeen in srvrsSeen) {\\n\\t\\tcurrServScanResult = ns.scan(srvrsSeen[serverSeen]);\\n\\t\\tfor (let entry in currServScanResult) {\\n\\t\\t\\tif (!srvrsSeen.includes(currServScanResult[entry])) {\\n\\t\\t\\t\\tsrvrsSeen.push(currServScanResult[entry]);\\n\\t\\t\\t\\tif ((++safetyCounter) < 250) {\\n\\t\\t\\t\\t\\tawait getServerList(srvrsSeen, safetyCounter, ns);\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tns.exit();\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\t//Filter out invalid values (NaN, null, {}, undefined)\\n\\tsrvrsSeen = srvrsSeen.filter(x => x);\\n\\treturn srvrsSeen;\\n}\\n\\n\\n/** \\n * \\tAttempts to take over target machine\\t\\n * \\n *  @param {string} target\\n * \\t@param {NS} ns\\n *  @return {boolean} outcome \\n**/\\nexport async function takeover(target, ns) {\\n\\tconst home = \\\"home\\\";\\n\\tlet currentTarget = target;\\n\\tlet isNotTakenOver = true;\\n\\tlet attemptCounter = 0;\\n\\n\\tlet scripts = ns.ls(home, \\\".ns\\\");\\n\\tscripts.push(ns.ls(home, \\\".js\\\"));\\n\\n\\tif (!ns.hasRootAccess(currentTarget) && attemptCounter < 30) {\\n\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\ttry {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t} catch (error) {\\n\\t\\t\\t\\t\\tns.tprint(\\\"not enough ports to nuke \\\" + currentTarget);\\n\\t\\t\\t\\t\\treturn false;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t}\\n\\t\\t\\tattemptCounter++;\\n\\t\\t}\\n\\n\\t\\tawait ns.scp(scripts, home, currentTarget);\\n\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\",\"filename\":\"/modules/helper.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":1270,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":5,\"minDifficulty\":5,\"moneyAvailable\":0,\"moneyMax\":100000000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":40,\"serverGrowth\":40}},\"phantasy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-404436.cct\",\"type\":\"Algorithmic Stock Trader IV\",\"data\":[4,[129,145,31,62,55,133,129,28,126,34,195,182,26,174,40,157,142,36,187,9,118,136,30]],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"phantasy\",\"httpPortOpen\":false,\"ip\":\"74.6.8.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Phantasy Club\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Returns an array of all hostnames in the network tree\\n * \\n * @param {string[]} serversSeen\\n * @param {number} safetyCounter Prevents infnite recursion\\n * @param {NS} ns\\n */\\nexport async function getServerList(serversSeen, safetyCounter, ns) {\\n\\tlet srvrsSeen = serversSeen;\\n\\tlet currServScanResult = [];\\n\\n\\tfor (let serverSeen in srvrsSeen) {\\n\\t\\tcurrServScanResult = ns.scan(srvrsSeen[serverSeen]);\\n\\t\\tfor (let entry in currServScanResult) {\\n\\t\\t\\tif (!srvrsSeen.includes(currServScanResult[entry])) {\\n\\t\\t\\t\\tsrvrsSeen.push(currServScanResult[entry]);\\n\\t\\t\\t\\tif ((++safetyCounter) < 250) {\\n\\t\\t\\t\\t\\tawait getServerList(srvrsSeen, safetyCounter, ns);\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tns.exit();\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\t//Filter out invalid values (NaN, null, {}, undefined)\\n\\tsrvrsSeen = srvrsSeen.filter(x => x);\\n\\treturn srvrsSeen;\\n}\\n\\n\\n/** \\n * \\tAttempts to take over target machine\\t\\n * \\n *  @param {string} target\\n * \\t@param {NS} ns\\n *  @return {boolean} outcome \\n**/\\nexport async function takeover(target, ns) {\\n\\tconst home = \\\"home\\\";\\n\\tlet currentTarget = target;\\n\\tlet isNotTakenOver = true;\\n\\tlet attemptCounter = 0;\\n\\n\\tlet scripts = ns.ls(home, \\\".ns\\\");\\n\\tscripts.push(ns.ls(home, \\\".js\\\"));\\n\\n\\tif (!ns.hasRootAccess(currentTarget) && attemptCounter < 30) {\\n\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\ttry {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t} catch (error) {\\n\\t\\t\\t\\t\\tns.tprint(\\\"not enough ports to nuke \\\" + currentTarget);\\n\\t\\t\\t\\t\\treturn false;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t}\\n\\t\\t\\tattemptCounter++;\\n\\t\\t}\\n\\n\\t\\tawait ns.scp(scripts, home, currentTarget);\\n\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\",\"filename\":\"/modules/helper.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"phantasy\",\"moduleSequenceNumber\":1271,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.grow(target);\\n\\t}\\n}\",\"filename\":\"basic-grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"phantasy\",\"moduleSequenceNumber\":1272,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"basic-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"phantasy\",\"moduleSequenceNumber\":1273,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(target);\\n\\t}\\n}\",\"filename\":\"basic-weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"phantasy\",\"moduleSequenceNumber\":1274,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerList, takeover } from \\\"modules/helper.js\\\";\\n\\n/** @param {NS} ns **/\\n// TODO: unused + unfinished, based on setup.ns\\nexport async function main(ns) {\\n\\tconst myServers = [\\\"home\\\"];\\n\\n\\tvar servers = await getServerList(myServers, 0, ns);\\n\\n\\tfor (let entry in servers) {\\t\\n\\t\\tawait takeover(servers[entry], ns);\\n\\t}\\n}\",\"filename\":\"deep-setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"phantasy\",\"moduleSequenceNumber\":1275,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\t//\\n}\",\"filename\":\"formulas-testing.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"phantasy\",\"moduleSequenceNumber\":1276,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tconst currentMachine = ns.getHostname();\\n\\tvar servers = ns.scan(currentMachine);\\n\\tvar scripts = ns.ls(home, \\\"basic-\\\");\\n\\n\\tns.tprint(\\\"Host:  \\\" + currentMachine);\\n\\tfor (let entry in servers) {\\t// depth 0\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\t// depth 1\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== home && subservers.length > 1) {\\n\\t\\t\\t\\tns.tprint(\\\"-----> \\\" + subservers[subentry]);\\n\\t\\t\\t\\tlet subserversd2 = ns.scan(subservers[subentry]); // depth 2\\n\\t\\t\\t\\tfor (let subentryd2 in subserversd2) {\\n\\t\\t\\t\\t\\tif (subserversd2[subentryd2] !== subservers[subentry] && subserversd2[subentryd2] !== servers[entry] && subserversd2.length > 1) {\\n\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------> \\\" + subserversd2[subentryd2]);\\n\\t\\t\\t\\t\\t\\tlet subserversd3 = ns.scan(subserversd2[subentryd2]);\\t// depth 3\\n\\t\\t\\t\\t\\t\\tfor (let subentryd3 in subserversd3) {\\n\\t\\t\\t\\t\\t\\t\\tif (subserversd3[subentryd3] !== subserversd2[subentryd2] && subserversd3[subentryd3] !== subservers[subentry] && subserversd3.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------> \\\" + subserversd3[subentryd3]);\\n\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd4 = ns.scan(subserversd3[subentryd3]);\\t// depth 4\\n\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd4 in subserversd4) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd4[subentryd4] !== subserversd3[subentryd3] && subserversd4[subentryd4] !== subserversd2[subentryd2] && subserversd4.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------------> \\\" + subserversd4[subentryd4]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd5 = ns.scan(subserversd4[subentryd4]);\\t// depth 5\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd5 in subserversd5) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd5[subentryd5] !== subserversd4[subentryd4] && subserversd5[subentryd5] !== subserversd3[subentryd3] && subserversd5.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-------------------------> \\\" + subserversd5[subentryd5]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd6 = ns.scan(subserversd5[subentryd5]);\\t// depth 6\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd6 in subserversd6) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd6[subentryd6] !== subserversd5[subentryd5] && subserversd6[subentryd6] !== subserversd4[subentryd4] && subserversd6.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"------------------------------> \\\" + subserversd6[subentryd6]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd7 = ns.scan(subserversd6[subentryd6]);\\t// depth 7\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor(let subentryd7 in subserversd7) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd7[subentryd7] !== subserversd6[subentryd6] && subserversd7[subentryd7] !== subserversd5[subentryd5] && subserversd7.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-----------------------------------> \\\" + subserversd7[subentryd7]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"gigascan.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.05,\"server\":\"phantasy\",\"moduleSequenceNumber\":1277,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet targetRam = ns.getServerMaxRam(ns.args[0]);\\n\\tlet scriptMem = ns.getScriptRam(ns.args[1]);\\n\\n\\tns.tprint(\\\"Maximum possible threads for \\\" + ns.args[1] + \\\": \\\" + Math.floor(targetRam / scriptMem));\\n\\tns.exit;\\n}\",\"filename\":\"ram-usage.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"phantasy\",\"moduleSequenceNumber\":1278,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerList } from \\\"modules/helper.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet serversSeen = [\\\"home\\\"]; // home + bought servers\\n\\tlet contractList = [];\\n\\n\\tserversSeen = await getServerList(serversSeen, 0, ns);\\n\\n\\tns.tprint(serversSeen);\\n}\",\"filename\":\"search-coding-contracts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"phantasy\",\"moduleSequenceNumber\":1279,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tvar servers = ns.scan(home);\\n\\tvar scripts = ns.ls(home, \\\".ns\\\");\\n\\n\\tfor (let entry in scripts) {\\n\\t\\tns.tprint(\\\"found script: \\\" + scripts[entry]);\\n\\t}\\n\\n\\t// Hack servers (!!! depth = 2 !!!) if needed and populate with scripts\\n\\tfor (let entry in servers) {\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== \\\"home\\\") {\\n\\t\\t\\t\\tns.tprint(\\\"----->   \\\" + subservers[subentry]);\\n\\t\\t\\t\\tif (!ns.hasRootAccess(subservers[subentry])) {\\n\\t\\t\\t\\t\\ttakeover(subservers[subentry]);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tns.tprint(\\\"copying scripts to \\\" + subservers[subentry]);\\n\\t\\t\\t\\tawait ns.scp(scripts, home, subservers[subentry]);\\n\\t\\t\\t\\t//await ns.scp(\\\"setup.ns\\\", home, subservers[subentry]);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (!ns.hasRootAccess(servers[entry])) {\\n\\t\\t\\ttakeover(servers[entry]);\\n\\t\\t}\\n\\t\\tns.tprint(\\\"copying scripts to \\\" + servers[entry]);\\n\\t\\tawait ns.scp(scripts, home, servers[entry]);\\n\\t\\t//await ns.scp(\\\"setup.ns\\\", home, servers[entry]);\\n\\t}\\n\\n\\t/** \\n\\t * \\tAttempts to take over target machine\\t\\n\\t * \\n\\t *  @param {string} tar\\n\\t *  @return {boolean} outcome \\n\\t**/\\n\\tasync function takeover(tar) {\\n\\t\\tlet currentTarget = tar;\\n\\t\\tlet isNotTakenOver = true;\\n\\t\\tlet attemptCounter = 0;\\n\\n\\t\\tif (ns.getServerNumPortsRequired <= 5 && attemptCounter < 50) {\\n\\t\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\n\\t\\t\\t\\tattemptCounter++;\\n\\t\\t\\t}\\n\\n\\t\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.15,\"server\":\"phantasy\",\"moduleSequenceNumber\":1280,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}}],\"serversOnNetwork\":[\"nectar-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":20,\"minDifficulty\":7,\"moneyAvailable\":24000000,\"moneyMax\":600000000,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":100,\"serverGrowth\":35}},\"max-hardware\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"max-hardware\",\"httpPortOpen\":false,\"ip\":\"57.9.0.8\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Max Hardware Store\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Returns an array of all hostnames in the network tree\\n * \\n * @param {string[]} serversSeen\\n * @param {number} safetyCounter Prevents infnite recursion\\n * @param {NS} ns\\n */\\nexport async function getServerList(serversSeen, safetyCounter, ns) {\\n\\tlet srvrsSeen = serversSeen;\\n\\tlet currServScanResult = [];\\n\\n\\tfor (let serverSeen in srvrsSeen) {\\n\\t\\tcurrServScanResult = ns.scan(srvrsSeen[serverSeen]);\\n\\t\\tfor (let entry in currServScanResult) {\\n\\t\\t\\tif (!srvrsSeen.includes(currServScanResult[entry])) {\\n\\t\\t\\t\\tsrvrsSeen.push(currServScanResult[entry]);\\n\\t\\t\\t\\tif ((++safetyCounter) < 250) {\\n\\t\\t\\t\\t\\tawait getServerList(srvrsSeen, safetyCounter, ns);\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tns.exit();\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\t//Filter out invalid values (NaN, null, {}, undefined)\\n\\tsrvrsSeen = srvrsSeen.filter(x => x);\\n\\treturn srvrsSeen;\\n}\\n\\n\\n/** \\n * \\tAttempts to take over target machine\\t\\n * \\n *  @param {string} target\\n * \\t@param {NS} ns\\n *  @return {boolean} outcome \\n**/\\nexport async function takeover(target, ns) {\\n\\tconst home = \\\"home\\\";\\n\\tlet currentTarget = target;\\n\\tlet isNotTakenOver = true;\\n\\tlet attemptCounter = 0;\\n\\n\\tlet scripts = ns.ls(home, \\\".ns\\\");\\n\\tscripts.push(ns.ls(home, \\\".js\\\"));\\n\\n\\tif (!ns.hasRootAccess(currentTarget) && attemptCounter < 30) {\\n\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\ttry {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t} catch (error) {\\n\\t\\t\\t\\t\\tns.tprint(\\\"not enough ports to nuke \\\" + currentTarget);\\n\\t\\t\\t\\t\\treturn false;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t}\\n\\t\\t\\tattemptCounter++;\\n\\t\\t}\\n\\n\\t\\tawait ns.scp(scripts, home, currentTarget);\\n\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\",\"filename\":\"/modules/helper.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"max-hardware\",\"moduleSequenceNumber\":1281,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.grow(target);\\n\\t}\\n}\",\"filename\":\"basic-grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"max-hardware\",\"moduleSequenceNumber\":1282,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"basic-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"max-hardware\",\"moduleSequenceNumber\":1283,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(target);\\n\\t}\\n}\",\"filename\":\"basic-weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"max-hardware\",\"moduleSequenceNumber\":1284,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerList, takeover } from \\\"modules/helper.js\\\";\\n\\n/** @param {NS} ns **/\\n// TODO: unused + unfinished, based on setup.ns\\nexport async function main(ns) {\\n\\tconst myServers = [\\\"home\\\"];\\n\\n\\tvar servers = await getServerList(myServers, 0, ns);\\n\\n\\tfor (let entry in servers) {\\t\\n\\t\\tawait takeover(servers[entry], ns);\\n\\t}\\n}\",\"filename\":\"deep-setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"max-hardware\",\"moduleSequenceNumber\":1285,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\t//\\n}\",\"filename\":\"formulas-testing.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"max-hardware\",\"moduleSequenceNumber\":1286,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tconst currentMachine = ns.getHostname();\\n\\tvar servers = ns.scan(currentMachine);\\n\\tvar scripts = ns.ls(home, \\\"basic-\\\");\\n\\n\\tns.tprint(\\\"Host:  \\\" + currentMachine);\\n\\tfor (let entry in servers) {\\t// depth 0\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\t// depth 1\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== home && subservers.length > 1) {\\n\\t\\t\\t\\tns.tprint(\\\"-----> \\\" + subservers[subentry]);\\n\\t\\t\\t\\tlet subserversd2 = ns.scan(subservers[subentry]); // depth 2\\n\\t\\t\\t\\tfor (let subentryd2 in subserversd2) {\\n\\t\\t\\t\\t\\tif (subserversd2[subentryd2] !== subservers[subentry] && subserversd2[subentryd2] !== servers[entry] && subserversd2.length > 1) {\\n\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------> \\\" + subserversd2[subentryd2]);\\n\\t\\t\\t\\t\\t\\tlet subserversd3 = ns.scan(subserversd2[subentryd2]);\\t// depth 3\\n\\t\\t\\t\\t\\t\\tfor (let subentryd3 in subserversd3) {\\n\\t\\t\\t\\t\\t\\t\\tif (subserversd3[subentryd3] !== subserversd2[subentryd2] && subserversd3[subentryd3] !== subservers[subentry] && subserversd3.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------> \\\" + subserversd3[subentryd3]);\\n\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd4 = ns.scan(subserversd3[subentryd3]);\\t// depth 4\\n\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd4 in subserversd4) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd4[subentryd4] !== subserversd3[subentryd3] && subserversd4[subentryd4] !== subserversd2[subentryd2] && subserversd4.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------------> \\\" + subserversd4[subentryd4]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd5 = ns.scan(subserversd4[subentryd4]);\\t// depth 5\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd5 in subserversd5) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd5[subentryd5] !== subserversd4[subentryd4] && subserversd5[subentryd5] !== subserversd3[subentryd3] && subserversd5.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-------------------------> \\\" + subserversd5[subentryd5]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd6 = ns.scan(subserversd5[subentryd5]);\\t// depth 6\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd6 in subserversd6) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd6[subentryd6] !== subserversd5[subentryd5] && subserversd6[subentryd6] !== subserversd4[subentryd4] && subserversd6.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"------------------------------> \\\" + subserversd6[subentryd6]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd7 = ns.scan(subserversd6[subentryd6]);\\t// depth 7\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor(let subentryd7 in subserversd7) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd7[subentryd7] !== subserversd6[subentryd6] && subserversd7[subentryd7] !== subserversd5[subentryd5] && subserversd7.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-----------------------------------> \\\" + subserversd7[subentryd7]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"gigascan.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.05,\"server\":\"max-hardware\",\"moduleSequenceNumber\":1287,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet targetRam = ns.getServerMaxRam(ns.args[0]);\\n\\tlet scriptMem = ns.getScriptRam(ns.args[1]);\\n\\n\\tns.tprint(\\\"Maximum possible threads for \\\" + ns.args[1] + \\\": \\\" + Math.floor(targetRam / scriptMem));\\n\\tns.exit;\\n}\",\"filename\":\"ram-usage.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"max-hardware\",\"moduleSequenceNumber\":1288,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerList } from \\\"modules/helper.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet serversSeen = [\\\"home\\\"]; // home + bought servers\\n\\tlet contractList = [];\\n\\n\\tserversSeen = await getServerList(serversSeen, 0, ns);\\n\\n\\tns.tprint(serversSeen);\\n}\",\"filename\":\"search-coding-contracts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"max-hardware\",\"moduleSequenceNumber\":1289,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tvar servers = ns.scan(home);\\n\\tvar scripts = ns.ls(home, \\\".ns\\\");\\n\\n\\tfor (let entry in scripts) {\\n\\t\\tns.tprint(\\\"found script: \\\" + scripts[entry]);\\n\\t}\\n\\n\\t// Hack servers (!!! depth = 2 !!!) if needed and populate with scripts\\n\\tfor (let entry in servers) {\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== \\\"home\\\") {\\n\\t\\t\\t\\tns.tprint(\\\"----->   \\\" + subservers[subentry]);\\n\\t\\t\\t\\tif (!ns.hasRootAccess(subservers[subentry])) {\\n\\t\\t\\t\\t\\ttakeover(subservers[subentry]);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tns.tprint(\\\"copying scripts to \\\" + subservers[subentry]);\\n\\t\\t\\t\\tawait ns.scp(scripts, home, subservers[subentry]);\\n\\t\\t\\t\\t//await ns.scp(\\\"setup.ns\\\", home, subservers[subentry]);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (!ns.hasRootAccess(servers[entry])) {\\n\\t\\t\\ttakeover(servers[entry]);\\n\\t\\t}\\n\\t\\tns.tprint(\\\"copying scripts to \\\" + servers[entry]);\\n\\t\\tawait ns.scp(scripts, home, servers[entry]);\\n\\t\\t//await ns.scp(\\\"setup.ns\\\", home, servers[entry]);\\n\\t}\\n\\n\\t/** \\n\\t * \\tAttempts to take over target machine\\t\\n\\t * \\n\\t *  @param {string} tar\\n\\t *  @return {boolean} outcome \\n\\t**/\\n\\tasync function takeover(tar) {\\n\\t\\tlet currentTarget = tar;\\n\\t\\tlet isNotTakenOver = true;\\n\\t\\tlet attemptCounter = 0;\\n\\n\\t\\tif (ns.getServerNumPortsRequired <= 5 && attemptCounter < 50) {\\n\\t\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\n\\t\\t\\t\\tattemptCounter++;\\n\\t\\t\\t}\\n\\n\\t\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.15,\"server\":\"max-hardware\",\"moduleSequenceNumber\":1290,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}}],\"serversOnNetwork\":[\"joesguns\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":15,\"minDifficulty\":5,\"moneyAvailable\":10000000,\"moneyMax\":250000000,\"numOpenPortsRequired\":1,\"openPortCount\":2,\"requiredHackingSkill\":80,\"serverGrowth\":30}},\"omega-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omega-net\",\"httpPortOpen\":false,\"ip\":\"20.6.9.4\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-new-god.lit\"],\"organizationName\":\"Omega Software\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Returns an array of all hostnames in the network tree\\n * \\n * @param {string[]} serversSeen\\n * @param {number} safetyCounter Prevents infnite recursion\\n * @param {NS} ns\\n */\\nexport async function getServerList(serversSeen, safetyCounter, ns) {\\n\\tlet srvrsSeen = serversSeen;\\n\\tlet currServScanResult = [];\\n\\n\\tfor (let serverSeen in srvrsSeen) {\\n\\t\\tcurrServScanResult = ns.scan(srvrsSeen[serverSeen]);\\n\\t\\tfor (let entry in currServScanResult) {\\n\\t\\t\\tif (!srvrsSeen.includes(currServScanResult[entry])) {\\n\\t\\t\\t\\tsrvrsSeen.push(currServScanResult[entry]);\\n\\t\\t\\t\\tif ((++safetyCounter) < 250) {\\n\\t\\t\\t\\t\\tawait getServerList(srvrsSeen, safetyCounter, ns);\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tns.exit();\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\t//Filter out invalid values (NaN, null, {}, undefined)\\n\\tsrvrsSeen = srvrsSeen.filter(x => x);\\n\\treturn srvrsSeen;\\n}\\n\\n\\n/** \\n * \\tAttempts to take over target machine\\t\\n * \\n *  @param {string} target\\n * \\t@param {NS} ns\\n *  @return {boolean} outcome \\n**/\\nexport async function takeover(target, ns) {\\n\\tconst home = \\\"home\\\";\\n\\tlet currentTarget = target;\\n\\tlet isNotTakenOver = true;\\n\\tlet attemptCounter = 0;\\n\\n\\tlet scripts = ns.ls(home, \\\".ns\\\");\\n\\tscripts.push(ns.ls(home, \\\".js\\\"));\\n\\n\\tif (!ns.hasRootAccess(currentTarget) && attemptCounter < 30) {\\n\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\ttry {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t} catch (error) {\\n\\t\\t\\t\\t\\tns.tprint(\\\"not enough ports to nuke \\\" + currentTarget);\\n\\t\\t\\t\\t\\treturn false;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t}\\n\\t\\t\\tattemptCounter++;\\n\\t\\t}\\n\\n\\t\\tawait ns.scp(scripts, home, currentTarget);\\n\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\",\"filename\":\"/modules/helper.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"omega-net\",\"moduleSequenceNumber\":1291,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.grow(target);\\n\\t}\\n}\",\"filename\":\"basic-grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"omega-net\",\"moduleSequenceNumber\":1292,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"basic-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"omega-net\",\"moduleSequenceNumber\":1293,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(target);\\n\\t}\\n}\",\"filename\":\"basic-weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"omega-net\",\"moduleSequenceNumber\":1294,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerList, takeover } from \\\"modules/helper.js\\\";\\n\\n/** @param {NS} ns **/\\n// TODO: unused + unfinished, based on setup.ns\\nexport async function main(ns) {\\n\\tconst myServers = [\\\"home\\\"];\\n\\n\\tvar servers = await getServerList(myServers, 0, ns);\\n\\n\\tfor (let entry in servers) {\\t\\n\\t\\tawait takeover(servers[entry], ns);\\n\\t}\\n}\",\"filename\":\"deep-setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"omega-net\",\"moduleSequenceNumber\":1295,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\t//\\n}\",\"filename\":\"formulas-testing.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"omega-net\",\"moduleSequenceNumber\":1296,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tconst currentMachine = ns.getHostname();\\n\\tvar servers = ns.scan(currentMachine);\\n\\tvar scripts = ns.ls(home, \\\"basic-\\\");\\n\\n\\tns.tprint(\\\"Host:  \\\" + currentMachine);\\n\\tfor (let entry in servers) {\\t// depth 0\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\t// depth 1\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== home && subservers.length > 1) {\\n\\t\\t\\t\\tns.tprint(\\\"-----> \\\" + subservers[subentry]);\\n\\t\\t\\t\\tlet subserversd2 = ns.scan(subservers[subentry]); // depth 2\\n\\t\\t\\t\\tfor (let subentryd2 in subserversd2) {\\n\\t\\t\\t\\t\\tif (subserversd2[subentryd2] !== subservers[subentry] && subserversd2[subentryd2] !== servers[entry] && subserversd2.length > 1) {\\n\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------> \\\" + subserversd2[subentryd2]);\\n\\t\\t\\t\\t\\t\\tlet subserversd3 = ns.scan(subserversd2[subentryd2]);\\t// depth 3\\n\\t\\t\\t\\t\\t\\tfor (let subentryd3 in subserversd3) {\\n\\t\\t\\t\\t\\t\\t\\tif (subserversd3[subentryd3] !== subserversd2[subentryd2] && subserversd3[subentryd3] !== subservers[subentry] && subserversd3.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------> \\\" + subserversd3[subentryd3]);\\n\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd4 = ns.scan(subserversd3[subentryd3]);\\t// depth 4\\n\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd4 in subserversd4) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd4[subentryd4] !== subserversd3[subentryd3] && subserversd4[subentryd4] !== subserversd2[subentryd2] && subserversd4.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------------> \\\" + subserversd4[subentryd4]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd5 = ns.scan(subserversd4[subentryd4]);\\t// depth 5\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd5 in subserversd5) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd5[subentryd5] !== subserversd4[subentryd4] && subserversd5[subentryd5] !== subserversd3[subentryd3] && subserversd5.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-------------------------> \\\" + subserversd5[subentryd5]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd6 = ns.scan(subserversd5[subentryd5]);\\t// depth 6\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd6 in subserversd6) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd6[subentryd6] !== subserversd5[subentryd5] && subserversd6[subentryd6] !== subserversd4[subentryd4] && subserversd6.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"------------------------------> \\\" + subserversd6[subentryd6]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd7 = ns.scan(subserversd6[subentryd6]);\\t// depth 7\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor(let subentryd7 in subserversd7) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd7[subentryd7] !== subserversd6[subentryd6] && subserversd7[subentryd7] !== subserversd5[subentryd5] && subserversd7.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-----------------------------------> \\\" + subserversd7[subentryd7]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"gigascan.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.05,\"server\":\"omega-net\",\"moduleSequenceNumber\":1297,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet targetRam = ns.getServerMaxRam(ns.args[0]);\\n\\tlet scriptMem = ns.getScriptRam(ns.args[1]);\\n\\n\\tns.tprint(\\\"Maximum possible threads for \\\" + ns.args[1] + \\\": \\\" + Math.floor(targetRam / scriptMem));\\n\\tns.exit;\\n}\",\"filename\":\"ram-usage.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"omega-net\",\"moduleSequenceNumber\":1298,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerList } from \\\"modules/helper.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet serversSeen = [\\\"home\\\"]; // home + bought servers\\n\\tlet contractList = [];\\n\\n\\tserversSeen = await getServerList(serversSeen, 0, ns);\\n\\n\\tns.tprint(serversSeen);\\n}\",\"filename\":\"search-coding-contracts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"omega-net\",\"moduleSequenceNumber\":1299,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tvar servers = ns.scan(home);\\n\\tvar scripts = ns.ls(home, \\\".ns\\\");\\n\\n\\tfor (let entry in scripts) {\\n\\t\\tns.tprint(\\\"found script: \\\" + scripts[entry]);\\n\\t}\\n\\n\\t// Hack servers (!!! depth = 2 !!!) if needed and populate with scripts\\n\\tfor (let entry in servers) {\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== \\\"home\\\") {\\n\\t\\t\\t\\tns.tprint(\\\"----->   \\\" + subservers[subentry]);\\n\\t\\t\\t\\tif (!ns.hasRootAccess(subservers[subentry])) {\\n\\t\\t\\t\\t\\ttakeover(subservers[subentry]);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tns.tprint(\\\"copying scripts to \\\" + subservers[subentry]);\\n\\t\\t\\t\\tawait ns.scp(scripts, home, subservers[subentry]);\\n\\t\\t\\t\\t//await ns.scp(\\\"setup.ns\\\", home, subservers[subentry]);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (!ns.hasRootAccess(servers[entry])) {\\n\\t\\t\\ttakeover(servers[entry]);\\n\\t\\t}\\n\\t\\tns.tprint(\\\"copying scripts to \\\" + servers[entry]);\\n\\t\\tawait ns.scp(scripts, home, servers[entry]);\\n\\t\\t//await ns.scp(\\\"setup.ns\\\", home, servers[entry]);\\n\\t}\\n\\n\\t/** \\n\\t * \\tAttempts to take over target machine\\t\\n\\t * \\n\\t *  @param {string} tar\\n\\t *  @return {boolean} outcome \\n\\t**/\\n\\tasync function takeover(tar) {\\n\\t\\tlet currentTarget = tar;\\n\\t\\tlet isNotTakenOver = true;\\n\\t\\tlet attemptCounter = 0;\\n\\n\\t\\tif (ns.getServerNumPortsRequired <= 5 && attemptCounter < 50) {\\n\\t\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\n\\t\\t\\t\\tattemptCounter++;\\n\\t\\t\\t}\\n\\n\\t\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.15,\"server\":\"omega-net\",\"moduleSequenceNumber\":1300,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}}],\"serversOnNetwork\":[\"CSEC\",\"the-hub\",\"netlink\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":33,\"hackDifficulty\":33,\"minDifficulty\":11,\"moneyAvailable\":64504454,\"moneyMax\":1612611350,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":188,\"serverGrowth\":30}},\"crush-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"crush-fitness\",\"httpPortOpen\":false,\"ip\":\"86.4.4.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Crush Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Returns an array of all hostnames in the network tree\\n * \\n * @param {string[]} serversSeen\\n * @param {number} safetyCounter Prevents infnite recursion\\n * @param {NS} ns\\n */\\nexport async function getServerList(serversSeen, safetyCounter, ns) {\\n\\tlet srvrsSeen = serversSeen;\\n\\tlet currServScanResult = [];\\n\\n\\tfor (let serverSeen in srvrsSeen) {\\n\\t\\tcurrServScanResult = ns.scan(srvrsSeen[serverSeen]);\\n\\t\\tfor (let entry in currServScanResult) {\\n\\t\\t\\tif (!srvrsSeen.includes(currServScanResult[entry])) {\\n\\t\\t\\t\\tsrvrsSeen.push(currServScanResult[entry]);\\n\\t\\t\\t\\tif ((++safetyCounter) < 250) {\\n\\t\\t\\t\\t\\tawait getServerList(srvrsSeen, safetyCounter, ns);\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tns.exit();\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\t//Filter out invalid values (NaN, null, {}, undefined)\\n\\tsrvrsSeen = srvrsSeen.filter(x => x);\\n\\treturn srvrsSeen;\\n}\\n\\n\\n/** \\n * \\tAttempts to take over target machine\\t\\n * \\n *  @param {string} target\\n * \\t@param {NS} ns\\n *  @return {boolean} outcome \\n**/\\nexport async function takeover(target, ns) {\\n\\tconst home = \\\"home\\\";\\n\\tlet currentTarget = target;\\n\\tlet isNotTakenOver = true;\\n\\tlet attemptCounter = 0;\\n\\n\\tlet scripts = ns.ls(home, \\\".ns\\\");\\n\\tscripts.push(ns.ls(home, \\\".js\\\"));\\n\\n\\tif (!ns.hasRootAccess(currentTarget) && attemptCounter < 30) {\\n\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\ttry {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t} catch (error) {\\n\\t\\t\\t\\t\\tns.tprint(\\\"not enough ports to nuke \\\" + currentTarget);\\n\\t\\t\\t\\t\\treturn false;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t}\\n\\t\\t\\tattemptCounter++;\\n\\t\\t}\\n\\n\\t\\tawait ns.scp(scripts, home, currentTarget);\\n\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\",\"filename\":\"/modules/helper.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":1301,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.grow(target);\\n\\t}\\n}\",\"filename\":\"basic-grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":1302,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"basic-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":1303,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(target);\\n\\t}\\n}\",\"filename\":\"basic-weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":1304,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerList, takeover } from \\\"modules/helper.js\\\";\\n\\n/** @param {NS} ns **/\\n// TODO: unused + unfinished, based on setup.ns\\nexport async function main(ns) {\\n\\tconst myServers = [\\\"home\\\"];\\n\\n\\tvar servers = await getServerList(myServers, 0, ns);\\n\\n\\tfor (let entry in servers) {\\t\\n\\t\\tawait takeover(servers[entry], ns);\\n\\t}\\n}\",\"filename\":\"deep-setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":1305,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\t//\\n}\",\"filename\":\"formulas-testing.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":1306,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tconst currentMachine = ns.getHostname();\\n\\tvar servers = ns.scan(currentMachine);\\n\\tvar scripts = ns.ls(home, \\\"basic-\\\");\\n\\n\\tns.tprint(\\\"Host:  \\\" + currentMachine);\\n\\tfor (let entry in servers) {\\t// depth 0\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\t// depth 1\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== home && subservers.length > 1) {\\n\\t\\t\\t\\tns.tprint(\\\"-----> \\\" + subservers[subentry]);\\n\\t\\t\\t\\tlet subserversd2 = ns.scan(subservers[subentry]); // depth 2\\n\\t\\t\\t\\tfor (let subentryd2 in subserversd2) {\\n\\t\\t\\t\\t\\tif (subserversd2[subentryd2] !== subservers[subentry] && subserversd2[subentryd2] !== servers[entry] && subserversd2.length > 1) {\\n\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------> \\\" + subserversd2[subentryd2]);\\n\\t\\t\\t\\t\\t\\tlet subserversd3 = ns.scan(subserversd2[subentryd2]);\\t// depth 3\\n\\t\\t\\t\\t\\t\\tfor (let subentryd3 in subserversd3) {\\n\\t\\t\\t\\t\\t\\t\\tif (subserversd3[subentryd3] !== subserversd2[subentryd2] && subserversd3[subentryd3] !== subservers[subentry] && subserversd3.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------> \\\" + subserversd3[subentryd3]);\\n\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd4 = ns.scan(subserversd3[subentryd3]);\\t// depth 4\\n\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd4 in subserversd4) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd4[subentryd4] !== subserversd3[subentryd3] && subserversd4[subentryd4] !== subserversd2[subentryd2] && subserversd4.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------------> \\\" + subserversd4[subentryd4]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd5 = ns.scan(subserversd4[subentryd4]);\\t// depth 5\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd5 in subserversd5) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd5[subentryd5] !== subserversd4[subentryd4] && subserversd5[subentryd5] !== subserversd3[subentryd3] && subserversd5.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-------------------------> \\\" + subserversd5[subentryd5]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd6 = ns.scan(subserversd5[subentryd5]);\\t// depth 6\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd6 in subserversd6) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd6[subentryd6] !== subserversd5[subentryd5] && subserversd6[subentryd6] !== subserversd4[subentryd4] && subserversd6.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"------------------------------> \\\" + subserversd6[subentryd6]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd7 = ns.scan(subserversd6[subentryd6]);\\t// depth 7\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor(let subentryd7 in subserversd7) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd7[subentryd7] !== subserversd6[subentryd6] && subserversd7[subentryd7] !== subserversd5[subentryd5] && subserversd7.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-----------------------------------> \\\" + subserversd7[subentryd7]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"gigascan.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.05,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":1307,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet targetRam = ns.getServerMaxRam(ns.args[0]);\\n\\tlet scriptMem = ns.getScriptRam(ns.args[1]);\\n\\n\\tns.tprint(\\\"Maximum possible threads for \\\" + ns.args[1] + \\\": \\\" + Math.floor(targetRam / scriptMem));\\n\\tns.exit;\\n}\",\"filename\":\"ram-usage.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":1308,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerList } from \\\"modules/helper.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet serversSeen = [\\\"home\\\"]; // home + bought servers\\n\\tlet contractList = [];\\n\\n\\tserversSeen = await getServerList(serversSeen, 0, ns);\\n\\n\\tns.tprint(serversSeen);\\n}\",\"filename\":\"search-coding-contracts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":1309,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tvar servers = ns.scan(home);\\n\\tvar scripts = ns.ls(home, \\\".ns\\\");\\n\\n\\tfor (let entry in scripts) {\\n\\t\\tns.tprint(\\\"found script: \\\" + scripts[entry]);\\n\\t}\\n\\n\\t// Hack servers (!!! depth = 2 !!!) if needed and populate with scripts\\n\\tfor (let entry in servers) {\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== \\\"home\\\") {\\n\\t\\t\\t\\tns.tprint(\\\"----->   \\\" + subservers[subentry]);\\n\\t\\t\\t\\tif (!ns.hasRootAccess(subservers[subentry])) {\\n\\t\\t\\t\\t\\ttakeover(subservers[subentry]);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tns.tprint(\\\"copying scripts to \\\" + subservers[subentry]);\\n\\t\\t\\t\\tawait ns.scp(scripts, home, subservers[subentry]);\\n\\t\\t\\t\\t//await ns.scp(\\\"setup.ns\\\", home, subservers[subentry]);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (!ns.hasRootAccess(servers[entry])) {\\n\\t\\t\\ttakeover(servers[entry]);\\n\\t\\t}\\n\\t\\tns.tprint(\\\"copying scripts to \\\" + servers[entry]);\\n\\t\\tawait ns.scp(scripts, home, servers[entry]);\\n\\t\\t//await ns.scp(\\\"setup.ns\\\", home, servers[entry]);\\n\\t}\\n\\n\\t/** \\n\\t * \\tAttempts to take over target machine\\t\\n\\t * \\n\\t *  @param {string} tar\\n\\t *  @return {boolean} outcome \\n\\t**/\\n\\tasync function takeover(tar) {\\n\\t\\tlet currentTarget = tar;\\n\\t\\tlet isNotTakenOver = true;\\n\\t\\tlet attemptCounter = 0;\\n\\n\\t\\tif (ns.getServerNumPortsRequired <= 5 && attemptCounter < 50) {\\n\\t\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\n\\t\\t\\t\\tattemptCounter++;\\n\\t\\t\\t}\\n\\n\\t\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.15,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":1310,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}}],\"serversOnNetwork\":[\"silver-helix\",\"catalyst\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":36,\"hackDifficulty\":36,\"minDifficulty\":12,\"moneyAvailable\":48039877,\"moneyMax\":1200996925,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":237,\"serverGrowth\":29}},\"iron-gym\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"iron-gym\",\"httpPortOpen\":false,\"ip\":\"47.0.8.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Iron Gym Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Returns an array of all hostnames in the network tree\\n * \\n * @param {string[]} serversSeen\\n * @param {number} safetyCounter Prevents infnite recursion\\n * @param {NS} ns\\n */\\nexport async function getServerList(serversSeen, safetyCounter, ns) {\\n\\tlet srvrsSeen = serversSeen;\\n\\tlet currServScanResult = [];\\n\\n\\tfor (let serverSeen in srvrsSeen) {\\n\\t\\tcurrServScanResult = ns.scan(srvrsSeen[serverSeen]);\\n\\t\\tfor (let entry in currServScanResult) {\\n\\t\\t\\tif (!srvrsSeen.includes(currServScanResult[entry])) {\\n\\t\\t\\t\\tsrvrsSeen.push(currServScanResult[entry]);\\n\\t\\t\\t\\tif ((++safetyCounter) < 250) {\\n\\t\\t\\t\\t\\tawait getServerList(srvrsSeen, safetyCounter, ns);\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tns.exit();\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\t//Filter out invalid values (NaN, null, {}, undefined)\\n\\tsrvrsSeen = srvrsSeen.filter(x => x);\\n\\treturn srvrsSeen;\\n}\\n\\n\\n/** \\n * \\tAttempts to take over target machine\\t\\n * \\n *  @param {string} target\\n * \\t@param {NS} ns\\n *  @return {boolean} outcome \\n**/\\nexport async function takeover(target, ns) {\\n\\tconst home = \\\"home\\\";\\n\\tlet currentTarget = target;\\n\\tlet isNotTakenOver = true;\\n\\tlet attemptCounter = 0;\\n\\n\\tlet scripts = ns.ls(home, \\\".ns\\\");\\n\\tscripts.push(ns.ls(home, \\\".js\\\"));\\n\\n\\tif (!ns.hasRootAccess(currentTarget) && attemptCounter < 30) {\\n\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\ttry {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t} catch (error) {\\n\\t\\t\\t\\t\\tns.tprint(\\\"not enough ports to nuke \\\" + currentTarget);\\n\\t\\t\\t\\t\\treturn false;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t}\\n\\t\\t\\tattemptCounter++;\\n\\t\\t}\\n\\n\\t\\tawait ns.scp(scripts, home, currentTarget);\\n\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\",\"filename\":\"/modules/helper.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"iron-gym\",\"moduleSequenceNumber\":1311,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.grow(target);\\n\\t}\\n}\",\"filename\":\"basic-grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"iron-gym\",\"moduleSequenceNumber\":1312,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"basic-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"iron-gym\",\"moduleSequenceNumber\":1313,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(target);\\n\\t}\\n}\",\"filename\":\"basic-weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"iron-gym\",\"moduleSequenceNumber\":1314,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerList, takeover } from \\\"modules/helper.js\\\";\\n\\n/** @param {NS} ns **/\\n// TODO: unused + unfinished, based on setup.ns\\nexport async function main(ns) {\\n\\tconst myServers = [\\\"home\\\"];\\n\\n\\tvar servers = await getServerList(myServers, 0, ns);\\n\\n\\tfor (let entry in servers) {\\t\\n\\t\\tawait takeover(servers[entry], ns);\\n\\t}\\n}\",\"filename\":\"deep-setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"iron-gym\",\"moduleSequenceNumber\":1315,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\t//\\n}\",\"filename\":\"formulas-testing.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"iron-gym\",\"moduleSequenceNumber\":1316,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tconst currentMachine = ns.getHostname();\\n\\tvar servers = ns.scan(currentMachine);\\n\\tvar scripts = ns.ls(home, \\\"basic-\\\");\\n\\n\\tns.tprint(\\\"Host:  \\\" + currentMachine);\\n\\tfor (let entry in servers) {\\t// depth 0\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\t// depth 1\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== home && subservers.length > 1) {\\n\\t\\t\\t\\tns.tprint(\\\"-----> \\\" + subservers[subentry]);\\n\\t\\t\\t\\tlet subserversd2 = ns.scan(subservers[subentry]); // depth 2\\n\\t\\t\\t\\tfor (let subentryd2 in subserversd2) {\\n\\t\\t\\t\\t\\tif (subserversd2[subentryd2] !== subservers[subentry] && subserversd2[subentryd2] !== servers[entry] && subserversd2.length > 1) {\\n\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------> \\\" + subserversd2[subentryd2]);\\n\\t\\t\\t\\t\\t\\tlet subserversd3 = ns.scan(subserversd2[subentryd2]);\\t// depth 3\\n\\t\\t\\t\\t\\t\\tfor (let subentryd3 in subserversd3) {\\n\\t\\t\\t\\t\\t\\t\\tif (subserversd3[subentryd3] !== subserversd2[subentryd2] && subserversd3[subentryd3] !== subservers[subentry] && subserversd3.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------> \\\" + subserversd3[subentryd3]);\\n\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd4 = ns.scan(subserversd3[subentryd3]);\\t// depth 4\\n\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd4 in subserversd4) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd4[subentryd4] !== subserversd3[subentryd3] && subserversd4[subentryd4] !== subserversd2[subentryd2] && subserversd4.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------------> \\\" + subserversd4[subentryd4]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd5 = ns.scan(subserversd4[subentryd4]);\\t// depth 5\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd5 in subserversd5) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd5[subentryd5] !== subserversd4[subentryd4] && subserversd5[subentryd5] !== subserversd3[subentryd3] && subserversd5.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-------------------------> \\\" + subserversd5[subentryd5]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd6 = ns.scan(subserversd5[subentryd5]);\\t// depth 6\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd6 in subserversd6) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd6[subentryd6] !== subserversd5[subentryd5] && subserversd6[subentryd6] !== subserversd4[subentryd4] && subserversd6.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"------------------------------> \\\" + subserversd6[subentryd6]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd7 = ns.scan(subserversd6[subentryd6]);\\t// depth 7\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor(let subentryd7 in subserversd7) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd7[subentryd7] !== subserversd6[subentryd6] && subserversd7[subentryd7] !== subserversd5[subentryd5] && subserversd7.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-----------------------------------> \\\" + subserversd7[subentryd7]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"gigascan.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.05,\"server\":\"iron-gym\",\"moduleSequenceNumber\":1317,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet targetRam = ns.getServerMaxRam(ns.args[0]);\\n\\tlet scriptMem = ns.getScriptRam(ns.args[1]);\\n\\n\\tns.tprint(\\\"Maximum possible threads for \\\" + ns.args[1] + \\\": \\\" + Math.floor(targetRam / scriptMem));\\n\\tns.exit;\\n}\",\"filename\":\"ram-usage.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"iron-gym\",\"moduleSequenceNumber\":1318,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerList } from \\\"modules/helper.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet serversSeen = [\\\"home\\\"]; // home + bought servers\\n\\tlet contractList = [];\\n\\n\\tserversSeen = await getServerList(serversSeen, 0, ns);\\n\\n\\tns.tprint(serversSeen);\\n}\",\"filename\":\"search-coding-contracts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"iron-gym\",\"moduleSequenceNumber\":1319,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tvar servers = ns.scan(home);\\n\\tvar scripts = ns.ls(home, \\\".ns\\\");\\n\\n\\tfor (let entry in scripts) {\\n\\t\\tns.tprint(\\\"found script: \\\" + scripts[entry]);\\n\\t}\\n\\n\\t// Hack servers (!!! depth = 2 !!!) if needed and populate with scripts\\n\\tfor (let entry in servers) {\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== \\\"home\\\") {\\n\\t\\t\\t\\tns.tprint(\\\"----->   \\\" + subservers[subentry]);\\n\\t\\t\\t\\tif (!ns.hasRootAccess(subservers[subentry])) {\\n\\t\\t\\t\\t\\ttakeover(subservers[subentry]);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tns.tprint(\\\"copying scripts to \\\" + subservers[subentry]);\\n\\t\\t\\t\\tawait ns.scp(scripts, home, subservers[subentry]);\\n\\t\\t\\t\\t//await ns.scp(\\\"setup.ns\\\", home, subservers[subentry]);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (!ns.hasRootAccess(servers[entry])) {\\n\\t\\t\\ttakeover(servers[entry]);\\n\\t\\t}\\n\\t\\tns.tprint(\\\"copying scripts to \\\" + servers[entry]);\\n\\t\\tawait ns.scp(scripts, home, servers[entry]);\\n\\t\\t//await ns.scp(\\\"setup.ns\\\", home, servers[entry]);\\n\\t}\\n\\n\\t/** \\n\\t * \\tAttempts to take over target machine\\t\\n\\t * \\n\\t *  @param {string} tar\\n\\t *  @return {boolean} outcome \\n\\t**/\\n\\tasync function takeover(tar) {\\n\\t\\tlet currentTarget = tar;\\n\\t\\tlet isNotTakenOver = true;\\n\\t\\tlet attemptCounter = 0;\\n\\n\\t\\tif (ns.getServerNumPortsRequired <= 5 && attemptCounter < 50) {\\n\\t\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\n\\t\\t\\t\\tattemptCounter++;\\n\\t\\t\\t}\\n\\n\\t\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.15,\"server\":\"iron-gym\",\"moduleSequenceNumber\":1320,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}}],\"serversOnNetwork\":[\"home\",\"CSEC\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":10,\"minDifficulty\":10,\"moneyAvailable\":0,\"moneyMax\":500000000,\"numOpenPortsRequired\":1,\"openPortCount\":2,\"requiredHackingSkill\":100,\"serverGrowth\":20}},\"millenium-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"millenium-fitness\",\"httpPortOpen\":true,\"ip\":\"67.9.6.9\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Millenium Fitness Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Returns an array of all hostnames in the network tree\\n * \\n * @param {string[]} myServers\\n * @param {number} safetyCounter Prevents infnite recursion\\n * @param {NS} ns\\n */\\nexport async function getServerList(myServers, safetyCounter, ns) {\\n\\tlet srvrsSeen = myServers;\\n\\tlet currServScanResult = [];\\n\\n\\tfor (let serverSeen in srvrsSeen) {\\n\\t\\tcurrServScanResult = ns.scan(srvrsSeen[serverSeen]);\\n\\t\\tfor (let entry in currServScanResult) {\\n\\t\\t\\tif (!srvrsSeen.includes(currServScanResult[entry])) {\\n\\t\\t\\t\\tsrvrsSeen.push(currServScanResult[entry]);\\n\\t\\t\\t\\tif ((++safetyCounter) < 250) {\\n\\t\\t\\t\\t\\tawait getServerList(srvrsSeen, safetyCounter, ns);\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tns.exit();\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\t//Filter out invalid values (NaN, null, {}, undefined)\\n\\tsrvrsSeen = srvrsSeen.filter(x => x);\\n\\treturn srvrsSeen;\\n}\\n\\n\\n/** \\n * \\tAttempts to take over target machine\\t\\n * \\n *  @param {string} target\\n * \\t@param {NS} ns\\n *  @return {boolean} outcome \\n**/\\nexport async function takeover(target, ns) {\\n\\tconst home = \\\"home\\\";\\n\\tlet currentTarget = target;\\n\\tlet isNotTakenOver = true;\\n\\tlet attemptCounter = 0;\\n\\n\\tlet scripts = ns.ls(home, \\\".js\\\");\\n\\t//scripts.push(ns.ls(home, \\\".ns\\\")); //in case of deprecated .ns scripts\\n\\n\\tns.tprint(scripts);\\n\\n\\n\\tif (!ns.hasRootAccess(currentTarget) && attemptCounter < 30) {\\n\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\ttry {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t} catch (error) {\\n\\t\\t\\t\\t\\tns.tprint(\\\"not enough ports to nuke \\\" + currentTarget);\\n\\t\\t\\t\\t\\treturn false;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t}\\n\\t\\t\\tattemptCounter++;\\n\\t\\t}\\n\\n\\t\\tawait ns.scp(scripts, home, currentTarget);\\n\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\",\"filename\":\"/modules/helper.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":1321,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.grow(target);\\n\\t}\\n}\",\"filename\":\"basic-grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":1322,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"basic-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":1323,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(target);\\n\\t}\\n}\",\"filename\":\"basic-weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":1324,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerList, takeover } from \\\"modules/helper.js\\\";\\n\\n/** @param {NS} ns **/\\n// TODO: unused + unfinished, based on setup.ns\\nexport async function main(ns) {\\n\\tconst myServers = [\\\"home\\\"];\\n\\n\\tvar servers = await getServerList(myServers, 0, ns);\\n\\n\\tfor (let entry in servers) {\\t\\n\\t\\tawait takeover(servers[entry], ns);\\n\\t}\\n}\",\"filename\":\"deep-setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":1325,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\t//\\n}\",\"filename\":\"formulas-testing.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":1326,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tconst currentMachine = ns.getHostname();\\n\\tvar servers = ns.scan(currentMachine);\\n\\tvar scripts = ns.ls(home, \\\"basic-\\\");\\n\\n\\tns.tprint(\\\"Host:  \\\" + currentMachine);\\n\\tfor (let entry in servers) {\\t// depth 0\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\t// depth 1\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== home && subservers.length > 1) {\\n\\t\\t\\t\\tns.tprint(\\\"-----> \\\" + subservers[subentry]);\\n\\t\\t\\t\\tlet subserversd2 = ns.scan(subservers[subentry]); // depth 2\\n\\t\\t\\t\\tfor (let subentryd2 in subserversd2) {\\n\\t\\t\\t\\t\\tif (subserversd2[subentryd2] !== subservers[subentry] && subserversd2[subentryd2] !== servers[entry] && subserversd2.length > 1) {\\n\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------> \\\" + subserversd2[subentryd2]);\\n\\t\\t\\t\\t\\t\\tlet subserversd3 = ns.scan(subserversd2[subentryd2]);\\t// depth 3\\n\\t\\t\\t\\t\\t\\tfor (let subentryd3 in subserversd3) {\\n\\t\\t\\t\\t\\t\\t\\tif (subserversd3[subentryd3] !== subserversd2[subentryd2] && subserversd3[subentryd3] !== subservers[subentry] && subserversd3.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------> \\\" + subserversd3[subentryd3]);\\n\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd4 = ns.scan(subserversd3[subentryd3]);\\t// depth 4\\n\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd4 in subserversd4) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd4[subentryd4] !== subserversd3[subentryd3] && subserversd4[subentryd4] !== subserversd2[subentryd2] && subserversd4.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------------> \\\" + subserversd4[subentryd4]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd5 = ns.scan(subserversd4[subentryd4]);\\t// depth 5\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd5 in subserversd5) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd5[subentryd5] !== subserversd4[subentryd4] && subserversd5[subentryd5] !== subserversd3[subentryd3] && subserversd5.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-------------------------> \\\" + subserversd5[subentryd5]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd6 = ns.scan(subserversd5[subentryd5]);\\t// depth 6\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd6 in subserversd6) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd6[subentryd6] !== subserversd5[subentryd5] && subserversd6[subentryd6] !== subserversd4[subentryd4] && subserversd6.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"------------------------------> \\\" + subserversd6[subentryd6]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd7 = ns.scan(subserversd6[subentryd6]);\\t// depth 7\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor(let subentryd7 in subserversd7) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd7[subentryd7] !== subserversd6[subentryd6] && subserversd7[subentryd7] !== subserversd5[subentryd5] && subserversd7.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-----------------------------------> \\\" + subserversd7[subentryd7]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"gigascan.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.05,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":1327,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet targetRam = ns.getServerMaxRam(ns.args[0]);\\n\\tlet scriptMem = ns.getScriptRam(ns.args[1]);\\n\\n\\tns.tprint(\\\"Maximum possible threads for \\\" + ns.args[1] + \\\": \\\" + Math.floor(targetRam / scriptMem));\\n\\tns.exit;\\n}\",\"filename\":\"ram-usage.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":1328,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerList } from \\\"modules/helper.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet serversSeen = [\\\"home\\\"]; // home + bought servers\\n\\tlet contractList = [];\\n\\n\\tserversSeen = await getServerList(serversSeen, 0, ns);\\n\\n\\tns.tprint(serversSeen);\\n}\",\"filename\":\"search-coding-contracts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":1329,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tvar servers = ns.scan(home);\\n\\tvar scripts = ns.ls(home, \\\".ns\\\");\\n\\n\\tfor (let entry in scripts) {\\n\\t\\tns.tprint(\\\"found script: \\\" + scripts[entry]);\\n\\t}\\n\\n\\t// Hack servers (!!! depth = 2 !!!) if needed and populate with scripts\\n\\tfor (let entry in servers) {\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== \\\"home\\\") {\\n\\t\\t\\t\\tns.tprint(\\\"----->   \\\" + subservers[subentry]);\\n\\t\\t\\t\\tif (!ns.hasRootAccess(subservers[subentry])) {\\n\\t\\t\\t\\t\\ttakeover(subservers[subentry]);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tns.tprint(\\\"copying scripts to \\\" + subservers[subentry]);\\n\\t\\t\\t\\tawait ns.scp(scripts, home, subservers[subentry]);\\n\\t\\t\\t\\t//await ns.scp(\\\"setup.ns\\\", home, subservers[subentry]);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (!ns.hasRootAccess(servers[entry])) {\\n\\t\\t\\ttakeover(servers[entry]);\\n\\t\\t}\\n\\t\\tns.tprint(\\\"copying scripts to \\\" + servers[entry]);\\n\\t\\tawait ns.scp(scripts, home, servers[entry]);\\n\\t\\t//await ns.scp(\\\"setup.ns\\\", home, servers[entry]);\\n\\t}\\n\\n\\t/** \\n\\t * \\tAttempts to take over target machine\\t\\n\\t * \\n\\t *  @param {string} tar\\n\\t *  @return {boolean} outcome \\n\\t**/\\n\\tasync function takeover(tar) {\\n\\t\\tlet currentTarget = tar;\\n\\t\\tlet isNotTakenOver = true;\\n\\t\\tlet attemptCounter = 0;\\n\\n\\t\\tif (ns.getServerNumPortsRequired <= 5 && attemptCounter < 50) {\\n\\t\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\n\\t\\t\\t\\tattemptCounter++;\\n\\t\\t\\t}\\n\\n\\t\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.15,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":1330,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}}],\"serversOnNetwork\":[\"catalyst\",\"snap-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":50,\"hackDifficulty\":50,\"minDifficulty\":17,\"moneyAvailable\":250000000,\"moneyMax\":6250000000,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":520,\"serverGrowth\":40}},\"powerhouse-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"powerhouse-fitness\",\"httpPortOpen\":true,\"ip\":\"55.5.6.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Powerhouse Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Returns an array of all hostnames in the network tree\\n * \\n * @param {string[]} myServers\\n * @param {number} safetyCounter Prevents infnite recursion\\n * @param {NS} ns\\n */\\nexport async function getServerList(myServers, safetyCounter, ns) {\\n\\tlet srvrsSeen = myServers;\\n\\tlet currServScanResult = [];\\n\\n\\tfor (let serverSeen in srvrsSeen) {\\n\\t\\tcurrServScanResult = ns.scan(srvrsSeen[serverSeen]);\\n\\t\\tfor (let entry in currServScanResult) {\\n\\t\\t\\tif (!srvrsSeen.includes(currServScanResult[entry])) {\\n\\t\\t\\t\\tsrvrsSeen.push(currServScanResult[entry]);\\n\\t\\t\\t\\tif ((++safetyCounter) < 250) {\\n\\t\\t\\t\\t\\tawait getServerList(srvrsSeen, safetyCounter, ns);\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tns.exit();\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\t//Filter out invalid values (NaN, null, {}, undefined)\\n\\tsrvrsSeen = srvrsSeen.filter(x => x);\\n\\treturn srvrsSeen;\\n}\\n\\n\\n/** \\n * \\tAttempts to take over target machine\\t\\n * \\n *  @param {string} target\\n * \\t@param {NS} ns\\n *  @return {boolean} outcome \\n**/\\nexport async function takeover(target, ns) {\\n\\tconst home = \\\"home\\\";\\n\\tlet currentTarget = target;\\n\\tlet isNotTakenOver = true;\\n\\tlet attemptCounter = 0;\\n\\n\\tlet scripts = ns.ls(home, \\\".js\\\");\\n\\t//scripts.push(ns.ls(home, \\\".ns\\\")); //in case of deprecated .ns scripts\\n\\n\\tns.tprint(scripts);\\n\\n\\n\\tif (!ns.hasRootAccess(currentTarget) && attemptCounter < 30) {\\n\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\ttry {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t} catch (error) {\\n\\t\\t\\t\\t\\tns.tprint(\\\"not enough ports to nuke \\\" + currentTarget);\\n\\t\\t\\t\\t\\treturn false;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t}\\n\\t\\t\\tattemptCounter++;\\n\\t\\t}\\n\\n\\t\\tawait ns.scp(scripts, home, currentTarget);\\n\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\",\"filename\":\"/modules/helper.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"powerhouse-fitness\",\"moduleSequenceNumber\":1331,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.grow(target);\\n\\t}\\n}\",\"filename\":\"basic-grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"powerhouse-fitness\",\"moduleSequenceNumber\":1332,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"basic-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"powerhouse-fitness\",\"moduleSequenceNumber\":1333,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(target);\\n\\t}\\n}\",\"filename\":\"basic-weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"powerhouse-fitness\",\"moduleSequenceNumber\":1334,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerList, takeover } from \\\"modules/helper.js\\\";\\n\\n/** @param {NS} ns **/\\n// TODO: unused + unfinished, based on setup.ns\\nexport async function main(ns) {\\n\\tconst myServers = [\\\"home\\\"];\\n\\n\\tvar servers = await getServerList(myServers, 0, ns);\\n\\n\\tfor (let entry in servers) {\\t\\n\\t\\tawait takeover(servers[entry], ns);\\n\\t}\\n}\",\"filename\":\"deep-setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"powerhouse-fitness\",\"moduleSequenceNumber\":1335,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\t//\\n}\",\"filename\":\"formulas-testing.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"powerhouse-fitness\",\"moduleSequenceNumber\":1336,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tconst currentMachine = ns.getHostname();\\n\\tvar servers = ns.scan(currentMachine);\\n\\tvar scripts = ns.ls(home, \\\"basic-\\\");\\n\\n\\tns.tprint(\\\"Host:  \\\" + currentMachine);\\n\\tfor (let entry in servers) {\\t// depth 0\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\t// depth 1\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== home && subservers.length > 1) {\\n\\t\\t\\t\\tns.tprint(\\\"-----> \\\" + subservers[subentry]);\\n\\t\\t\\t\\tlet subserversd2 = ns.scan(subservers[subentry]); // depth 2\\n\\t\\t\\t\\tfor (let subentryd2 in subserversd2) {\\n\\t\\t\\t\\t\\tif (subserversd2[subentryd2] !== subservers[subentry] && subserversd2[subentryd2] !== servers[entry] && subserversd2.length > 1) {\\n\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------> \\\" + subserversd2[subentryd2]);\\n\\t\\t\\t\\t\\t\\tlet subserversd3 = ns.scan(subserversd2[subentryd2]);\\t// depth 3\\n\\t\\t\\t\\t\\t\\tfor (let subentryd3 in subserversd3) {\\n\\t\\t\\t\\t\\t\\t\\tif (subserversd3[subentryd3] !== subserversd2[subentryd2] && subserversd3[subentryd3] !== subservers[subentry] && subserversd3.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------> \\\" + subserversd3[subentryd3]);\\n\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd4 = ns.scan(subserversd3[subentryd3]);\\t// depth 4\\n\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd4 in subserversd4) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd4[subentryd4] !== subserversd3[subentryd3] && subserversd4[subentryd4] !== subserversd2[subentryd2] && subserversd4.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------------> \\\" + subserversd4[subentryd4]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd5 = ns.scan(subserversd4[subentryd4]);\\t// depth 5\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd5 in subserversd5) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd5[subentryd5] !== subserversd4[subentryd4] && subserversd5[subentryd5] !== subserversd3[subentryd3] && subserversd5.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-------------------------> \\\" + subserversd5[subentryd5]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd6 = ns.scan(subserversd5[subentryd5]);\\t// depth 6\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd6 in subserversd6) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd6[subentryd6] !== subserversd5[subentryd5] && subserversd6[subentryd6] !== subserversd4[subentryd4] && subserversd6.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"------------------------------> \\\" + subserversd6[subentryd6]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd7 = ns.scan(subserversd6[subentryd6]);\\t// depth 7\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor(let subentryd7 in subserversd7) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd7[subentryd7] !== subserversd6[subentryd6] && subserversd7[subentryd7] !== subserversd5[subentryd5] && subserversd7.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-----------------------------------> \\\" + subserversd7[subentryd7]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"gigascan.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.05,\"server\":\"powerhouse-fitness\",\"moduleSequenceNumber\":1337,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet targetRam = ns.getServerMaxRam(ns.args[0]);\\n\\tlet scriptMem = ns.getScriptRam(ns.args[1]);\\n\\n\\tns.tprint(\\\"Maximum possible threads for \\\" + ns.args[1] + \\\": \\\" + Math.floor(targetRam / scriptMem));\\n\\tns.exit;\\n}\",\"filename\":\"ram-usage.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"powerhouse-fitness\",\"moduleSequenceNumber\":1338,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerList } from \\\"modules/helper.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet serversSeen = [\\\"home\\\"]; // home + bought servers\\n\\tlet contractList = [];\\n\\n\\tserversSeen = await getServerList(serversSeen, 0, ns);\\n\\n\\tns.tprint(serversSeen);\\n}\",\"filename\":\"search-coding-contracts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"powerhouse-fitness\",\"moduleSequenceNumber\":1339,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tvar servers = ns.scan(home);\\n\\tvar scripts = ns.ls(home, \\\".ns\\\");\\n\\n\\tfor (let entry in scripts) {\\n\\t\\tns.tprint(\\\"found script: \\\" + scripts[entry]);\\n\\t}\\n\\n\\t// Hack servers (!!! depth = 2 !!!) if needed and populate with scripts\\n\\tfor (let entry in servers) {\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== \\\"home\\\") {\\n\\t\\t\\t\\tns.tprint(\\\"----->   \\\" + subservers[subentry]);\\n\\t\\t\\t\\tif (!ns.hasRootAccess(subservers[subentry])) {\\n\\t\\t\\t\\t\\ttakeover(subservers[subentry]);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tns.tprint(\\\"copying scripts to \\\" + subservers[subentry]);\\n\\t\\t\\t\\tawait ns.scp(scripts, home, subservers[subentry]);\\n\\t\\t\\t\\t//await ns.scp(\\\"setup.ns\\\", home, subservers[subentry]);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (!ns.hasRootAccess(servers[entry])) {\\n\\t\\t\\ttakeover(servers[entry]);\\n\\t\\t}\\n\\t\\tns.tprint(\\\"copying scripts to \\\" + servers[entry]);\\n\\t\\tawait ns.scp(scripts, home, servers[entry]);\\n\\t\\t//await ns.scp(\\\"setup.ns\\\", home, servers[entry]);\\n\\t}\\n\\n\\t/** \\n\\t * \\tAttempts to take over target machine\\t\\n\\t * \\n\\t *  @param {string} tar\\n\\t *  @return {boolean} outcome \\n\\t**/\\n\\tasync function takeover(tar) {\\n\\t\\tlet currentTarget = tar;\\n\\t\\tlet isNotTakenOver = true;\\n\\t\\tlet attemptCounter = 0;\\n\\n\\t\\tif (ns.getServerNumPortsRequired <= 5 && attemptCounter < 50) {\\n\\t\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\n\\t\\t\\t\\tattemptCounter++;\\n\\t\\t\\t}\\n\\n\\t\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.15,\"server\":\"powerhouse-fitness\",\"moduleSequenceNumber\":1340,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}}],\"serversOnNetwork\":[\".\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":58,\"hackDifficulty\":58,\"minDifficulty\":19,\"moneyAvailable\":900000000,\"moneyMax\":22500000000,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1031,\"serverGrowth\":50}},\"snap-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-64709.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[185,70,14,42,108,40,68,111,194,28,55,160,29,67,70,180,113,162,147,72,16,37,50,171,82,150,13,131,48,24,14,60,185,33,47,16,172],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"snap-fitness\",\"httpPortOpen\":true,\"ip\":\"71.1.4.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Snap Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Returns an array of all hostnames in the network tree\\n * \\n * @param {string[]} myServers\\n * @param {number} safetyCounter Prevents infnite recursion\\n * @param {NS} ns\\n */\\nexport async function getServerList(myServers, safetyCounter, ns) {\\n\\tlet srvrsSeen = myServers;\\n\\tlet currServScanResult = [];\\n\\n\\tfor (let serverSeen in srvrsSeen) {\\n\\t\\tcurrServScanResult = ns.scan(srvrsSeen[serverSeen]);\\n\\t\\tfor (let entry in currServScanResult) {\\n\\t\\t\\tif (!srvrsSeen.includes(currServScanResult[entry])) {\\n\\t\\t\\t\\tsrvrsSeen.push(currServScanResult[entry]);\\n\\t\\t\\t\\tif ((++safetyCounter) < 250) {\\n\\t\\t\\t\\t\\tawait getServerList(srvrsSeen, safetyCounter, ns);\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tns.exit();\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\t//Filter out invalid values (NaN, null, {}, undefined)\\n\\tsrvrsSeen = srvrsSeen.filter(x => x);\\n\\treturn srvrsSeen;\\n}\\n\\n\\n/** \\n * \\tAttempts to take over target machine\\t\\n * \\n *  @param {string} target\\n * \\t@param {NS} ns\\n *  @return {boolean} outcome \\n**/\\nexport async function takeover(target, ns) {\\n\\tconst home = \\\"home\\\";\\n\\tlet currentTarget = target;\\n\\tlet isNotTakenOver = true;\\n\\tlet attemptCounter = 0;\\n\\n\\tlet scripts = ns.ls(home, \\\".js\\\");\\n\\t//scripts.push(ns.ls(home, \\\".ns\\\")); //in case of deprecated .ns scripts\\n\\n\\tns.tprint(scripts);\\n\\n\\n\\tif (!ns.hasRootAccess(currentTarget) && attemptCounter < 30) {\\n\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\ttry {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t} catch (error) {\\n\\t\\t\\t\\t\\tns.tprint(\\\"not enough ports to nuke \\\" + currentTarget);\\n\\t\\t\\t\\t\\treturn false;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t}\\n\\t\\t\\tattemptCounter++;\\n\\t\\t}\\n\\n\\t\\tawait ns.scp(scripts, home, currentTarget);\\n\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\",\"filename\":\"/modules/helper.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"snap-fitness\",\"moduleSequenceNumber\":1341,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.grow(target);\\n\\t}\\n}\",\"filename\":\"basic-grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"snap-fitness\",\"moduleSequenceNumber\":1342,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"basic-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"snap-fitness\",\"moduleSequenceNumber\":1343,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(target);\\n\\t}\\n}\",\"filename\":\"basic-weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"snap-fitness\",\"moduleSequenceNumber\":1344,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerList, takeover } from \\\"modules/helper.js\\\";\\n\\n/** @param {NS} ns **/\\n// TODO: unused + unfinished, based on setup.ns\\nexport async function main(ns) {\\n\\tconst myServers = [\\\"home\\\"];\\n\\n\\tvar servers = await getServerList(myServers, 0, ns);\\n\\n\\tfor (let entry in servers) {\\t\\n\\t\\tawait takeover(servers[entry], ns);\\n\\t}\\n}\",\"filename\":\"deep-setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"snap-fitness\",\"moduleSequenceNumber\":1345,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\t//\\n}\",\"filename\":\"formulas-testing.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"snap-fitness\",\"moduleSequenceNumber\":1346,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tconst currentMachine = ns.getHostname();\\n\\tvar servers = ns.scan(currentMachine);\\n\\tvar scripts = ns.ls(home, \\\"basic-\\\");\\n\\n\\tns.tprint(\\\"Host:  \\\" + currentMachine);\\n\\tfor (let entry in servers) {\\t// depth 0\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\t// depth 1\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== home && subservers.length > 1) {\\n\\t\\t\\t\\tns.tprint(\\\"-----> \\\" + subservers[subentry]);\\n\\t\\t\\t\\tlet subserversd2 = ns.scan(subservers[subentry]); // depth 2\\n\\t\\t\\t\\tfor (let subentryd2 in subserversd2) {\\n\\t\\t\\t\\t\\tif (subserversd2[subentryd2] !== subservers[subentry] && subserversd2[subentryd2] !== servers[entry] && subserversd2.length > 1) {\\n\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------> \\\" + subserversd2[subentryd2]);\\n\\t\\t\\t\\t\\t\\tlet subserversd3 = ns.scan(subserversd2[subentryd2]);\\t// depth 3\\n\\t\\t\\t\\t\\t\\tfor (let subentryd3 in subserversd3) {\\n\\t\\t\\t\\t\\t\\t\\tif (subserversd3[subentryd3] !== subserversd2[subentryd2] && subserversd3[subentryd3] !== subservers[subentry] && subserversd3.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------> \\\" + subserversd3[subentryd3]);\\n\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd4 = ns.scan(subserversd3[subentryd3]);\\t// depth 4\\n\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd4 in subserversd4) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd4[subentryd4] !== subserversd3[subentryd3] && subserversd4[subentryd4] !== subserversd2[subentryd2] && subserversd4.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------------> \\\" + subserversd4[subentryd4]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd5 = ns.scan(subserversd4[subentryd4]);\\t// depth 5\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd5 in subserversd5) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd5[subentryd5] !== subserversd4[subentryd4] && subserversd5[subentryd5] !== subserversd3[subentryd3] && subserversd5.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-------------------------> \\\" + subserversd5[subentryd5]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd6 = ns.scan(subserversd5[subentryd5]);\\t// depth 6\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd6 in subserversd6) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd6[subentryd6] !== subserversd5[subentryd5] && subserversd6[subentryd6] !== subserversd4[subentryd4] && subserversd6.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"------------------------------> \\\" + subserversd6[subentryd6]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd7 = ns.scan(subserversd6[subentryd6]);\\t// depth 7\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor(let subentryd7 in subserversd7) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd7[subentryd7] !== subserversd6[subentryd6] && subserversd7[subentryd7] !== subserversd5[subentryd5] && subserversd7.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-----------------------------------> \\\" + subserversd7[subentryd7]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"gigascan.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.05,\"server\":\"snap-fitness\",\"moduleSequenceNumber\":1347,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet targetRam = ns.getServerMaxRam(ns.args[0]);\\n\\tlet scriptMem = ns.getScriptRam(ns.args[1]);\\n\\n\\tns.tprint(\\\"Maximum possible threads for \\\" + ns.args[1] + \\\": \\\" + Math.floor(targetRam / scriptMem));\\n\\tns.exit;\\n}\",\"filename\":\"ram-usage.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"snap-fitness\",\"moduleSequenceNumber\":1348,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerList } from \\\"modules/helper.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet serversSeen = [\\\"home\\\"]; // home + bought servers\\n\\tlet contractList = [];\\n\\n\\tserversSeen = await getServerList(serversSeen, 0, ns);\\n\\n\\tns.tprint(serversSeen);\\n}\",\"filename\":\"search-coding-contracts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"snap-fitness\",\"moduleSequenceNumber\":1349,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tvar servers = ns.scan(home);\\n\\tvar scripts = ns.ls(home, \\\".ns\\\");\\n\\n\\tfor (let entry in scripts) {\\n\\t\\tns.tprint(\\\"found script: \\\" + scripts[entry]);\\n\\t}\\n\\n\\t// Hack servers (!!! depth = 2 !!!) if needed and populate with scripts\\n\\tfor (let entry in servers) {\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== \\\"home\\\") {\\n\\t\\t\\t\\tns.tprint(\\\"----->   \\\" + subservers[subentry]);\\n\\t\\t\\t\\tif (!ns.hasRootAccess(subservers[subentry])) {\\n\\t\\t\\t\\t\\ttakeover(subservers[subentry]);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tns.tprint(\\\"copying scripts to \\\" + subservers[subentry]);\\n\\t\\t\\t\\tawait ns.scp(scripts, home, subservers[subentry]);\\n\\t\\t\\t\\t//await ns.scp(\\\"setup.ns\\\", home, subservers[subentry]);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (!ns.hasRootAccess(servers[entry])) {\\n\\t\\t\\ttakeover(servers[entry]);\\n\\t\\t}\\n\\t\\tns.tprint(\\\"copying scripts to \\\" + servers[entry]);\\n\\t\\tawait ns.scp(scripts, home, servers[entry]);\\n\\t\\t//await ns.scp(\\\"setup.ns\\\", home, servers[entry]);\\n\\t}\\n\\n\\t/** \\n\\t * \\tAttempts to take over target machine\\t\\n\\t * \\n\\t *  @param {string} tar\\n\\t *  @return {boolean} outcome \\n\\t**/\\n\\tasync function takeover(tar) {\\n\\t\\tlet currentTarget = tar;\\n\\t\\tlet isNotTakenOver = true;\\n\\t\\tlet attemptCounter = 0;\\n\\n\\t\\tif (ns.getServerNumPortsRequired <= 5 && attemptCounter < 50) {\\n\\t\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\n\\t\\t\\t\\tattemptCounter++;\\n\\t\\t\\t}\\n\\n\\t\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.15,\"server\":\"snap-fitness\",\"moduleSequenceNumber\":1350,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}}],\"serversOnNetwork\":[\"millenium-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":44,\"hackDifficulty\":44,\"minDifficulty\":15,\"moneyAvailable\":450000000,\"moneyMax\":11250000000,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":710,\"serverGrowth\":58}},\"run4theh111z\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-411048.cct\",\"type\":\"Sanitize Parentheses in Expression\",\"data\":\"((()a)\",\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"run4theh111z\",\"httpPortOpen\":true,\"ip\":\"11.3.0.0\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[\"simulated-reality.lit\",\"the-new-god.lit\"],\"organizationName\":\"The Runners\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Returns an array of all hostnames in the network tree\\n * \\n * @param {string[]} myServers\\n * @param {number} safetyCounter Prevents infnite recursion\\n * @param {NS} ns\\n */\\nexport async function getServerList(myServers, safetyCounter, ns) {\\n\\tlet srvrsSeen = myServers;\\n\\tlet currServScanResult = [];\\n\\n\\tfor (let serverSeen in srvrsSeen) {\\n\\t\\tcurrServScanResult = ns.scan(srvrsSeen[serverSeen]);\\n\\t\\tfor (let entry in currServScanResult) {\\n\\t\\t\\tif (!srvrsSeen.includes(currServScanResult[entry])) {\\n\\t\\t\\t\\tsrvrsSeen.push(currServScanResult[entry]);\\n\\t\\t\\t\\tif ((++safetyCounter) < 250) {\\n\\t\\t\\t\\t\\tawait getServerList(srvrsSeen, safetyCounter, ns);\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tns.exit();\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\t//Filter out invalid values (NaN, null, {}, undefined)\\n\\tsrvrsSeen = srvrsSeen.filter(x => x);\\n\\treturn srvrsSeen;\\n}\\n\\n\\n/** \\n * \\tAttempts to take over target machine\\t\\n * \\n *  @param {string} target\\n * \\t@param {NS} ns\\n *  @return {boolean} outcome \\n**/\\nexport async function takeover(target, ns) {\\n\\tconst home = \\\"home\\\";\\n\\tlet currentTarget = target;\\n\\tlet isNotTakenOver = true;\\n\\tlet attemptCounter = 0;\\n\\n\\tlet scripts = ns.ls(home, \\\".js\\\");\\n\\t//scripts.push(ns.ls(home, \\\".ns\\\")); //in case of deprecated .ns scripts\\n\\n\\tns.tprint(scripts);\\n\\n\\n\\tif (!ns.hasRootAccess(currentTarget) && attemptCounter < 30) {\\n\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\ttry {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t} catch (error) {\\n\\t\\t\\t\\t\\tns.tprint(\\\"not enough ports to nuke \\\" + currentTarget);\\n\\t\\t\\t\\t\\treturn false;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t}\\n\\t\\t\\tattemptCounter++;\\n\\t\\t}\\n\\n\\t\\tawait ns.scp(scripts, home, currentTarget);\\n\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\",\"filename\":\"/modules/helper.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":1351,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.grow(target);\\n\\t}\\n}\",\"filename\":\"basic-grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":1352,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"basic-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":1353,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(target);\\n\\t}\\n}\",\"filename\":\"basic-weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":1354,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerList, takeover } from \\\"modules/helper.js\\\";\\n\\n/** @param {NS} ns **/\\n// TODO: unused + unfinished, based on setup.ns\\nexport async function main(ns) {\\n\\tconst myServers = [\\\"home\\\"];\\n\\n\\tvar servers = await getServerList(myServers, 0, ns);\\n\\n\\tfor (let entry in servers) {\\t\\n\\t\\tawait takeover(servers[entry], ns);\\n\\t}\\n}\",\"filename\":\"deep-setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":1355,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\t//\\n}\",\"filename\":\"formulas-testing.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":1356,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tconst currentMachine = ns.getHostname();\\n\\tvar servers = ns.scan(currentMachine);\\n\\tvar scripts = ns.ls(home, \\\"basic-\\\");\\n\\n\\tns.tprint(\\\"Host:  \\\" + currentMachine);\\n\\tfor (let entry in servers) {\\t// depth 0\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\t// depth 1\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== home && subservers.length > 1) {\\n\\t\\t\\t\\tns.tprint(\\\"-----> \\\" + subservers[subentry]);\\n\\t\\t\\t\\tlet subserversd2 = ns.scan(subservers[subentry]); // depth 2\\n\\t\\t\\t\\tfor (let subentryd2 in subserversd2) {\\n\\t\\t\\t\\t\\tif (subserversd2[subentryd2] !== subservers[subentry] && subserversd2[subentryd2] !== servers[entry] && subserversd2.length > 1) {\\n\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------> \\\" + subserversd2[subentryd2]);\\n\\t\\t\\t\\t\\t\\tlet subserversd3 = ns.scan(subserversd2[subentryd2]);\\t// depth 3\\n\\t\\t\\t\\t\\t\\tfor (let subentryd3 in subserversd3) {\\n\\t\\t\\t\\t\\t\\t\\tif (subserversd3[subentryd3] !== subserversd2[subentryd2] && subserversd3[subentryd3] !== subservers[subentry] && subserversd3.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------> \\\" + subserversd3[subentryd3]);\\n\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd4 = ns.scan(subserversd3[subentryd3]);\\t// depth 4\\n\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd4 in subserversd4) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd4[subentryd4] !== subserversd3[subentryd3] && subserversd4[subentryd4] !== subserversd2[subentryd2] && subserversd4.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------------> \\\" + subserversd4[subentryd4]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd5 = ns.scan(subserversd4[subentryd4]);\\t// depth 5\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd5 in subserversd5) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd5[subentryd5] !== subserversd4[subentryd4] && subserversd5[subentryd5] !== subserversd3[subentryd3] && subserversd5.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-------------------------> \\\" + subserversd5[subentryd5]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd6 = ns.scan(subserversd5[subentryd5]);\\t// depth 6\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd6 in subserversd6) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd6[subentryd6] !== subserversd5[subentryd5] && subserversd6[subentryd6] !== subserversd4[subentryd4] && subserversd6.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"------------------------------> \\\" + subserversd6[subentryd6]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd7 = ns.scan(subserversd6[subentryd6]);\\t// depth 7\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor(let subentryd7 in subserversd7) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd7[subentryd7] !== subserversd6[subentryd6] && subserversd7[subentryd7] !== subserversd5[subentryd5] && subserversd7.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-----------------------------------> \\\" + subserversd7[subentryd7]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"gigascan.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.05,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":1357,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet targetRam = ns.getServerMaxRam(ns.args[0]);\\n\\tlet scriptMem = ns.getScriptRam(ns.args[1]);\\n\\n\\tns.tprint(\\\"Maximum possible threads for \\\" + ns.args[1] + \\\": \\\" + Math.floor(targetRam / scriptMem));\\n\\tns.exit;\\n}\",\"filename\":\"ram-usage.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":1358,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerList } from \\\"modules/helper.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet serversSeen = [\\\"home\\\"]; // home + bought servers\\n\\tlet contractList = [];\\n\\n\\tserversSeen = await getServerList(serversSeen, 0, ns);\\n\\n\\tns.tprint(serversSeen);\\n}\",\"filename\":\"search-coding-contracts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":1359,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tvar servers = ns.scan(home);\\n\\tvar scripts = ns.ls(home, \\\".ns\\\");\\n\\n\\tfor (let entry in scripts) {\\n\\t\\tns.tprint(\\\"found script: \\\" + scripts[entry]);\\n\\t}\\n\\n\\t// Hack servers (!!! depth = 2 !!!) if needed and populate with scripts\\n\\tfor (let entry in servers) {\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== \\\"home\\\") {\\n\\t\\t\\t\\tns.tprint(\\\"----->   \\\" + subservers[subentry]);\\n\\t\\t\\t\\tif (!ns.hasRootAccess(subservers[subentry])) {\\n\\t\\t\\t\\t\\ttakeover(subservers[subentry]);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tns.tprint(\\\"copying scripts to \\\" + subservers[subentry]);\\n\\t\\t\\t\\tawait ns.scp(scripts, home, subservers[subentry]);\\n\\t\\t\\t\\t//await ns.scp(\\\"setup.ns\\\", home, subservers[subentry]);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (!ns.hasRootAccess(servers[entry])) {\\n\\t\\t\\ttakeover(servers[entry]);\\n\\t\\t}\\n\\t\\tns.tprint(\\\"copying scripts to \\\" + servers[entry]);\\n\\t\\tawait ns.scp(scripts, home, servers[entry]);\\n\\t\\t//await ns.scp(\\\"setup.ns\\\", home, servers[entry]);\\n\\t}\\n\\n\\t/** \\n\\t * \\tAttempts to take over target machine\\t\\n\\t * \\n\\t *  @param {string} tar\\n\\t *  @return {boolean} outcome \\n\\t**/\\n\\tasync function takeover(tar) {\\n\\t\\tlet currentTarget = tar;\\n\\t\\tlet isNotTakenOver = true;\\n\\t\\tlet attemptCounter = 0;\\n\\n\\t\\tif (ns.getServerNumPortsRequired <= 5 && attemptCounter < 50) {\\n\\t\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\n\\t\\t\\t\\tattemptCounter++;\\n\\t\\t\\t}\\n\\n\\t\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.15,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":1360,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}}],\"serversOnNetwork\":[\"zb-def\",\"stormtech\",\"helios\",\"vitalife\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":0,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":540,\"serverGrowth\":0}},\"I.I.I.I\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-561224-CentralIntelligenceAgency.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[43,20,87,84,129,30,64,67,3,101,89,97,159,141,80,190,113,178,96,78,111,99,93,97,151,154,125,144,139,177,132,42,186,130,111,136,158,1,18,84,9,167,145,118,177,95,92,10,45,87],\"reward\":{\"name\":\"Central Intelligence Agency\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"I.I.I.I\",\"httpPortOpen\":true,\"ip\":\"52.9.3.7\",\"isConnectedTo\":true,\"maxRam\":64,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"I.I.I.I\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Returns an array of all hostnames in the network tree\\n * \\n * @param {string[]} myServers\\n * @param {number} safetyCounter Prevents infnite recursion\\n * @param {NS} ns\\n */\\nexport async function getServerList(myServers, safetyCounter, ns) {\\n\\tlet srvrsSeen = myServers;\\n\\tlet currServScanResult = [];\\n\\n\\tfor (let serverSeen in srvrsSeen) {\\n\\t\\tcurrServScanResult = ns.scan(srvrsSeen[serverSeen]);\\n\\t\\tfor (let entry in currServScanResult) {\\n\\t\\t\\tif (!srvrsSeen.includes(currServScanResult[entry])) {\\n\\t\\t\\t\\tsrvrsSeen.push(currServScanResult[entry]);\\n\\t\\t\\t\\tif ((++safetyCounter) < 250) {\\n\\t\\t\\t\\t\\tawait getServerList(srvrsSeen, safetyCounter, ns);\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tns.exit();\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\t//Filter out invalid values (NaN, null, {}, undefined)\\n\\tsrvrsSeen = srvrsSeen.filter(x => x);\\n\\treturn srvrsSeen;\\n}\\n\\n\\n/** \\n * \\tAttempts to take over target machine\\t\\n * \\n *  @param {string} target\\n * \\t@param {NS} ns\\n *  @return {boolean} outcome \\n**/\\nexport async function takeover(target, ns) {\\n\\tconst home = \\\"home\\\";\\n\\tlet currentTarget = target;\\n\\tlet isNotTakenOver = true;\\n\\tlet attemptCounter = 0;\\n\\n\\tlet scripts = ns.ls(home, \\\".js\\\");\\n\\t//scripts.push(ns.ls(home, \\\".ns\\\")); //in case of deprecated .ns scripts\\n\\n\\tns.tprint(scripts);\\n\\n\\n\\tif (!ns.hasRootAccess(currentTarget) && attemptCounter < 30) {\\n\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\ttry {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t} catch (error) {\\n\\t\\t\\t\\t\\tns.tprint(\\\"not enough ports to nuke \\\" + currentTarget);\\n\\t\\t\\t\\t\\treturn false;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t}\\n\\t\\t\\tattemptCounter++;\\n\\t\\t}\\n\\n\\t\\tawait ns.scp(scripts, home, currentTarget);\\n\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\",\"filename\":\"/modules/helper.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":1361,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.grow(target);\\n\\t}\\n}\",\"filename\":\"basic-grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":1362,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"basic-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":1363,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(target);\\n\\t}\\n}\",\"filename\":\"basic-weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":1364,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerList, takeover } from \\\"modules/helper.js\\\";\\n\\n/** @param {NS} ns **/\\n// TODO: unused + unfinished, based on setup.ns\\nexport async function main(ns) {\\n\\tconst myServers = [\\\"home\\\"];\\n\\n\\tvar servers = await getServerList(myServers, 0, ns);\\n\\n\\tfor (let entry in servers) {\\t\\n\\t\\tawait takeover(servers[entry], ns);\\n\\t}\\n}\",\"filename\":\"deep-setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":1365,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\t//\\n}\",\"filename\":\"formulas-testing.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":1366,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tconst currentMachine = ns.getHostname();\\n\\tvar servers = ns.scan(currentMachine);\\n\\tvar scripts = ns.ls(home, \\\"basic-\\\");\\n\\n\\tns.tprint(\\\"Host:  \\\" + currentMachine);\\n\\tfor (let entry in servers) {\\t// depth 0\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\t// depth 1\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== home && subservers.length > 1) {\\n\\t\\t\\t\\tns.tprint(\\\"-----> \\\" + subservers[subentry]);\\n\\t\\t\\t\\tlet subserversd2 = ns.scan(subservers[subentry]); // depth 2\\n\\t\\t\\t\\tfor (let subentryd2 in subserversd2) {\\n\\t\\t\\t\\t\\tif (subserversd2[subentryd2] !== subservers[subentry] && subserversd2[subentryd2] !== servers[entry] && subserversd2.length > 1) {\\n\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------> \\\" + subserversd2[subentryd2]);\\n\\t\\t\\t\\t\\t\\tlet subserversd3 = ns.scan(subserversd2[subentryd2]);\\t// depth 3\\n\\t\\t\\t\\t\\t\\tfor (let subentryd3 in subserversd3) {\\n\\t\\t\\t\\t\\t\\t\\tif (subserversd3[subentryd3] !== subserversd2[subentryd2] && subserversd3[subentryd3] !== subservers[subentry] && subserversd3.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------> \\\" + subserversd3[subentryd3]);\\n\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd4 = ns.scan(subserversd3[subentryd3]);\\t// depth 4\\n\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd4 in subserversd4) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd4[subentryd4] !== subserversd3[subentryd3] && subserversd4[subentryd4] !== subserversd2[subentryd2] && subserversd4.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------------> \\\" + subserversd4[subentryd4]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd5 = ns.scan(subserversd4[subentryd4]);\\t// depth 5\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd5 in subserversd5) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd5[subentryd5] !== subserversd4[subentryd4] && subserversd5[subentryd5] !== subserversd3[subentryd3] && subserversd5.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-------------------------> \\\" + subserversd5[subentryd5]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd6 = ns.scan(subserversd5[subentryd5]);\\t// depth 6\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd6 in subserversd6) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd6[subentryd6] !== subserversd5[subentryd5] && subserversd6[subentryd6] !== subserversd4[subentryd4] && subserversd6.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"------------------------------> \\\" + subserversd6[subentryd6]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd7 = ns.scan(subserversd6[subentryd6]);\\t// depth 7\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor(let subentryd7 in subserversd7) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd7[subentryd7] !== subserversd6[subentryd6] && subserversd7[subentryd7] !== subserversd5[subentryd5] && subserversd7.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-----------------------------------> \\\" + subserversd7[subentryd7]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"gigascan.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.05,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":1367,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet targetRam = ns.getServerMaxRam(ns.args[0]);\\n\\tlet scriptMem = ns.getScriptRam(ns.args[1]);\\n\\n\\tns.tprint(\\\"Maximum possible threads for \\\" + ns.args[1] + \\\": \\\" + Math.floor(targetRam / scriptMem));\\n\\tns.exit;\\n}\",\"filename\":\"ram-usage.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":1368,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerList } from \\\"modules/helper.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet serversSeen = [\\\"home\\\"]; // home + bought servers\\n\\tlet contractList = [];\\n\\n\\tserversSeen = await getServerList(serversSeen, 0, ns);\\n\\n\\tns.tprint(serversSeen);\\n}\",\"filename\":\"search-coding-contracts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":1369,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tvar servers = ns.scan(home);\\n\\tvar scripts = ns.ls(home, \\\".ns\\\");\\n\\n\\tfor (let entry in scripts) {\\n\\t\\tns.tprint(\\\"found script: \\\" + scripts[entry]);\\n\\t}\\n\\n\\t// Hack servers (!!! depth = 2 !!!) if needed and populate with scripts\\n\\tfor (let entry in servers) {\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== \\\"home\\\") {\\n\\t\\t\\t\\tns.tprint(\\\"----->   \\\" + subservers[subentry]);\\n\\t\\t\\t\\tif (!ns.hasRootAccess(subservers[subentry])) {\\n\\t\\t\\t\\t\\ttakeover(subservers[subentry]);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tns.tprint(\\\"copying scripts to \\\" + subservers[subentry]);\\n\\t\\t\\t\\tawait ns.scp(scripts, home, subservers[subentry]);\\n\\t\\t\\t\\t//await ns.scp(\\\"setup.ns\\\", home, subservers[subentry]);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (!ns.hasRootAccess(servers[entry])) {\\n\\t\\t\\ttakeover(servers[entry]);\\n\\t\\t}\\n\\t\\tns.tprint(\\\"copying scripts to \\\" + servers[entry]);\\n\\t\\tawait ns.scp(scripts, home, servers[entry]);\\n\\t\\t//await ns.scp(\\\"setup.ns\\\", home, servers[entry]);\\n\\t}\\n\\n\\t/** \\n\\t * \\tAttempts to take over target machine\\t\\n\\t * \\n\\t *  @param {string} tar\\n\\t *  @return {boolean} outcome \\n\\t**/\\n\\tasync function takeover(tar) {\\n\\t\\tlet currentTarget = tar;\\n\\t\\tlet isNotTakenOver = true;\\n\\t\\tlet attemptCounter = 0;\\n\\n\\t\\tif (ns.getServerNumPortsRequired <= 5 && attemptCounter < 50) {\\n\\t\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\n\\t\\t\\t\\tattemptCounter++;\\n\\t\\t\\t}\\n\\n\\t\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.15,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":1370,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}}],\"serversOnNetwork\":[\"netlink\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":0,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":363,\"serverGrowth\":0}},\"avmnite-02h\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-29001.cct\",\"type\":\"Total Ways to Sum\",\"data\":59,\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"avmnite-02h\",\"httpPortOpen\":false,\"ip\":\"7.4.8.9\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"NiteSec\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Returns an array of all hostnames in the network tree\\n * \\n * @param {string[]} serversSeen\\n * @param {number} safetyCounter Prevents infnite recursion\\n * @param {NS} ns\\n */\\nexport async function getServerList(serversSeen, safetyCounter, ns) {\\n\\tlet srvrsSeen = serversSeen;\\n\\tlet currServScanResult = [];\\n\\n\\tfor (let serverSeen in srvrsSeen) {\\n\\t\\tcurrServScanResult = ns.scan(srvrsSeen[serverSeen]);\\n\\t\\tfor (let entry in currServScanResult) {\\n\\t\\t\\tif (!srvrsSeen.includes(currServScanResult[entry])) {\\n\\t\\t\\t\\tsrvrsSeen.push(currServScanResult[entry]);\\n\\t\\t\\t\\tif ((++safetyCounter) < 250) {\\n\\t\\t\\t\\t\\tawait getServerList(srvrsSeen, safetyCounter, ns);\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tns.exit();\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\t//Filter out invalid values (NaN, null, {}, undefined)\\n\\tsrvrsSeen = srvrsSeen.filter(x => x);\\n\\treturn srvrsSeen;\\n}\\n\\n\\n/** \\n * \\tAttempts to take over target machine\\t\\n * \\n *  @param {string} target\\n * \\t@param {NS} ns\\n *  @return {boolean} outcome \\n**/\\nexport async function takeover(target, ns) {\\n\\tconst home = \\\"home\\\";\\n\\tlet currentTarget = target;\\n\\tlet isNotTakenOver = true;\\n\\tlet attemptCounter = 0;\\n\\n\\tlet scripts = ns.ls(home, \\\".ns\\\");\\n\\tscripts.push(ns.ls(home, \\\".js\\\"));\\n\\n\\tif (!ns.hasRootAccess(currentTarget) && attemptCounter < 30) {\\n\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\ttry {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t} catch (error) {\\n\\t\\t\\t\\t\\tns.tprint(\\\"not enough ports to nuke \\\" + currentTarget);\\n\\t\\t\\t\\t\\treturn false;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t}\\n\\t\\t\\tattemptCounter++;\\n\\t\\t}\\n\\n\\t\\tawait ns.scp(scripts, home, currentTarget);\\n\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\",\"filename\":\"/modules/helper.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":1371,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.grow(target);\\n\\t}\\n}\",\"filename\":\"basic-grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":1372,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"basic-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":1373,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(target);\\n\\t}\\n}\",\"filename\":\"basic-weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":1374,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerList, takeover } from \\\"modules/helper.js\\\";\\n\\n/** @param {NS} ns **/\\n// TODO: unused + unfinished, based on setup.ns\\nexport async function main(ns) {\\n\\tconst myServers = [\\\"home\\\"];\\n\\n\\tvar servers = await getServerList(myServers, 0, ns);\\n\\n\\tfor (let entry in servers) {\\t\\n\\t\\tawait takeover(servers[entry], ns);\\n\\t}\\n}\",\"filename\":\"deep-setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":1375,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\t//\\n}\",\"filename\":\"formulas-testing.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":1376,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tconst currentMachine = ns.getHostname();\\n\\tvar servers = ns.scan(currentMachine);\\n\\tvar scripts = ns.ls(home, \\\"basic-\\\");\\n\\n\\tns.tprint(\\\"Host:  \\\" + currentMachine);\\n\\tfor (let entry in servers) {\\t// depth 0\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\t// depth 1\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== home && subservers.length > 1) {\\n\\t\\t\\t\\tns.tprint(\\\"-----> \\\" + subservers[subentry]);\\n\\t\\t\\t\\tlet subserversd2 = ns.scan(subservers[subentry]); // depth 2\\n\\t\\t\\t\\tfor (let subentryd2 in subserversd2) {\\n\\t\\t\\t\\t\\tif (subserversd2[subentryd2] !== subservers[subentry] && subserversd2[subentryd2] !== servers[entry] && subserversd2.length > 1) {\\n\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------> \\\" + subserversd2[subentryd2]);\\n\\t\\t\\t\\t\\t\\tlet subserversd3 = ns.scan(subserversd2[subentryd2]);\\t// depth 3\\n\\t\\t\\t\\t\\t\\tfor (let subentryd3 in subserversd3) {\\n\\t\\t\\t\\t\\t\\t\\tif (subserversd3[subentryd3] !== subserversd2[subentryd2] && subserversd3[subentryd3] !== subservers[subentry] && subserversd3.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------> \\\" + subserversd3[subentryd3]);\\n\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd4 = ns.scan(subserversd3[subentryd3]);\\t// depth 4\\n\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd4 in subserversd4) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd4[subentryd4] !== subserversd3[subentryd3] && subserversd4[subentryd4] !== subserversd2[subentryd2] && subserversd4.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------------> \\\" + subserversd4[subentryd4]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd5 = ns.scan(subserversd4[subentryd4]);\\t// depth 5\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd5 in subserversd5) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd5[subentryd5] !== subserversd4[subentryd4] && subserversd5[subentryd5] !== subserversd3[subentryd3] && subserversd5.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-------------------------> \\\" + subserversd5[subentryd5]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd6 = ns.scan(subserversd5[subentryd5]);\\t// depth 6\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd6 in subserversd6) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd6[subentryd6] !== subserversd5[subentryd5] && subserversd6[subentryd6] !== subserversd4[subentryd4] && subserversd6.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"------------------------------> \\\" + subserversd6[subentryd6]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd7 = ns.scan(subserversd6[subentryd6]);\\t// depth 7\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor(let subentryd7 in subserversd7) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd7[subentryd7] !== subserversd6[subentryd6] && subserversd7[subentryd7] !== subserversd5[subentryd5] && subserversd7.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-----------------------------------> \\\" + subserversd7[subentryd7]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"gigascan.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.05,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":1377,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet targetRam = ns.getServerMaxRam(ns.args[0]);\\n\\tlet scriptMem = ns.getScriptRam(ns.args[1]);\\n\\n\\tns.tprint(\\\"Maximum possible threads for \\\" + ns.args[1] + \\\": \\\" + Math.floor(targetRam / scriptMem));\\n\\tns.exit;\\n}\",\"filename\":\"ram-usage.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":1378,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerList } from \\\"modules/helper.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet serversSeen = [\\\"home\\\"]; // home + bought servers\\n\\tlet contractList = [];\\n\\n\\tserversSeen = await getServerList(serversSeen, 0, ns);\\n\\n\\tns.tprint(serversSeen);\\n}\",\"filename\":\"search-coding-contracts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":1379,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tvar servers = ns.scan(home);\\n\\tvar scripts = ns.ls(home, \\\".ns\\\");\\n\\n\\tfor (let entry in scripts) {\\n\\t\\tns.tprint(\\\"found script: \\\" + scripts[entry]);\\n\\t}\\n\\n\\t// Hack servers (!!! depth = 2 !!!) if needed and populate with scripts\\n\\tfor (let entry in servers) {\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== \\\"home\\\") {\\n\\t\\t\\t\\tns.tprint(\\\"----->   \\\" + subservers[subentry]);\\n\\t\\t\\t\\tif (!ns.hasRootAccess(subservers[subentry])) {\\n\\t\\t\\t\\t\\ttakeover(subservers[subentry]);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tns.tprint(\\\"copying scripts to \\\" + subservers[subentry]);\\n\\t\\t\\t\\tawait ns.scp(scripts, home, subservers[subentry]);\\n\\t\\t\\t\\t//await ns.scp(\\\"setup.ns\\\", home, subservers[subentry]);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (!ns.hasRootAccess(servers[entry])) {\\n\\t\\t\\ttakeover(servers[entry]);\\n\\t\\t}\\n\\t\\tns.tprint(\\\"copying scripts to \\\" + servers[entry]);\\n\\t\\tawait ns.scp(scripts, home, servers[entry]);\\n\\t\\t//await ns.scp(\\\"setup.ns\\\", home, servers[entry]);\\n\\t}\\n\\n\\t/** \\n\\t * \\tAttempts to take over target machine\\t\\n\\t * \\n\\t *  @param {string} tar\\n\\t *  @return {boolean} outcome \\n\\t**/\\n\\tasync function takeover(tar) {\\n\\t\\tlet currentTarget = tar;\\n\\t\\tlet isNotTakenOver = true;\\n\\t\\tlet attemptCounter = 0;\\n\\n\\t\\tif (ns.getServerNumPortsRequired <= 5 && attemptCounter < 50) {\\n\\t\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\n\\t\\t\\t\\tattemptCounter++;\\n\\t\\t\\t}\\n\\n\\t\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.15,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":1380,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}}],\"serversOnNetwork\":[\"silver-helix\",\"zb-institute\",\"syscore\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":220,\"serverGrowth\":0}},\".\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-546952.cct\",\"type\":\"Array Jumping Game\",\"data\":[0,4,3,1,4,3,10,3,9,0,3,5],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\".\",\"httpPortOpen\":true,\"ip\":\"7.8.4.5\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\".\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Returns an array of all hostnames in the network tree\\n * \\n * @param {string[]} myServers\\n * @param {number} safetyCounter Prevents infnite recursion\\n * @param {NS} ns\\n */\\nexport async function getServerList(myServers, safetyCounter, ns) {\\n\\tlet srvrsSeen = myServers;\\n\\tlet currServScanResult = [];\\n\\n\\tfor (let serverSeen in srvrsSeen) {\\n\\t\\tcurrServScanResult = ns.scan(srvrsSeen[serverSeen]);\\n\\t\\tfor (let entry in currServScanResult) {\\n\\t\\t\\tif (!srvrsSeen.includes(currServScanResult[entry])) {\\n\\t\\t\\t\\tsrvrsSeen.push(currServScanResult[entry]);\\n\\t\\t\\t\\tif ((++safetyCounter) < 250) {\\n\\t\\t\\t\\t\\tawait getServerList(srvrsSeen, safetyCounter, ns);\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tns.exit();\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\t//Filter out invalid values (NaN, null, {}, undefined)\\n\\tsrvrsSeen = srvrsSeen.filter(x => x);\\n\\treturn srvrsSeen;\\n}\\n\\n\\n/** \\n * \\tAttempts to take over target machine\\t\\n * \\n *  @param {string} target\\n * \\t@param {NS} ns\\n *  @return {boolean} outcome \\n**/\\nexport async function takeover(target, ns) {\\n\\tconst home = \\\"home\\\";\\n\\tlet currentTarget = target;\\n\\tlet isNotTakenOver = true;\\n\\tlet attemptCounter = 0;\\n\\n\\tlet scripts = ns.ls(home, \\\".js\\\");\\n\\t//scripts.push(ns.ls(home, \\\".ns\\\")); //in case of deprecated .ns scripts\\n\\n\\tns.tprint(scripts);\\n\\n\\n\\tif (!ns.hasRootAccess(currentTarget) && attemptCounter < 30) {\\n\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\ttry {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t} catch (error) {\\n\\t\\t\\t\\t\\tns.tprint(\\\"not enough ports to nuke \\\" + currentTarget);\\n\\t\\t\\t\\t\\treturn false;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t}\\n\\t\\t\\tattemptCounter++;\\n\\t\\t}\\n\\n\\t\\tawait ns.scp(scripts, home, currentTarget);\\n\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\",\"filename\":\"/modules/helper.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.05,\"server\":\".\",\"moduleSequenceNumber\":1381,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.grow(target);\\n\\t}\\n}\",\"filename\":\"basic-grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\".\",\"moduleSequenceNumber\":1382,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"basic-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\".\",\"moduleSequenceNumber\":1383,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(target);\\n\\t}\\n}\",\"filename\":\"basic-weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\".\",\"moduleSequenceNumber\":1384,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerList, takeover } from \\\"modules/helper.js\\\";\\n\\n/** @param {NS} ns **/\\n// TODO: unused + unfinished, based on setup.ns\\nexport async function main(ns) {\\n\\tconst myServers = [\\\"home\\\"];\\n\\n\\tvar servers = await getServerList(myServers, 0, ns);\\n\\n\\tfor (let entry in servers) {\\t\\n\\t\\tawait takeover(servers[entry], ns);\\n\\t}\\n}\",\"filename\":\"deep-setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.05,\"server\":\".\",\"moduleSequenceNumber\":1385,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\t//\\n}\",\"filename\":\"formulas-testing.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\".\",\"moduleSequenceNumber\":1386,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tconst currentMachine = ns.getHostname();\\n\\tvar servers = ns.scan(currentMachine);\\n\\tvar scripts = ns.ls(home, \\\"basic-\\\");\\n\\n\\tns.tprint(\\\"Host:  \\\" + currentMachine);\\n\\tfor (let entry in servers) {\\t// depth 0\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\t// depth 1\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== home && subservers.length > 1) {\\n\\t\\t\\t\\tns.tprint(\\\"-----> \\\" + subservers[subentry]);\\n\\t\\t\\t\\tlet subserversd2 = ns.scan(subservers[subentry]); // depth 2\\n\\t\\t\\t\\tfor (let subentryd2 in subserversd2) {\\n\\t\\t\\t\\t\\tif (subserversd2[subentryd2] !== subservers[subentry] && subserversd2[subentryd2] !== servers[entry] && subserversd2.length > 1) {\\n\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------> \\\" + subserversd2[subentryd2]);\\n\\t\\t\\t\\t\\t\\tlet subserversd3 = ns.scan(subserversd2[subentryd2]);\\t// depth 3\\n\\t\\t\\t\\t\\t\\tfor (let subentryd3 in subserversd3) {\\n\\t\\t\\t\\t\\t\\t\\tif (subserversd3[subentryd3] !== subserversd2[subentryd2] && subserversd3[subentryd3] !== subservers[subentry] && subserversd3.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------> \\\" + subserversd3[subentryd3]);\\n\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd4 = ns.scan(subserversd3[subentryd3]);\\t// depth 4\\n\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd4 in subserversd4) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd4[subentryd4] !== subserversd3[subentryd3] && subserversd4[subentryd4] !== subserversd2[subentryd2] && subserversd4.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------------> \\\" + subserversd4[subentryd4]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd5 = ns.scan(subserversd4[subentryd4]);\\t// depth 5\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd5 in subserversd5) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd5[subentryd5] !== subserversd4[subentryd4] && subserversd5[subentryd5] !== subserversd3[subentryd3] && subserversd5.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-------------------------> \\\" + subserversd5[subentryd5]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd6 = ns.scan(subserversd5[subentryd5]);\\t// depth 6\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd6 in subserversd6) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd6[subentryd6] !== subserversd5[subentryd5] && subserversd6[subentryd6] !== subserversd4[subentryd4] && subserversd6.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"------------------------------> \\\" + subserversd6[subentryd6]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd7 = ns.scan(subserversd6[subentryd6]);\\t// depth 7\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor(let subentryd7 in subserversd7) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd7[subentryd7] !== subserversd6[subentryd6] && subserversd7[subentryd7] !== subserversd5[subentryd5] && subserversd7.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-----------------------------------> \\\" + subserversd7[subentryd7]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"gigascan.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.05,\"server\":\".\",\"moduleSequenceNumber\":1387,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet targetRam = ns.getServerMaxRam(ns.args[0]);\\n\\tlet scriptMem = ns.getScriptRam(ns.args[1]);\\n\\n\\tns.tprint(\\\"Maximum possible threads for \\\" + ns.args[1] + \\\": \\\" + Math.floor(targetRam / scriptMem));\\n\\tns.exit;\\n}\",\"filename\":\"ram-usage.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\".\",\"moduleSequenceNumber\":1388,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerList } from \\\"modules/helper.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet serversSeen = [\\\"home\\\"]; // home + bought servers\\n\\tlet contractList = [];\\n\\n\\tserversSeen = await getServerList(serversSeen, 0, ns);\\n\\n\\tns.tprint(serversSeen);\\n}\",\"filename\":\"search-coding-contracts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\".\",\"moduleSequenceNumber\":1389,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tvar servers = ns.scan(home);\\n\\tvar scripts = ns.ls(home, \\\".ns\\\");\\n\\n\\tfor (let entry in scripts) {\\n\\t\\tns.tprint(\\\"found script: \\\" + scripts[entry]);\\n\\t}\\n\\n\\t// Hack servers (!!! depth = 2 !!!) if needed and populate with scripts\\n\\tfor (let entry in servers) {\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== \\\"home\\\") {\\n\\t\\t\\t\\tns.tprint(\\\"----->   \\\" + subservers[subentry]);\\n\\t\\t\\t\\tif (!ns.hasRootAccess(subservers[subentry])) {\\n\\t\\t\\t\\t\\ttakeover(subservers[subentry]);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tns.tprint(\\\"copying scripts to \\\" + subservers[subentry]);\\n\\t\\t\\t\\tawait ns.scp(scripts, home, subservers[subentry]);\\n\\t\\t\\t\\t//await ns.scp(\\\"setup.ns\\\", home, subservers[subentry]);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (!ns.hasRootAccess(servers[entry])) {\\n\\t\\t\\ttakeover(servers[entry]);\\n\\t\\t}\\n\\t\\tns.tprint(\\\"copying scripts to \\\" + servers[entry]);\\n\\t\\tawait ns.scp(scripts, home, servers[entry]);\\n\\t\\t//await ns.scp(\\\"setup.ns\\\", home, servers[entry]);\\n\\t}\\n\\n\\t/** \\n\\t * \\tAttempts to take over target machine\\t\\n\\t * \\n\\t *  @param {string} tar\\n\\t *  @return {boolean} outcome \\n\\t**/\\n\\tasync function takeover(tar) {\\n\\t\\tlet currentTarget = tar;\\n\\t\\tlet isNotTakenOver = true;\\n\\t\\tlet attemptCounter = 0;\\n\\n\\t\\tif (ns.getServerNumPortsRequired <= 5 && attemptCounter < 50) {\\n\\t\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\n\\t\\t\\t\\tattemptCounter++;\\n\\t\\t\\t}\\n\\n\\t\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.15,\"server\":\".\",\"moduleSequenceNumber\":1390,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}}],\"serversOnNetwork\":[\"stormtech\",\"powerhouse-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":534,\"serverGrowth\":0}},\"CSEC\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"CSEC\",\"httpPortOpen\":false,\"ip\":\"3.3.1.9\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"CyberSec\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Returns an array of all hostnames in the network tree\\n * \\n * @param {string[]} serversSeen\\n * @param {number} safetyCounter Prevents infnite recursion\\n * @param {NS} ns\\n */\\nexport async function getServerList(serversSeen, safetyCounter, ns) {\\n\\tlet srvrsSeen = serversSeen;\\n\\tlet currServScanResult = [];\\n\\n\\tfor (let serverSeen in srvrsSeen) {\\n\\t\\tcurrServScanResult = ns.scan(srvrsSeen[serverSeen]);\\n\\t\\tfor (let entry in currServScanResult) {\\n\\t\\t\\tif (!srvrsSeen.includes(currServScanResult[entry])) {\\n\\t\\t\\t\\tsrvrsSeen.push(currServScanResult[entry]);\\n\\t\\t\\t\\tif ((++safetyCounter) < 250) {\\n\\t\\t\\t\\t\\tawait getServerList(srvrsSeen, safetyCounter, ns);\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tns.exit();\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\t//Filter out invalid values (NaN, null, {}, undefined)\\n\\tsrvrsSeen = srvrsSeen.filter(x => x);\\n\\treturn srvrsSeen;\\n}\\n\\n\\n/** \\n * \\tAttempts to take over target machine\\t\\n * \\n *  @param {string} target\\n * \\t@param {NS} ns\\n *  @return {boolean} outcome \\n**/\\nexport async function takeover(target, ns) {\\n\\tconst home = \\\"home\\\";\\n\\tlet currentTarget = target;\\n\\tlet isNotTakenOver = true;\\n\\tlet attemptCounter = 0;\\n\\n\\tlet scripts = ns.ls(home, \\\".ns\\\");\\n\\tscripts.push(ns.ls(home, \\\".js\\\"));\\n\\n\\tif (!ns.hasRootAccess(currentTarget) && attemptCounter < 30) {\\n\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\ttry {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t} catch (error) {\\n\\t\\t\\t\\t\\tns.tprint(\\\"not enough ports to nuke \\\" + currentTarget);\\n\\t\\t\\t\\t\\treturn false;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t}\\n\\t\\t\\tattemptCounter++;\\n\\t\\t}\\n\\n\\t\\tawait ns.scp(scripts, home, currentTarget);\\n\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\",\"filename\":\"/modules/helper.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"CSEC\",\"moduleSequenceNumber\":1391,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.grow(target);\\n\\t}\\n}\",\"filename\":\"basic-grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"CSEC\",\"moduleSequenceNumber\":1392,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"basic-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"CSEC\",\"moduleSequenceNumber\":1393,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(target);\\n\\t}\\n}\",\"filename\":\"basic-weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"CSEC\",\"moduleSequenceNumber\":1394,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerList, takeover } from \\\"modules/helper.js\\\";\\n\\n/** @param {NS} ns **/\\n// TODO: unused + unfinished, based on setup.ns\\nexport async function main(ns) {\\n\\tconst myServers = [\\\"home\\\"];\\n\\n\\tvar servers = await getServerList(myServers, 0, ns);\\n\\n\\tfor (let entry in servers) {\\t\\n\\t\\tawait takeover(servers[entry], ns);\\n\\t}\\n}\",\"filename\":\"deep-setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"CSEC\",\"moduleSequenceNumber\":1395,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\t//\\n}\",\"filename\":\"formulas-testing.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"CSEC\",\"moduleSequenceNumber\":1396,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tconst currentMachine = ns.getHostname();\\n\\tvar servers = ns.scan(currentMachine);\\n\\tvar scripts = ns.ls(home, \\\"basic-\\\");\\n\\n\\tns.tprint(\\\"Host:  \\\" + currentMachine);\\n\\tfor (let entry in servers) {\\t// depth 0\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\t// depth 1\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== home && subservers.length > 1) {\\n\\t\\t\\t\\tns.tprint(\\\"-----> \\\" + subservers[subentry]);\\n\\t\\t\\t\\tlet subserversd2 = ns.scan(subservers[subentry]); // depth 2\\n\\t\\t\\t\\tfor (let subentryd2 in subserversd2) {\\n\\t\\t\\t\\t\\tif (subserversd2[subentryd2] !== subservers[subentry] && subserversd2[subentryd2] !== servers[entry] && subserversd2.length > 1) {\\n\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------> \\\" + subserversd2[subentryd2]);\\n\\t\\t\\t\\t\\t\\tlet subserversd3 = ns.scan(subserversd2[subentryd2]);\\t// depth 3\\n\\t\\t\\t\\t\\t\\tfor (let subentryd3 in subserversd3) {\\n\\t\\t\\t\\t\\t\\t\\tif (subserversd3[subentryd3] !== subserversd2[subentryd2] && subserversd3[subentryd3] !== subservers[subentry] && subserversd3.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------> \\\" + subserversd3[subentryd3]);\\n\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd4 = ns.scan(subserversd3[subentryd3]);\\t// depth 4\\n\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd4 in subserversd4) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd4[subentryd4] !== subserversd3[subentryd3] && subserversd4[subentryd4] !== subserversd2[subentryd2] && subserversd4.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------------> \\\" + subserversd4[subentryd4]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd5 = ns.scan(subserversd4[subentryd4]);\\t// depth 5\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd5 in subserversd5) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd5[subentryd5] !== subserversd4[subentryd4] && subserversd5[subentryd5] !== subserversd3[subentryd3] && subserversd5.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-------------------------> \\\" + subserversd5[subentryd5]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd6 = ns.scan(subserversd5[subentryd5]);\\t// depth 6\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd6 in subserversd6) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd6[subentryd6] !== subserversd5[subentryd5] && subserversd6[subentryd6] !== subserversd4[subentryd4] && subserversd6.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"------------------------------> \\\" + subserversd6[subentryd6]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd7 = ns.scan(subserversd6[subentryd6]);\\t// depth 7\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor(let subentryd7 in subserversd7) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd7[subentryd7] !== subserversd6[subentryd6] && subserversd7[subentryd7] !== subserversd5[subentryd5] && subserversd7.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-----------------------------------> \\\" + subserversd7[subentryd7]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"gigascan.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.05,\"server\":\"CSEC\",\"moduleSequenceNumber\":1397,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet targetRam = ns.getServerMaxRam(ns.args[0]);\\n\\tlet scriptMem = ns.getScriptRam(ns.args[1]);\\n\\n\\tns.tprint(\\\"Maximum possible threads for \\\" + ns.args[1] + \\\": \\\" + Math.floor(targetRam / scriptMem));\\n\\tns.exit;\\n}\",\"filename\":\"ram-usage.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"CSEC\",\"moduleSequenceNumber\":1398,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerList } from \\\"modules/helper.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet serversSeen = [\\\"home\\\"]; // home + bought servers\\n\\tlet contractList = [];\\n\\n\\tserversSeen = await getServerList(serversSeen, 0, ns);\\n\\n\\tns.tprint(serversSeen);\\n}\",\"filename\":\"search-coding-contracts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"CSEC\",\"moduleSequenceNumber\":1399,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tvar servers = ns.scan(home);\\n\\tvar scripts = ns.ls(home, \\\".ns\\\");\\n\\n\\tfor (let entry in scripts) {\\n\\t\\tns.tprint(\\\"found script: \\\" + scripts[entry]);\\n\\t}\\n\\n\\t// Hack servers (!!! depth = 2 !!!) if needed and populate with scripts\\n\\tfor (let entry in servers) {\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== \\\"home\\\") {\\n\\t\\t\\t\\tns.tprint(\\\"----->   \\\" + subservers[subentry]);\\n\\t\\t\\t\\tif (!ns.hasRootAccess(subservers[subentry])) {\\n\\t\\t\\t\\t\\ttakeover(subservers[subentry]);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tns.tprint(\\\"copying scripts to \\\" + subservers[subentry]);\\n\\t\\t\\t\\tawait ns.scp(scripts, home, subservers[subentry]);\\n\\t\\t\\t\\t//await ns.scp(\\\"setup.ns\\\", home, subservers[subentry]);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (!ns.hasRootAccess(servers[entry])) {\\n\\t\\t\\ttakeover(servers[entry]);\\n\\t\\t}\\n\\t\\tns.tprint(\\\"copying scripts to \\\" + servers[entry]);\\n\\t\\tawait ns.scp(scripts, home, servers[entry]);\\n\\t\\t//await ns.scp(\\\"setup.ns\\\", home, servers[entry]);\\n\\t}\\n\\n\\t/** \\n\\t * \\tAttempts to take over target machine\\t\\n\\t * \\n\\t *  @param {string} tar\\n\\t *  @return {boolean} outcome \\n\\t**/\\n\\tasync function takeover(tar) {\\n\\t\\tlet currentTarget = tar;\\n\\t\\tlet isNotTakenOver = true;\\n\\t\\tlet attemptCounter = 0;\\n\\n\\t\\tif (ns.getServerNumPortsRequired <= 5 && attemptCounter < 50) {\\n\\t\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\n\\t\\t\\t\\tattemptCounter++;\\n\\t\\t\\t}\\n\\n\\t\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.15,\"server\":\"CSEC\",\"moduleSequenceNumber\":1400,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}}],\"serversOnNetwork\":[\"iron-gym\",\"neo-net\",\"silver-helix\",\"omega-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":1,\"openPortCount\":2,\"requiredHackingSkill\":56,\"serverGrowth\":0}},\"The-Cave\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-933345.cct\",\"type\":\"Sanitize Parentheses in Expression\",\"data\":\"((()()))((()())()((a\",\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"The-Cave\",\"httpPortOpen\":true,\"ip\":\"2.2.8.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"alpha-omega.lit\"],\"organizationName\":\"Helios\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Returns an array of all hostnames in the network tree\\n * \\n * @param {string[]} myServers\\n * @param {number} safetyCounter Prevents infnite recursion\\n * @param {NS} ns\\n */\\nexport async function getServerList(myServers, safetyCounter, ns) {\\n\\tlet srvrsSeen = myServers;\\n\\tlet currServScanResult = [];\\n\\n\\tfor (let serverSeen in srvrsSeen) {\\n\\t\\tcurrServScanResult = ns.scan(srvrsSeen[serverSeen]);\\n\\t\\tfor (let entry in currServScanResult) {\\n\\t\\t\\tif (!srvrsSeen.includes(currServScanResult[entry])) {\\n\\t\\t\\t\\tsrvrsSeen.push(currServScanResult[entry]);\\n\\t\\t\\t\\tif ((++safetyCounter) < 250) {\\n\\t\\t\\t\\t\\tawait getServerList(srvrsSeen, safetyCounter, ns);\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tns.exit();\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\t//Filter out invalid values (NaN, null, {}, undefined)\\n\\tsrvrsSeen = srvrsSeen.filter(x => x);\\n\\treturn srvrsSeen;\\n}\\n\\n\\n/** \\n * \\tAttempts to take over target machine\\t\\n * \\n *  @param {string} target\\n * \\t@param {NS} ns\\n *  @return {boolean} outcome \\n**/\\nexport async function takeover(target, ns) {\\n\\tconst home = \\\"home\\\";\\n\\tlet currentTarget = target;\\n\\tlet isNotTakenOver = true;\\n\\tlet attemptCounter = 0;\\n\\n\\tlet scripts = ns.ls(home, \\\".js\\\");\\n\\t//scripts.push(ns.ls(home, \\\".ns\\\")); //in case of deprecated .ns scripts\\n\\n\\tns.tprint(scripts);\\n\\n\\n\\tif (!ns.hasRootAccess(currentTarget) && attemptCounter < 30) {\\n\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\ttry {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t} catch (error) {\\n\\t\\t\\t\\t\\tns.tprint(\\\"not enough ports to nuke \\\" + currentTarget);\\n\\t\\t\\t\\t\\treturn false;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t}\\n\\t\\t\\tattemptCounter++;\\n\\t\\t}\\n\\n\\t\\tawait ns.scp(scripts, home, currentTarget);\\n\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\",\"filename\":\"/modules/helper.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"The-Cave\",\"moduleSequenceNumber\":1401,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.grow(target);\\n\\t}\\n}\",\"filename\":\"basic-grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"The-Cave\",\"moduleSequenceNumber\":1402,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"basic-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"The-Cave\",\"moduleSequenceNumber\":1403,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(target);\\n\\t}\\n}\",\"filename\":\"basic-weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"The-Cave\",\"moduleSequenceNumber\":1404,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerList, takeover } from \\\"modules/helper.js\\\";\\n\\n/** @param {NS} ns **/\\n// TODO: unused + unfinished, based on setup.ns\\nexport async function main(ns) {\\n\\tconst myServers = [\\\"home\\\"];\\n\\n\\tvar servers = await getServerList(myServers, 0, ns);\\n\\n\\tfor (let entry in servers) {\\t\\n\\t\\tawait takeover(servers[entry], ns);\\n\\t}\\n}\",\"filename\":\"deep-setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"The-Cave\",\"moduleSequenceNumber\":1405,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\t//\\n}\",\"filename\":\"formulas-testing.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"The-Cave\",\"moduleSequenceNumber\":1406,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tconst currentMachine = ns.getHostname();\\n\\tvar servers = ns.scan(currentMachine);\\n\\tvar scripts = ns.ls(home, \\\"basic-\\\");\\n\\n\\tns.tprint(\\\"Host:  \\\" + currentMachine);\\n\\tfor (let entry in servers) {\\t// depth 0\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\t// depth 1\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== home && subservers.length > 1) {\\n\\t\\t\\t\\tns.tprint(\\\"-----> \\\" + subservers[subentry]);\\n\\t\\t\\t\\tlet subserversd2 = ns.scan(subservers[subentry]); // depth 2\\n\\t\\t\\t\\tfor (let subentryd2 in subserversd2) {\\n\\t\\t\\t\\t\\tif (subserversd2[subentryd2] !== subservers[subentry] && subserversd2[subentryd2] !== servers[entry] && subserversd2.length > 1) {\\n\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------> \\\" + subserversd2[subentryd2]);\\n\\t\\t\\t\\t\\t\\tlet subserversd3 = ns.scan(subserversd2[subentryd2]);\\t// depth 3\\n\\t\\t\\t\\t\\t\\tfor (let subentryd3 in subserversd3) {\\n\\t\\t\\t\\t\\t\\t\\tif (subserversd3[subentryd3] !== subserversd2[subentryd2] && subserversd3[subentryd3] !== subservers[subentry] && subserversd3.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------> \\\" + subserversd3[subentryd3]);\\n\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd4 = ns.scan(subserversd3[subentryd3]);\\t// depth 4\\n\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd4 in subserversd4) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd4[subentryd4] !== subserversd3[subentryd3] && subserversd4[subentryd4] !== subserversd2[subentryd2] && subserversd4.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------------> \\\" + subserversd4[subentryd4]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd5 = ns.scan(subserversd4[subentryd4]);\\t// depth 5\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd5 in subserversd5) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd5[subentryd5] !== subserversd4[subentryd4] && subserversd5[subentryd5] !== subserversd3[subentryd3] && subserversd5.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-------------------------> \\\" + subserversd5[subentryd5]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd6 = ns.scan(subserversd5[subentryd5]);\\t// depth 6\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd6 in subserversd6) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd6[subentryd6] !== subserversd5[subentryd5] && subserversd6[subentryd6] !== subserversd4[subentryd4] && subserversd6.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"------------------------------> \\\" + subserversd6[subentryd6]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd7 = ns.scan(subserversd6[subentryd6]);\\t// depth 7\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor(let subentryd7 in subserversd7) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd7[subentryd7] !== subserversd6[subentryd6] && subserversd7[subentryd7] !== subserversd5[subentryd5] && subserversd7.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-----------------------------------> \\\" + subserversd7[subentryd7]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"gigascan.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.05,\"server\":\"The-Cave\",\"moduleSequenceNumber\":1407,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet targetRam = ns.getServerMaxRam(ns.args[0]);\\n\\tlet scriptMem = ns.getScriptRam(ns.args[1]);\\n\\n\\tns.tprint(\\\"Maximum possible threads for \\\" + ns.args[1] + \\\": \\\" + Math.floor(targetRam / scriptMem));\\n\\tns.exit;\\n}\",\"filename\":\"ram-usage.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"The-Cave\",\"moduleSequenceNumber\":1408,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerList } from \\\"modules/helper.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet serversSeen = [\\\"home\\\"]; // home + bought servers\\n\\tlet contractList = [];\\n\\n\\tserversSeen = await getServerList(serversSeen, 0, ns);\\n\\n\\tns.tprint(serversSeen);\\n}\",\"filename\":\"search-coding-contracts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"The-Cave\",\"moduleSequenceNumber\":1409,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tvar servers = ns.scan(home);\\n\\tvar scripts = ns.ls(home, \\\".ns\\\");\\n\\n\\tfor (let entry in scripts) {\\n\\t\\tns.tprint(\\\"found script: \\\" + scripts[entry]);\\n\\t}\\n\\n\\t// Hack servers (!!! depth = 2 !!!) if needed and populate with scripts\\n\\tfor (let entry in servers) {\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== \\\"home\\\") {\\n\\t\\t\\t\\tns.tprint(\\\"----->   \\\" + subservers[subentry]);\\n\\t\\t\\t\\tif (!ns.hasRootAccess(subservers[subentry])) {\\n\\t\\t\\t\\t\\ttakeover(subservers[subentry]);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tns.tprint(\\\"copying scripts to \\\" + subservers[subentry]);\\n\\t\\t\\t\\tawait ns.scp(scripts, home, subservers[subentry]);\\n\\t\\t\\t\\t//await ns.scp(\\\"setup.ns\\\", home, subservers[subentry]);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (!ns.hasRootAccess(servers[entry])) {\\n\\t\\t\\ttakeover(servers[entry]);\\n\\t\\t}\\n\\t\\tns.tprint(\\\"copying scripts to \\\" + servers[entry]);\\n\\t\\tawait ns.scp(scripts, home, servers[entry]);\\n\\t\\t//await ns.scp(\\\"setup.ns\\\", home, servers[entry]);\\n\\t}\\n\\n\\t/** \\n\\t * \\tAttempts to take over target machine\\t\\n\\t * \\n\\t *  @param {string} tar\\n\\t *  @return {boolean} outcome \\n\\t**/\\n\\tasync function takeover(tar) {\\n\\t\\tlet currentTarget = tar;\\n\\t\\tlet isNotTakenOver = true;\\n\\t\\tlet attemptCounter = 0;\\n\\n\\t\\tif (ns.getServerNumPortsRequired <= 5 && attemptCounter < 50) {\\n\\t\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\n\\t\\t\\t\\tattemptCounter++;\\n\\t\\t\\t}\\n\\n\\t\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.15,\"server\":\"The-Cave\",\"moduleSequenceNumber\":1410,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}}],\"serversOnNetwork\":[\"blade\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":925,\"serverGrowth\":0}},\"w0r1d_d43m0n\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"w0r1d_d43m0n\",\"httpPortOpen\":false,\"ip\":\"10.7.2.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"w0r1d_d43m0n\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":3000,\"serverGrowth\":0}},\"darkweb\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"darkweb\",\"httpPortOpen\":true,\"ip\":\"91.7.7.2\",\"isConnectedTo\":false,\"maxRam\":1,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Returns an array of all hostnames in the network tree\\n * \\n * @param {string[]} serversSeen\\n * @param {number} safetyCounter Prevents infnite recursion\\n * @param {NS} ns\\n */\\nexport async function getServerList(serversSeen, safetyCounter, ns) {\\n\\tlet srvrsSeen = serversSeen;\\n\\tlet currServScanResult = [];\\n\\n\\tfor (let serverSeen in srvrsSeen) {\\n\\t\\tcurrServScanResult = ns.scan(srvrsSeen[serverSeen]);\\n\\t\\tfor (let entry in currServScanResult) {\\n\\t\\t\\tif (!srvrsSeen.includes(currServScanResult[entry])) {\\n\\t\\t\\t\\tsrvrsSeen.push(currServScanResult[entry]);\\n\\t\\t\\t\\tif ((++safetyCounter) < 250) {\\n\\t\\t\\t\\t\\tawait getServerList(srvrsSeen, safetyCounter, ns);\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tns.exit();\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\t//Filter out invalid values (NaN, null, {}, undefined)\\n\\tsrvrsSeen = srvrsSeen.filter(x => x);\\n\\treturn srvrsSeen;\\n}\\n\\n\\n/** \\n * \\tAttempts to take over target machine\\t\\n * \\n *  @param {string} target\\n * \\t@param {NS} ns\\n *  @return {boolean} outcome \\n**/\\nexport async function takeover(target, ns) {\\n\\tconst home = \\\"home\\\";\\n\\tlet currentTarget = target;\\n\\tlet isNotTakenOver = true;\\n\\tlet attemptCounter = 0;\\n\\n\\tlet scripts = ns.ls(home, \\\".js\\\");\\n\\tscripts.push(ns.ls(home, \\\".ns\\\")); //in case of deprecated .ns scripts\\n\\n\\tif (!ns.hasRootAccess(currentTarget) && attemptCounter < 30) {\\n\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\ttry {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t} catch (error) {\\n\\t\\t\\t\\t\\tns.tprint(\\\"not enough ports to nuke \\\" + currentTarget);\\n\\t\\t\\t\\t\\treturn false;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t}\\n\\t\\t\\tattemptCounter++;\\n\\t\\t}\\n\\n\\t\\tawait ns.scp(scripts, home, currentTarget);\\n\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\",\"filename\":\"/modules/helper.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"darkweb\",\"moduleSequenceNumber\":1411,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.grow(target);\\n\\t}\\n}\",\"filename\":\"basic-grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"darkweb\",\"moduleSequenceNumber\":1412,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"basic-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"darkweb\",\"moduleSequenceNumber\":1413,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(target);\\n\\t}\\n}\",\"filename\":\"basic-weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"darkweb\",\"moduleSequenceNumber\":1414,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerList, takeover } from \\\"modules/helper.js\\\";\\n\\n/** @param {NS} ns **/\\n// TODO: unused + unfinished, based on setup.ns\\nexport async function main(ns) {\\n\\tconst myServers = [\\\"home\\\"];\\n\\n\\tvar servers = await getServerList(myServers, 0, ns);\\n\\n\\tfor (let entry in servers) {\\t\\n\\t\\tawait takeover(servers[entry], ns);\\n\\t}\\n}\",\"filename\":\"deep-setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"darkweb\",\"moduleSequenceNumber\":1415,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\t//\\n}\",\"filename\":\"formulas-testing.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"darkweb\",\"moduleSequenceNumber\":1416,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tconst currentMachine = ns.getHostname();\\n\\tvar servers = ns.scan(currentMachine);\\n\\tvar scripts = ns.ls(home, \\\"basic-\\\");\\n\\n\\tns.tprint(\\\"Host:  \\\" + currentMachine);\\n\\tfor (let entry in servers) {\\t// depth 0\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\t// depth 1\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== home && subservers.length > 1) {\\n\\t\\t\\t\\tns.tprint(\\\"-----> \\\" + subservers[subentry]);\\n\\t\\t\\t\\tlet subserversd2 = ns.scan(subservers[subentry]); // depth 2\\n\\t\\t\\t\\tfor (let subentryd2 in subserversd2) {\\n\\t\\t\\t\\t\\tif (subserversd2[subentryd2] !== subservers[subentry] && subserversd2[subentryd2] !== servers[entry] && subserversd2.length > 1) {\\n\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------> \\\" + subserversd2[subentryd2]);\\n\\t\\t\\t\\t\\t\\tlet subserversd3 = ns.scan(subserversd2[subentryd2]);\\t// depth 3\\n\\t\\t\\t\\t\\t\\tfor (let subentryd3 in subserversd3) {\\n\\t\\t\\t\\t\\t\\t\\tif (subserversd3[subentryd3] !== subserversd2[subentryd2] && subserversd3[subentryd3] !== subservers[subentry] && subserversd3.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------> \\\" + subserversd3[subentryd3]);\\n\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd4 = ns.scan(subserversd3[subentryd3]);\\t// depth 4\\n\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd4 in subserversd4) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd4[subentryd4] !== subserversd3[subentryd3] && subserversd4[subentryd4] !== subserversd2[subentryd2] && subserversd4.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------------> \\\" + subserversd4[subentryd4]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd5 = ns.scan(subserversd4[subentryd4]);\\t// depth 5\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd5 in subserversd5) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd5[subentryd5] !== subserversd4[subentryd4] && subserversd5[subentryd5] !== subserversd3[subentryd3] && subserversd5.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-------------------------> \\\" + subserversd5[subentryd5]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd6 = ns.scan(subserversd5[subentryd5]);\\t// depth 6\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd6 in subserversd6) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd6[subentryd6] !== subserversd5[subentryd5] && subserversd6[subentryd6] !== subserversd4[subentryd4] && subserversd6.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"------------------------------> \\\" + subserversd6[subentryd6]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd7 = ns.scan(subserversd6[subentryd6]);\\t// depth 7\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor(let subentryd7 in subserversd7) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd7[subentryd7] !== subserversd6[subentryd6] && subserversd7[subentryd7] !== subserversd5[subentryd5] && subserversd7.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-----------------------------------> \\\" + subserversd7[subentryd7]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"gigascan.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.05,\"server\":\"darkweb\",\"moduleSequenceNumber\":1417,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet targetRam = ns.getServerMaxRam(ns.args[0]);\\n\\tlet scriptMem = ns.getScriptRam(ns.args[1]);\\n\\n\\tns.tprint(\\\"Maximum possible threads for \\\" + ns.args[1] + \\\": \\\" + Math.floor(targetRam / scriptMem));\\n\\tns.exit;\\n}\",\"filename\":\"ram-usage.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"darkweb\",\"moduleSequenceNumber\":1418,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerList } from \\\"modules/helper.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet serversSeen = [\\\"home\\\"]; // home + bought servers\\n\\tlet contractList = [];\\n\\n\\tserversSeen = await getServerList(serversSeen, 0, ns);\\n\\n\\tns.tprint(serversSeen);\\n}\",\"filename\":\"search-coding-contracts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"darkweb\",\"moduleSequenceNumber\":1419,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tvar servers = ns.scan(home);\\n\\tvar scripts = ns.ls(home, \\\".ns\\\");\\n\\n\\tfor (let entry in scripts) {\\n\\t\\tns.tprint(\\\"found script: \\\" + scripts[entry]);\\n\\t}\\n\\n\\t// Hack servers (!!! depth = 2 !!!) if needed and populate with scripts\\n\\tfor (let entry in servers) {\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== \\\"home\\\") {\\n\\t\\t\\t\\tns.tprint(\\\"----->   \\\" + subservers[subentry]);\\n\\t\\t\\t\\tif (!ns.hasRootAccess(subservers[subentry])) {\\n\\t\\t\\t\\t\\ttakeover(subservers[subentry]);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tns.tprint(\\\"copying scripts to \\\" + subservers[subentry]);\\n\\t\\t\\t\\tawait ns.scp(scripts, home, subservers[subentry]);\\n\\t\\t\\t\\t//await ns.scp(\\\"setup.ns\\\", home, subservers[subentry]);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (!ns.hasRootAccess(servers[entry])) {\\n\\t\\t\\ttakeover(servers[entry]);\\n\\t\\t}\\n\\t\\tns.tprint(\\\"copying scripts to \\\" + servers[entry]);\\n\\t\\tawait ns.scp(scripts, home, servers[entry]);\\n\\t\\t//await ns.scp(\\\"setup.ns\\\", home, servers[entry]);\\n\\t}\\n\\n\\t/** \\n\\t * \\tAttempts to take over target machine\\t\\n\\t * \\n\\t *  @param {string} tar\\n\\t *  @return {boolean} outcome \\n\\t**/\\n\\tasync function takeover(tar) {\\n\\t\\tlet currentTarget = tar;\\n\\t\\tlet isNotTakenOver = true;\\n\\t\\tlet attemptCounter = 0;\\n\\n\\t\\tif (ns.getServerNumPortsRequired <= 5 && attemptCounter < 50) {\\n\\t\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\n\\t\\t\\t\\tattemptCounter++;\\n\\t\\t\\t}\\n\\n\\t\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.15,\"server\":\"darkweb\",\"moduleSequenceNumber\":1420,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1}}}","CompaniesSave":"{\"ECorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"ECorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"MegaCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"MegaCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Bachman & Associates\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Bachman & Associates\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.6,\"salaryMultiplier\":2.6,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Blade Industries\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Blade Industries\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"NWO\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NWO\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Clarke Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Clarke Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"OmniTek Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"OmniTek Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Four Sigma\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Four Sigma\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.5,\"salaryMultiplier\":2.5,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"KuaiGong International\":{\"ctor\":\"Company\",\"data\":{\"name\":\"KuaiGong International\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.2,\"salaryMultiplier\":2.2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Fulcrum Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Fulcrum Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Storm Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Storm Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"DefComm\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DefComm\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Helios Labs\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Helios Labs\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"VitaLife\":{\"ctor\":\"Company\",\"data\":{\"name\":\"VitaLife\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Icarus Microsystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Icarus Microsystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Universal Energy\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Universal Energy\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Galactic Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Galactic Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"AeroCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"AeroCorp\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Omnia Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omnia Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Solaris Space Systems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Solaris Space Systems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":15.391460434154054,\"favor\":4.0019,\"isMegacorp\":false}},\"DeltaOne\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DeltaOne\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.6,\"salaryMultiplier\":1.6,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Global Pharmaceuticals\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Global Pharmaceuticals\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Nova Medical\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Nova Medical\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Central Intelligence Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Central Intelligence Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":123056.6695722422,\"favor\":0.002,\"isMegacorp\":false}},\"National Security Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"National Security Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Watchdog Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Watchdog Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"LexoCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"LexoCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.4,\"salaryMultiplier\":1.4,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Rho Construction\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Rho Construction\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Alpha Enterprises\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Alpha Enterprises\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Aevum Police Headquarters\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Aevum Police Headquarters\",\"info\":\"\",\"companyPositions\":{\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"SysCore Securities\":{\"ctor\":\"Company\",\"data\":{\"name\":\"SysCore Securities\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"CompuTek\":{\"ctor\":\"Company\",\"data\":{\"name\":\"CompuTek\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"NetLink Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NetLink Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Carmichael Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Carmichael Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"FoodNStuff\":{\"ctor\":\"Company\",\"data\":{\"name\":\"FoodNStuff\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Joe's Guns\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Joe's Guns\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Omega Software\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omega Software\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true},\"expMultiplier\":1.1,\"salaryMultiplier\":1.1,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Noodle Bar\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Noodle Bar\",\"info\":\"\",\"companyPositions\":{\"Waiter\":true,\"Part-time Waiter\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}}}","FactionsSave":"{\"Illuminati\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"QLink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Illuminati\",\"playerReputation\":0}},\"Daedalus\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"The Red Pill\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Daedalus\",\"playerReputation\":0}},\"The Covenant\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib III\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"SPTN-97 Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Covenant\",\"playerReputation\":0}},\"ECorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"NeuroFlux Governor\",\"ECorp HVMind Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"ECorp\",\"playerReputation\":0}},\"MegaCorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"CordiARC Fusion Reactor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"MegaCorp\",\"playerReputation\":0}},\"Bachman & Associates\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"SmartJaw\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bachman & Associates\",\"playerReputation\":0}},\"Blade Industries\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"NeuroFlux Governor\",\"HyperSight Corneal Implant\",\"Neotra\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Blade Industries\",\"playerReputation\":0}},\"NWO\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"Neurotrainer III\",\"Power Recirculation Core\",\"Xanipher\",\"Hydroflame Left Arm\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"NWO\",\"playerReputation\":0}},\"Clarke Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Neuronal Densification\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"nextSENS Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Clarke Incorporated\",\"playerReputation\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"NeuroFlux Governor\",\"OmniTek InfoLoad\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"OmniTek Incorporated\",\"playerReputation\":0}},\"Four Sigma\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"PC Direct-Neural Interface\",\"ADR-V1 Pheromone Gene\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"Neurotrainer III\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Four Sigma\",\"playerReputation\":0}},\"KuaiGong International\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module Core V2 Upgrade\",\"Speech Enhancement\",\"FocusWire\",\"NeuroFlux Governor\",\"HyperSight Corneal Implant\",\"Photosynthetic Cells\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"KuaiGong International\",\"playerReputation\":0}},\"Fulcrum Secret Technologies\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface Optimization Submodule\",\"PC Direct-Neural Interface NeuroNet Injector\",\"NeuroFlux Governor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Fulcrum Secret Technologies\",\"playerReputation\":0}},\"BitRunners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Neural Accelerator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"Cranial Signal Processors - Gen V\",\"NeuroFlux Governor\",\"Neurotrainer II\",\"BitRunners Neurolink\"],\"favor\":1,\"isBanned\":false,\"isMember\":true,\"name\":\"BitRunners\",\"playerReputation\":1100359.9703282914}},\"The Black Hand\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Artificial Synaptic Potentiation\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Neuralstimulator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"NeuroFlux Governor\",\"The Black Hand\"],\"favor\":170.9813,\"isBanned\":false,\"isMember\":true,\"name\":\"The Black Hand\",\"playerReputation\":106218.6840875782}},\"NiteSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"BitWire\",\"Artificial Synaptic Potentiation\",\"Neural-Retention Enhancement\",\"DataJack\",\"Embedded Netburner Module\",\"Cranial Signal Processors - Gen II\",\"Cranial Signal Processors - Gen III\",\"NeuroFlux Governor\",\"Neurotrainer II\",\"CRTX42-AA Gene Modification\"],\"favor\":242.5568,\"isBanned\":false,\"isMember\":true,\"name\":\"NiteSec\",\"playerReputation\":3353743.5919497367}},\"Aevum\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Wired Reflexes\",\"Speech Processor Implant\",\"Synaptic Enhancement Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"Neurotrainer I\",\"PCMatrix\"],\"favor\":220.18200000000002,\"isBanned\":false,\"isMember\":false,\"name\":\"Aevum\",\"playerReputation\":0}},\"Chongqing\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"Neuregen Gene Modification\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Chongqing\",\"playerReputation\":0}},\"Ishima\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"INFRARET Enhancement\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Ishima\",\"playerReputation\":0}},\"New Tokyo\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"NutriGen Implant\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"New Tokyo\",\"playerReputation\":0}},\"Sector-12\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"CashRoot Starter Kit\"],\"favor\":230.0718,\"isBanned\":false,\"isMember\":true,\"name\":\"Sector-12\",\"playerReputation\":3232863.0555699784}},\"Volhaven\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Combat Rib I\",\"Combat Rib II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"DermaForce Particle Barrier\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Volhaven\",\"playerReputation\":0}},\"Speakers for the Dead\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Unstable Circadian Modulator\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"Speech Enhancement\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Graphene BrachiBlades Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Speakers for the Dead\",\"playerReputation\":0}},\"The Dark Army\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Wired Reflexes\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Power Recirculation Core\",\"Graphene Bionic Arms Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Dark Army\",\"playerReputation\":0}},\"The Syndicate\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"ADR-V1 Pheromone Gene\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Power Recirculation Core\",\"BrachiBlades\"],\"favor\":1.0114,\"isBanned\":false,\"isMember\":false,\"name\":\"The Syndicate\",\"playerReputation\":0}},\"Silhouette\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"TITN-41 Gene-Modification Injection\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Silhouette\",\"playerReputation\":0}},\"Tetrads\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"NeuroFlux Governor\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"Power Recirculation Core\",\"Bionic Arms\"],\"favor\":81.3989,\"isBanned\":false,\"isMember\":false,\"name\":\"Tetrads\",\"playerReputation\":0}},\"Slum Snakes\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"NeuroFlux Governor\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"SmartSonar Implant\"],\"favor\":65.6895,\"isBanned\":false,\"isMember\":false,\"name\":\"Slum Snakes\",\"playerReputation\":0}},\"Netburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Hacknet Node CPU Architecture Neural-Upload\",\"Hacknet Node Cache Architecture Neural-Upload\",\"Hacknet Node NIC Architecture Neural-Upload\",\"Hacknet Node Kernel Direct-Neural Interface\",\"Hacknet Node Core Direct-Neural Interface\",\"NeuroFlux Governor\"],\"favor\":222.211,\"isBanned\":false,\"isMember\":true,\"name\":\"Netburners\",\"playerReputation\":3156207.616097959}},\"Tian Di Hui\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Nanofiber Weave\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"Social Negotiation Assistant (S.N.A)\",\"Neuroreceptor Management Implant\"],\"favor\":177.8208,\"isBanned\":false,\"isMember\":true,\"name\":\"Tian Di Hui\",\"playerReputation\":2061465.649379442}},\"CyberSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"BitWire\",\"Synaptic Enhancement Implant\",\"Cranial Signal Processors - Gen I\",\"Cranial Signal Processors - Gen II\",\"NeuroFlux Governor\",\"Neurotrainer I\"],\"favor\":115.5499,\"isBanned\":false,\"isMember\":true,\"name\":\"CyberSec\",\"playerReputation\":2107000.457522328}},\"Bladeburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"EsperTech Bladeburner Eyewear\",\"EMS-4 Recombination\",\"ORION-MKIV Shoulder\",\"Hyperion Plasma Cannon V1\",\"Hyperion Plasma Cannon V2\",\"GOLEM Serum\",\"Vangelis Virus\",\"Vangelis Virus 3.0\",\"I.N.T.E.R.L.I.N.K.E.D\",\"Blade's Runners\",\"BLADE-51b Tesla Armor\",\"BLADE-51b Tesla Armor: Power Cells Upgrade\",\"BLADE-51b Tesla Armor: Energy Shielding Upgrade\",\"BLADE-51b Tesla Armor: Unibeam Upgrade\",\"BLADE-51b Tesla Armor: Omnibeam Upgrade\",\"BLADE-51b Tesla Armor: IPU Upgrade\",\"The Blade's Simulacrum\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bladeburners\",\"playerReputation\":0}},\"Church of the Machine God\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Stanek's Gift - Genesis\",\"Stanek's Gift - Awakening\",\"Stanek's Gift - Serenity\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Church of the Machine God\",\"playerReputation\":0}}}","AliasesSave":"{\"sa10\":\"scan-analyze 10\",\"sa5\":\"scan-analyze 5\",\"sa\":\"scan-analyze 10\",\"conn\":\"connect\"}","GlobalAliasesSave":"{}","MessagesSave":"{\"j0.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j0.msg\",\"msg\":\"I know you can sense it. I know you're searching for it. It's why you spend night after night at your computer. <br><br>It's real, I've seen it. And I can help you find it. But not right now. You're not ready yet.<br><br>Use this program to track your progress<br><br>The fl1ght.exe program was added to your home computer<br><br>-jump3R\",\"recvd\":true}},\"j1.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j1.msg\",\"msg\":\"Soon you will be contacted by a hacking group known as CyberSec. They can help you with your search. <br><br>You should join them, garner their favor, and exploit them for their Augmentations. But do not trust them. They are not what they seem. No one is.<br><br>-jump3R\",\"recvd\":true}},\"j2.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j2.msg\",\"msg\":\"Do not try to save the world. There is no world to save. If you want to find the truth, worry only about yourself. Ethics and morals will get you killed. <br><br>Watch out for a hacking group known as NiteSec.<br><br>-jump3R\",\"recvd\":true}},\"j3.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j3.msg\",\"msg\":\"You must learn to walk before you can run. And you must run before you can fly. Look for the black hand. <br><br>I.I.I.I <br><br>-jump3R\",\"recvd\":true}},\"j4.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j4.msg\",\"msg\":\"To find what you are searching for, you must understand the bits. The bits are all around us. The runners will help you.<br><br>-jump3R\",\"recvd\":true}},\"csec-test.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"csec-test.msg\",\"msg\":\"We've been watching you. Your skills are very impressive. But you're wasting your talents. If you join us, you can put your skills to good use and change the world for the better. If you join us, we can unlock your full potential. <br><br>But first, you must pass our test. Find and install the backdoor on our server. <br><br>-CyberSec\",\"recvd\":true}},\"nitesec-test.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"nitesec-test.msg\",\"msg\":\"People say that the corrupted governments and corporations rule the world. Yes, maybe they do. But do you know who everyone really fears? People like us. Because they can't hide from us. Because they can't fight shadows and ideas with bullets. <br><br>Join us, and people will fear you, too. <br><br>Find and install the backdoor on our server. Then, we will contact you again.<br><br>-NiteSec\",\"recvd\":true}},\"19dfj3l1nd.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"19dfj3l1nd.msg\",\"msg\":\"We know what you are doing. We know what drives you. We know what you are looking for. <br><br> We can help you find the answers.<br><br>run4theh111z\",\"recvd\":true}},\"icarus.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"icarus.msg\",\"msg\":\"@)(#V%*N)@(#*)*C)@#%*)*V)@#(*%V@)(#VN%*)@#(*%<br>)@B(*#%)@)M#B*%V)____FIND___#$@)#%(B*)@#(*%B)<br>@_#(%_@#M(BDSPOMB__THE-CAVE_#)$(*@#$)@#BNBEGB<br>DFLSMFVMV)#@($*)@#*$MV)@#(*$V)M#(*$)M@(#*VM$)\",\"recvd\":false}}}","StockMarketSave":"{\"ECorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"ECorp\",\"symbol\":\"ECP\",\"price\":20547.774980135928,\"lastPrice\":20534.92557046248,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.5,\"b\":true,\"otlkMag\":15.339347595367443,\"otlkMagForecast\":65.58887717234329,\"cap\":602223465,\"spreadPerc\":0.3,\"shareTxForMovement\":77673,\"shareTxUntilMovement\":77673,\"totalShares\":86900000,\"maxShares\":17400000}},\"MegaCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"MegaCorp\",\"symbol\":\"MGCP\",\"price\":8033.602591863142,\"lastPrice\":8037.724651201116,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.41,\"b\":false,\"otlkMag\":20.55423920620963,\"otlkMagForecast\":30.622038756666047,\"cap\":182212692,\"spreadPerc\":0.4,\"shareTxForMovement\":39777,\"shareTxUntilMovement\":39777,\"totalShares\":81700000,\"maxShares\":16300000}},\"Blade Industries\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Blade Industries\",\"symbol\":\"BLD\",\"price\":55743.5177448513,\"lastPrice\":55796.53631394233,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.76,\"b\":false,\"otlkMag\":13.688133583903904,\"otlkMagForecast\":37.04301776323692,\"cap\":319816043,\"spreadPerc\":0.5,\"shareTxForMovement\":89402,\"shareTxUntilMovement\":89402,\"totalShares\":67700000,\"maxShares\":13500000}},\"Clarke Incorporated\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Clarke Incorporated\",\"symbol\":\"CLRK\",\"price\":2006.4097408440682,\"lastPrice\":2008.1171931392532,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.68,\"b\":false,\"otlkMag\":14.762757774369424,\"otlkMagForecast\":33.56972733669394,\"cap\":374034497,\"spreadPerc\":0.2,\"shareTxForMovement\":35707,\"shareTxUntilMovement\":35707,\"totalShares\":95500000,\"maxShares\":19100000}},\"OmniTek Incorporated\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"OmniTek Incorporated\",\"symbol\":\"OMTK\",\"price\":15362.949266204265,\"lastPrice\":15350.46235981059,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.65,\"b\":true,\"otlkMag\":10.854613794395325,\"otlkMagForecast\":60.813348296459516,\"cap\":710782850,\"spreadPerc\":0.5,\"shareTxForMovement\":46631,\"shareTxUntilMovement\":46631,\"totalShares\":55600000,\"maxShares\":11100000}},\"Four Sigma\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Four Sigma\",\"symbol\":\"FSIG\",\"price\":93291.52031248236,\"lastPrice\":93170.25665318841,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.04,\"b\":false,\"otlkMag\":8.56809855855569,\"otlkMagForecast\":40.178099518883094,\"cap\":733205870,\"spreadPerc\":0.1,\"shareTxForMovement\":78832,\"shareTxUntilMovement\":78832,\"totalShares\":30800000,\"maxShares\":6200000}},\"KuaiGong International\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"KuaiGong International\",\"symbol\":\"KGI\",\"price\":117797.50402511124,\"lastPrice\":117679.68605757432,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.8,\"b\":true,\"otlkMag\":9.221961650445557,\"otlkMagForecast\":60.473926851161444,\"cap\":141303684,\"spreadPerc\":0.4,\"shareTxForMovement\":30351,\"shareTxUntilMovement\":30351,\"totalShares\":116500000,\"maxShares\":23300000}},\"Fulcrum Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Fulcrum Technologies\",\"symbol\":\"FLCM\",\"price\":459.77473655597623,\"lastPrice\":460.4709629973097,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.21,\"b\":false,\"otlkMag\":23.08853494753459,\"otlkMagForecast\":27.520553571849216,\"cap\":327634439,\"spreadPerc\":0.5,\"shareTxForMovement\":63906,\"shareTxUntilMovement\":63906,\"totalShares\":59000000,\"maxShares\":11800000}},\"Storm Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Storm Technologies\",\"symbol\":\"STM\",\"price\":17047.796614117913,\"lastPrice\":17029.042655909518,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.88,\"b\":false,\"otlkMag\":5.25619947964895,\"otlkMagForecast\":45.29476928704857,\"cap\":43691479,\"spreadPerc\":0.8,\"shareTxForMovement\":102834,\"shareTxUntilMovement\":102834,\"totalShares\":57700000,\"maxShares\":11500000}},\"DefComm\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"DefComm\",\"symbol\":\"DCOMM\",\"price\":1709.724158284318,\"lastPrice\":1711.072148177896,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.63,\"b\":false,\"otlkMag\":11.22645176208499,\"otlkMagForecast\":39.641144856670174,\"cap\":70395919,\"spreadPerc\":0.8,\"shareTxForMovement\":67325,\"shareTxUntilMovement\":67325,\"totalShares\":133300000,\"maxShares\":26700000}},\"Helios Labs\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Helios Labs\",\"symbol\":\"HLS\",\"price\":22001.797065178504,\"lastPrice\":22017.491766262396,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.57,\"b\":false,\"otlkMag\":8.056393635897928,\"otlkMagForecast\":40.74943690250661,\"cap\":319578535,\"spreadPerc\":0.4,\"shareTxForMovement\":97344,\"shareTxUntilMovement\":97344,\"totalShares\":47400000,\"maxShares\":9500000}},\"VitaLife\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"VitaLife\",\"symbol\":\"VITA\",\"price\":2511.7451302671816,\"lastPrice\":2513.9769234981795,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.71,\"b\":true,\"otlkMag\":8.442292554166107,\"otlkMagForecast\":58.01280915969044,\"cap\":69305763,\"spreadPerc\":0.6,\"shareTxForMovement\":56593,\"shareTxUntilMovement\":56593,\"totalShares\":103900000,\"maxShares\":20800000}},\"Icarus Microsystems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Icarus Microsystems\",\"symbol\":\"ICRS\",\"price\":30751.16415393068,\"lastPrice\":30777.718199165218,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.69,\"b\":true,\"otlkMag\":6.696107900565787,\"otlkMagForecast\":56.94048656047101,\"cap\":239783859,\"spreadPerc\":0.4,\"shareTxForMovement\":68714,\"shareTxUntilMovement\":68714,\"totalShares\":47200000,\"maxShares\":9400000}},\"Universal Energy\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Universal Energy\",\"symbol\":\"UNV\",\"price\":72999.04406353456,\"lastPrice\":73049.28987921556,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.55,\"b\":false,\"otlkMag\":9.349832910903743,\"otlkMagForecast\":39.64287789370854,\"cap\":324916812,\"spreadPerc\":0.4,\"shareTxForMovement\":36132,\"shareTxUntilMovement\":36132,\"totalShares\":36500000,\"maxShares\":7300000}},\"AeroCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"AeroCorp\",\"symbol\":\"AERO\",\"price\":50344.5114931217,\"lastPrice\":50381.68419948981,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.59,\"b\":true,\"otlkMag\":2.238032856647089,\"otlkMagForecast\":55.04661815836219,\"cap\":202815936,\"spreadPerc\":0.5,\"shareTxForMovement\":105310,\"shareTxUntilMovement\":105310,\"totalShares\":37800000,\"maxShares\":7600000}},\"Omnia Cybersystems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Omnia Cybersystems\",\"symbol\":\"OMN\",\"price\":40625.32012591269,\"lastPrice\":40590.26988010466,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.69,\"b\":false,\"otlkMag\":8.810937485688655,\"otlkMagForecast\":41.35283720359617,\"cap\":244612736,\"spreadPerc\":0.6,\"shareTxForMovement\":57000,\"shareTxUntilMovement\":57000,\"totalShares\":40800000,\"maxShares\":8200000}},\"Solaris Space Systems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Solaris Space Systems\",\"symbol\":\"SLRS\",\"price\":4991.994924488345,\"lastPrice\":4996.992785339792,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.8,\"b\":true,\"otlkMag\":11.902770185112482,\"otlkMagForecast\":62.990392553251404,\"cap\":320266785,\"spreadPerc\":0.6,\"shareTxForMovement\":116217,\"shareTxUntilMovement\":116217,\"totalShares\":41700000,\"maxShares\":8300000}},\"Global Pharmaceuticals\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Global Pharmaceuticals\",\"symbol\":\"GPH\",\"price\":6219.645465938433,\"lastPrice\":6214.978754611582,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.6,\"b\":false,\"otlkMag\":12.312705800694056,\"otlkMagForecast\":39.42618128009542,\"cap\":342134692,\"spreadPerc\":0.6,\"shareTxForMovement\":62829,\"shareTxUntilMovement\":62829,\"totalShares\":43300000,\"maxShares\":8700000}},\"Nova Medical\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Nova Medical\",\"symbol\":\"NVMD\",\"price\":28339.077056576345,\"lastPrice\":28365.676160353305,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.75,\"b\":true,\"otlkMag\":5.329604469681912,\"otlkMagForecast\":54.329017086266106,\"cap\":31600673,\"spreadPerc\":0.9,\"shareTxForMovement\":105133,\"shareTxUntilMovement\":105133,\"totalShares\":28300000,\"maxShares\":5700000}},\"Watchdog Security\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Watchdog Security\",\"symbol\":\"WDS\",\"price\":4951.213757886775,\"lastPrice\":4966.704482150075,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":2.5,\"b\":true,\"otlkMag\":5.4028628776363234,\"otlkMagForecast\":57.73728276514971,\"cap\":21298738,\"spreadPerc\":0.7,\"shareTxForMovement\":23586,\"shareTxUntilMovement\":23586,\"totalShares\":62200000,\"maxShares\":12400000}},\"LexoCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"LexoCorp\",\"symbol\":\"LXO\",\"price\":7640.155481317785,\"lastPrice\":7628.222378117552,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.25,\"b\":true,\"otlkMag\":6.410709387569517,\"otlkMagForecast\":54.79154746790589,\"cap\":100008110,\"spreadPerc\":1.1,\"shareTxForMovement\":87345,\"shareTxUntilMovement\":87345,\"totalShares\":53800000,\"maxShares\":10800000}},\"Rho Construction\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Rho Construction\",\"symbol\":\"RHOC\",\"price\":3082.418927635088,\"lastPrice\":3079.990584933905,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.63,\"b\":false,\"otlkMag\":5.512185894872932,\"otlkMagForecast\":44.038348591760084,\"cap\":93667119,\"spreadPerc\":0.8,\"shareTxForMovement\":106404,\"shareTxUntilMovement\":106404,\"totalShares\":31400000,\"maxShares\":6300000}},\"Alpha Enterprises\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Alpha Enterprises\",\"symbol\":\"APHE\",\"price\":304264.6010130817,\"lastPrice\":304961.42414051463,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.83,\"b\":false,\"otlkMag\":8.564419576883004,\"otlkMagForecast\":43.430105190888845,\"cap\":148460348,\"spreadPerc\":1.2,\"shareTxForMovement\":56539,\"shareTxUntilMovement\":56539,\"totalShares\":31300000,\"maxShares\":6300000}},\"SysCore Securities\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"SysCore Securities\",\"symbol\":\"SYSC\",\"price\":3554.386313196973,\"lastPrice\":3547.5935679378845,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.53,\"b\":true,\"otlkMag\":5.244031233601739,\"otlkMagForecast\":55.41191416763297,\"cap\":23096258,\"spreadPerc\":0.6,\"shareTxForMovement\":25727,\"shareTxUntilMovement\":25727,\"totalShares\":48200000,\"maxShares\":9600000}},\"CompuTek\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"CompuTek\",\"symbol\":\"CTK\",\"price\":20240.267265610102,\"lastPrice\":20261.03791781284,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.82,\"b\":true,\"otlkMag\":5.338992583123317,\"otlkMagForecast\":54.92845998583559,\"cap\":68270274,\"spreadPerc\":1,\"shareTxForMovement\":75516,\"shareTxUntilMovement\":75516,\"totalShares\":41500000,\"maxShares\":8300000}},\"NetLink Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"NetLink Technologies\",\"symbol\":\"NTLK\",\"price\":5387.513901369727,\"lastPrice\":5403.83028125298,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":2.42,\"b\":true,\"otlkMag\":16.525886275305687,\"otlkMagForecast\":67.6401508362705,\"cap\":20079387,\"spreadPerc\":0.6,\"shareTxForMovement\":33394,\"shareTxUntilMovement\":33394,\"totalShares\":47400000,\"maxShares\":9500000}},\"Omega Software\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Omega Software\",\"symbol\":\"OMGA\",\"price\":4393.892662415588,\"lastPrice\":4388.016793520203,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.07,\"b\":false,\"otlkMag\":6.295745663580302,\"otlkMagForecast\":45.32453905366121,\"cap\":10868426,\"spreadPerc\":0.9,\"shareTxForMovement\":82493,\"shareTxUntilMovement\":82493,\"totalShares\":14600000,\"maxShares\":2900000}},\"FoodNStuff\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"FoodNStuff\",\"symbol\":\"FNS\",\"price\":2475.9123929541643,\"lastPrice\":2478.2672736215454,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.76,\"b\":false,\"otlkMag\":8.370823414610149,\"otlkMagForecast\":41.56732072693862,\"cap\":53733599,\"spreadPerc\":0.8,\"shareTxForMovement\":61521,\"shareTxUntilMovement\":61521,\"totalShares\":13900000,\"maxShares\":2800000}},\"Sigma Cosmetics\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Sigma Cosmetics\",\"symbol\":\"SGC\",\"price\":805.1353406920078,\"lastPrice\":806.4552990310341,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.31,\"b\":false,\"otlkMag\":6.128886734573966,\"otlkMagForecast\":41.49996770876775,\"cap\":29301697,\"spreadPerc\":0.6,\"shareTxForMovement\":52188,\"shareTxUntilMovement\":52188,\"totalShares\":14800000,\"maxShares\":3000000}},\"Joe's Guns\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Joe's Guns\",\"symbol\":\"JGN\",\"price\":404986.73610324465,\"lastPrice\":403517.2174690045,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":2.91,\"b\":false,\"otlkMag\":5.534687931432591,\"otlkMagForecast\":47.57274041845909,\"cap\":16286795,\"spreadPerc\":1,\"shareTxForMovement\":50451,\"shareTxUntilMovement\":50451,\"totalShares\":28600000,\"maxShares\":5700000}},\"Catalyst Ventures\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Catalyst Ventures\",\"symbol\":\"CTYS\",\"price\":124384.28056727984,\"lastPrice\":124115.56526959025,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.73,\"b\":true,\"otlkMag\":12.297467328573784,\"otlkMagForecast\":62.8510352715445,\"cap\":8646024,\"spreadPerc\":0.8,\"shareTxForMovement\":30622,\"shareTxUntilMovement\":30622,\"totalShares\":216500000,\"maxShares\":43300000}},\"Microdyne Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Microdyne Technologies\",\"symbol\":\"MDYN\",\"price\":30827.50830794299,\"lastPrice\":30798.215622642012,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.76,\"b\":true,\"otlkMag\":6.469202642441636,\"otlkMagForecast\":57.325407796110845,\"cap\":458503293,\"spreadPerc\":0.8,\"shareTxForMovement\":118054,\"shareTxUntilMovement\":118054,\"totalShares\":17300000,\"maxShares\":3500000}},\"Titan Laboratories\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Titan Laboratories\",\"symbol\":\"TITN\",\"price\":27422.030577570797,\"lastPrice\":27443.993980204647,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.64,\"b\":true,\"otlkMag\":11.22538897882303,\"otlkMagForecast\":62.28332214434111,\"cap\":373913106,\"spreadPerc\":0.3,\"shareTxForMovement\":212024,\"shareTxUntilMovement\":212024,\"totalShares\":20500000,\"maxShares\":4100000}},\"Orders\":{\"ECP\":[],\"MGCP\":[],\"BLD\":[],\"CLRK\":[],\"OMTK\":[],\"FSIG\":[],\"KGI\":[],\"FLCM\":[],\"STM\":[],\"DCOMM\":[],\"HLS\":[],\"VITA\":[],\"ICRS\":[],\"UNV\":[],\"AERO\":[],\"OMN\":[],\"SLRS\":[],\"GPH\":[],\"NVMD\":[],\"WDS\":[],\"LXO\":[],\"RHOC\":[],\"APHE\":[],\"SYSC\":[],\"CTK\":[],\"NTLK\":[],\"OMGA\":[],\"FNS\":[],\"SGC\":[],\"JGN\":[],\"CTYS\":[],\"MDYN\":[],\"TITN\":[]},\"storedCycles\":6656216,\"lastUpdate\":1644172508154,\"ticksUntilCycle\":18}","SettingsSave":"{\"ActiveScriptsServerPageSize\":10,\"ActiveScriptsScriptPageSize\":10,\"AutosaveInterval\":60,\"CodeInstructionRunTime\":25,\"DisableASCIIArt\":false,\"DisableHotkeys\":false,\"DisableTextEffects\":false,\"DisableOverviewProgressBars\":false,\"EnableBashHotkeys\":false,\"TimestampsFormat\":\"\",\"Locale\":\"en\",\"MaxLogCapacity\":50,\"MaxPortCapacity\":50,\"MaxTerminalCapacity\":500,\"OwnedAugmentationsOrder\":1,\"PurchaseAugmentationsOrder\":0,\"SaveGameOnFileSave\":true,\"SuppressBuyAugmentationConfirmation\":false,\"SuppressFactionInvites\":false,\"SuppressMessages\":false,\"SuppressTravelConfirmation\":false,\"SuppressBladeburnerPopup\":false,\"SuppressTIXPopup\":false,\"SuppressSavedGameToast\":false,\"UseIEC60027_2\":false,\"ExcludeRunningScriptsFromSave\":false,\"IsSidebarOpened\":true,\"MonacoTheme\":\"monokai\",\"MonacoInsertSpaces\":false,\"MonacoFontSize\":20,\"MonacoVim\":false,\"MonacoWordWrap\":\"off\",\"theme\":{\"primarylight\":\"#0f0\",\"primary\":\"#0c0\",\"primarydark\":\"#090\",\"successlight\":\"#0f0\",\"success\":\"#0c0\",\"successdark\":\"#090\",\"errorlight\":\"#f00\",\"error\":\"#c00\",\"errordark\":\"#900\",\"secondarylight\":\"#AAA\",\"secondary\":\"#888\",\"secondarydark\":\"#666\",\"warninglight\":\"#ff0\",\"warning\":\"#cc0\",\"warningdark\":\"#990\",\"infolight\":\"#69f\",\"info\":\"#36c\",\"infodark\":\"#039\",\"welllight\":\"#444\",\"well\":\"#222\",\"white\":\"#fff\",\"black\":\"#000\",\"hp\":\"#dd3434\",\"money\":\"#ffd700\",\"hack\":\"#adff2f\",\"combat\":\"#faffdf\",\"cha\":\"#a671d1\",\"int\":\"#6495ed\",\"rep\":\"#faffdf\",\"disabled\":\"#66cfbc\",\"backgroundprimary\":\"#000\",\"backgroundsecondary\":\"#000\",\"button\":\"#333\"},\"styles\":{\"lineHeight\":1.5,\"fontFamily\":\"Lucida Console, Lucida Sans Unicode, Fira Mono, Consolas, Courier New, Courier, monospace, Times New Roman\"},\"overview\":{\"x\":-1,\"y\":0,\"opened\":true}}","VersionSave":"10","AllGangsSave":"","LastExportBonus":"1644172510077","StaneksGiftSave":"{\"ctor\":\"StaneksGift\",\"data\":{\"storedCycles\":0,\"fragments\":[]}}","SaveTimestamp":"1644172510100"}}