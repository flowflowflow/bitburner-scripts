{"ctor":"BitburnerSaveObject","data":{"PlayerSave":"{\"ctor\":\"PlayerObject\",\"data\":{\"hacking\":292,\"hp\":19,\"max_hp\":19,\"strength\":122,\"defense\":92,\"dexterity\":103,\"agility\":154,\"charisma\":96,\"intelligence\":0,\"hacking_chance_mult\":1.0201,\"hacking_speed_mult\":1.050703,\"hacking_money_mult\":1.0201,\"hacking_grow_mult\":1.0201,\"hacking_exp\":2615452.0639279527,\"strength_exp\":21269.454786270635,\"defense_exp\":8205.176900243609,\"dexterity_exp\":11971.931853772512,\"agility_exp\":58001.44510870523,\"charisma_exp\":9390.072321083577,\"intelligence_exp\":0,\"hacking_mult\":1.071105,\"strength_mult\":1.0201,\"defense_mult\":1.0201,\"dexterity_mult\":1.0201,\"agility_mult\":1.0201,\"charisma_mult\":1.0201,\"hacking_exp_mult\":1.6130331249999998,\"strength_exp_mult\":1.2904265,\"defense_exp_mult\":1.2904265,\"dexterity_exp_mult\":1.2904265,\"agility_exp_mult\":1.2904265,\"charisma_exp_mult\":1.2904265,\"company_rep_mult\":1.0201,\"faction_rep_mult\":1.0201,\"money\":2474834038.9222775,\"city\":\"Aevum\",\"location\":\"Travel Agency\",\"jobs\":{},\"companyName\":\"\",\"currentServer\":\"omega-net\",\"purchasedServers\":[],\"hacknetNodes\":[{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":10759.000407024714,\"onlineTimeSeconds\":199260.99999984418,\"ram\":64,\"totalMoneyGenerated\":1649785407.9618254,\"name\":\"hacknet-node-0\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":10759.000407024714,\"onlineTimeSeconds\":197296.59999987276,\"ram\":64,\"totalMoneyGenerated\":1642177225.1933365,\"name\":\"hacknet-node-1\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":10759.000407024714,\"onlineTimeSeconds\":196260.59999988784,\"ram\":64,\"totalMoneyGenerated\":1639935832.6069913,\"name\":\"hacknet-node-2\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":10759.000407024714,\"onlineTimeSeconds\":195343.59999989596,\"ram\":64,\"totalMoneyGenerated\":1635159271.612961,\"name\":\"hacknet-node-3\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":10759.000407024714,\"onlineTimeSeconds\":186530.39999986513,\"ram\":64,\"totalMoneyGenerated\":1630012966.4693851,\"name\":\"hacknet-node-4\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":10759.000407024714,\"onlineTimeSeconds\":181616.999999847,\"ram\":64,\"totalMoneyGenerated\":1620701578.0014563,\"name\":\"hacknet-node-5\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":10759.000407024714,\"onlineTimeSeconds\":181575.19999984687,\"ram\":64,\"totalMoneyGenerated\":1616319537.544386,\"name\":\"hacknet-node-6\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":10759.000407024714,\"onlineTimeSeconds\":181574.79999984687,\"ram\":64,\"totalMoneyGenerated\":1599908981.0649936,\"name\":\"hacknet-node-7\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":10759.000407024714,\"onlineTimeSeconds\":181524.5999998467,\"ram\":64,\"totalMoneyGenerated\":1615748175.1384773,\"name\":\"hacknet-node-8\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":10759.000407024714,\"onlineTimeSeconds\":179010.19999983752,\"ram\":64,\"totalMoneyGenerated\":1605999916.1852434,\"name\":\"hacknet-node-9\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":10759.000407024714,\"onlineTimeSeconds\":179007.9999998375,\"ram\":64,\"totalMoneyGenerated\":1598072065.2131462,\"name\":\"hacknet-node-10\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":10759.000407024714,\"onlineTimeSeconds\":179007.59999983752,\"ram\":64,\"totalMoneyGenerated\":1575288111.934095,\"name\":\"hacknet-node-11\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":10759.000407024714,\"onlineTimeSeconds\":167366.599999812,\"ram\":64,\"totalMoneyGenerated\":1794298341.1588578,\"name\":\"hacknet-node-12\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":10759.000407024714,\"onlineTimeSeconds\":86321.9999998754,\"ram\":64,\"totalMoneyGenerated\":919090798.2466273,\"name\":\"hacknet-node-13\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":10759.000407024714,\"onlineTimeSeconds\":72461.99999985412,\"ram\":64,\"totalMoneyGenerated\":779492836.0646573,\"name\":\"hacknet-node-14\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":10759.000407024714,\"onlineTimeSeconds\":72443.79999985412,\"ram\":64,\"totalMoneyGenerated\":779366768.0001601,\"name\":\"hacknet-node-15\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":9,\"level\":200,\"moneyGainRatePerSecond\":7172.666938016476,\"onlineTimeSeconds\":72443.59999985412,\"ram\":64,\"totalMoneyGenerated\":519493260.1847288,\"name\":\"hacknet-node-16\"}}],\"hashManager\":{\"ctor\":\"HashManager\",\"data\":{\"capacity\":0,\"hashes\":0,\"upgrades\":{\"Sell for Money\":0,\"Sell for Corporation Funds\":0,\"Reduce Minimum Security\":0,\"Increase Maximum Money\":0,\"Improve Studying\":0,\"Improve Gym Training\":0,\"Exchange for Corporation Research\":0,\"Exchange for Bladeburner Rank\":0,\"Exchange for Bladeburner SP\":0,\"Generate Coding Contract\":0}}},\"factions\":[\"CyberSec\",\"Netburners\",\"Sector-12\",\"Aevum\",\"NiteSec\",\"Slum Snakes\"],\"factionInvitations\":[],\"queuedAugmentations\":[{\"level\":3,\"name\":\"NeuroFlux Governor\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen I\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen II\"},{\"level\":1,\"name\":\"Hacknet Node NIC Architecture Neural-Upload\"},{\"level\":1,\"name\":\"Hacknet Node Cache Architecture Neural-Upload\"},{\"level\":1,\"name\":\"Hacknet Node Kernel Direct-Neural Interface\"},{\"level\":1,\"name\":\"Hacknet Node Core Direct-Neural Interface\"},{\"level\":1,\"name\":\"Artificial Synaptic Potentiation\"},{\"level\":4,\"name\":\"NeuroFlux Governor\"},{\"level\":5,\"name\":\"NeuroFlux Governor\"},{\"level\":6,\"name\":\"NeuroFlux Governor\"},{\"level\":7,\"name\":\"NeuroFlux Governor\"}],\"augmentations\":[{\"level\":1,\"name\":\"Synaptic Enhancement Implant\"},{\"level\":1,\"name\":\"Neurotrainer I\"},{\"level\":1,\"name\":\"Neurotrainer II\"},{\"level\":1,\"name\":\"Neural-Retention Enhancement\"},{\"level\":1,\"name\":\"BitWire\"},{\"level\":2,\"name\":\"NeuroFlux Governor\"},{\"level\":1,\"name\":\"Hacknet Node CPU Architecture Neural-Upload\"}],\"sourceFiles\":[],\"numPeopleKilled\":24,\"karma\":-73.5,\"crime_money_mult\":1.0201,\"crime_success_mult\":1.0201,\"isWorking\":false,\"focus\":true,\"workType\":\"\",\"workCostMult\":10,\"workExpMult\":5,\"currentWorkFactionName\":\"\",\"currentWorkFactionDescription\":\"\",\"workHackExpGainRate\":0,\"workStrExpGainRate\":0,\"workDefExpGainRate\":0,\"workDexExpGainRate\":0,\"workAgiExpGainRate\":0,\"workChaExpGainRate\":0,\"workRepGainRate\":0,\"workMoneyGainRate\":0,\"workMoneyLossRate\":0,\"workHackExpGained\":0,\"workStrExpGained\":0,\"workDefExpGained\":0,\"workDexExpGained\":0,\"workAgiExpGained\":0,\"workChaExpGained\":0,\"workRepGained\":0,\"workMoneyGained\":0,\"createProgramName\":\"\",\"createProgramReqLvl\":75,\"className\":\"\",\"crimeType\":\"\",\"timeWorked\":0,\"timeWorkedCreateProgram\":0,\"timeNeededToCompleteWork\":72000000,\"work_money_mult\":1.0201,\"hacknet_node_money_mult\":1.173115,\"hacknet_node_purchase_cost_mult\":0.833085,\"hacknet_node_ram_cost_mult\":0.9801,\"hacknet_node_core_cost_mult\":0.9801,\"hacknet_node_level_cost_mult\":0.9801,\"hasWseAccount\":false,\"hasTixApiAccess\":false,\"has4SData\":false,\"has4SDataTixApi\":false,\"gang\":null,\"corporation\":null,\"bladeburner\":null,\"bladeburner_max_stamina_mult\":1,\"bladeburner_stamina_gain_mult\":1,\"bladeburner_analysis_mult\":1,\"bladeburner_success_chance_mult\":1,\"sleeves\":[],\"resleeves\":[],\"sleevesFromCovenant\":0,\"bitNodeN\":1,\"lastUpdate\":1641245526071,\"totalPlaytime\":384942200,\"playtimeSinceLastAug\":201418200,\"playtimeSinceLastBitnode\":384942200,\"moneySourceA\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":-16362048,\"codingcontract\":0,\"corporation\":0,\"crime\":1917788,\"gang\":0,\"hacking\":141372843.2151467,\"hacknet\":24220851073.376225,\"hacknet_expenses\":-6509683978.40199,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":0,\"total\":2474833038.9222775,\"work\":0,\"servers\":0,\"other\":-310800000,\"augmentations\":-15052462638.326603}},\"moneySourceB\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":-21080952,\"codingcontract\":0,\"corporation\":0,\"crime\":2317788,\"gang\":0,\"hacking\":251767188.93379626,\"hacknet\":27415216681.243076,\"hacknet_expenses\":-6729821880.794616,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":0,\"total\":2561569639.317711,\"work\":1301310.599999279,\"servers\":-46145391.885811724,\"other\":-624400000,\"augmentations\":-17687585105.511105}},\"scriptProdSinceLastAug\":81408661,\"exploits\":[],\"factionWorkType\":\"Faction Hacking Work\",\"committingCrimeThruSingFn\":false,\"singFnCrimeWorkerScript\":null}}","AllServersSave":"{\"home\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"home\",\"httpPortOpen\":false,\"ip\":\"90.5.7.0\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"hackers-starting-handbook.lit\",\"j0.msg\",\"j1.msg\",\"csec-test.msg\",\"j2.msg\",\"nitesec-test.msg\"],\"organizationName\":\"Home PC\",\"programs\":[\"NUKE.exe\",\"fl1ght.exe\",\"BruteSSH.exe\",\"FTPCrack.exe\",\"ServerProfiler.exe\",\"AutoLink.exe\",\"DeepscanV1.exe\",\"relaySMTP.exe\",\"HTTPWorm.exe\",\"SQLInject.exe\",\"DeepscanV2.exe\"],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"basic-hack.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"home\",\"_hash\":\"b431b860a325c1f1e8d3f9afa6bd629bf87ee6500edce2693501368a5588a221\",\"moduleSequenceNumber\":169}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.grow(target);\\n\\t}\\n}\",\"filename\":\"basic-grow.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"increase-money.ns\",\"url\":\"blob:file:///85757319-6d2d-429d-8819-ec01f8893d46\"}],\"ramUsage\":1.75,\"server\":\"home\",\"_hash\":\"fc7652eef146e96723fb16cbc2683cf66b1d09853fff0ed8b2ca6655039902d8\",\"moduleSequenceNumber\":170}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(target);\\n\\t}\\n}\",\"filename\":\"basic-weaken.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"home\",\"_hash\":\"ef6ef87a7a369f27563e9f084d651b032b74b974340529a78834d2cbf17c12a5\",\"moduleSequenceNumber\":171}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tvar servers = ns.scan(home);\\n\\tvar scripts = ns.ls(home, \\\"basic-\\\");\\n\\n\\tfor (let entry in scripts) {\\n\\t\\tns.tprint(\\\"found script: \\\" + scripts[entry]);\\n\\t}\\n\\n\\t// Hack servers (!!! depth = 2 !!!) if needed and populate with scripts\\n\\tfor (let entry in servers) {\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== \\\"home\\\") {\\n\\t\\t\\t\\tns.tprint(\\\"----->   \\\" + subservers[subentry]);\\n\\t\\t\\t\\tif (!ns.hasRootAccess(subservers[subentry])) {\\n\\t\\t\\t\\t\\ttakeover(subservers[subentry]);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tns.tprint(\\\"copying scripts to \\\" + subservers[subentry]);\\n\\t\\t\\t\\tawait ns.scp(scripts, home, subservers[subentry]);\\n\\t\\t\\t\\t//await ns.scp(\\\"setup.ns\\\", home, subservers[subentry]);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (!ns.hasRootAccess(servers[entry])) {\\n\\t\\t\\ttakeover(servers[entry]);\\n\\t\\t}\\n\\t\\tns.tprint(\\\"copying scripts to \\\" + servers[entry]);\\n\\t\\tawait ns.scp(scripts, home, servers[entry]);\\n\\t\\t//await ns.scp(\\\"setup.ns\\\", home, servers[entry]);\\n\\t}\\n\\n\\t/** \\n\\t * \\tAttempts to take over target machine\\t\\n\\t * \\n\\t *  @param {string} tar\\n\\t *  @return {boolean} outcome \\n\\t**/\\n\\tasync function takeover(tar) {\\n\\t\\tlet currentTarget = tar;\\n\\t\\tlet isNotTakenOver = true;\\n\\t\\tlet attemptCounter = 0;\\n\\n\\t\\tif (ns.getServerNumPortsRequired <= 5 && attemptCounter < 50) {\\n\\t\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\n\\t\\t\\t\\tattemptCounter++;\\n\\t\\t\\t}\\n\\n\\t\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"setup.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"setup.ns\",\"url\":\"blob:file:///1ac1c347-8ac4-44ea-92f8-2585a02b6c9b\"}],\"ramUsage\":3.15,\"server\":\"home\",\"_hash\":\"3b3625aa608a7f37d7592c27fde49ee0052288713ba0f611649877b763edd804\",\"moduleSequenceNumber\":172}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n// TODO: unused + unfinished, based on setup.ns\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst hostMachine = ns.getHostname();\\n\\tconst target = ns.args[0];\\n\\tvar servers = ns.scan(hostMachine);\\n\\tvar scripts = ns.ls(home, \\\".ns\\\");\\n\\n\\tfor (let entry in scripts) {\\n\\t\\tns.tprint(\\\"found script: \\\" + scripts[entry]);\\n\\t}\\n\\n\\tns.tprint(\\\"Host:  \\\" + hostMachine);\\n\\tfor (let entry in servers) {\\t// depth 0\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\t// depth 1\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== home && subservers.length > 1) {\\n\\t\\t\\t\\tns.tprint(\\\"-----> \\\" + subservers[subentry]);\\n\\t\\t\\t\\tawait takeover(subservers[subentry]);\\n\\t\\t\\t\\tlet subserversd2 = ns.scan(subservers[subentry]); // depth 2\\n\\t\\t\\t\\tfor (let subentryd2 in subserversd2) {\\n\\t\\t\\t\\t\\tif (subserversd2[subentryd2] !== subservers[subentry] && subserversd2[subentryd2] !== servers[entry] && subserversd2.length > 1) {\\n\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------> \\\" + subserversd2[subentryd2]);\\n\\t\\t\\t\\t\\t\\tawait takeover(subserversd2[subentryd2]);\\n\\t\\t\\t\\t\\t\\tlet subserversd3 = ns.scan(subserversd2[subentryd2]);\\t// depth 3\\n\\t\\t\\t\\t\\t\\tfor (let subentryd3 in subserversd3) {\\n\\t\\t\\t\\t\\t\\t\\tif (subserversd3[subentryd3] !== subserversd2[subentryd2] && subserversd3[subentryd3] !== subservers[subentry] && subserversd3.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------> \\\" + subserversd3[subentryd3]);\\n\\t\\t\\t\\t\\t\\t\\t\\tawait takeover(subserversd3[subentryd3]);\\n\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd4 = ns.scan(subserversd3[subentryd3]);\\t// depth 4\\n\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd4 in subserversd4) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd4[subentryd4] !== subserversd3[subentryd3] && subserversd4[subentryd4] !== subserversd2[subentryd2] && subserversd4.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------------> \\\" + subserversd4[subentryd4]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tawait takeover(subserversd4[subentryd4]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd5 = ns.scan(subserversd4[subentryd4]);\\t// depth 5\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd5 in subserversd5) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd5[subentryd5] !== subserversd4[subentryd4] && subserversd5[subentryd5] !== subserversd3[subentryd3] && subserversd5.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-------------------------> \\\" + subserversd5[subentryd5]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tawait takeover(subserversd5[subentryd5]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd6 = ns.scan(subserversd5[subentryd5]);\\t// depth 6\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd6 in subserversd6) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd6[subentryd6] !== subserversd5[subentryd5] && subserversd6[subentryd6] !== subserversd4[subentryd4] && subserversd6.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"------------------------------> \\\" + subserversd6[subentryd6]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tawait takeover(subserversd6[subentryd6]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd7 = ns.scan(subserversd6[subentryd6]);\\t// depth 7\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd7 in subserversd7) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd7[subentryd7] !== subserversd6[subentryd6] && subserversd7[subentryd7] !== subserversd5[subentryd5] && subserversd7.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-----------------------------------> \\\" + subserversd7[subentryd7]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tawait takeover(subserversd7[subentryd7]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tawait takeover(servers[entry]);\\n\\t}\\n\\n\\t/** \\n\\t * \\tAttempts to take over target machine\\t\\n\\t * \\n\\t *  @param {string} tar\\n\\t *  @return {boolean} outcome \\n\\t**/\\n\\tasync function takeover(tar) {\\n\\t\\tlet currentTarget = tar;\\n\\t\\tlet isNotTakenOver = true;\\n\\t\\tlet attemptCounter = 0;\\n\\n\\t\\tif (/*ns.getServerNumPortsRequired <= 5 && */ attemptCounter < 30) {\\n\\t\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\ttry {\\n\\t\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t\\t} catch(error) {\\n\\t\\t\\t\\t\\t\\tns.tprint(\\\"not enough ports to nuke \\\" +  currentTarget);\\n\\t\\t\\t\\t\\t\\treturn false;\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tattemptCounter++;\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.scp(scripts, home, currentTarget);\\n\\t\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"deep-setup.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"deep-setup.ns\",\"url\":\"blob:file:///99619e74-449a-4017-b76c-435ec9d27ed2\"}],\"ramUsage\":3.1,\"server\":\"home\",\"_hash\":\"95e9530fb6f69bfe511a604adf704b1d63ca180a1d556d7b1669bf3a470b227e\",\"moduleSequenceNumber\":173}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tconst currentMachine = ns.getHostname();\\n\\tvar servers = ns.scan(currentMachine);\\n\\tvar scripts = ns.ls(home, \\\"basic-\\\");\\n\\n\\tns.tprint(\\\"Host:  \\\" + currentMachine);\\n\\tfor (let entry in servers) {\\t// depth 0\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\t// depth 1\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== home && subservers.length > 1) {\\n\\t\\t\\t\\tns.tprint(\\\"-----> \\\" + subservers[subentry]);\\n\\t\\t\\t\\tlet subserversd2 = ns.scan(subservers[subentry]); // depth 2\\n\\t\\t\\t\\tfor (let subentryd2 in subserversd2) {\\n\\t\\t\\t\\t\\tif (subserversd2[subentryd2] !== subservers[subentry] && subserversd2[subentryd2] !== servers[entry] && subserversd2.length > 1) {\\n\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------> \\\" + subserversd2[subentryd2]);\\n\\t\\t\\t\\t\\t\\tlet subserversd3 = ns.scan(subserversd2[subentryd2]);\\t// depth 3\\n\\t\\t\\t\\t\\t\\tfor (let subentryd3 in subserversd3) {\\n\\t\\t\\t\\t\\t\\t\\tif (subserversd3[subentryd3] !== subserversd2[subentryd2] && subserversd3[subentryd3] !== subservers[subentry] && subserversd3.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------> \\\" + subserversd3[subentryd3]);\\n\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd4 = ns.scan(subserversd3[subentryd3]);\\t// depth 4\\n\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd4 in subserversd4) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd4[subentryd4] !== subserversd3[subentryd3] && subserversd4[subentryd4] !== subserversd2[subentryd2] && subserversd4.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------------> \\\" + subserversd4[subentryd4]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd5 = ns.scan(subserversd4[subentryd4]);\\t// depth 5\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd5 in subserversd5) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd5[subentryd5] !== subserversd4[subentryd4] && subserversd5[subentryd5] !== subserversd3[subentryd3] && subserversd5.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-------------------------> \\\" + subserversd5[subentryd5]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd6 = ns.scan(subserversd5[subentryd5]);\\t// depth 6\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd6 in subserversd6) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd6[subentryd6] !== subserversd5[subentryd5] && subserversd6[subentryd6] !== subserversd4[subentryd4] && subserversd6.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"------------------------------> \\\" + subserversd6[subentryd6]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd7 = ns.scan(subserversd6[subentryd6]);\\t// depth 7\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor(let subentryd7 in subserversd7) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd7[subentryd7] !== subserversd6[subentryd6] && subserversd7[subentryd7] !== subserversd5[subentryd5] && subserversd7.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-----------------------------------> \\\" + subserversd7[subentryd7]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"gigascan.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"gigascan.ns\",\"url\":\"blob:file:///7a697fb8-bdb0-43ca-a230-ccd271f2d51f\"}],\"ramUsage\":2.05,\"server\":\"home\",\"_hash\":\"09d5eb91ac2188cd08d0b0658f50095ede1bc815d40e01a99435a8ab5d16f1b9\",\"moduleSequenceNumber\":174}}],\"serversOnNetwork\":[\"n00dles\",\"foodnstuff\",\"sigma-cosmetics\",\"joesguns\",\"hong-fang-tea\",\"harakiri-sushi\",\"iron-gym\",\"darkweb\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"ecorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"ecorp\",\"httpPortOpen\":false,\"ip\":\"42.9.9.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"ECorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"clarkinc\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":57761504536,\"moneyMax\":1444037613400,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1051,\"serverGrowth\":99}},\"megacorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-158895.cct\",\"type\":\"Sanitize Parentheses in Expression\",\"data\":\"(()(aa((\",\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"megacorp\",\"httpPortOpen\":false,\"ip\":\"53.9.1.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"MegaCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"clarkinc\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":52506068288,\"moneyMax\":1312651707200,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1290,\"serverGrowth\":99}},\"b-and-a\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-102871.cct\",\"type\":\"Generate IP Addresses\",\"data\":\"1617115223\",\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"b-and-a\",\"httpPortOpen\":false,\"ip\":\"41.7.3.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Bachman & Associates\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"4sigma\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":77,\"hackDifficulty\":77,\"minDifficulty\":26,\"moneyAvailable\":28139080322,\"moneyMax\":703477008050,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1074,\"serverGrowth\":66}},\"blade\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"blade\",\"httpPortOpen\":false,\"ip\":\"90.5.0.6\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Blade Industries\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\".\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":97,\"hackDifficulty\":97,\"minDifficulty\":32,\"moneyAvailable\":38331833388,\"moneyMax\":958295834700,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1180,\"serverGrowth\":85}},\"nwo\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"nwo\",\"httpPortOpen\":false,\"ip\":\"42.3.4.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"NWO\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"4sigma\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":37402931504,\"moneyMax\":935073287600,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1066,\"serverGrowth\":89}},\"clarkinc\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"clarkinc\",\"httpPortOpen\":false,\"ip\":\"62.0.1.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"beyond-man.lit\",\"cost-of-immortality.lit\"],\"organizationName\":\"Clarke Incorporated\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"4sigma\",\"ecorp\",\"megacorp\",\"fulcrumassets\",\"The-Cave\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":61,\"hackDifficulty\":61,\"minDifficulty\":20,\"moneyAvailable\":17517324359,\"moneyMax\":437933108975,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1087,\"serverGrowth\":66}},\"omnitek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-243047.cct\",\"type\":\"Algorithmic Stock Trader II\",\"data\":[37,3,68,73,63,31,176,129,162,56,59,28,130,61,115,81,194,96,191,119,91,3,41,34,130,61,28,89,55,74],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"omnitek\",\"httpPortOpen\":false,\"ip\":\"61.3.8.9\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"coded-intelligence.lit\",\"history-of-synthoids.lit\"],\"organizationName\":\"OmniTek Incorporated\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"vitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":97,\"hackDifficulty\":97,\"minDifficulty\":32,\"moneyAvailable\":17819141041,\"moneyMax\":445478526025,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":954,\"serverGrowth\":96}},\"4sigma\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-944945.cct\",\"type\":\"Find Largest Prime Factor\",\"data\":630432589,\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-103851.cct\",\"type\":\"Generate IP Addresses\",\"data\":\"315166214\",\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"4sigma\",\"httpPortOpen\":false,\"ip\":\"44.7.9.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Four Sigma\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"vitalife\",\"b-and-a\",\"nwo\",\"clarkinc\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":70,\"hackDifficulty\":70,\"minDifficulty\":23,\"moneyAvailable\":18164694764,\"moneyMax\":454117369100,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":973,\"serverGrowth\":99}},\"kuai-gong\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"kuai-gong\",\"httpPortOpen\":false,\"ip\":\"39.1.3.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"KuaiGong International\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"fulcrumtech\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":96,\"hackDifficulty\":96,\"minDifficulty\":32,\"moneyAvailable\":29104513844,\"moneyMax\":727612846100,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1227,\"serverGrowth\":92}},\"fulcrumtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-377950.cct\",\"type\":\"Sanitize Parentheses in Expression\",\"data\":\"(a(a((a(()\",\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"fulcrumtech\",\"httpPortOpen\":false,\"ip\":\"88.9.6.5\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"run4theh111z\",\"kuai-gong\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":85,\"hackDifficulty\":85,\"minDifficulty\":28,\"moneyAvailable\":1601214253,\"moneyMax\":40030356325,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":984,\"serverGrowth\":97}},\"fulcrumassets\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"fulcrumassets\",\"httpPortOpen\":false,\"ip\":\"23.7.0.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"clarkinc\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":1000000,\"moneyMax\":25000000,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1356,\"serverGrowth\":1}},\"stormtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-616854.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[6,5],\"reward\":{\"name\":\"\",\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-292897-Netburners.cct\",\"type\":\"Minimum Path Sum in a Triangle\",\"data\":[[6],[4,4],[7,4,9],[6,5,9,7],[4,3,7,5,7],[3,1,8,9,5,7],[4,9,9,6,8,6,7],[3,8,7,4,7,3,6,3]],\"reward\":{\"name\":\"Netburners\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"stormtech\",\"httpPortOpen\":false,\"ip\":\"81.2.2.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Storm Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"microdyne\",\".\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":80,\"hackDifficulty\":80,\"minDifficulty\":27,\"moneyAvailable\":1086965337,\"moneyMax\":27174133425,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1033,\"serverGrowth\":88}},\"defcomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-108525.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[149,16,94],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"defcomm\",\"httpPortOpen\":false,\"ip\":\"0.5.2.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DefComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"unitalife\",\"taiyang-digital\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":92,\"hackDifficulty\":92,\"minDifficulty\":31,\"moneyAvailable\":941998317,\"moneyMax\":23549957925,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":882,\"serverGrowth\":52}},\"infocomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"infocomm\",\"httpPortOpen\":false,\"ip\":\"37.3.9.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"InfoComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"zeus-med\",\"titan-labs\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":85,\"hackDifficulty\":85,\"minDifficulty\":28,\"moneyAvailable\":613956392,\"moneyMax\":15348909800,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":905,\"serverGrowth\":42}},\"helios\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"helios\",\"httpPortOpen\":false,\"ip\":\"49.3.1.1\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Helios Labs\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"applied-energetics\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":86,\"hackDifficulty\":86,\"minDifficulty\":29,\"moneyAvailable\":710249004,\"moneyMax\":17756225100,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":803,\"serverGrowth\":77}},\"vitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"vitalife\",\"httpPortOpen\":false,\"ip\":\"12.4.3.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"VitaLife\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"applied-energetics\",\"omnitek\",\"4sigma\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":82,\"hackDifficulty\":82,\"minDifficulty\":27,\"moneyAvailable\":764657601,\"moneyMax\":19116440025,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":780,\"serverGrowth\":75}},\"icarus\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"icarus\",\"httpPortOpen\":false,\"ip\":\"95.6.2.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Icarus Microsystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omnia\",\"zb-def\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":89,\"hackDifficulty\":89,\"minDifficulty\":30,\"moneyAvailable\":931423856,\"moneyMax\":23285596400,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":882,\"serverGrowth\":93}},\"univ-energy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"univ-energy\",\"httpPortOpen\":false,\"ip\":\"47.8.0.9\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Universal Energy\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"unitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":81,\"hackDifficulty\":81,\"minDifficulty\":27,\"moneyAvailable\":1151701856,\"moneyMax\":28792546400,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":879,\"serverGrowth\":82}},\"titan-labs\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-377598.cct\",\"type\":\"Subarray with Maximum Sum\",\"data\":[-8,-6,-1,2,4,4,-10,-9,1,-7,3,-8,-8,-6,5,3,-9,-10,-5,-2,0,8,3,0,-10,-1,-3,-2,9,-5,5,-8,-8,-5,8,-4,1,4],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"titan-labs\",\"httpPortOpen\":false,\"ip\":\"70.4.5.9\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"coded-intelligence.lit\"],\"organizationName\":\"Titan Laboratories\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"infocomm\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":73,\"hackDifficulty\":73,\"minDifficulty\":24,\"moneyAvailable\":856058910,\"moneyMax\":21401472750,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":826,\"serverGrowth\":80}},\"microdyne\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"microdyne\",\"httpPortOpen\":false,\"ip\":\"9.9.0.5\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"Microdyne Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"zb-def\",\"stormtech\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":72,\"hackDifficulty\":72,\"minDifficulty\":24,\"moneyAvailable\":581210888,\"moneyMax\":14530272200,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":849,\"serverGrowth\":90}},\"taiyang-digital\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"taiyang-digital\",\"httpPortOpen\":false,\"ip\":\"44.4.1.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"A-Green-Tomorrow.lit\",\"brighter-than-the-sun.lit\"],\"organizationName\":\"Taiyang Digital\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"defcomm\",\"run4theh111z\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":73,\"hackDifficulty\":73,\"minDifficulty\":24,\"moneyAvailable\":870218054,\"moneyMax\":21755451350,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":910,\"serverGrowth\":72}},\"galactic-cyber\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-173838.cct\",\"type\":\"Unique Paths in a Grid II\",\"data\":[[0,0,0,0,0,0,0],[0,0,0,0,0,0,1],[0,0,0,0,0,1,0],[0,0,0,0,0,0,0]],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"galactic-cyber\",\"httpPortOpen\":false,\"ip\":\"41.9.6.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Galactic Cybersystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"alpha-ent\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":61,\"hackDifficulty\":61,\"minDifficulty\":20,\"moneyAvailable\":814481062,\"moneyMax\":20362026550,\"numOpenPortsRequired\":5,\"openPortCount\":3,\"requiredHackingSkill\":843,\"serverGrowth\":84}},\"aerocorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"aerocorp\",\"httpPortOpen\":false,\"ip\":\"19.1.7.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"AeroCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"aevum-police\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":84,\"hackDifficulty\":84,\"minDifficulty\":28,\"moneyAvailable\":1192218868,\"moneyMax\":29805471700,\"numOpenPortsRequired\":5,\"openPortCount\":3,\"requiredHackingSkill\":909,\"serverGrowth\":62}},\"omnia\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-264191.cct\",\"type\":\"Find All Valid Math Expressions\",\"data\":[\"543816307439\",81],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"omnia\",\"httpPortOpen\":false,\"ip\":\"92.7.8.0\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"history-of-synthoids.lit\"],\"organizationName\":\"Omnia Cybersystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"snap-fitness\",\"icarus\",\"zeus-med\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":87,\"hackDifficulty\":87,\"minDifficulty\":29,\"moneyAvailable\":905697255,\"moneyMax\":22642431375,\"numOpenPortsRequired\":5,\"openPortCount\":3,\"requiredHackingSkill\":903,\"serverGrowth\":65}},\"zb-def\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-491793.cct\",\"type\":\"Array Jumping Game\",\"data\":[2,0,4,0,6,10,0,4,2,0,9,6,6,0],\"reward\":{\"name\":\"\",\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-800880-CyberSec.cct\",\"type\":\"Unique Paths in a Grid II\",\"data\":[[0,0],[1,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0]],\"reward\":{\"name\":\"CyberSec\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zb-def\",\"httpPortOpen\":false,\"ip\":\"73.2.2.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"ZB Defense Industries\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"icarus\",\"microdyne\",\"applied-energetics\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":61,\"hackDifficulty\":61,\"minDifficulty\":20,\"moneyAvailable\":1026915479,\"moneyMax\":25672886975,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":796,\"serverGrowth\":66}},\"applied-energetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-884836-Netburners.cct\",\"type\":\"Sanitize Parentheses in Expression\",\"data\":\"(()()())))\",\"reward\":{\"name\":\"Netburners\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"applied-energetics\",\"httpPortOpen\":false,\"ip\":\"11.2.0.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Applied Energetics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"zb-def\",\"helios\",\"vitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":60,\"hackDifficulty\":60,\"minDifficulty\":20,\"moneyAvailable\":947816898,\"moneyMax\":23695422450,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":842,\"serverGrowth\":73}},\"solaris\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"solaris\",\"httpPortOpen\":false,\"ip\":\"53.9.8.5\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"A-Green-Tomorrow.lit\",\"the-failed-frontier.lit\"],\"organizationName\":\"Solaris Space Systems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"unitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":76,\"hackDifficulty\":76,\"minDifficulty\":25,\"moneyAvailable\":714478994,\"moneyMax\":17861974850,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":799,\"serverGrowth\":74}},\"deltaone\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-191611.cct\",\"type\":\"Total Ways to Sum\",\"data\":82,\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-114573-Sector-12.cct\",\"type\":\"Spiralize Matrix\",\"data\":[[38,3],[14,8],[33,26],[5,4],[6,17],[25,47],[46,36],[47,14],[42,15],[49,2],[49,39],[13,23],[24,40],[25,1],[35,38]],\"reward\":{\"name\":\"Sector-12\",\"type\":0}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-73796.cct\",\"type\":\"Algorithmic Stock Trader I\",\"data\":[1,86,40,140,141,110,118,183,82,114,110,32,101,58,106,161,166,82,108,143,114,164,183,3,85,173,159,193,47,22,128,158,34,153,145,88,59,152,131,166,130],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"deltaone\",\"httpPortOpen\":false,\"ip\":\"63.1.3.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DeltaOne\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"global-pharm\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":79,\"hackDifficulty\":79,\"minDifficulty\":26,\"moneyAvailable\":1354979880,\"moneyMax\":33874497000,\"numOpenPortsRequired\":5,\"openPortCount\":3,\"requiredHackingSkill\":898,\"serverGrowth\":53}},\"global-pharm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-589135.cct\",\"type\":\"Subarray with Maximum Sum\",\"data\":[0,-7,-4,2,-3,-6,3,6,4,10,2,3,-8,8,5,-8,10,5,-5,10,-8,-8,-2,-10,8,7,-7,3,5,8,1,-4,3],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"global-pharm\",\"httpPortOpen\":false,\"ip\":\"6.3.4.1\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"Global Pharmaceuticals\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"lexo-corp\",\"deltaone\",\"unitalife\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":82,\"hackDifficulty\":82,\"minDifficulty\":27,\"moneyAvailable\":1503609385,\"moneyMax\":37590234625,\"numOpenPortsRequired\":4,\"openPortCount\":3,\"requiredHackingSkill\":778,\"serverGrowth\":86}},\"nova-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-571209-CyberSec.cct\",\"type\":\"Subarray with Maximum Sum\",\"data\":[3,0,-3,4,-4,8,-3,-10,-2,-7,-4,10,-4,-1,-2,10,-6,4,0,2,-3,5,-3,-9],\"reward\":{\"name\":\"CyberSec\",\"type\":0}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-573518.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[10,2],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"nova-med\",\"httpPortOpen\":false,\"ip\":\"41.5.7.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Nova Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"zeus-med\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":69,\"hackDifficulty\":69,\"minDifficulty\":23,\"moneyAvailable\":1218090532,\"moneyMax\":30452263300,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":786,\"serverGrowth\":67}},\"zeus-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zeus-med\",\"httpPortOpen\":false,\"ip\":\"17.5.3.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Zeus Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omnia\",\"infocomm\",\"nova-med\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":76,\"hackDifficulty\":76,\"minDifficulty\":25,\"moneyAvailable\":1333721614,\"moneyMax\":33343040350,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":844,\"serverGrowth\":76}},\"unitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-966910.cct\",\"type\":\"Algorithmic Stock Trader IV\",\"data\":[3,[150,20,110,167,172,159,23,161,13,35,46,79,87,96,91,135,58,95,36,34,24]],\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-702370.cct\",\"type\":\"Spiralize Matrix\",\"data\":[[3,9,31,12,45,39,42],[34,9,20,15,20,25,50],[28,28,5,13,34,35,24],[44,48,33,43,44,13,27],[5,12,48,24,24,25,38],[38,36,49,45,33,11,49]],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"unitalife\",\"httpPortOpen\":false,\"ip\":\"22.6.1.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"UnitaLife Group\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"global-pharm\",\"defcomm\",\"univ-energy\",\"solaris\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":76,\"hackDifficulty\":76,\"minDifficulty\":25,\"moneyAvailable\":1069483128,\"moneyMax\":26737078200,\"numOpenPortsRequired\":4,\"openPortCount\":3,\"requiredHackingSkill\":810,\"serverGrowth\":77}},\"lexo-corp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-599768.cct\",\"type\":\"Total Ways to Sum\",\"data\":50,\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"lexo-corp\",\"httpPortOpen\":false,\"ip\":\"85.5.1.1\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"LexoCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"catalyst\",\"global-pharm\",\"snap-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":64,\"hackDifficulty\":64,\"minDifficulty\":21,\"moneyAvailable\":709478216,\"moneyMax\":17736955400,\"numOpenPortsRequired\":4,\"openPortCount\":3,\"requiredHackingSkill\":720,\"serverGrowth\":56}},\"rho-construction\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"rho-construction\",\"httpPortOpen\":false,\"ip\":\"7.8.3.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Rho Construction\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.grow(target);\\n\\t}\\n}\",\"filename\":\"basic-grow.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"rho-construction\",\"_hash\":\"fc7652eef146e96723fb16cbc2683cf66b1d09853fff0ed8b2ca6655039902d8\",\"moduleSequenceNumber\":175}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"basic-hack.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"rho-construction\",\"_hash\":\"b431b860a325c1f1e8d3f9afa6bd629bf87ee6500edce2693501368a5588a221\",\"moduleSequenceNumber\":176}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(target);\\n\\t}\\n}\",\"filename\":\"basic-weaken.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"rho-construction\",\"_hash\":\"ef6ef87a7a369f27563e9f084d651b032b74b974340529a78834d2cbf17c12a5\",\"moduleSequenceNumber\":177}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n// TODO: unused + unfinished, based on setup.ns\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst hostMachine = ns.getHostname();\\n\\tconst target = ns.args[0];\\n\\tvar servers = ns.scan(hostMachine);\\n\\tvar scripts = ns.ls(home, \\\".ns\\\");\\n\\n\\tfor (let entry in scripts) {\\n\\t\\tns.tprint(\\\"found script: \\\" + scripts[entry]);\\n\\t}\\n\\n\\tns.tprint(\\\"Host:  \\\" + hostMachine);\\n\\tfor (let entry in servers) {\\t// depth 0\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\t// depth 1\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== home && subservers.length > 1) {\\n\\t\\t\\t\\tns.tprint(\\\"-----> \\\" + subservers[subentry]);\\n\\t\\t\\t\\tawait takeover(subservers[subentry]);\\n\\t\\t\\t\\tlet subserversd2 = ns.scan(subservers[subentry]); // depth 2\\n\\t\\t\\t\\tfor (let subentryd2 in subserversd2) {\\n\\t\\t\\t\\t\\tif (subserversd2[subentryd2] !== subservers[subentry] && subserversd2[subentryd2] !== servers[entry] && subserversd2.length > 1) {\\n\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------> \\\" + subserversd2[subentryd2]);\\n\\t\\t\\t\\t\\t\\tawait takeover(subserversd2[subentryd2]);\\n\\t\\t\\t\\t\\t\\tlet subserversd3 = ns.scan(subserversd2[subentryd2]);\\t// depth 3\\n\\t\\t\\t\\t\\t\\tfor (let subentryd3 in subserversd3) {\\n\\t\\t\\t\\t\\t\\t\\tif (subserversd3[subentryd3] !== subserversd2[subentryd2] && subserversd3[subentryd3] !== subservers[subentry] && subserversd3.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------> \\\" + subserversd3[subentryd3]);\\n\\t\\t\\t\\t\\t\\t\\t\\tawait takeover(subserversd3[subentryd3]);\\n\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd4 = ns.scan(subserversd3[subentryd3]);\\t// depth 4\\n\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd4 in subserversd4) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd4[subentryd4] !== subserversd3[subentryd3] && subserversd4[subentryd4] !== subserversd2[subentryd2] && subserversd4.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------------> \\\" + subserversd4[subentryd4]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tawait takeover(subserversd4[subentryd4]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd5 = ns.scan(subserversd4[subentryd4]);\\t// depth 5\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd5 in subserversd5) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd5[subentryd5] !== subserversd4[subentryd4] && subserversd5[subentryd5] !== subserversd3[subentryd3] && subserversd5.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-------------------------> \\\" + subserversd5[subentryd5]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tawait takeover(subserversd5[subentryd5]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd6 = ns.scan(subserversd5[subentryd5]);\\t// depth 6\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd6 in subserversd6) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd6[subentryd6] !== subserversd5[subentryd5] && subserversd6[subentryd6] !== subserversd4[subentryd4] && subserversd6.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"------------------------------> \\\" + subserversd6[subentryd6]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tawait takeover(subserversd6[subentryd6]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd7 = ns.scan(subserversd6[subentryd6]);\\t// depth 7\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd7 in subserversd7) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd7[subentryd7] !== subserversd6[subentryd6] && subserversd7[subentryd7] !== subserversd5[subentryd5] && subserversd7.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-----------------------------------> \\\" + subserversd7[subentryd7]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tawait takeover(subserversd7[subentryd7]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tawait takeover(servers[entry]);\\n\\t}\\n\\n\\t/** \\n\\t * \\tAttempts to take over target machine\\t\\n\\t * \\n\\t *  @param {string} tar\\n\\t *  @return {boolean} outcome \\n\\t**/\\n\\tasync function takeover(tar) {\\n\\t\\tlet currentTarget = tar;\\n\\t\\tlet isNotTakenOver = true;\\n\\t\\tlet attemptCounter = 0;\\n\\n\\t\\tif (/*ns.getServerNumPortsRequired <= 5 && */ attemptCounter < 30) {\\n\\t\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\ttry {\\n\\t\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t\\t} catch(error) {\\n\\t\\t\\t\\t\\t\\tns.tprint(\\\"not enough ports to nuke \\\" +  currentTarget);\\n\\t\\t\\t\\t\\t\\treturn false;\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tattemptCounter++;\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.scp(scripts, home, currentTarget);\\n\\t\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"deep-setup.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":3.1,\"server\":\"rho-construction\",\"_hash\":\"95e9530fb6f69bfe511a604adf704b1d63ca180a1d556d7b1669bf3a470b227e\",\"moduleSequenceNumber\":178}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tconst currentMachine = ns.getHostname();\\n\\tvar servers = ns.scan(currentMachine);\\n\\tvar scripts = ns.ls(home, \\\"basic-\\\");\\n\\n\\tns.tprint(\\\"Host:  \\\" + currentMachine);\\n\\tfor (let entry in servers) {\\t// depth 0\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\t// depth 1\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== home && subservers.length > 1) {\\n\\t\\t\\t\\tns.tprint(\\\"-----> \\\" + subservers[subentry]);\\n\\t\\t\\t\\tlet subserversd2 = ns.scan(subservers[subentry]); // depth 2\\n\\t\\t\\t\\tfor (let subentryd2 in subserversd2) {\\n\\t\\t\\t\\t\\tif (subserversd2[subentryd2] !== subservers[subentry] && subserversd2[subentryd2] !== servers[entry] && subserversd2.length > 1) {\\n\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------> \\\" + subserversd2[subentryd2]);\\n\\t\\t\\t\\t\\t\\tlet subserversd3 = ns.scan(subserversd2[subentryd2]);\\t// depth 3\\n\\t\\t\\t\\t\\t\\tfor (let subentryd3 in subserversd3) {\\n\\t\\t\\t\\t\\t\\t\\tif (subserversd3[subentryd3] !== subserversd2[subentryd2] && subserversd3[subentryd3] !== subservers[subentry] && subserversd3.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------> \\\" + subserversd3[subentryd3]);\\n\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd4 = ns.scan(subserversd3[subentryd3]);\\t// depth 4\\n\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd4 in subserversd4) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd4[subentryd4] !== subserversd3[subentryd3] && subserversd4[subentryd4] !== subserversd2[subentryd2] && subserversd4.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------------> \\\" + subserversd4[subentryd4]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd5 = ns.scan(subserversd4[subentryd4]);\\t// depth 5\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd5 in subserversd5) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd5[subentryd5] !== subserversd4[subentryd4] && subserversd5[subentryd5] !== subserversd3[subentryd3] && subserversd5.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-------------------------> \\\" + subserversd5[subentryd5]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd6 = ns.scan(subserversd5[subentryd5]);\\t// depth 6\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd6 in subserversd6) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd6[subentryd6] !== subserversd5[subentryd5] && subserversd6[subentryd6] !== subserversd4[subentryd4] && subserversd6.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"------------------------------> \\\" + subserversd6[subentryd6]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd7 = ns.scan(subserversd6[subentryd6]);\\t// depth 7\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor(let subentryd7 in subserversd7) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd7[subentryd7] !== subserversd6[subentryd6] && subserversd7[subentryd7] !== subserversd5[subentryd5] && subserversd7.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-----------------------------------> \\\" + subserversd7[subentryd7]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"gigascan.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.05,\"server\":\"rho-construction\",\"_hash\":\"09d5eb91ac2188cd08d0b0658f50095ede1bc815d40e01a99435a8ab5d16f1b9\",\"moduleSequenceNumber\":179}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tvar servers = ns.scan(home);\\n\\tvar scripts = ns.ls(home, \\\"basic-\\\");\\n\\n\\tfor (let entry in scripts) {\\n\\t\\tns.tprint(\\\"found script: \\\" + scripts[entry]);\\n\\t}\\n\\n\\t// Hack servers (!!! depth = 2 !!!) if needed and populate with scripts\\n\\tfor (let entry in servers) {\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== \\\"home\\\") {\\n\\t\\t\\t\\tns.tprint(\\\"----->   \\\" + subservers[subentry]);\\n\\t\\t\\t\\tif (!ns.hasRootAccess(subservers[subentry])) {\\n\\t\\t\\t\\t\\ttakeover(subservers[subentry]);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tns.tprint(\\\"copying scripts to \\\" + subservers[subentry]);\\n\\t\\t\\t\\tawait ns.scp(scripts, home, subservers[subentry]);\\n\\t\\t\\t\\t//await ns.scp(\\\"setup.ns\\\", home, subservers[subentry]);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (!ns.hasRootAccess(servers[entry])) {\\n\\t\\t\\ttakeover(servers[entry]);\\n\\t\\t}\\n\\t\\tns.tprint(\\\"copying scripts to \\\" + servers[entry]);\\n\\t\\tawait ns.scp(scripts, home, servers[entry]);\\n\\t\\t//await ns.scp(\\\"setup.ns\\\", home, servers[entry]);\\n\\t}\\n\\n\\t/** \\n\\t * \\tAttempts to take over target machine\\t\\n\\t * \\n\\t *  @param {string} tar\\n\\t *  @return {boolean} outcome \\n\\t**/\\n\\tasync function takeover(tar) {\\n\\t\\tlet currentTarget = tar;\\n\\t\\tlet isNotTakenOver = true;\\n\\t\\tlet attemptCounter = 0;\\n\\n\\t\\tif (ns.getServerNumPortsRequired <= 5 && attemptCounter < 50) {\\n\\t\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\n\\t\\t\\t\\tattemptCounter++;\\n\\t\\t\\t}\\n\\n\\t\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"setup.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":3.15,\"server\":\"rho-construction\",\"_hash\":\"3b3625aa608a7f37d7592c27fde49ee0052288713ba0f611649877b763edd804\",\"moduleSequenceNumber\":180}}],\"serversOnNetwork\":[\"summit-uni\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":47,\"hackDifficulty\":47,\"minDifficulty\":16,\"moneyAvailable\":526012234,\"moneyMax\":13150305850,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":512,\"serverGrowth\":56}},\"alpha-ent\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-356386.cct\",\"type\":\"Find All Valid Math Expressions\",\"data\":[\"24555706666\",-48],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"alpha-ent\",\"httpPortOpen\":false,\"ip\":\"84.3.5.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"Alpha Enterprises\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"summit-uni\",\"galactic-cyber\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":59,\"hackDifficulty\":59,\"minDifficulty\":20,\"moneyAvailable\":614674732,\"moneyMax\":15366868300,\"numOpenPortsRequired\":4,\"openPortCount\":3,\"requiredHackingSkill\":587,\"serverGrowth\":60}},\"aevum-police\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"aevum-police\",\"httpPortOpen\":false,\"ip\":\"53.0.9.5\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Aevum Police Headquarters\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"zb-institute\",\"aerocorp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":71,\"hackDifficulty\":71,\"minDifficulty\":24,\"moneyAvailable\":328155547,\"moneyMax\":8203888675,\"numOpenPortsRequired\":4,\"openPortCount\":3,\"requiredHackingSkill\":410,\"serverGrowth\":34}},\"rothman-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"rothman-uni\",\"httpPortOpen\":false,\"ip\":\"15.9.0.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"tensions-in-tech-race.lit\"],\"organizationName\":\"Rothman University\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.grow(target);\\n\\t}\\n}\",\"filename\":\"basic-grow.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"rothman-uni\",\"_hash\":\"fc7652eef146e96723fb16cbc2683cf66b1d09853fff0ed8b2ca6655039902d8\",\"moduleSequenceNumber\":181}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"basic-hack.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"rothman-uni\",\"_hash\":\"b431b860a325c1f1e8d3f9afa6bd629bf87ee6500edce2693501368a5588a221\",\"moduleSequenceNumber\":182}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(target);\\n\\t}\\n}\",\"filename\":\"basic-weaken.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"rothman-uni\",\"_hash\":\"ef6ef87a7a369f27563e9f084d651b032b74b974340529a78834d2cbf17c12a5\",\"moduleSequenceNumber\":183}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n// TODO: unused + unfinished, based on setup.ns\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst hostMachine = ns.getHostname();\\n\\tconst target = ns.args[0];\\n\\tvar servers = ns.scan(hostMachine);\\n\\tvar scripts = ns.ls(home, \\\".ns\\\");\\n\\n\\tfor (let entry in scripts) {\\n\\t\\tns.tprint(\\\"found script: \\\" + scripts[entry]);\\n\\t}\\n\\n\\tns.tprint(\\\"Host:  \\\" + hostMachine);\\n\\tfor (let entry in servers) {\\t// depth 0\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\t// depth 1\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== home && subservers.length > 1) {\\n\\t\\t\\t\\tns.tprint(\\\"-----> \\\" + subservers[subentry]);\\n\\t\\t\\t\\tawait takeover(subservers[subentry]);\\n\\t\\t\\t\\tlet subserversd2 = ns.scan(subservers[subentry]); // depth 2\\n\\t\\t\\t\\tfor (let subentryd2 in subserversd2) {\\n\\t\\t\\t\\t\\tif (subserversd2[subentryd2] !== subservers[subentry] && subserversd2[subentryd2] !== servers[entry] && subserversd2.length > 1) {\\n\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------> \\\" + subserversd2[subentryd2]);\\n\\t\\t\\t\\t\\t\\tawait takeover(subserversd2[subentryd2]);\\n\\t\\t\\t\\t\\t\\tlet subserversd3 = ns.scan(subserversd2[subentryd2]);\\t// depth 3\\n\\t\\t\\t\\t\\t\\tfor (let subentryd3 in subserversd3) {\\n\\t\\t\\t\\t\\t\\t\\tif (subserversd3[subentryd3] !== subserversd2[subentryd2] && subserversd3[subentryd3] !== subservers[subentry] && subserversd3.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------> \\\" + subserversd3[subentryd3]);\\n\\t\\t\\t\\t\\t\\t\\t\\tawait takeover(subserversd3[subentryd3]);\\n\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd4 = ns.scan(subserversd3[subentryd3]);\\t// depth 4\\n\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd4 in subserversd4) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd4[subentryd4] !== subserversd3[subentryd3] && subserversd4[subentryd4] !== subserversd2[subentryd2] && subserversd4.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------------> \\\" + subserversd4[subentryd4]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tawait takeover(subserversd4[subentryd4]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd5 = ns.scan(subserversd4[subentryd4]);\\t// depth 5\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd5 in subserversd5) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd5[subentryd5] !== subserversd4[subentryd4] && subserversd5[subentryd5] !== subserversd3[subentryd3] && subserversd5.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-------------------------> \\\" + subserversd5[subentryd5]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tawait takeover(subserversd5[subentryd5]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd6 = ns.scan(subserversd5[subentryd5]);\\t// depth 6\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd6 in subserversd6) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd6[subentryd6] !== subserversd5[subentryd5] && subserversd6[subentryd6] !== subserversd4[subentryd4] && subserversd6.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"------------------------------> \\\" + subserversd6[subentryd6]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tawait takeover(subserversd6[subentryd6]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd7 = ns.scan(subserversd6[subentryd6]);\\t// depth 7\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd7 in subserversd7) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd7[subentryd7] !== subserversd6[subentryd6] && subserversd7[subentryd7] !== subserversd5[subentryd5] && subserversd7.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-----------------------------------> \\\" + subserversd7[subentryd7]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tawait takeover(subserversd7[subentryd7]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tawait takeover(servers[entry]);\\n\\t}\\n\\n\\t/** \\n\\t * \\tAttempts to take over target machine\\t\\n\\t * \\n\\t *  @param {string} tar\\n\\t *  @return {boolean} outcome \\n\\t**/\\n\\tasync function takeover(tar) {\\n\\t\\tlet currentTarget = tar;\\n\\t\\tlet isNotTakenOver = true;\\n\\t\\tlet attemptCounter = 0;\\n\\n\\t\\tif (/*ns.getServerNumPortsRequired <= 5 && */ attemptCounter < 30) {\\n\\t\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\ttry {\\n\\t\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t\\t} catch(error) {\\n\\t\\t\\t\\t\\t\\tns.tprint(\\\"not enough ports to nuke \\\" +  currentTarget);\\n\\t\\t\\t\\t\\t\\treturn false;\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tattemptCounter++;\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.scp(scripts, home, currentTarget);\\n\\t\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"deep-setup.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":3.1,\"server\":\"rothman-uni\",\"_hash\":\"95e9530fb6f69bfe511a604adf704b1d63ca180a1d556d7b1669bf3a470b227e\",\"moduleSequenceNumber\":184}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tconst currentMachine = ns.getHostname();\\n\\tvar servers = ns.scan(currentMachine);\\n\\tvar scripts = ns.ls(home, \\\"basic-\\\");\\n\\n\\tns.tprint(\\\"Host:  \\\" + currentMachine);\\n\\tfor (let entry in servers) {\\t// depth 0\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\t// depth 1\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== home && subservers.length > 1) {\\n\\t\\t\\t\\tns.tprint(\\\"-----> \\\" + subservers[subentry]);\\n\\t\\t\\t\\tlet subserversd2 = ns.scan(subservers[subentry]); // depth 2\\n\\t\\t\\t\\tfor (let subentryd2 in subserversd2) {\\n\\t\\t\\t\\t\\tif (subserversd2[subentryd2] !== subservers[subentry] && subserversd2[subentryd2] !== servers[entry] && subserversd2.length > 1) {\\n\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------> \\\" + subserversd2[subentryd2]);\\n\\t\\t\\t\\t\\t\\tlet subserversd3 = ns.scan(subserversd2[subentryd2]);\\t// depth 3\\n\\t\\t\\t\\t\\t\\tfor (let subentryd3 in subserversd3) {\\n\\t\\t\\t\\t\\t\\t\\tif (subserversd3[subentryd3] !== subserversd2[subentryd2] && subserversd3[subentryd3] !== subservers[subentry] && subserversd3.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------> \\\" + subserversd3[subentryd3]);\\n\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd4 = ns.scan(subserversd3[subentryd3]);\\t// depth 4\\n\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd4 in subserversd4) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd4[subentryd4] !== subserversd3[subentryd3] && subserversd4[subentryd4] !== subserversd2[subentryd2] && subserversd4.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------------> \\\" + subserversd4[subentryd4]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd5 = ns.scan(subserversd4[subentryd4]);\\t// depth 5\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd5 in subserversd5) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd5[subentryd5] !== subserversd4[subentryd4] && subserversd5[subentryd5] !== subserversd3[subentryd3] && subserversd5.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-------------------------> \\\" + subserversd5[subentryd5]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd6 = ns.scan(subserversd5[subentryd5]);\\t// depth 6\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd6 in subserversd6) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd6[subentryd6] !== subserversd5[subentryd5] && subserversd6[subentryd6] !== subserversd4[subentryd4] && subserversd6.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"------------------------------> \\\" + subserversd6[subentryd6]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd7 = ns.scan(subserversd6[subentryd6]);\\t// depth 7\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor(let subentryd7 in subserversd7) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd7[subentryd7] !== subserversd6[subentryd6] && subserversd7[subentryd7] !== subserversd5[subentryd5] && subserversd7.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-----------------------------------> \\\" + subserversd7[subentryd7]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"gigascan.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.05,\"server\":\"rothman-uni\",\"_hash\":\"09d5eb91ac2188cd08d0b0658f50095ede1bc815d40e01a99435a8ab5d16f1b9\",\"moduleSequenceNumber\":185}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tvar servers = ns.scan(home);\\n\\tvar scripts = ns.ls(home, \\\"basic-\\\");\\n\\n\\tfor (let entry in scripts) {\\n\\t\\tns.tprint(\\\"found script: \\\" + scripts[entry]);\\n\\t}\\n\\n\\t// Hack servers (!!! depth = 2 !!!) if needed and populate with scripts\\n\\tfor (let entry in servers) {\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== \\\"home\\\") {\\n\\t\\t\\t\\tns.tprint(\\\"----->   \\\" + subservers[subentry]);\\n\\t\\t\\t\\tif (!ns.hasRootAccess(subservers[subentry])) {\\n\\t\\t\\t\\t\\ttakeover(subservers[subentry]);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tns.tprint(\\\"copying scripts to \\\" + subservers[subentry]);\\n\\t\\t\\t\\tawait ns.scp(scripts, home, subservers[subentry]);\\n\\t\\t\\t\\t//await ns.scp(\\\"setup.ns\\\", home, subservers[subentry]);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (!ns.hasRootAccess(servers[entry])) {\\n\\t\\t\\ttakeover(servers[entry]);\\n\\t\\t}\\n\\t\\tns.tprint(\\\"copying scripts to \\\" + servers[entry]);\\n\\t\\tawait ns.scp(scripts, home, servers[entry]);\\n\\t\\t//await ns.scp(\\\"setup.ns\\\", home, servers[entry]);\\n\\t}\\n\\n\\t/** \\n\\t * \\tAttempts to take over target machine\\t\\n\\t * \\n\\t *  @param {string} tar\\n\\t *  @return {boolean} outcome \\n\\t**/\\n\\tasync function takeover(tar) {\\n\\t\\tlet currentTarget = tar;\\n\\t\\tlet isNotTakenOver = true;\\n\\t\\tlet attemptCounter = 0;\\n\\n\\t\\tif (ns.getServerNumPortsRequired <= 5 && attemptCounter < 50) {\\n\\t\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\n\\t\\t\\t\\tattemptCounter++;\\n\\t\\t\\t}\\n\\n\\t\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"setup.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":3.15,\"server\":\"rothman-uni\",\"_hash\":\"3b3625aa608a7f37d7592c27fde49ee0052288713ba0f611649877b763edd804\",\"moduleSequenceNumber\":186}}],\"serversOnNetwork\":[\"comptek\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":46,\"hackDifficulty\":46,\"minDifficulty\":15,\"moneyAvailable\":214436545,\"moneyMax\":5360913625,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":379,\"serverGrowth\":42}},\"zb-institute\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-725903-Netburners.cct\",\"type\":\"Minimum Path Sum in a Triangle\",\"data\":[[6],[7,4],[9,7,1],[8,8,1,2],[2,9,8,5,4],[5,4,1,6,4,6],[8,8,6,2,2,9,6],[7,2,7,5,2,5,9,3],[5,4,1,6,6,4,8,2,8]],\"reward\":{\"name\":\"Netburners\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"zb-institute\",\"httpPortOpen\":false,\"ip\":\"83.3.7.5\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"ZB Institute of Technology\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"the-hub\",\"aevum-police\",\"millenium-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":66,\"hackDifficulty\":66,\"minDifficulty\":22,\"moneyAvailable\":1033012321,\"moneyMax\":25825308025,\"numOpenPortsRequired\":5,\"openPortCount\":3,\"requiredHackingSkill\":739,\"serverGrowth\":78}},\"summit-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-685105.cct\",\"type\":\"Sanitize Parentheses in Expression\",\"data\":\"()((a(())(a(aa((\",\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"summit-uni\",\"httpPortOpen\":false,\"ip\":\"31.4.7.6\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"synthetic-muscles.lit\"],\"organizationName\":\"Summit University\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.grow(target);\\n\\t}\\n}\",\"filename\":\"basic-grow.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"summit-uni\",\"_hash\":\"fc7652eef146e96723fb16cbc2683cf66b1d09853fff0ed8b2ca6655039902d8\",\"moduleSequenceNumber\":187}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"basic-hack.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"summit-uni\",\"_hash\":\"b431b860a325c1f1e8d3f9afa6bd629bf87ee6500edce2693501368a5588a221\",\"moduleSequenceNumber\":188}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(target);\\n\\t}\\n}\",\"filename\":\"basic-weaken.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"summit-uni\",\"_hash\":\"ef6ef87a7a369f27563e9f084d651b032b74b974340529a78834d2cbf17c12a5\",\"moduleSequenceNumber\":189}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n// TODO: unused + unfinished, based on setup.ns\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst hostMachine = ns.getHostname();\\n\\tconst target = ns.args[0];\\n\\tvar servers = ns.scan(hostMachine);\\n\\tvar scripts = ns.ls(home, \\\".ns\\\");\\n\\n\\tfor (let entry in scripts) {\\n\\t\\tns.tprint(\\\"found script: \\\" + scripts[entry]);\\n\\t}\\n\\n\\tns.tprint(\\\"Host:  \\\" + hostMachine);\\n\\tfor (let entry in servers) {\\t// depth 0\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\t// depth 1\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== home && subservers.length > 1) {\\n\\t\\t\\t\\tns.tprint(\\\"-----> \\\" + subservers[subentry]);\\n\\t\\t\\t\\tawait takeover(subservers[subentry]);\\n\\t\\t\\t\\tlet subserversd2 = ns.scan(subservers[subentry]); // depth 2\\n\\t\\t\\t\\tfor (let subentryd2 in subserversd2) {\\n\\t\\t\\t\\t\\tif (subserversd2[subentryd2] !== subservers[subentry] && subserversd2[subentryd2] !== servers[entry] && subserversd2.length > 1) {\\n\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------> \\\" + subserversd2[subentryd2]);\\n\\t\\t\\t\\t\\t\\tawait takeover(subserversd2[subentryd2]);\\n\\t\\t\\t\\t\\t\\tlet subserversd3 = ns.scan(subserversd2[subentryd2]);\\t// depth 3\\n\\t\\t\\t\\t\\t\\tfor (let subentryd3 in subserversd3) {\\n\\t\\t\\t\\t\\t\\t\\tif (subserversd3[subentryd3] !== subserversd2[subentryd2] && subserversd3[subentryd3] !== subservers[subentry] && subserversd3.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------> \\\" + subserversd3[subentryd3]);\\n\\t\\t\\t\\t\\t\\t\\t\\tawait takeover(subserversd3[subentryd3]);\\n\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd4 = ns.scan(subserversd3[subentryd3]);\\t// depth 4\\n\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd4 in subserversd4) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd4[subentryd4] !== subserversd3[subentryd3] && subserversd4[subentryd4] !== subserversd2[subentryd2] && subserversd4.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------------> \\\" + subserversd4[subentryd4]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tawait takeover(subserversd4[subentryd4]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd5 = ns.scan(subserversd4[subentryd4]);\\t// depth 5\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd5 in subserversd5) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd5[subentryd5] !== subserversd4[subentryd4] && subserversd5[subentryd5] !== subserversd3[subentryd3] && subserversd5.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-------------------------> \\\" + subserversd5[subentryd5]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tawait takeover(subserversd5[subentryd5]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd6 = ns.scan(subserversd5[subentryd5]);\\t// depth 6\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd6 in subserversd6) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd6[subentryd6] !== subserversd5[subentryd5] && subserversd6[subentryd6] !== subserversd4[subentryd4] && subserversd6.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"------------------------------> \\\" + subserversd6[subentryd6]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tawait takeover(subserversd6[subentryd6]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd7 = ns.scan(subserversd6[subentryd6]);\\t// depth 7\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd7 in subserversd7) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd7[subentryd7] !== subserversd6[subentryd6] && subserversd7[subentryd7] !== subserversd5[subentryd5] && subserversd7.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-----------------------------------> \\\" + subserversd7[subentryd7]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tawait takeover(subserversd7[subentryd7]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tawait takeover(servers[entry]);\\n\\t}\\n\\n\\t/** \\n\\t * \\tAttempts to take over target machine\\t\\n\\t * \\n\\t *  @param {string} tar\\n\\t *  @return {boolean} outcome \\n\\t**/\\n\\tasync function takeover(tar) {\\n\\t\\tlet currentTarget = tar;\\n\\t\\tlet isNotTakenOver = true;\\n\\t\\tlet attemptCounter = 0;\\n\\n\\t\\tif (/*ns.getServerNumPortsRequired <= 5 && */ attemptCounter < 30) {\\n\\t\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\ttry {\\n\\t\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t\\t} catch(error) {\\n\\t\\t\\t\\t\\t\\tns.tprint(\\\"not enough ports to nuke \\\" +  currentTarget);\\n\\t\\t\\t\\t\\t\\treturn false;\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tattemptCounter++;\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.scp(scripts, home, currentTarget);\\n\\t\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"deep-setup.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":3.1,\"server\":\"summit-uni\",\"_hash\":\"95e9530fb6f69bfe511a604adf704b1d63ca180a1d556d7b1669bf3a470b227e\",\"moduleSequenceNumber\":190}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tconst currentMachine = ns.getHostname();\\n\\tvar servers = ns.scan(currentMachine);\\n\\tvar scripts = ns.ls(home, \\\"basic-\\\");\\n\\n\\tns.tprint(\\\"Host:  \\\" + currentMachine);\\n\\tfor (let entry in servers) {\\t// depth 0\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\t// depth 1\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== home && subservers.length > 1) {\\n\\t\\t\\t\\tns.tprint(\\\"-----> \\\" + subservers[subentry]);\\n\\t\\t\\t\\tlet subserversd2 = ns.scan(subservers[subentry]); // depth 2\\n\\t\\t\\t\\tfor (let subentryd2 in subserversd2) {\\n\\t\\t\\t\\t\\tif (subserversd2[subentryd2] !== subservers[subentry] && subserversd2[subentryd2] !== servers[entry] && subserversd2.length > 1) {\\n\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------> \\\" + subserversd2[subentryd2]);\\n\\t\\t\\t\\t\\t\\tlet subserversd3 = ns.scan(subserversd2[subentryd2]);\\t// depth 3\\n\\t\\t\\t\\t\\t\\tfor (let subentryd3 in subserversd3) {\\n\\t\\t\\t\\t\\t\\t\\tif (subserversd3[subentryd3] !== subserversd2[subentryd2] && subserversd3[subentryd3] !== subservers[subentry] && subserversd3.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------> \\\" + subserversd3[subentryd3]);\\n\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd4 = ns.scan(subserversd3[subentryd3]);\\t// depth 4\\n\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd4 in subserversd4) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd4[subentryd4] !== subserversd3[subentryd3] && subserversd4[subentryd4] !== subserversd2[subentryd2] && subserversd4.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------------> \\\" + subserversd4[subentryd4]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd5 = ns.scan(subserversd4[subentryd4]);\\t// depth 5\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd5 in subserversd5) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd5[subentryd5] !== subserversd4[subentryd4] && subserversd5[subentryd5] !== subserversd3[subentryd3] && subserversd5.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-------------------------> \\\" + subserversd5[subentryd5]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd6 = ns.scan(subserversd5[subentryd5]);\\t// depth 6\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd6 in subserversd6) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd6[subentryd6] !== subserversd5[subentryd5] && subserversd6[subentryd6] !== subserversd4[subentryd4] && subserversd6.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"------------------------------> \\\" + subserversd6[subentryd6]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd7 = ns.scan(subserversd6[subentryd6]);\\t// depth 7\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor(let subentryd7 in subserversd7) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd7[subentryd7] !== subserversd6[subentryd6] && subserversd7[subentryd7] !== subserversd5[subentryd5] && subserversd7.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-----------------------------------> \\\" + subserversd7[subentryd7]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"gigascan.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.05,\"server\":\"summit-uni\",\"_hash\":\"09d5eb91ac2188cd08d0b0658f50095ede1bc815d40e01a99435a8ab5d16f1b9\",\"moduleSequenceNumber\":191}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tvar servers = ns.scan(home);\\n\\tvar scripts = ns.ls(home, \\\"basic-\\\");\\n\\n\\tfor (let entry in scripts) {\\n\\t\\tns.tprint(\\\"found script: \\\" + scripts[entry]);\\n\\t}\\n\\n\\t// Hack servers (!!! depth = 2 !!!) if needed and populate with scripts\\n\\tfor (let entry in servers) {\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== \\\"home\\\") {\\n\\t\\t\\t\\tns.tprint(\\\"----->   \\\" + subservers[subentry]);\\n\\t\\t\\t\\tif (!ns.hasRootAccess(subservers[subentry])) {\\n\\t\\t\\t\\t\\ttakeover(subservers[subentry]);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tns.tprint(\\\"copying scripts to \\\" + subservers[subentry]);\\n\\t\\t\\t\\tawait ns.scp(scripts, home, subservers[subentry]);\\n\\t\\t\\t\\t//await ns.scp(\\\"setup.ns\\\", home, subservers[subentry]);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (!ns.hasRootAccess(servers[entry])) {\\n\\t\\t\\ttakeover(servers[entry]);\\n\\t\\t}\\n\\t\\tns.tprint(\\\"copying scripts to \\\" + servers[entry]);\\n\\t\\tawait ns.scp(scripts, home, servers[entry]);\\n\\t\\t//await ns.scp(\\\"setup.ns\\\", home, servers[entry]);\\n\\t}\\n\\n\\t/** \\n\\t * \\tAttempts to take over target machine\\t\\n\\t * \\n\\t *  @param {string} tar\\n\\t *  @return {boolean} outcome \\n\\t**/\\n\\tasync function takeover(tar) {\\n\\t\\tlet currentTarget = tar;\\n\\t\\tlet isNotTakenOver = true;\\n\\t\\tlet attemptCounter = 0;\\n\\n\\t\\tif (ns.getServerNumPortsRequired <= 5 && attemptCounter < 50) {\\n\\t\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\n\\t\\t\\t\\tattemptCounter++;\\n\\t\\t\\t}\\n\\n\\t\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"setup.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":3.15,\"server\":\"summit-uni\",\"_hash\":\"3b3625aa608a7f37d7592c27fde49ee0052288713ba0f611649877b763edd804\",\"moduleSequenceNumber\":192}}],\"serversOnNetwork\":[\"avmnite-02h\",\"rho-construction\",\"alpha-ent\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":65,\"hackDifficulty\":65,\"minDifficulty\":22,\"moneyAvailable\":305213052,\"moneyMax\":7630326300,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":463,\"serverGrowth\":46}},\"syscore\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"syscore\",\"httpPortOpen\":false,\"ip\":\"97.1.1.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"SysCore Securities\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"avmnite-02h\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":72,\"hackDifficulty\":72,\"minDifficulty\":24,\"moneyAvailable\":493075826,\"moneyMax\":12326895650,\"numOpenPortsRequired\":4,\"openPortCount\":3,\"requiredHackingSkill\":641,\"serverGrowth\":60}},\"catalyst\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-347669.cct\",\"type\":\"Array Jumping Game\",\"data\":[2,6,5,4,10,6,0,8],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"catalyst\",\"httpPortOpen\":false,\"ip\":\"33.4.4.9\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"tensions-in-tech-race.lit\"],\"organizationName\":\"Catalyst Ventures\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.grow(target);\\n\\t}\\n}\",\"filename\":\"basic-grow.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"catalyst\",\"_hash\":\"fc7652eef146e96723fb16cbc2683cf66b1d09853fff0ed8b2ca6655039902d8\",\"moduleSequenceNumber\":193}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"basic-hack.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"catalyst\",\"_hash\":\"b431b860a325c1f1e8d3f9afa6bd629bf87ee6500edce2693501368a5588a221\",\"moduleSequenceNumber\":194}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(target);\\n\\t}\\n}\",\"filename\":\"basic-weaken.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"catalyst\",\"_hash\":\"ef6ef87a7a369f27563e9f084d651b032b74b974340529a78834d2cbf17c12a5\",\"moduleSequenceNumber\":195}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n// TODO: unused + unfinished, based on setup.ns\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst hostMachine = ns.getHostname();\\n\\tconst target = ns.args[0];\\n\\tvar servers = ns.scan(hostMachine);\\n\\tvar scripts = ns.ls(home, \\\".ns\\\");\\n\\n\\tfor (let entry in scripts) {\\n\\t\\tns.tprint(\\\"found script: \\\" + scripts[entry]);\\n\\t}\\n\\n\\tns.tprint(\\\"Host:  \\\" + hostMachine);\\n\\tfor (let entry in servers) {\\t// depth 0\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\t// depth 1\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== home && subservers.length > 1) {\\n\\t\\t\\t\\tns.tprint(\\\"-----> \\\" + subservers[subentry]);\\n\\t\\t\\t\\tawait takeover(subservers[subentry]);\\n\\t\\t\\t\\tlet subserversd2 = ns.scan(subservers[subentry]); // depth 2\\n\\t\\t\\t\\tfor (let subentryd2 in subserversd2) {\\n\\t\\t\\t\\t\\tif (subserversd2[subentryd2] !== subservers[subentry] && subserversd2[subentryd2] !== servers[entry] && subserversd2.length > 1) {\\n\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------> \\\" + subserversd2[subentryd2]);\\n\\t\\t\\t\\t\\t\\tawait takeover(subserversd2[subentryd2]);\\n\\t\\t\\t\\t\\t\\tlet subserversd3 = ns.scan(subserversd2[subentryd2]);\\t// depth 3\\n\\t\\t\\t\\t\\t\\tfor (let subentryd3 in subserversd3) {\\n\\t\\t\\t\\t\\t\\t\\tif (subserversd3[subentryd3] !== subserversd2[subentryd2] && subserversd3[subentryd3] !== subservers[subentry] && subserversd3.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------> \\\" + subserversd3[subentryd3]);\\n\\t\\t\\t\\t\\t\\t\\t\\tawait takeover(subserversd3[subentryd3]);\\n\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd4 = ns.scan(subserversd3[subentryd3]);\\t// depth 4\\n\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd4 in subserversd4) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd4[subentryd4] !== subserversd3[subentryd3] && subserversd4[subentryd4] !== subserversd2[subentryd2] && subserversd4.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------------> \\\" + subserversd4[subentryd4]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tawait takeover(subserversd4[subentryd4]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd5 = ns.scan(subserversd4[subentryd4]);\\t// depth 5\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd5 in subserversd5) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd5[subentryd5] !== subserversd4[subentryd4] && subserversd5[subentryd5] !== subserversd3[subentryd3] && subserversd5.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-------------------------> \\\" + subserversd5[subentryd5]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tawait takeover(subserversd5[subentryd5]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd6 = ns.scan(subserversd5[subentryd5]);\\t// depth 6\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd6 in subserversd6) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd6[subentryd6] !== subserversd5[subentryd5] && subserversd6[subentryd6] !== subserversd4[subentryd4] && subserversd6.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"------------------------------> \\\" + subserversd6[subentryd6]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tawait takeover(subserversd6[subentryd6]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd7 = ns.scan(subserversd6[subentryd6]);\\t// depth 7\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd7 in subserversd7) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd7[subentryd7] !== subserversd6[subentryd6] && subserversd7[subentryd7] !== subserversd5[subentryd5] && subserversd7.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-----------------------------------> \\\" + subserversd7[subentryd7]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tawait takeover(subserversd7[subentryd7]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tawait takeover(servers[entry]);\\n\\t}\\n\\n\\t/** \\n\\t * \\tAttempts to take over target machine\\t\\n\\t * \\n\\t *  @param {string} tar\\n\\t *  @return {boolean} outcome \\n\\t**/\\n\\tasync function takeover(tar) {\\n\\t\\tlet currentTarget = tar;\\n\\t\\tlet isNotTakenOver = true;\\n\\t\\tlet attemptCounter = 0;\\n\\n\\t\\tif (/*ns.getServerNumPortsRequired <= 5 && */ attemptCounter < 30) {\\n\\t\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\ttry {\\n\\t\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t\\t} catch(error) {\\n\\t\\t\\t\\t\\t\\tns.tprint(\\\"not enough ports to nuke \\\" +  currentTarget);\\n\\t\\t\\t\\t\\t\\treturn false;\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tattemptCounter++;\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.scp(scripts, home, currentTarget);\\n\\t\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"deep-setup.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":3.1,\"server\":\"catalyst\",\"_hash\":\"95e9530fb6f69bfe511a604adf704b1d63ca180a1d556d7b1669bf3a470b227e\",\"moduleSequenceNumber\":196}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tconst currentMachine = ns.getHostname();\\n\\tvar servers = ns.scan(currentMachine);\\n\\tvar scripts = ns.ls(home, \\\"basic-\\\");\\n\\n\\tns.tprint(\\\"Host:  \\\" + currentMachine);\\n\\tfor (let entry in servers) {\\t// depth 0\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\t// depth 1\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== home && subservers.length > 1) {\\n\\t\\t\\t\\tns.tprint(\\\"-----> \\\" + subservers[subentry]);\\n\\t\\t\\t\\tlet subserversd2 = ns.scan(subservers[subentry]); // depth 2\\n\\t\\t\\t\\tfor (let subentryd2 in subserversd2) {\\n\\t\\t\\t\\t\\tif (subserversd2[subentryd2] !== subservers[subentry] && subserversd2[subentryd2] !== servers[entry] && subserversd2.length > 1) {\\n\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------> \\\" + subserversd2[subentryd2]);\\n\\t\\t\\t\\t\\t\\tlet subserversd3 = ns.scan(subserversd2[subentryd2]);\\t// depth 3\\n\\t\\t\\t\\t\\t\\tfor (let subentryd3 in subserversd3) {\\n\\t\\t\\t\\t\\t\\t\\tif (subserversd3[subentryd3] !== subserversd2[subentryd2] && subserversd3[subentryd3] !== subservers[subentry] && subserversd3.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------> \\\" + subserversd3[subentryd3]);\\n\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd4 = ns.scan(subserversd3[subentryd3]);\\t// depth 4\\n\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd4 in subserversd4) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd4[subentryd4] !== subserversd3[subentryd3] && subserversd4[subentryd4] !== subserversd2[subentryd2] && subserversd4.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------------> \\\" + subserversd4[subentryd4]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd5 = ns.scan(subserversd4[subentryd4]);\\t// depth 5\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd5 in subserversd5) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd5[subentryd5] !== subserversd4[subentryd4] && subserversd5[subentryd5] !== subserversd3[subentryd3] && subserversd5.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-------------------------> \\\" + subserversd5[subentryd5]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd6 = ns.scan(subserversd5[subentryd5]);\\t// depth 6\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd6 in subserversd6) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd6[subentryd6] !== subserversd5[subentryd5] && subserversd6[subentryd6] !== subserversd4[subentryd4] && subserversd6.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"------------------------------> \\\" + subserversd6[subentryd6]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd7 = ns.scan(subserversd6[subentryd6]);\\t// depth 7\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor(let subentryd7 in subserversd7) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd7[subentryd7] !== subserversd6[subentryd6] && subserversd7[subentryd7] !== subserversd5[subentryd5] && subserversd7.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-----------------------------------> \\\" + subserversd7[subentryd7]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"gigascan.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.05,\"server\":\"catalyst\",\"_hash\":\"09d5eb91ac2188cd08d0b0658f50095ede1bc815d40e01a99435a8ab5d16f1b9\",\"moduleSequenceNumber\":197}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tvar servers = ns.scan(home);\\n\\tvar scripts = ns.ls(home, \\\"basic-\\\");\\n\\n\\tfor (let entry in scripts) {\\n\\t\\tns.tprint(\\\"found script: \\\" + scripts[entry]);\\n\\t}\\n\\n\\t// Hack servers (!!! depth = 2 !!!) if needed and populate with scripts\\n\\tfor (let entry in servers) {\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== \\\"home\\\") {\\n\\t\\t\\t\\tns.tprint(\\\"----->   \\\" + subservers[subentry]);\\n\\t\\t\\t\\tif (!ns.hasRootAccess(subservers[subentry])) {\\n\\t\\t\\t\\t\\ttakeover(subservers[subentry]);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tns.tprint(\\\"copying scripts to \\\" + subservers[subentry]);\\n\\t\\t\\t\\tawait ns.scp(scripts, home, subservers[subentry]);\\n\\t\\t\\t\\t//await ns.scp(\\\"setup.ns\\\", home, subservers[subentry]);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (!ns.hasRootAccess(servers[entry])) {\\n\\t\\t\\ttakeover(servers[entry]);\\n\\t\\t}\\n\\t\\tns.tprint(\\\"copying scripts to \\\" + servers[entry]);\\n\\t\\tawait ns.scp(scripts, home, servers[entry]);\\n\\t\\t//await ns.scp(\\\"setup.ns\\\", home, servers[entry]);\\n\\t}\\n\\n\\t/** \\n\\t * \\tAttempts to take over target machine\\t\\n\\t * \\n\\t *  @param {string} tar\\n\\t *  @return {boolean} outcome \\n\\t**/\\n\\tasync function takeover(tar) {\\n\\t\\tlet currentTarget = tar;\\n\\t\\tlet isNotTakenOver = true;\\n\\t\\tlet attemptCounter = 0;\\n\\n\\t\\tif (ns.getServerNumPortsRequired <= 5 && attemptCounter < 50) {\\n\\t\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\n\\t\\t\\t\\tattemptCounter++;\\n\\t\\t\\t}\\n\\n\\t\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"setup.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":3.15,\"server\":\"catalyst\",\"_hash\":\"3b3625aa608a7f37d7592c27fde49ee0052288713ba0f611649877b763edd804\",\"moduleSequenceNumber\":198}}],\"serversOnNetwork\":[\"avmnite-02h\",\"lexo-corp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":61,\"hackDifficulty\":61,\"minDifficulty\":20,\"moneyAvailable\":491222791,\"moneyMax\":12280569775,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":441,\"serverGrowth\":45}},\"the-hub\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"the-hub\",\"httpPortOpen\":false,\"ip\":\"51.5.1.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"The Hub\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.grow(target);\\n\\t}\\n}\",\"filename\":\"basic-grow.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"the-hub\",\"_hash\":\"fc7652eef146e96723fb16cbc2683cf66b1d09853fff0ed8b2ca6655039902d8\",\"moduleSequenceNumber\":199}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"basic-hack.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"the-hub\",\"_hash\":\"b431b860a325c1f1e8d3f9afa6bd629bf87ee6500edce2693501368a5588a221\",\"moduleSequenceNumber\":200}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(target);\\n\\t}\\n}\",\"filename\":\"basic-weaken.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"the-hub\",\"_hash\":\"ef6ef87a7a369f27563e9f084d651b032b74b974340529a78834d2cbf17c12a5\",\"moduleSequenceNumber\":201}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n// TODO: unused + unfinished, based on setup.ns\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst hostMachine = ns.getHostname();\\n\\tconst target = ns.args[0];\\n\\tvar servers = ns.scan(hostMachine);\\n\\tvar scripts = ns.ls(home, \\\".ns\\\");\\n\\n\\tfor (let entry in scripts) {\\n\\t\\tns.tprint(\\\"found script: \\\" + scripts[entry]);\\n\\t}\\n\\n\\tns.tprint(\\\"Host:  \\\" + hostMachine);\\n\\tfor (let entry in servers) {\\t// depth 0\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\t// depth 1\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== home && subservers.length > 1) {\\n\\t\\t\\t\\tns.tprint(\\\"-----> \\\" + subservers[subentry]);\\n\\t\\t\\t\\tawait takeover(subservers[subentry]);\\n\\t\\t\\t\\tlet subserversd2 = ns.scan(subservers[subentry]); // depth 2\\n\\t\\t\\t\\tfor (let subentryd2 in subserversd2) {\\n\\t\\t\\t\\t\\tif (subserversd2[subentryd2] !== subservers[subentry] && subserversd2[subentryd2] !== servers[entry] && subserversd2.length > 1) {\\n\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------> \\\" + subserversd2[subentryd2]);\\n\\t\\t\\t\\t\\t\\tawait takeover(subserversd2[subentryd2]);\\n\\t\\t\\t\\t\\t\\tlet subserversd3 = ns.scan(subserversd2[subentryd2]);\\t// depth 3\\n\\t\\t\\t\\t\\t\\tfor (let subentryd3 in subserversd3) {\\n\\t\\t\\t\\t\\t\\t\\tif (subserversd3[subentryd3] !== subserversd2[subentryd2] && subserversd3[subentryd3] !== subservers[subentry] && subserversd3.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------> \\\" + subserversd3[subentryd3]);\\n\\t\\t\\t\\t\\t\\t\\t\\tawait takeover(subserversd3[subentryd3]);\\n\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd4 = ns.scan(subserversd3[subentryd3]);\\t// depth 4\\n\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd4 in subserversd4) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd4[subentryd4] !== subserversd3[subentryd3] && subserversd4[subentryd4] !== subserversd2[subentryd2] && subserversd4.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------------> \\\" + subserversd4[subentryd4]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tawait takeover(subserversd4[subentryd4]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd5 = ns.scan(subserversd4[subentryd4]);\\t// depth 5\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd5 in subserversd5) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd5[subentryd5] !== subserversd4[subentryd4] && subserversd5[subentryd5] !== subserversd3[subentryd3] && subserversd5.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-------------------------> \\\" + subserversd5[subentryd5]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tawait takeover(subserversd5[subentryd5]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd6 = ns.scan(subserversd5[subentryd5]);\\t// depth 6\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd6 in subserversd6) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd6[subentryd6] !== subserversd5[subentryd5] && subserversd6[subentryd6] !== subserversd4[subentryd4] && subserversd6.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"------------------------------> \\\" + subserversd6[subentryd6]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tawait takeover(subserversd6[subentryd6]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd7 = ns.scan(subserversd6[subentryd6]);\\t// depth 7\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd7 in subserversd7) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd7[subentryd7] !== subserversd6[subentryd6] && subserversd7[subentryd7] !== subserversd5[subentryd5] && subserversd7.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-----------------------------------> \\\" + subserversd7[subentryd7]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tawait takeover(subserversd7[subentryd7]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tawait takeover(servers[entry]);\\n\\t}\\n\\n\\t/** \\n\\t * \\tAttempts to take over target machine\\t\\n\\t * \\n\\t *  @param {string} tar\\n\\t *  @return {boolean} outcome \\n\\t**/\\n\\tasync function takeover(tar) {\\n\\t\\tlet currentTarget = tar;\\n\\t\\tlet isNotTakenOver = true;\\n\\t\\tlet attemptCounter = 0;\\n\\n\\t\\tif (/*ns.getServerNumPortsRequired <= 5 && */ attemptCounter < 30) {\\n\\t\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\ttry {\\n\\t\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t\\t} catch(error) {\\n\\t\\t\\t\\t\\t\\tns.tprint(\\\"not enough ports to nuke \\\" +  currentTarget);\\n\\t\\t\\t\\t\\t\\treturn false;\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tattemptCounter++;\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.scp(scripts, home, currentTarget);\\n\\t\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"deep-setup.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":3.1,\"server\":\"the-hub\",\"_hash\":\"95e9530fb6f69bfe511a604adf704b1d63ca180a1d556d7b1669bf3a470b227e\",\"moduleSequenceNumber\":202}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tconst currentMachine = ns.getHostname();\\n\\tvar servers = ns.scan(currentMachine);\\n\\tvar scripts = ns.ls(home, \\\"basic-\\\");\\n\\n\\tns.tprint(\\\"Host:  \\\" + currentMachine);\\n\\tfor (let entry in servers) {\\t// depth 0\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\t// depth 1\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== home && subservers.length > 1) {\\n\\t\\t\\t\\tns.tprint(\\\"-----> \\\" + subservers[subentry]);\\n\\t\\t\\t\\tlet subserversd2 = ns.scan(subservers[subentry]); // depth 2\\n\\t\\t\\t\\tfor (let subentryd2 in subserversd2) {\\n\\t\\t\\t\\t\\tif (subserversd2[subentryd2] !== subservers[subentry] && subserversd2[subentryd2] !== servers[entry] && subserversd2.length > 1) {\\n\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------> \\\" + subserversd2[subentryd2]);\\n\\t\\t\\t\\t\\t\\tlet subserversd3 = ns.scan(subserversd2[subentryd2]);\\t// depth 3\\n\\t\\t\\t\\t\\t\\tfor (let subentryd3 in subserversd3) {\\n\\t\\t\\t\\t\\t\\t\\tif (subserversd3[subentryd3] !== subserversd2[subentryd2] && subserversd3[subentryd3] !== subservers[subentry] && subserversd3.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------> \\\" + subserversd3[subentryd3]);\\n\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd4 = ns.scan(subserversd3[subentryd3]);\\t// depth 4\\n\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd4 in subserversd4) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd4[subentryd4] !== subserversd3[subentryd3] && subserversd4[subentryd4] !== subserversd2[subentryd2] && subserversd4.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------------> \\\" + subserversd4[subentryd4]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd5 = ns.scan(subserversd4[subentryd4]);\\t// depth 5\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd5 in subserversd5) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd5[subentryd5] !== subserversd4[subentryd4] && subserversd5[subentryd5] !== subserversd3[subentryd3] && subserversd5.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-------------------------> \\\" + subserversd5[subentryd5]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd6 = ns.scan(subserversd5[subentryd5]);\\t// depth 6\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd6 in subserversd6) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd6[subentryd6] !== subserversd5[subentryd5] && subserversd6[subentryd6] !== subserversd4[subentryd4] && subserversd6.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"------------------------------> \\\" + subserversd6[subentryd6]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd7 = ns.scan(subserversd6[subentryd6]);\\t// depth 7\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor(let subentryd7 in subserversd7) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd7[subentryd7] !== subserversd6[subentryd6] && subserversd7[subentryd7] !== subserversd5[subentryd5] && subserversd7.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-----------------------------------> \\\" + subserversd7[subentryd7]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"gigascan.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.05,\"server\":\"the-hub\",\"_hash\":\"09d5eb91ac2188cd08d0b0658f50095ede1bc815d40e01a99435a8ab5d16f1b9\",\"moduleSequenceNumber\":203}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tvar servers = ns.scan(home);\\n\\tvar scripts = ns.ls(home, \\\"basic-\\\");\\n\\n\\tfor (let entry in scripts) {\\n\\t\\tns.tprint(\\\"found script: \\\" + scripts[entry]);\\n\\t}\\n\\n\\t// Hack servers (!!! depth = 2 !!!) if needed and populate with scripts\\n\\tfor (let entry in servers) {\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== \\\"home\\\") {\\n\\t\\t\\t\\tns.tprint(\\\"----->   \\\" + subservers[subentry]);\\n\\t\\t\\t\\tif (!ns.hasRootAccess(subservers[subentry])) {\\n\\t\\t\\t\\t\\ttakeover(subservers[subentry]);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tns.tprint(\\\"copying scripts to \\\" + subservers[subentry]);\\n\\t\\t\\t\\tawait ns.scp(scripts, home, subservers[subentry]);\\n\\t\\t\\t\\t//await ns.scp(\\\"setup.ns\\\", home, subservers[subentry]);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (!ns.hasRootAccess(servers[entry])) {\\n\\t\\t\\ttakeover(servers[entry]);\\n\\t\\t}\\n\\t\\tns.tprint(\\\"copying scripts to \\\" + servers[entry]);\\n\\t\\tawait ns.scp(scripts, home, servers[entry]);\\n\\t\\t//await ns.scp(\\\"setup.ns\\\", home, servers[entry]);\\n\\t}\\n\\n\\t/** \\n\\t * \\tAttempts to take over target machine\\t\\n\\t * \\n\\t *  @param {string} tar\\n\\t *  @return {boolean} outcome \\n\\t**/\\n\\tasync function takeover(tar) {\\n\\t\\tlet currentTarget = tar;\\n\\t\\tlet isNotTakenOver = true;\\n\\t\\tlet attemptCounter = 0;\\n\\n\\t\\tif (ns.getServerNumPortsRequired <= 5 && attemptCounter < 50) {\\n\\t\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\n\\t\\t\\t\\tattemptCounter++;\\n\\t\\t\\t}\\n\\n\\t\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"setup.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":3.15,\"server\":\"the-hub\",\"_hash\":\"3b3625aa608a7f37d7592c27fde49ee0052288713ba0f611649877b763edd804\",\"moduleSequenceNumber\":204}}],\"serversOnNetwork\":[\"omega-net\",\"zb-institute\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":35,\"hackDifficulty\":35,\"minDifficulty\":12,\"moneyAvailable\":197883759,\"moneyMax\":4947093975,\"numOpenPortsRequired\":2,\"openPortCount\":3,\"requiredHackingSkill\":294,\"serverGrowth\":51}},\"comptek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"comptek\",\"httpPortOpen\":false,\"ip\":\"2.1.3.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"CompuTek\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.grow(target);\\n\\t}\\n}\",\"filename\":\"basic-grow.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"comptek\",\"_hash\":\"fc7652eef146e96723fb16cbc2683cf66b1d09853fff0ed8b2ca6655039902d8\",\"moduleSequenceNumber\":205}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"basic-hack.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"comptek\",\"_hash\":\"b431b860a325c1f1e8d3f9afa6bd629bf87ee6500edce2693501368a5588a221\",\"moduleSequenceNumber\":206}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(target);\\n\\t}\\n}\",\"filename\":\"basic-weaken.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"comptek\",\"_hash\":\"ef6ef87a7a369f27563e9f084d651b032b74b974340529a78834d2cbf17c12a5\",\"moduleSequenceNumber\":207}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n// TODO: unused + unfinished, based on setup.ns\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst hostMachine = ns.getHostname();\\n\\tconst target = ns.args[0];\\n\\tvar servers = ns.scan(hostMachine);\\n\\tvar scripts = ns.ls(home, \\\".ns\\\");\\n\\n\\tfor (let entry in scripts) {\\n\\t\\tns.tprint(\\\"found script: \\\" + scripts[entry]);\\n\\t}\\n\\n\\tns.tprint(\\\"Host:  \\\" + hostMachine);\\n\\tfor (let entry in servers) {\\t// depth 0\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\t// depth 1\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== home && subservers.length > 1) {\\n\\t\\t\\t\\tns.tprint(\\\"-----> \\\" + subservers[subentry]);\\n\\t\\t\\t\\tawait takeover(subservers[subentry]);\\n\\t\\t\\t\\tlet subserversd2 = ns.scan(subservers[subentry]); // depth 2\\n\\t\\t\\t\\tfor (let subentryd2 in subserversd2) {\\n\\t\\t\\t\\t\\tif (subserversd2[subentryd2] !== subservers[subentry] && subserversd2[subentryd2] !== servers[entry] && subserversd2.length > 1) {\\n\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------> \\\" + subserversd2[subentryd2]);\\n\\t\\t\\t\\t\\t\\tawait takeover(subserversd2[subentryd2]);\\n\\t\\t\\t\\t\\t\\tlet subserversd3 = ns.scan(subserversd2[subentryd2]);\\t// depth 3\\n\\t\\t\\t\\t\\t\\tfor (let subentryd3 in subserversd3) {\\n\\t\\t\\t\\t\\t\\t\\tif (subserversd3[subentryd3] !== subserversd2[subentryd2] && subserversd3[subentryd3] !== subservers[subentry] && subserversd3.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------> \\\" + subserversd3[subentryd3]);\\n\\t\\t\\t\\t\\t\\t\\t\\tawait takeover(subserversd3[subentryd3]);\\n\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd4 = ns.scan(subserversd3[subentryd3]);\\t// depth 4\\n\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd4 in subserversd4) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd4[subentryd4] !== subserversd3[subentryd3] && subserversd4[subentryd4] !== subserversd2[subentryd2] && subserversd4.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------------> \\\" + subserversd4[subentryd4]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tawait takeover(subserversd4[subentryd4]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd5 = ns.scan(subserversd4[subentryd4]);\\t// depth 5\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd5 in subserversd5) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd5[subentryd5] !== subserversd4[subentryd4] && subserversd5[subentryd5] !== subserversd3[subentryd3] && subserversd5.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-------------------------> \\\" + subserversd5[subentryd5]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tawait takeover(subserversd5[subentryd5]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd6 = ns.scan(subserversd5[subentryd5]);\\t// depth 6\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd6 in subserversd6) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd6[subentryd6] !== subserversd5[subentryd5] && subserversd6[subentryd6] !== subserversd4[subentryd4] && subserversd6.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"------------------------------> \\\" + subserversd6[subentryd6]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tawait takeover(subserversd6[subentryd6]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd7 = ns.scan(subserversd6[subentryd6]);\\t// depth 7\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd7 in subserversd7) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd7[subentryd7] !== subserversd6[subentryd6] && subserversd7[subentryd7] !== subserversd5[subentryd5] && subserversd7.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-----------------------------------> \\\" + subserversd7[subentryd7]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tawait takeover(subserversd7[subentryd7]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tawait takeover(servers[entry]);\\n\\t}\\n\\n\\t/** \\n\\t * \\tAttempts to take over target machine\\t\\n\\t * \\n\\t *  @param {string} tar\\n\\t *  @return {boolean} outcome \\n\\t**/\\n\\tasync function takeover(tar) {\\n\\t\\tlet currentTarget = tar;\\n\\t\\tlet isNotTakenOver = true;\\n\\t\\tlet attemptCounter = 0;\\n\\n\\t\\tif (/*ns.getServerNumPortsRequired <= 5 && */ attemptCounter < 30) {\\n\\t\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\ttry {\\n\\t\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t\\t} catch(error) {\\n\\t\\t\\t\\t\\t\\tns.tprint(\\\"not enough ports to nuke \\\" +  currentTarget);\\n\\t\\t\\t\\t\\t\\treturn false;\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tattemptCounter++;\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.scp(scripts, home, currentTarget);\\n\\t\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"deep-setup.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":3.1,\"server\":\"comptek\",\"_hash\":\"95e9530fb6f69bfe511a604adf704b1d63ca180a1d556d7b1669bf3a470b227e\",\"moduleSequenceNumber\":208}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tconst currentMachine = ns.getHostname();\\n\\tvar servers = ns.scan(currentMachine);\\n\\tvar scripts = ns.ls(home, \\\"basic-\\\");\\n\\n\\tns.tprint(\\\"Host:  \\\" + currentMachine);\\n\\tfor (let entry in servers) {\\t// depth 0\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\t// depth 1\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== home && subservers.length > 1) {\\n\\t\\t\\t\\tns.tprint(\\\"-----> \\\" + subservers[subentry]);\\n\\t\\t\\t\\tlet subserversd2 = ns.scan(subservers[subentry]); // depth 2\\n\\t\\t\\t\\tfor (let subentryd2 in subserversd2) {\\n\\t\\t\\t\\t\\tif (subserversd2[subentryd2] !== subservers[subentry] && subserversd2[subentryd2] !== servers[entry] && subserversd2.length > 1) {\\n\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------> \\\" + subserversd2[subentryd2]);\\n\\t\\t\\t\\t\\t\\tlet subserversd3 = ns.scan(subserversd2[subentryd2]);\\t// depth 3\\n\\t\\t\\t\\t\\t\\tfor (let subentryd3 in subserversd3) {\\n\\t\\t\\t\\t\\t\\t\\tif (subserversd3[subentryd3] !== subserversd2[subentryd2] && subserversd3[subentryd3] !== subservers[subentry] && subserversd3.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------> \\\" + subserversd3[subentryd3]);\\n\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd4 = ns.scan(subserversd3[subentryd3]);\\t// depth 4\\n\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd4 in subserversd4) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd4[subentryd4] !== subserversd3[subentryd3] && subserversd4[subentryd4] !== subserversd2[subentryd2] && subserversd4.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------------> \\\" + subserversd4[subentryd4]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd5 = ns.scan(subserversd4[subentryd4]);\\t// depth 5\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd5 in subserversd5) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd5[subentryd5] !== subserversd4[subentryd4] && subserversd5[subentryd5] !== subserversd3[subentryd3] && subserversd5.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-------------------------> \\\" + subserversd5[subentryd5]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd6 = ns.scan(subserversd5[subentryd5]);\\t// depth 6\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd6 in subserversd6) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd6[subentryd6] !== subserversd5[subentryd5] && subserversd6[subentryd6] !== subserversd4[subentryd4] && subserversd6.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"------------------------------> \\\" + subserversd6[subentryd6]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd7 = ns.scan(subserversd6[subentryd6]);\\t// depth 7\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor(let subentryd7 in subserversd7) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd7[subentryd7] !== subserversd6[subentryd6] && subserversd7[subentryd7] !== subserversd5[subentryd5] && subserversd7.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-----------------------------------> \\\" + subserversd7[subentryd7]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"gigascan.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.05,\"server\":\"comptek\",\"_hash\":\"09d5eb91ac2188cd08d0b0658f50095ede1bc815d40e01a99435a8ab5d16f1b9\",\"moduleSequenceNumber\":209}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tvar servers = ns.scan(home);\\n\\tvar scripts = ns.ls(home, \\\"basic-\\\");\\n\\n\\tfor (let entry in scripts) {\\n\\t\\tns.tprint(\\\"found script: \\\" + scripts[entry]);\\n\\t}\\n\\n\\t// Hack servers (!!! depth = 2 !!!) if needed and populate with scripts\\n\\tfor (let entry in servers) {\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== \\\"home\\\") {\\n\\t\\t\\t\\tns.tprint(\\\"----->   \\\" + subservers[subentry]);\\n\\t\\t\\t\\tif (!ns.hasRootAccess(subservers[subentry])) {\\n\\t\\t\\t\\t\\ttakeover(subservers[subentry]);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tns.tprint(\\\"copying scripts to \\\" + subservers[subentry]);\\n\\t\\t\\t\\tawait ns.scp(scripts, home, subservers[subentry]);\\n\\t\\t\\t\\t//await ns.scp(\\\"setup.ns\\\", home, subservers[subentry]);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (!ns.hasRootAccess(servers[entry])) {\\n\\t\\t\\ttakeover(servers[entry]);\\n\\t\\t}\\n\\t\\tns.tprint(\\\"copying scripts to \\\" + servers[entry]);\\n\\t\\tawait ns.scp(scripts, home, servers[entry]);\\n\\t\\t//await ns.scp(\\\"setup.ns\\\", home, servers[entry]);\\n\\t}\\n\\n\\t/** \\n\\t * \\tAttempts to take over target machine\\t\\n\\t * \\n\\t *  @param {string} tar\\n\\t *  @return {boolean} outcome \\n\\t**/\\n\\tasync function takeover(tar) {\\n\\t\\tlet currentTarget = tar;\\n\\t\\tlet isNotTakenOver = true;\\n\\t\\tlet attemptCounter = 0;\\n\\n\\t\\tif (ns.getServerNumPortsRequired <= 5 && attemptCounter < 50) {\\n\\t\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\n\\t\\t\\t\\tattemptCounter++;\\n\\t\\t\\t}\\n\\n\\t\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"setup.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":3.15,\"server\":\"comptek\",\"_hash\":\"3b3625aa608a7f37d7592c27fde49ee0052288713ba0f611649877b763edd804\",\"moduleSequenceNumber\":210}}],\"serversOnNetwork\":[\"neo-net\",\"rothman-uni\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":61,\"hackDifficulty\":61,\"minDifficulty\":20,\"moneyAvailable\":220052980,\"moneyMax\":5501324500,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":356,\"serverGrowth\":52}},\"netlink\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-110768.cct\",\"type\":\"Algorithmic Stock Trader II\",\"data\":[105,38,33,83,115,150,8,65,33,111,17,144,88,169,114,60,176,165,172,63,141,66,108,168,79,73,189],\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-845482.cct\",\"type\":\"Algorithmic Stock Trader IV\",\"data\":[7,[50,178,22,119,181,138,14,199,63,89,107,26,170,107,102,2,25,34,123,25,116,86,181,107,175,64,16,98,76,170,1,56,37,155,157,126,118,194,6,99,33,142,148,111,18,58,99,102]],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"netlink\",\"httpPortOpen\":false,\"ip\":\"66.4.3.4\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"NetLink Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.grow(target);\\n\\t}\\n}\",\"filename\":\"basic-grow.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"netlink\",\"_hash\":\"fc7652eef146e96723fb16cbc2683cf66b1d09853fff0ed8b2ca6655039902d8\",\"moduleSequenceNumber\":211}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"basic-hack.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"netlink\",\"_hash\":\"b431b860a325c1f1e8d3f9afa6bd629bf87ee6500edce2693501368a5588a221\",\"moduleSequenceNumber\":212}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(target);\\n\\t}\\n}\",\"filename\":\"basic-weaken.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"netlink\",\"_hash\":\"ef6ef87a7a369f27563e9f084d651b032b74b974340529a78834d2cbf17c12a5\",\"moduleSequenceNumber\":213}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n// TODO: unused + unfinished, based on setup.ns\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst hostMachine = ns.getHostname();\\n\\tconst target = ns.args[0];\\n\\tvar servers = ns.scan(hostMachine);\\n\\tvar scripts = ns.ls(home, \\\".ns\\\");\\n\\n\\tfor (let entry in scripts) {\\n\\t\\tns.tprint(\\\"found script: \\\" + scripts[entry]);\\n\\t}\\n\\n\\tns.tprint(\\\"Host:  \\\" + hostMachine);\\n\\tfor (let entry in servers) {\\t// depth 0\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\t// depth 1\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== home && subservers.length > 1) {\\n\\t\\t\\t\\tns.tprint(\\\"-----> \\\" + subservers[subentry]);\\n\\t\\t\\t\\tawait takeover(subservers[subentry]);\\n\\t\\t\\t\\tlet subserversd2 = ns.scan(subservers[subentry]); // depth 2\\n\\t\\t\\t\\tfor (let subentryd2 in subserversd2) {\\n\\t\\t\\t\\t\\tif (subserversd2[subentryd2] !== subservers[subentry] && subserversd2[subentryd2] !== servers[entry] && subserversd2.length > 1) {\\n\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------> \\\" + subserversd2[subentryd2]);\\n\\t\\t\\t\\t\\t\\tawait takeover(subserversd2[subentryd2]);\\n\\t\\t\\t\\t\\t\\tlet subserversd3 = ns.scan(subserversd2[subentryd2]);\\t// depth 3\\n\\t\\t\\t\\t\\t\\tfor (let subentryd3 in subserversd3) {\\n\\t\\t\\t\\t\\t\\t\\tif (subserversd3[subentryd3] !== subserversd2[subentryd2] && subserversd3[subentryd3] !== subservers[subentry] && subserversd3.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------> \\\" + subserversd3[subentryd3]);\\n\\t\\t\\t\\t\\t\\t\\t\\tawait takeover(subserversd3[subentryd3]);\\n\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd4 = ns.scan(subserversd3[subentryd3]);\\t// depth 4\\n\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd4 in subserversd4) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd4[subentryd4] !== subserversd3[subentryd3] && subserversd4[subentryd4] !== subserversd2[subentryd2] && subserversd4.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------------> \\\" + subserversd4[subentryd4]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tawait takeover(subserversd4[subentryd4]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd5 = ns.scan(subserversd4[subentryd4]);\\t// depth 5\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd5 in subserversd5) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd5[subentryd5] !== subserversd4[subentryd4] && subserversd5[subentryd5] !== subserversd3[subentryd3] && subserversd5.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-------------------------> \\\" + subserversd5[subentryd5]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tawait takeover(subserversd5[subentryd5]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd6 = ns.scan(subserversd5[subentryd5]);\\t// depth 6\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd6 in subserversd6) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd6[subentryd6] !== subserversd5[subentryd5] && subserversd6[subentryd6] !== subserversd4[subentryd4] && subserversd6.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"------------------------------> \\\" + subserversd6[subentryd6]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tawait takeover(subserversd6[subentryd6]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd7 = ns.scan(subserversd6[subentryd6]);\\t// depth 7\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd7 in subserversd7) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd7[subentryd7] !== subserversd6[subentryd6] && subserversd7[subentryd7] !== subserversd5[subentryd5] && subserversd7.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-----------------------------------> \\\" + subserversd7[subentryd7]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tawait takeover(subserversd7[subentryd7]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tawait takeover(servers[entry]);\\n\\t}\\n\\n\\t/** \\n\\t * \\tAttempts to take over target machine\\t\\n\\t * \\n\\t *  @param {string} tar\\n\\t *  @return {boolean} outcome \\n\\t**/\\n\\tasync function takeover(tar) {\\n\\t\\tlet currentTarget = tar;\\n\\t\\tlet isNotTakenOver = true;\\n\\t\\tlet attemptCounter = 0;\\n\\n\\t\\tif (/*ns.getServerNumPortsRequired <= 5 && */ attemptCounter < 30) {\\n\\t\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\ttry {\\n\\t\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t\\t} catch(error) {\\n\\t\\t\\t\\t\\t\\tns.tprint(\\\"not enough ports to nuke \\\" +  currentTarget);\\n\\t\\t\\t\\t\\t\\treturn false;\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tattemptCounter++;\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.scp(scripts, home, currentTarget);\\n\\t\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"deep-setup.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":3.1,\"server\":\"netlink\",\"_hash\":\"95e9530fb6f69bfe511a604adf704b1d63ca180a1d556d7b1669bf3a470b227e\",\"moduleSequenceNumber\":214}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tconst currentMachine = ns.getHostname();\\n\\tvar servers = ns.scan(currentMachine);\\n\\tvar scripts = ns.ls(home, \\\"basic-\\\");\\n\\n\\tns.tprint(\\\"Host:  \\\" + currentMachine);\\n\\tfor (let entry in servers) {\\t// depth 0\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\t// depth 1\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== home && subservers.length > 1) {\\n\\t\\t\\t\\tns.tprint(\\\"-----> \\\" + subservers[subentry]);\\n\\t\\t\\t\\tlet subserversd2 = ns.scan(subservers[subentry]); // depth 2\\n\\t\\t\\t\\tfor (let subentryd2 in subserversd2) {\\n\\t\\t\\t\\t\\tif (subserversd2[subentryd2] !== subservers[subentry] && subserversd2[subentryd2] !== servers[entry] && subserversd2.length > 1) {\\n\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------> \\\" + subserversd2[subentryd2]);\\n\\t\\t\\t\\t\\t\\tlet subserversd3 = ns.scan(subserversd2[subentryd2]);\\t// depth 3\\n\\t\\t\\t\\t\\t\\tfor (let subentryd3 in subserversd3) {\\n\\t\\t\\t\\t\\t\\t\\tif (subserversd3[subentryd3] !== subserversd2[subentryd2] && subserversd3[subentryd3] !== subservers[subentry] && subserversd3.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------> \\\" + subserversd3[subentryd3]);\\n\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd4 = ns.scan(subserversd3[subentryd3]);\\t// depth 4\\n\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd4 in subserversd4) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd4[subentryd4] !== subserversd3[subentryd3] && subserversd4[subentryd4] !== subserversd2[subentryd2] && subserversd4.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------------> \\\" + subserversd4[subentryd4]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd5 = ns.scan(subserversd4[subentryd4]);\\t// depth 5\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd5 in subserversd5) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd5[subentryd5] !== subserversd4[subentryd4] && subserversd5[subentryd5] !== subserversd3[subentryd3] && subserversd5.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-------------------------> \\\" + subserversd5[subentryd5]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd6 = ns.scan(subserversd5[subentryd5]);\\t// depth 6\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd6 in subserversd6) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd6[subentryd6] !== subserversd5[subentryd5] && subserversd6[subentryd6] !== subserversd4[subentryd4] && subserversd6.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"------------------------------> \\\" + subserversd6[subentryd6]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd7 = ns.scan(subserversd6[subentryd6]);\\t// depth 7\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor(let subentryd7 in subserversd7) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd7[subentryd7] !== subserversd6[subentryd6] && subserversd7[subentryd7] !== subserversd5[subentryd5] && subserversd7.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-----------------------------------> \\\" + subserversd7[subentryd7]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"gigascan.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.05,\"server\":\"netlink\",\"_hash\":\"09d5eb91ac2188cd08d0b0658f50095ede1bc815d40e01a99435a8ab5d16f1b9\",\"moduleSequenceNumber\":215}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tvar servers = ns.scan(home);\\n\\tvar scripts = ns.ls(home, \\\"basic-\\\");\\n\\n\\tfor (let entry in scripts) {\\n\\t\\tns.tprint(\\\"found script: \\\" + scripts[entry]);\\n\\t}\\n\\n\\t// Hack servers (!!! depth = 2 !!!) if needed and populate with scripts\\n\\tfor (let entry in servers) {\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== \\\"home\\\") {\\n\\t\\t\\t\\tns.tprint(\\\"----->   \\\" + subservers[subentry]);\\n\\t\\t\\t\\tif (!ns.hasRootAccess(subservers[subentry])) {\\n\\t\\t\\t\\t\\ttakeover(subservers[subentry]);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tns.tprint(\\\"copying scripts to \\\" + subservers[subentry]);\\n\\t\\t\\t\\tawait ns.scp(scripts, home, subservers[subentry]);\\n\\t\\t\\t\\t//await ns.scp(\\\"setup.ns\\\", home, subservers[subentry]);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (!ns.hasRootAccess(servers[entry])) {\\n\\t\\t\\ttakeover(servers[entry]);\\n\\t\\t}\\n\\t\\tns.tprint(\\\"copying scripts to \\\" + servers[entry]);\\n\\t\\tawait ns.scp(scripts, home, servers[entry]);\\n\\t\\t//await ns.scp(\\\"setup.ns\\\", home, servers[entry]);\\n\\t}\\n\\n\\t/** \\n\\t * \\tAttempts to take over target machine\\t\\n\\t * \\n\\t *  @param {string} tar\\n\\t *  @return {boolean} outcome \\n\\t**/\\n\\tasync function takeover(tar) {\\n\\t\\tlet currentTarget = tar;\\n\\t\\tlet isNotTakenOver = true;\\n\\t\\tlet attemptCounter = 0;\\n\\n\\t\\tif (ns.getServerNumPortsRequired <= 5 && attemptCounter < 50) {\\n\\t\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\n\\t\\t\\t\\tattemptCounter++;\\n\\t\\t\\t}\\n\\n\\t\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"setup.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":3.15,\"server\":\"netlink\",\"_hash\":\"3b3625aa608a7f37d7592c27fde49ee0052288713ba0f611649877b763edd804\",\"moduleSequenceNumber\":216}}],\"serversOnNetwork\":[\"neo-net\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":61,\"hackDifficulty\":61,\"minDifficulty\":20,\"moneyAvailable\":275000000,\"moneyMax\":6875000000,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":396,\"serverGrowth\":62}},\"johnson-ortho\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-807889-CyberSec.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[10,13],\"reward\":{\"name\":\"CyberSec\",\"type\":0}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-692830.cct\",\"type\":\"Unique Paths in a Grid II\",\"data\":[[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0],[0,0,0,1,0],[0,0,1,0,0],[0,0,0,1,0],[0,1,0,0,0],[1,0,0,0,0],[1,0,1,0,1],[0,0,0,1,0],[0,0,0,0,0],[0,1,0,0,0]],\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-155969.cct\",\"type\":\"Subarray with Maximum Sum\",\"data\":[2,5,2,-7,6,3,-6,-1,0,-10,10,7,-7,0,-5,0,6,-5,8,0,-6,1,-8,-6,-10,4,7,-10,10,-1,-8],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"johnson-ortho\",\"httpPortOpen\":false,\"ip\":\"17.5.4.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Johnson Orthopedics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.grow(target);\\n\\t}\\n}\",\"filename\":\"basic-grow.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"johnson-ortho\",\"_hash\":\"fc7652eef146e96723fb16cbc2683cf66b1d09853fff0ed8b2ca6655039902d8\",\"moduleSequenceNumber\":217}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"basic-hack.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"johnson-ortho\",\"_hash\":\"b431b860a325c1f1e8d3f9afa6bd629bf87ee6500edce2693501368a5588a221\",\"moduleSequenceNumber\":218}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(target);\\n\\t}\\n}\",\"filename\":\"basic-weaken.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"johnson-ortho\",\"_hash\":\"ef6ef87a7a369f27563e9f084d651b032b74b974340529a78834d2cbf17c12a5\",\"moduleSequenceNumber\":219}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n// TODO: unused + unfinished, based on setup.ns\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst hostMachine = ns.getHostname();\\n\\tconst target = ns.args[0];\\n\\tvar servers = ns.scan(hostMachine);\\n\\tvar scripts = ns.ls(home, \\\".ns\\\");\\n\\n\\tfor (let entry in scripts) {\\n\\t\\tns.tprint(\\\"found script: \\\" + scripts[entry]);\\n\\t}\\n\\n\\tns.tprint(\\\"Host:  \\\" + hostMachine);\\n\\tfor (let entry in servers) {\\t// depth 0\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\t// depth 1\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== home && subservers.length > 1) {\\n\\t\\t\\t\\tns.tprint(\\\"-----> \\\" + subservers[subentry]);\\n\\t\\t\\t\\tawait takeover(subservers[subentry]);\\n\\t\\t\\t\\tlet subserversd2 = ns.scan(subservers[subentry]); // depth 2\\n\\t\\t\\t\\tfor (let subentryd2 in subserversd2) {\\n\\t\\t\\t\\t\\tif (subserversd2[subentryd2] !== subservers[subentry] && subserversd2[subentryd2] !== servers[entry] && subserversd2.length > 1) {\\n\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------> \\\" + subserversd2[subentryd2]);\\n\\t\\t\\t\\t\\t\\tawait takeover(subserversd2[subentryd2]);\\n\\t\\t\\t\\t\\t\\tlet subserversd3 = ns.scan(subserversd2[subentryd2]);\\t// depth 3\\n\\t\\t\\t\\t\\t\\tfor (let subentryd3 in subserversd3) {\\n\\t\\t\\t\\t\\t\\t\\tif (subserversd3[subentryd3] !== subserversd2[subentryd2] && subserversd3[subentryd3] !== subservers[subentry] && subserversd3.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------> \\\" + subserversd3[subentryd3]);\\n\\t\\t\\t\\t\\t\\t\\t\\tawait takeover(subserversd3[subentryd3]);\\n\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd4 = ns.scan(subserversd3[subentryd3]);\\t// depth 4\\n\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd4 in subserversd4) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd4[subentryd4] !== subserversd3[subentryd3] && subserversd4[subentryd4] !== subserversd2[subentryd2] && subserversd4.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------------> \\\" + subserversd4[subentryd4]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tawait takeover(subserversd4[subentryd4]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd5 = ns.scan(subserversd4[subentryd4]);\\t// depth 5\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd5 in subserversd5) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd5[subentryd5] !== subserversd4[subentryd4] && subserversd5[subentryd5] !== subserversd3[subentryd3] && subserversd5.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-------------------------> \\\" + subserversd5[subentryd5]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tawait takeover(subserversd5[subentryd5]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd6 = ns.scan(subserversd5[subentryd5]);\\t// depth 6\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd6 in subserversd6) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd6[subentryd6] !== subserversd5[subentryd5] && subserversd6[subentryd6] !== subserversd4[subentryd4] && subserversd6.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"------------------------------> \\\" + subserversd6[subentryd6]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tawait takeover(subserversd6[subentryd6]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd7 = ns.scan(subserversd6[subentryd6]);\\t// depth 7\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd7 in subserversd7) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd7[subentryd7] !== subserversd6[subentryd6] && subserversd7[subentryd7] !== subserversd5[subentryd5] && subserversd7.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-----------------------------------> \\\" + subserversd7[subentryd7]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tawait takeover(subserversd7[subentryd7]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tawait takeover(servers[entry]);\\n\\t}\\n\\n\\t/** \\n\\t * \\tAttempts to take over target machine\\t\\n\\t * \\n\\t *  @param {string} tar\\n\\t *  @return {boolean} outcome \\n\\t**/\\n\\tasync function takeover(tar) {\\n\\t\\tlet currentTarget = tar;\\n\\t\\tlet isNotTakenOver = true;\\n\\t\\tlet attemptCounter = 0;\\n\\n\\t\\tif (/*ns.getServerNumPortsRequired <= 5 && */ attemptCounter < 30) {\\n\\t\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\ttry {\\n\\t\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t\\t} catch(error) {\\n\\t\\t\\t\\t\\t\\tns.tprint(\\\"not enough ports to nuke \\\" +  currentTarget);\\n\\t\\t\\t\\t\\t\\treturn false;\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tattemptCounter++;\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.scp(scripts, home, currentTarget);\\n\\t\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"deep-setup.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":3.1,\"server\":\"johnson-ortho\",\"_hash\":\"95e9530fb6f69bfe511a604adf704b1d63ca180a1d556d7b1669bf3a470b227e\",\"moduleSequenceNumber\":220}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tconst currentMachine = ns.getHostname();\\n\\tvar servers = ns.scan(currentMachine);\\n\\tvar scripts = ns.ls(home, \\\"basic-\\\");\\n\\n\\tns.tprint(\\\"Host:  \\\" + currentMachine);\\n\\tfor (let entry in servers) {\\t// depth 0\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\t// depth 1\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== home && subservers.length > 1) {\\n\\t\\t\\t\\tns.tprint(\\\"-----> \\\" + subservers[subentry]);\\n\\t\\t\\t\\tlet subserversd2 = ns.scan(subservers[subentry]); // depth 2\\n\\t\\t\\t\\tfor (let subentryd2 in subserversd2) {\\n\\t\\t\\t\\t\\tif (subserversd2[subentryd2] !== subservers[subentry] && subserversd2[subentryd2] !== servers[entry] && subserversd2.length > 1) {\\n\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------> \\\" + subserversd2[subentryd2]);\\n\\t\\t\\t\\t\\t\\tlet subserversd3 = ns.scan(subserversd2[subentryd2]);\\t// depth 3\\n\\t\\t\\t\\t\\t\\tfor (let subentryd3 in subserversd3) {\\n\\t\\t\\t\\t\\t\\t\\tif (subserversd3[subentryd3] !== subserversd2[subentryd2] && subserversd3[subentryd3] !== subservers[subentry] && subserversd3.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------> \\\" + subserversd3[subentryd3]);\\n\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd4 = ns.scan(subserversd3[subentryd3]);\\t// depth 4\\n\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd4 in subserversd4) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd4[subentryd4] !== subserversd3[subentryd3] && subserversd4[subentryd4] !== subserversd2[subentryd2] && subserversd4.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------------> \\\" + subserversd4[subentryd4]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd5 = ns.scan(subserversd4[subentryd4]);\\t// depth 5\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd5 in subserversd5) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd5[subentryd5] !== subserversd4[subentryd4] && subserversd5[subentryd5] !== subserversd3[subentryd3] && subserversd5.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-------------------------> \\\" + subserversd5[subentryd5]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd6 = ns.scan(subserversd5[subentryd5]);\\t// depth 6\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd6 in subserversd6) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd6[subentryd6] !== subserversd5[subentryd5] && subserversd6[subentryd6] !== subserversd4[subentryd4] && subserversd6.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"------------------------------> \\\" + subserversd6[subentryd6]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd7 = ns.scan(subserversd6[subentryd6]);\\t// depth 7\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor(let subentryd7 in subserversd7) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd7[subentryd7] !== subserversd6[subentryd6] && subserversd7[subentryd7] !== subserversd5[subentryd5] && subserversd7.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-----------------------------------> \\\" + subserversd7[subentryd7]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"gigascan.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.05,\"server\":\"johnson-ortho\",\"_hash\":\"09d5eb91ac2188cd08d0b0658f50095ede1bc815d40e01a99435a8ab5d16f1b9\",\"moduleSequenceNumber\":221}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tvar servers = ns.scan(home);\\n\\tvar scripts = ns.ls(home, \\\"basic-\\\");\\n\\n\\tfor (let entry in scripts) {\\n\\t\\tns.tprint(\\\"found script: \\\" + scripts[entry]);\\n\\t}\\n\\n\\t// Hack servers (!!! depth = 2 !!!) if needed and populate with scripts\\n\\tfor (let entry in servers) {\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== \\\"home\\\") {\\n\\t\\t\\t\\tns.tprint(\\\"----->   \\\" + subservers[subentry]);\\n\\t\\t\\t\\tif (!ns.hasRootAccess(subservers[subentry])) {\\n\\t\\t\\t\\t\\ttakeover(subservers[subentry]);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tns.tprint(\\\"copying scripts to \\\" + subservers[subentry]);\\n\\t\\t\\t\\tawait ns.scp(scripts, home, subservers[subentry]);\\n\\t\\t\\t\\t//await ns.scp(\\\"setup.ns\\\", home, subservers[subentry]);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (!ns.hasRootAccess(servers[entry])) {\\n\\t\\t\\ttakeover(servers[entry]);\\n\\t\\t}\\n\\t\\tns.tprint(\\\"copying scripts to \\\" + servers[entry]);\\n\\t\\tawait ns.scp(scripts, home, servers[entry]);\\n\\t\\t//await ns.scp(\\\"setup.ns\\\", home, servers[entry]);\\n\\t}\\n\\n\\t/** \\n\\t * \\tAttempts to take over target machine\\t\\n\\t * \\n\\t *  @param {string} tar\\n\\t *  @return {boolean} outcome \\n\\t**/\\n\\tasync function takeover(tar) {\\n\\t\\tlet currentTarget = tar;\\n\\t\\tlet isNotTakenOver = true;\\n\\t\\tlet attemptCounter = 0;\\n\\n\\t\\tif (ns.getServerNumPortsRequired <= 5 && attemptCounter < 50) {\\n\\t\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\n\\t\\t\\t\\tattemptCounter++;\\n\\t\\t\\t}\\n\\n\\t\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"setup.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":3.15,\"server\":\"johnson-ortho\",\"_hash\":\"3b3625aa608a7f37d7592c27fde49ee0052288713ba0f611649877b763edd804\",\"moduleSequenceNumber\":222}}],\"serversOnNetwork\":[\"phantasy\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":35,\"hackDifficulty\":35,\"minDifficulty\":12,\"moneyAvailable\":77024659,\"moneyMax\":1925616475,\"numOpenPortsRequired\":2,\"openPortCount\":3,\"requiredHackingSkill\":279,\"serverGrowth\":52}},\"n00dles\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"n00dles\",\"httpPortOpen\":false,\"ip\":\"47.7.4.5\",\"isConnectedTo\":false,\"maxRam\":4,\"messages\":[],\"organizationName\":\"Noodle Bar\",\"programs\":[],\"ramUsed\":3.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[69758,20256,0,0]},\"filename\":\"basic-hack.ns\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":21632.0232825889,\"offlineMoneyMade\":0,\"offlineRunningTime\":84702.565,\"onlineExpGained\":23716.716899532614,\"onlineMoneyMade\":69758,\"onlineRunningTime\":113957.60999912233,\"pid\":1,\"ramUsage\":1.7,\"server\":\"n00dles\",\"threads\":2,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.grow(target);\\n\\t}\\n}\",\"filename\":\"basic-grow.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"n00dles\",\"_hash\":\"fc7652eef146e96723fb16cbc2683cf66b1d09853fff0ed8b2ca6655039902d8\",\"moduleSequenceNumber\":223}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"basic-hack.ns\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"basic-hack.ns\",\"url\":\"blob:file:///604a86d3-9b72-4aaf-86a8-7e33d54a3cbf\"}],\"ramUsage\":1.7,\"server\":\"n00dles\",\"_hash\":\"b431b860a325c1f1e8d3f9afa6bd629bf87ee6500edce2693501368a5588a221\",\"moduleSequenceNumber\":337}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(target);\\n\\t}\\n}\",\"filename\":\"basic-weaken.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"n00dles\",\"_hash\":\"ef6ef87a7a369f27563e9f084d651b032b74b974340529a78834d2cbf17c12a5\",\"moduleSequenceNumber\":225}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n// TODO: unused + unfinished, based on setup.ns\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst hostMachine = ns.getHostname();\\n\\tconst target = ns.args[0];\\n\\tvar servers = ns.scan(hostMachine);\\n\\tvar scripts = ns.ls(home, \\\".ns\\\");\\n\\n\\tfor (let entry in scripts) {\\n\\t\\tns.tprint(\\\"found script: \\\" + scripts[entry]);\\n\\t}\\n\\n\\tns.tprint(\\\"Host:  \\\" + hostMachine);\\n\\tfor (let entry in servers) {\\t// depth 0\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\t// depth 1\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== home && subservers.length > 1) {\\n\\t\\t\\t\\tns.tprint(\\\"-----> \\\" + subservers[subentry]);\\n\\t\\t\\t\\tawait takeover(subservers[subentry]);\\n\\t\\t\\t\\tlet subserversd2 = ns.scan(subservers[subentry]); // depth 2\\n\\t\\t\\t\\tfor (let subentryd2 in subserversd2) {\\n\\t\\t\\t\\t\\tif (subserversd2[subentryd2] !== subservers[subentry] && subserversd2[subentryd2] !== servers[entry] && subserversd2.length > 1) {\\n\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------> \\\" + subserversd2[subentryd2]);\\n\\t\\t\\t\\t\\t\\tawait takeover(subserversd2[subentryd2]);\\n\\t\\t\\t\\t\\t\\tlet subserversd3 = ns.scan(subserversd2[subentryd2]);\\t// depth 3\\n\\t\\t\\t\\t\\t\\tfor (let subentryd3 in subserversd3) {\\n\\t\\t\\t\\t\\t\\t\\tif (subserversd3[subentryd3] !== subserversd2[subentryd2] && subserversd3[subentryd3] !== subservers[subentry] && subserversd3.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------> \\\" + subserversd3[subentryd3]);\\n\\t\\t\\t\\t\\t\\t\\t\\tawait takeover(subserversd3[subentryd3]);\\n\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd4 = ns.scan(subserversd3[subentryd3]);\\t// depth 4\\n\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd4 in subserversd4) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd4[subentryd4] !== subserversd3[subentryd3] && subserversd4[subentryd4] !== subserversd2[subentryd2] && subserversd4.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------------> \\\" + subserversd4[subentryd4]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tawait takeover(subserversd4[subentryd4]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd5 = ns.scan(subserversd4[subentryd4]);\\t// depth 5\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd5 in subserversd5) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd5[subentryd5] !== subserversd4[subentryd4] && subserversd5[subentryd5] !== subserversd3[subentryd3] && subserversd5.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-------------------------> \\\" + subserversd5[subentryd5]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tawait takeover(subserversd5[subentryd5]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd6 = ns.scan(subserversd5[subentryd5]);\\t// depth 6\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd6 in subserversd6) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd6[subentryd6] !== subserversd5[subentryd5] && subserversd6[subentryd6] !== subserversd4[subentryd4] && subserversd6.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"------------------------------> \\\" + subserversd6[subentryd6]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tawait takeover(subserversd6[subentryd6]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd7 = ns.scan(subserversd6[subentryd6]);\\t// depth 7\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd7 in subserversd7) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd7[subentryd7] !== subserversd6[subentryd6] && subserversd7[subentryd7] !== subserversd5[subentryd5] && subserversd7.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-----------------------------------> \\\" + subserversd7[subentryd7]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tawait takeover(subserversd7[subentryd7]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tawait takeover(servers[entry]);\\n\\t}\\n\\n\\t/** \\n\\t * \\tAttempts to take over target machine\\t\\n\\t * \\n\\t *  @param {string} tar\\n\\t *  @return {boolean} outcome \\n\\t**/\\n\\tasync function takeover(tar) {\\n\\t\\tlet currentTarget = tar;\\n\\t\\tlet isNotTakenOver = true;\\n\\t\\tlet attemptCounter = 0;\\n\\n\\t\\tif (/*ns.getServerNumPortsRequired <= 5 && */ attemptCounter < 30) {\\n\\t\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\ttry {\\n\\t\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t\\t} catch(error) {\\n\\t\\t\\t\\t\\t\\tns.tprint(\\\"not enough ports to nuke \\\" +  currentTarget);\\n\\t\\t\\t\\t\\t\\treturn false;\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tattemptCounter++;\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.scp(scripts, home, currentTarget);\\n\\t\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"deep-setup.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":3.1,\"server\":\"n00dles\",\"_hash\":\"95e9530fb6f69bfe511a604adf704b1d63ca180a1d556d7b1669bf3a470b227e\",\"moduleSequenceNumber\":226}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tconst currentMachine = ns.getHostname();\\n\\tvar servers = ns.scan(currentMachine);\\n\\tvar scripts = ns.ls(home, \\\"basic-\\\");\\n\\n\\tns.tprint(\\\"Host:  \\\" + currentMachine);\\n\\tfor (let entry in servers) {\\t// depth 0\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\t// depth 1\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== home && subservers.length > 1) {\\n\\t\\t\\t\\tns.tprint(\\\"-----> \\\" + subservers[subentry]);\\n\\t\\t\\t\\tlet subserversd2 = ns.scan(subservers[subentry]); // depth 2\\n\\t\\t\\t\\tfor (let subentryd2 in subserversd2) {\\n\\t\\t\\t\\t\\tif (subserversd2[subentryd2] !== subservers[subentry] && subserversd2[subentryd2] !== servers[entry] && subserversd2.length > 1) {\\n\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------> \\\" + subserversd2[subentryd2]);\\n\\t\\t\\t\\t\\t\\tlet subserversd3 = ns.scan(subserversd2[subentryd2]);\\t// depth 3\\n\\t\\t\\t\\t\\t\\tfor (let subentryd3 in subserversd3) {\\n\\t\\t\\t\\t\\t\\t\\tif (subserversd3[subentryd3] !== subserversd2[subentryd2] && subserversd3[subentryd3] !== subservers[subentry] && subserversd3.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------> \\\" + subserversd3[subentryd3]);\\n\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd4 = ns.scan(subserversd3[subentryd3]);\\t// depth 4\\n\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd4 in subserversd4) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd4[subentryd4] !== subserversd3[subentryd3] && subserversd4[subentryd4] !== subserversd2[subentryd2] && subserversd4.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------------> \\\" + subserversd4[subentryd4]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd5 = ns.scan(subserversd4[subentryd4]);\\t// depth 5\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd5 in subserversd5) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd5[subentryd5] !== subserversd4[subentryd4] && subserversd5[subentryd5] !== subserversd3[subentryd3] && subserversd5.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-------------------------> \\\" + subserversd5[subentryd5]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd6 = ns.scan(subserversd5[subentryd5]);\\t// depth 6\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd6 in subserversd6) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd6[subentryd6] !== subserversd5[subentryd5] && subserversd6[subentryd6] !== subserversd4[subentryd4] && subserversd6.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"------------------------------> \\\" + subserversd6[subentryd6]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd7 = ns.scan(subserversd6[subentryd6]);\\t// depth 7\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor(let subentryd7 in subserversd7) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd7[subentryd7] !== subserversd6[subentryd6] && subserversd7[subentryd7] !== subserversd5[subentryd5] && subserversd7.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-----------------------------------> \\\" + subserversd7[subentryd7]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"gigascan.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.05,\"server\":\"n00dles\",\"_hash\":\"09d5eb91ac2188cd08d0b0658f50095ede1bc815d40e01a99435a8ab5d16f1b9\",\"moduleSequenceNumber\":227}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tvar servers = ns.scan(home);\\n\\tvar scripts = ns.ls(home, \\\"basic-\\\");\\n\\n\\tfor (let entry in scripts) {\\n\\t\\tns.tprint(\\\"found script: \\\" + scripts[entry]);\\n\\t}\\n\\n\\t// Hack servers (!!! depth = 2 !!!) if needed and populate with scripts\\n\\tfor (let entry in servers) {\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== \\\"home\\\") {\\n\\t\\t\\t\\tns.tprint(\\\"----->   \\\" + subservers[subentry]);\\n\\t\\t\\t\\tif (!ns.hasRootAccess(subservers[subentry])) {\\n\\t\\t\\t\\t\\ttakeover(subservers[subentry]);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tns.tprint(\\\"copying scripts to \\\" + subservers[subentry]);\\n\\t\\t\\t\\tawait ns.scp(scripts, home, subservers[subentry]);\\n\\t\\t\\t\\t//await ns.scp(\\\"setup.ns\\\", home, subservers[subentry]);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (!ns.hasRootAccess(servers[entry])) {\\n\\t\\t\\ttakeover(servers[entry]);\\n\\t\\t}\\n\\t\\tns.tprint(\\\"copying scripts to \\\" + servers[entry]);\\n\\t\\tawait ns.scp(scripts, home, servers[entry]);\\n\\t\\t//await ns.scp(\\\"setup.ns\\\", home, servers[entry]);\\n\\t}\\n\\n\\t/** \\n\\t * \\tAttempts to take over target machine\\t\\n\\t * \\n\\t *  @param {string} tar\\n\\t *  @return {boolean} outcome \\n\\t**/\\n\\tasync function takeover(tar) {\\n\\t\\tlet currentTarget = tar;\\n\\t\\tlet isNotTakenOver = true;\\n\\t\\tlet attemptCounter = 0;\\n\\n\\t\\tif (ns.getServerNumPortsRequired <= 5 && attemptCounter < 50) {\\n\\t\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\n\\t\\t\\t\\tattemptCounter++;\\n\\t\\t\\t}\\n\\n\\t\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"setup.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":3.15,\"server\":\"n00dles\",\"_hash\":\"3b3625aa608a7f37d7592c27fde49ee0052288713ba0f611649877b763edd804\",\"moduleSequenceNumber\":228}}],\"serversOnNetwork\":[\"home\",\"nectar-net\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":21.797999999998808,\"minDifficulty\":1,\"moneyAvailable\":242,\"moneyMax\":1750000,\"numOpenPortsRequired\":0,\"openPortCount\":3,\"requiredHackingSkill\":1,\"serverGrowth\":3000}},\"foodnstuff\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"foodnstuff\",\"httpPortOpen\":false,\"ip\":\"84.9.5.6\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"FoodNStuff\",\"programs\":[],\"ramUsed\":15.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[0,0,11892,0]},\"filename\":\"basic-grow.ns\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":80839.8268952838,\"offlineMoneyMade\":0,\"offlineRunningTime\":84702.57100000001,\"onlineExpGained\":93222.56976749926,\"onlineMoneyMade\":0,\"onlineRunningTime\":109284.00999919033,\"pid\":2,\"ramUsage\":1.75,\"server\":\"foodnstuff\",\"threads\":4,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[16460,24865,0,0]},\"filename\":\"basic-hack.ns\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":149472.65340341075,\"offlineMoneyMade\":0,\"offlineRunningTime\":84702.57500000001,\"onlineExpGained\":166629.8560898299,\"onlineMoneyMade\":16460,\"onlineRunningTime\":109267.60999919056,\"pid\":3,\"ramUsage\":1.7,\"server\":\"foodnstuff\",\"threads\":5,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.grow(target);\\n\\t}\\n}\",\"filename\":\"basic-grow.ns\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"basic-grow.ns\",\"url\":\"blob:file:///717062f8-cc1d-4fe0-9300-333acf77345a\"}],\"ramUsage\":1.75,\"server\":\"foodnstuff\",\"_hash\":\"fc7652eef146e96723fb16cbc2683cf66b1d09853fff0ed8b2ca6655039902d8\",\"moduleSequenceNumber\":338}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"basic-hack.ns\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"basic-hack.ns\",\"url\":\"blob:file:///604a86d3-9b72-4aaf-86a8-7e33d54a3cbf\"}],\"ramUsage\":1.7,\"server\":\"foodnstuff\",\"_hash\":\"b431b860a325c1f1e8d3f9afa6bd629bf87ee6500edce2693501368a5588a221\",\"moduleSequenceNumber\":339}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(target);\\n\\t}\\n}\",\"filename\":\"basic-weaken.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"foodnstuff\",\"_hash\":\"ef6ef87a7a369f27563e9f084d651b032b74b974340529a78834d2cbf17c12a5\",\"moduleSequenceNumber\":231}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n// TODO: unused + unfinished, based on setup.ns\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst hostMachine = ns.getHostname();\\n\\tconst target = ns.args[0];\\n\\tvar servers = ns.scan(hostMachine);\\n\\tvar scripts = ns.ls(home, \\\".ns\\\");\\n\\n\\tfor (let entry in scripts) {\\n\\t\\tns.tprint(\\\"found script: \\\" + scripts[entry]);\\n\\t}\\n\\n\\tns.tprint(\\\"Host:  \\\" + hostMachine);\\n\\tfor (let entry in servers) {\\t// depth 0\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\t// depth 1\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== home && subservers.length > 1) {\\n\\t\\t\\t\\tns.tprint(\\\"-----> \\\" + subservers[subentry]);\\n\\t\\t\\t\\tawait takeover(subservers[subentry]);\\n\\t\\t\\t\\tlet subserversd2 = ns.scan(subservers[subentry]); // depth 2\\n\\t\\t\\t\\tfor (let subentryd2 in subserversd2) {\\n\\t\\t\\t\\t\\tif (subserversd2[subentryd2] !== subservers[subentry] && subserversd2[subentryd2] !== servers[entry] && subserversd2.length > 1) {\\n\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------> \\\" + subserversd2[subentryd2]);\\n\\t\\t\\t\\t\\t\\tawait takeover(subserversd2[subentryd2]);\\n\\t\\t\\t\\t\\t\\tlet subserversd3 = ns.scan(subserversd2[subentryd2]);\\t// depth 3\\n\\t\\t\\t\\t\\t\\tfor (let subentryd3 in subserversd3) {\\n\\t\\t\\t\\t\\t\\t\\tif (subserversd3[subentryd3] !== subserversd2[subentryd2] && subserversd3[subentryd3] !== subservers[subentry] && subserversd3.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------> \\\" + subserversd3[subentryd3]);\\n\\t\\t\\t\\t\\t\\t\\t\\tawait takeover(subserversd3[subentryd3]);\\n\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd4 = ns.scan(subserversd3[subentryd3]);\\t// depth 4\\n\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd4 in subserversd4) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd4[subentryd4] !== subserversd3[subentryd3] && subserversd4[subentryd4] !== subserversd2[subentryd2] && subserversd4.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------------> \\\" + subserversd4[subentryd4]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tawait takeover(subserversd4[subentryd4]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd5 = ns.scan(subserversd4[subentryd4]);\\t// depth 5\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd5 in subserversd5) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd5[subentryd5] !== subserversd4[subentryd4] && subserversd5[subentryd5] !== subserversd3[subentryd3] && subserversd5.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-------------------------> \\\" + subserversd5[subentryd5]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tawait takeover(subserversd5[subentryd5]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd6 = ns.scan(subserversd5[subentryd5]);\\t// depth 6\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd6 in subserversd6) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd6[subentryd6] !== subserversd5[subentryd5] && subserversd6[subentryd6] !== subserversd4[subentryd4] && subserversd6.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"------------------------------> \\\" + subserversd6[subentryd6]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tawait takeover(subserversd6[subentryd6]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd7 = ns.scan(subserversd6[subentryd6]);\\t// depth 7\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd7 in subserversd7) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd7[subentryd7] !== subserversd6[subentryd6] && subserversd7[subentryd7] !== subserversd5[subentryd5] && subserversd7.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-----------------------------------> \\\" + subserversd7[subentryd7]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tawait takeover(subserversd7[subentryd7]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tawait takeover(servers[entry]);\\n\\t}\\n\\n\\t/** \\n\\t * \\tAttempts to take over target machine\\t\\n\\t * \\n\\t *  @param {string} tar\\n\\t *  @return {boolean} outcome \\n\\t**/\\n\\tasync function takeover(tar) {\\n\\t\\tlet currentTarget = tar;\\n\\t\\tlet isNotTakenOver = true;\\n\\t\\tlet attemptCounter = 0;\\n\\n\\t\\tif (/*ns.getServerNumPortsRequired <= 5 && */ attemptCounter < 30) {\\n\\t\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\ttry {\\n\\t\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t\\t} catch(error) {\\n\\t\\t\\t\\t\\t\\tns.tprint(\\\"not enough ports to nuke \\\" +  currentTarget);\\n\\t\\t\\t\\t\\t\\treturn false;\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tattemptCounter++;\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.scp(scripts, home, currentTarget);\\n\\t\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"deep-setup.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":3.1,\"server\":\"foodnstuff\",\"_hash\":\"95e9530fb6f69bfe511a604adf704b1d63ca180a1d556d7b1669bf3a470b227e\",\"moduleSequenceNumber\":232}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tconst currentMachine = ns.getHostname();\\n\\tvar servers = ns.scan(currentMachine);\\n\\tvar scripts = ns.ls(home, \\\"basic-\\\");\\n\\n\\tns.tprint(\\\"Host:  \\\" + currentMachine);\\n\\tfor (let entry in servers) {\\t// depth 0\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\t// depth 1\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== home && subservers.length > 1) {\\n\\t\\t\\t\\tns.tprint(\\\"-----> \\\" + subservers[subentry]);\\n\\t\\t\\t\\tlet subserversd2 = ns.scan(subservers[subentry]); // depth 2\\n\\t\\t\\t\\tfor (let subentryd2 in subserversd2) {\\n\\t\\t\\t\\t\\tif (subserversd2[subentryd2] !== subservers[subentry] && subserversd2[subentryd2] !== servers[entry] && subserversd2.length > 1) {\\n\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------> \\\" + subserversd2[subentryd2]);\\n\\t\\t\\t\\t\\t\\tlet subserversd3 = ns.scan(subserversd2[subentryd2]);\\t// depth 3\\n\\t\\t\\t\\t\\t\\tfor (let subentryd3 in subserversd3) {\\n\\t\\t\\t\\t\\t\\t\\tif (subserversd3[subentryd3] !== subserversd2[subentryd2] && subserversd3[subentryd3] !== subservers[subentry] && subserversd3.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------> \\\" + subserversd3[subentryd3]);\\n\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd4 = ns.scan(subserversd3[subentryd3]);\\t// depth 4\\n\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd4 in subserversd4) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd4[subentryd4] !== subserversd3[subentryd3] && subserversd4[subentryd4] !== subserversd2[subentryd2] && subserversd4.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------------> \\\" + subserversd4[subentryd4]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd5 = ns.scan(subserversd4[subentryd4]);\\t// depth 5\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd5 in subserversd5) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd5[subentryd5] !== subserversd4[subentryd4] && subserversd5[subentryd5] !== subserversd3[subentryd3] && subserversd5.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-------------------------> \\\" + subserversd5[subentryd5]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd6 = ns.scan(subserversd5[subentryd5]);\\t// depth 6\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd6 in subserversd6) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd6[subentryd6] !== subserversd5[subentryd5] && subserversd6[subentryd6] !== subserversd4[subentryd4] && subserversd6.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"------------------------------> \\\" + subserversd6[subentryd6]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd7 = ns.scan(subserversd6[subentryd6]);\\t// depth 7\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor(let subentryd7 in subserversd7) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd7[subentryd7] !== subserversd6[subentryd6] && subserversd7[subentryd7] !== subserversd5[subentryd5] && subserversd7.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-----------------------------------> \\\" + subserversd7[subentryd7]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"gigascan.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.05,\"server\":\"foodnstuff\",\"_hash\":\"09d5eb91ac2188cd08d0b0658f50095ede1bc815d40e01a99435a8ab5d16f1b9\",\"moduleSequenceNumber\":233}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tvar servers = ns.scan(home);\\n\\tvar scripts = ns.ls(home, \\\"basic-\\\");\\n\\n\\tfor (let entry in scripts) {\\n\\t\\tns.tprint(\\\"found script: \\\" + scripts[entry]);\\n\\t}\\n\\n\\t// Hack servers (!!! depth = 2 !!!) if needed and populate with scripts\\n\\tfor (let entry in servers) {\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== \\\"home\\\") {\\n\\t\\t\\t\\tns.tprint(\\\"----->   \\\" + subservers[subentry]);\\n\\t\\t\\t\\tif (!ns.hasRootAccess(subservers[subentry])) {\\n\\t\\t\\t\\t\\ttakeover(subservers[subentry]);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tns.tprint(\\\"copying scripts to \\\" + subservers[subentry]);\\n\\t\\t\\t\\tawait ns.scp(scripts, home, subservers[subentry]);\\n\\t\\t\\t\\t//await ns.scp(\\\"setup.ns\\\", home, subservers[subentry]);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (!ns.hasRootAccess(servers[entry])) {\\n\\t\\t\\ttakeover(servers[entry]);\\n\\t\\t}\\n\\t\\tns.tprint(\\\"copying scripts to \\\" + servers[entry]);\\n\\t\\tawait ns.scp(scripts, home, servers[entry]);\\n\\t\\t//await ns.scp(\\\"setup.ns\\\", home, servers[entry]);\\n\\t}\\n\\n\\t/** \\n\\t * \\tAttempts to take over target machine\\t\\n\\t * \\n\\t *  @param {string} tar\\n\\t *  @return {boolean} outcome \\n\\t**/\\n\\tasync function takeover(tar) {\\n\\t\\tlet currentTarget = tar;\\n\\t\\tlet isNotTakenOver = true;\\n\\t\\tlet attemptCounter = 0;\\n\\n\\t\\tif (ns.getServerNumPortsRequired <= 5 && attemptCounter < 50) {\\n\\t\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\n\\t\\t\\t\\tattemptCounter++;\\n\\t\\t\\t}\\n\\n\\t\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"setup.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":3.15,\"server\":\"foodnstuff\",\"_hash\":\"3b3625aa608a7f37d7592c27fde49ee0052288713ba0f611649877b763edd804\",\"moduleSequenceNumber\":234}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":10,\"hackDifficulty\":89.00200000000116,\"minDifficulty\":3,\"moneyAvailable\":3911.93531553033,\"moneyMax\":50000000,\"numOpenPortsRequired\":0,\"openPortCount\":3,\"requiredHackingSkill\":1,\"serverGrowth\":5}},\"sigma-cosmetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"sigma-cosmetics\",\"httpPortOpen\":false,\"ip\":\"98.8.6.1\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Sigma Cosmetics\",\"programs\":[],\"ramUsed\":15.45,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[2340660,27450,0,0]},\"filename\":\"basic-hack.ns\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":125697.95826521235,\"offlineMoneyMade\":0,\"offlineRunningTime\":84702.579,\"onlineExpGained\":138093.57458999645,\"onlineMoneyMade\":2340660,\"onlineRunningTime\":112785.0099991394,\"pid\":4,\"ramUsage\":1.7,\"server\":\"sigma-cosmetics\",\"threads\":6,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[0,0,6264,0]},\"filename\":\"basic-grow.ns\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":42996.7861926101,\"offlineMoneyMade\":0,\"offlineRunningTime\":84702.58300000001,\"onlineExpGained\":49104.1184849996,\"onlineMoneyMade\":0,\"onlineRunningTime\":112765.80999913967,\"pid\":5,\"ramUsage\":1.75,\"server\":\"sigma-cosmetics\",\"threads\":3,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.grow(target);\\n\\t}\\n}\",\"filename\":\"basic-grow.ns\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"basic-grow.ns\",\"url\":\"blob:file:///717062f8-cc1d-4fe0-9300-333acf77345a\"}],\"ramUsage\":1.75,\"server\":\"sigma-cosmetics\",\"_hash\":\"fc7652eef146e96723fb16cbc2683cf66b1d09853fff0ed8b2ca6655039902d8\",\"moduleSequenceNumber\":341}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"basic-hack.ns\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"basic-hack.ns\",\"url\":\"blob:file:///604a86d3-9b72-4aaf-86a8-7e33d54a3cbf\"}],\"ramUsage\":1.7,\"server\":\"sigma-cosmetics\",\"_hash\":\"b431b860a325c1f1e8d3f9afa6bd629bf87ee6500edce2693501368a5588a221\",\"moduleSequenceNumber\":340}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(target);\\n\\t}\\n}\",\"filename\":\"basic-weaken.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"sigma-cosmetics\",\"_hash\":\"ef6ef87a7a369f27563e9f084d651b032b74b974340529a78834d2cbf17c12a5\",\"moduleSequenceNumber\":237}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n// TODO: unused + unfinished, based on setup.ns\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst hostMachine = ns.getHostname();\\n\\tconst target = ns.args[0];\\n\\tvar servers = ns.scan(hostMachine);\\n\\tvar scripts = ns.ls(home, \\\".ns\\\");\\n\\n\\tfor (let entry in scripts) {\\n\\t\\tns.tprint(\\\"found script: \\\" + scripts[entry]);\\n\\t}\\n\\n\\tns.tprint(\\\"Host:  \\\" + hostMachine);\\n\\tfor (let entry in servers) {\\t// depth 0\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\t// depth 1\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== home && subservers.length > 1) {\\n\\t\\t\\t\\tns.tprint(\\\"-----> \\\" + subservers[subentry]);\\n\\t\\t\\t\\tawait takeover(subservers[subentry]);\\n\\t\\t\\t\\tlet subserversd2 = ns.scan(subservers[subentry]); // depth 2\\n\\t\\t\\t\\tfor (let subentryd2 in subserversd2) {\\n\\t\\t\\t\\t\\tif (subserversd2[subentryd2] !== subservers[subentry] && subserversd2[subentryd2] !== servers[entry] && subserversd2.length > 1) {\\n\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------> \\\" + subserversd2[subentryd2]);\\n\\t\\t\\t\\t\\t\\tawait takeover(subserversd2[subentryd2]);\\n\\t\\t\\t\\t\\t\\tlet subserversd3 = ns.scan(subserversd2[subentryd2]);\\t// depth 3\\n\\t\\t\\t\\t\\t\\tfor (let subentryd3 in subserversd3) {\\n\\t\\t\\t\\t\\t\\t\\tif (subserversd3[subentryd3] !== subserversd2[subentryd2] && subserversd3[subentryd3] !== subservers[subentry] && subserversd3.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------> \\\" + subserversd3[subentryd3]);\\n\\t\\t\\t\\t\\t\\t\\t\\tawait takeover(subserversd3[subentryd3]);\\n\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd4 = ns.scan(subserversd3[subentryd3]);\\t// depth 4\\n\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd4 in subserversd4) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd4[subentryd4] !== subserversd3[subentryd3] && subserversd4[subentryd4] !== subserversd2[subentryd2] && subserversd4.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------------> \\\" + subserversd4[subentryd4]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tawait takeover(subserversd4[subentryd4]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd5 = ns.scan(subserversd4[subentryd4]);\\t// depth 5\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd5 in subserversd5) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd5[subentryd5] !== subserversd4[subentryd4] && subserversd5[subentryd5] !== subserversd3[subentryd3] && subserversd5.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-------------------------> \\\" + subserversd5[subentryd5]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tawait takeover(subserversd5[subentryd5]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd6 = ns.scan(subserversd5[subentryd5]);\\t// depth 6\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd6 in subserversd6) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd6[subentryd6] !== subserversd5[subentryd5] && subserversd6[subentryd6] !== subserversd4[subentryd4] && subserversd6.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"------------------------------> \\\" + subserversd6[subentryd6]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tawait takeover(subserversd6[subentryd6]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd7 = ns.scan(subserversd6[subentryd6]);\\t// depth 7\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd7 in subserversd7) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd7[subentryd7] !== subserversd6[subentryd6] && subserversd7[subentryd7] !== subserversd5[subentryd5] && subserversd7.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-----------------------------------> \\\" + subserversd7[subentryd7]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tawait takeover(subserversd7[subentryd7]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tawait takeover(servers[entry]);\\n\\t}\\n\\n\\t/** \\n\\t * \\tAttempts to take over target machine\\t\\n\\t * \\n\\t *  @param {string} tar\\n\\t *  @return {boolean} outcome \\n\\t**/\\n\\tasync function takeover(tar) {\\n\\t\\tlet currentTarget = tar;\\n\\t\\tlet isNotTakenOver = true;\\n\\t\\tlet attemptCounter = 0;\\n\\n\\t\\tif (/*ns.getServerNumPortsRequired <= 5 && */ attemptCounter < 30) {\\n\\t\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\ttry {\\n\\t\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t\\t} catch(error) {\\n\\t\\t\\t\\t\\t\\tns.tprint(\\\"not enough ports to nuke \\\" +  currentTarget);\\n\\t\\t\\t\\t\\t\\treturn false;\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tattemptCounter++;\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.scp(scripts, home, currentTarget);\\n\\t\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"deep-setup.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":3.1,\"server\":\"sigma-cosmetics\",\"_hash\":\"95e9530fb6f69bfe511a604adf704b1d63ca180a1d556d7b1669bf3a470b227e\",\"moduleSequenceNumber\":238}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tconst currentMachine = ns.getHostname();\\n\\tvar servers = ns.scan(currentMachine);\\n\\tvar scripts = ns.ls(home, \\\"basic-\\\");\\n\\n\\tns.tprint(\\\"Host:  \\\" + currentMachine);\\n\\tfor (let entry in servers) {\\t// depth 0\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\t// depth 1\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== home && subservers.length > 1) {\\n\\t\\t\\t\\tns.tprint(\\\"-----> \\\" + subservers[subentry]);\\n\\t\\t\\t\\tlet subserversd2 = ns.scan(subservers[subentry]); // depth 2\\n\\t\\t\\t\\tfor (let subentryd2 in subserversd2) {\\n\\t\\t\\t\\t\\tif (subserversd2[subentryd2] !== subservers[subentry] && subserversd2[subentryd2] !== servers[entry] && subserversd2.length > 1) {\\n\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------> \\\" + subserversd2[subentryd2]);\\n\\t\\t\\t\\t\\t\\tlet subserversd3 = ns.scan(subserversd2[subentryd2]);\\t// depth 3\\n\\t\\t\\t\\t\\t\\tfor (let subentryd3 in subserversd3) {\\n\\t\\t\\t\\t\\t\\t\\tif (subserversd3[subentryd3] !== subserversd2[subentryd2] && subserversd3[subentryd3] !== subservers[subentry] && subserversd3.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------> \\\" + subserversd3[subentryd3]);\\n\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd4 = ns.scan(subserversd3[subentryd3]);\\t// depth 4\\n\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd4 in subserversd4) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd4[subentryd4] !== subserversd3[subentryd3] && subserversd4[subentryd4] !== subserversd2[subentryd2] && subserversd4.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------------> \\\" + subserversd4[subentryd4]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd5 = ns.scan(subserversd4[subentryd4]);\\t// depth 5\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd5 in subserversd5) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd5[subentryd5] !== subserversd4[subentryd4] && subserversd5[subentryd5] !== subserversd3[subentryd3] && subserversd5.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-------------------------> \\\" + subserversd5[subentryd5]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd6 = ns.scan(subserversd5[subentryd5]);\\t// depth 6\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd6 in subserversd6) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd6[subentryd6] !== subserversd5[subentryd5] && subserversd6[subentryd6] !== subserversd4[subentryd4] && subserversd6.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"------------------------------> \\\" + subserversd6[subentryd6]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd7 = ns.scan(subserversd6[subentryd6]);\\t// depth 7\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor(let subentryd7 in subserversd7) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd7[subentryd7] !== subserversd6[subentryd6] && subserversd7[subentryd7] !== subserversd5[subentryd5] && subserversd7.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-----------------------------------> \\\" + subserversd7[subentryd7]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"gigascan.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.05,\"server\":\"sigma-cosmetics\",\"_hash\":\"09d5eb91ac2188cd08d0b0658f50095ede1bc815d40e01a99435a8ab5d16f1b9\",\"moduleSequenceNumber\":239}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tvar servers = ns.scan(home);\\n\\tvar scripts = ns.ls(home, \\\"basic-\\\");\\n\\n\\tfor (let entry in scripts) {\\n\\t\\tns.tprint(\\\"found script: \\\" + scripts[entry]);\\n\\t}\\n\\n\\t// Hack servers (!!! depth = 2 !!!) if needed and populate with scripts\\n\\tfor (let entry in servers) {\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== \\\"home\\\") {\\n\\t\\t\\t\\tns.tprint(\\\"----->   \\\" + subservers[subentry]);\\n\\t\\t\\t\\tif (!ns.hasRootAccess(subservers[subentry])) {\\n\\t\\t\\t\\t\\ttakeover(subservers[subentry]);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tns.tprint(\\\"copying scripts to \\\" + subservers[subentry]);\\n\\t\\t\\t\\tawait ns.scp(scripts, home, subservers[subentry]);\\n\\t\\t\\t\\t//await ns.scp(\\\"setup.ns\\\", home, subservers[subentry]);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (!ns.hasRootAccess(servers[entry])) {\\n\\t\\t\\ttakeover(servers[entry]);\\n\\t\\t}\\n\\t\\tns.tprint(\\\"copying scripts to \\\" + servers[entry]);\\n\\t\\tawait ns.scp(scripts, home, servers[entry]);\\n\\t\\t//await ns.scp(\\\"setup.ns\\\", home, servers[entry]);\\n\\t}\\n\\n\\t/** \\n\\t * \\tAttempts to take over target machine\\t\\n\\t * \\n\\t *  @param {string} tar\\n\\t *  @return {boolean} outcome \\n\\t**/\\n\\tasync function takeover(tar) {\\n\\t\\tlet currentTarget = tar;\\n\\t\\tlet isNotTakenOver = true;\\n\\t\\tlet attemptCounter = 0;\\n\\n\\t\\tif (ns.getServerNumPortsRequired <= 5 && attemptCounter < 50) {\\n\\t\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\n\\t\\t\\t\\tattemptCounter++;\\n\\t\\t\\t}\\n\\n\\t\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"setup.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":3.15,\"server\":\"sigma-cosmetics\",\"_hash\":\"3b3625aa608a7f37d7592c27fde49ee0052288713ba0f611649877b763edd804\",\"moduleSequenceNumber\":240}}],\"serversOnNetwork\":[\"home\",\"max-hardware\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":10,\"hackDifficulty\":55.85000000000495,\"minDifficulty\":3,\"moneyAvailable\":633.7428728453127,\"moneyMax\":57500000,\"numOpenPortsRequired\":0,\"openPortCount\":3,\"requiredHackingSkill\":5,\"serverGrowth\":10}},\"joesguns\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"joesguns\",\"httpPortOpen\":false,\"ip\":\"95.0.3.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Joe's Guns\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.grow(target);\\n\\t}\\n}\",\"filename\":\"basic-grow.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"joesguns\",\"_hash\":\"fc7652eef146e96723fb16cbc2683cf66b1d09853fff0ed8b2ca6655039902d8\",\"moduleSequenceNumber\":241}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"basic-hack.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"joesguns\",\"_hash\":\"b431b860a325c1f1e8d3f9afa6bd629bf87ee6500edce2693501368a5588a221\",\"moduleSequenceNumber\":242}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(target);\\n\\t}\\n}\",\"filename\":\"basic-weaken.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"joesguns\",\"_hash\":\"ef6ef87a7a369f27563e9f084d651b032b74b974340529a78834d2cbf17c12a5\",\"moduleSequenceNumber\":243}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n// TODO: unused + unfinished, based on setup.ns\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst hostMachine = ns.getHostname();\\n\\tconst target = ns.args[0];\\n\\tvar servers = ns.scan(hostMachine);\\n\\tvar scripts = ns.ls(home, \\\".ns\\\");\\n\\n\\tfor (let entry in scripts) {\\n\\t\\tns.tprint(\\\"found script: \\\" + scripts[entry]);\\n\\t}\\n\\n\\tns.tprint(\\\"Host:  \\\" + hostMachine);\\n\\tfor (let entry in servers) {\\t// depth 0\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\t// depth 1\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== home && subservers.length > 1) {\\n\\t\\t\\t\\tns.tprint(\\\"-----> \\\" + subservers[subentry]);\\n\\t\\t\\t\\tawait takeover(subservers[subentry]);\\n\\t\\t\\t\\tlet subserversd2 = ns.scan(subservers[subentry]); // depth 2\\n\\t\\t\\t\\tfor (let subentryd2 in subserversd2) {\\n\\t\\t\\t\\t\\tif (subserversd2[subentryd2] !== subservers[subentry] && subserversd2[subentryd2] !== servers[entry] && subserversd2.length > 1) {\\n\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------> \\\" + subserversd2[subentryd2]);\\n\\t\\t\\t\\t\\t\\tawait takeover(subserversd2[subentryd2]);\\n\\t\\t\\t\\t\\t\\tlet subserversd3 = ns.scan(subserversd2[subentryd2]);\\t// depth 3\\n\\t\\t\\t\\t\\t\\tfor (let subentryd3 in subserversd3) {\\n\\t\\t\\t\\t\\t\\t\\tif (subserversd3[subentryd3] !== subserversd2[subentryd2] && subserversd3[subentryd3] !== subservers[subentry] && subserversd3.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------> \\\" + subserversd3[subentryd3]);\\n\\t\\t\\t\\t\\t\\t\\t\\tawait takeover(subserversd3[subentryd3]);\\n\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd4 = ns.scan(subserversd3[subentryd3]);\\t// depth 4\\n\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd4 in subserversd4) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd4[subentryd4] !== subserversd3[subentryd3] && subserversd4[subentryd4] !== subserversd2[subentryd2] && subserversd4.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------------> \\\" + subserversd4[subentryd4]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tawait takeover(subserversd4[subentryd4]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd5 = ns.scan(subserversd4[subentryd4]);\\t// depth 5\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd5 in subserversd5) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd5[subentryd5] !== subserversd4[subentryd4] && subserversd5[subentryd5] !== subserversd3[subentryd3] && subserversd5.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-------------------------> \\\" + subserversd5[subentryd5]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tawait takeover(subserversd5[subentryd5]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd6 = ns.scan(subserversd5[subentryd5]);\\t// depth 6\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd6 in subserversd6) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd6[subentryd6] !== subserversd5[subentryd5] && subserversd6[subentryd6] !== subserversd4[subentryd4] && subserversd6.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"------------------------------> \\\" + subserversd6[subentryd6]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tawait takeover(subserversd6[subentryd6]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd7 = ns.scan(subserversd6[subentryd6]);\\t// depth 7\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd7 in subserversd7) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd7[subentryd7] !== subserversd6[subentryd6] && subserversd7[subentryd7] !== subserversd5[subentryd5] && subserversd7.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-----------------------------------> \\\" + subserversd7[subentryd7]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tawait takeover(subserversd7[subentryd7]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tawait takeover(servers[entry]);\\n\\t}\\n\\n\\t/** \\n\\t * \\tAttempts to take over target machine\\t\\n\\t * \\n\\t *  @param {string} tar\\n\\t *  @return {boolean} outcome \\n\\t**/\\n\\tasync function takeover(tar) {\\n\\t\\tlet currentTarget = tar;\\n\\t\\tlet isNotTakenOver = true;\\n\\t\\tlet attemptCounter = 0;\\n\\n\\t\\tif (/*ns.getServerNumPortsRequired <= 5 && */ attemptCounter < 30) {\\n\\t\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\ttry {\\n\\t\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t\\t} catch(error) {\\n\\t\\t\\t\\t\\t\\tns.tprint(\\\"not enough ports to nuke \\\" +  currentTarget);\\n\\t\\t\\t\\t\\t\\treturn false;\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tattemptCounter++;\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.scp(scripts, home, currentTarget);\\n\\t\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"deep-setup.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":3.1,\"server\":\"joesguns\",\"_hash\":\"95e9530fb6f69bfe511a604adf704b1d63ca180a1d556d7b1669bf3a470b227e\",\"moduleSequenceNumber\":244}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tconst currentMachine = ns.getHostname();\\n\\tvar servers = ns.scan(currentMachine);\\n\\tvar scripts = ns.ls(home, \\\"basic-\\\");\\n\\n\\tns.tprint(\\\"Host:  \\\" + currentMachine);\\n\\tfor (let entry in servers) {\\t// depth 0\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\t// depth 1\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== home && subservers.length > 1) {\\n\\t\\t\\t\\tns.tprint(\\\"-----> \\\" + subservers[subentry]);\\n\\t\\t\\t\\tlet subserversd2 = ns.scan(subservers[subentry]); // depth 2\\n\\t\\t\\t\\tfor (let subentryd2 in subserversd2) {\\n\\t\\t\\t\\t\\tif (subserversd2[subentryd2] !== subservers[subentry] && subserversd2[subentryd2] !== servers[entry] && subserversd2.length > 1) {\\n\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------> \\\" + subserversd2[subentryd2]);\\n\\t\\t\\t\\t\\t\\tlet subserversd3 = ns.scan(subserversd2[subentryd2]);\\t// depth 3\\n\\t\\t\\t\\t\\t\\tfor (let subentryd3 in subserversd3) {\\n\\t\\t\\t\\t\\t\\t\\tif (subserversd3[subentryd3] !== subserversd2[subentryd2] && subserversd3[subentryd3] !== subservers[subentry] && subserversd3.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------> \\\" + subserversd3[subentryd3]);\\n\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd4 = ns.scan(subserversd3[subentryd3]);\\t// depth 4\\n\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd4 in subserversd4) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd4[subentryd4] !== subserversd3[subentryd3] && subserversd4[subentryd4] !== subserversd2[subentryd2] && subserversd4.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------------> \\\" + subserversd4[subentryd4]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd5 = ns.scan(subserversd4[subentryd4]);\\t// depth 5\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd5 in subserversd5) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd5[subentryd5] !== subserversd4[subentryd4] && subserversd5[subentryd5] !== subserversd3[subentryd3] && subserversd5.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-------------------------> \\\" + subserversd5[subentryd5]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd6 = ns.scan(subserversd5[subentryd5]);\\t// depth 6\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd6 in subserversd6) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd6[subentryd6] !== subserversd5[subentryd5] && subserversd6[subentryd6] !== subserversd4[subentryd4] && subserversd6.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"------------------------------> \\\" + subserversd6[subentryd6]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd7 = ns.scan(subserversd6[subentryd6]);\\t// depth 7\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor(let subentryd7 in subserversd7) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd7[subentryd7] !== subserversd6[subentryd6] && subserversd7[subentryd7] !== subserversd5[subentryd5] && subserversd7.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-----------------------------------> \\\" + subserversd7[subentryd7]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"gigascan.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.05,\"server\":\"joesguns\",\"_hash\":\"09d5eb91ac2188cd08d0b0658f50095ede1bc815d40e01a99435a8ab5d16f1b9\",\"moduleSequenceNumber\":245}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tvar servers = ns.scan(home);\\n\\tvar scripts = ns.ls(home, \\\"basic-\\\");\\n\\n\\tfor (let entry in scripts) {\\n\\t\\tns.tprint(\\\"found script: \\\" + scripts[entry]);\\n\\t}\\n\\n\\t// Hack servers (!!! depth = 2 !!!) if needed and populate with scripts\\n\\tfor (let entry in servers) {\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== \\\"home\\\") {\\n\\t\\t\\t\\tns.tprint(\\\"----->   \\\" + subservers[subentry]);\\n\\t\\t\\t\\tif (!ns.hasRootAccess(subservers[subentry])) {\\n\\t\\t\\t\\t\\ttakeover(subservers[subentry]);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tns.tprint(\\\"copying scripts to \\\" + subservers[subentry]);\\n\\t\\t\\t\\tawait ns.scp(scripts, home, subservers[subentry]);\\n\\t\\t\\t\\t//await ns.scp(\\\"setup.ns\\\", home, subservers[subentry]);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (!ns.hasRootAccess(servers[entry])) {\\n\\t\\t\\ttakeover(servers[entry]);\\n\\t\\t}\\n\\t\\tns.tprint(\\\"copying scripts to \\\" + servers[entry]);\\n\\t\\tawait ns.scp(scripts, home, servers[entry]);\\n\\t\\t//await ns.scp(\\\"setup.ns\\\", home, servers[entry]);\\n\\t}\\n\\n\\t/** \\n\\t * \\tAttempts to take over target machine\\t\\n\\t * \\n\\t *  @param {string} tar\\n\\t *  @return {boolean} outcome \\n\\t**/\\n\\tasync function takeover(tar) {\\n\\t\\tlet currentTarget = tar;\\n\\t\\tlet isNotTakenOver = true;\\n\\t\\tlet attemptCounter = 0;\\n\\n\\t\\tif (ns.getServerNumPortsRequired <= 5 && attemptCounter < 50) {\\n\\t\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\n\\t\\t\\t\\tattemptCounter++;\\n\\t\\t\\t}\\n\\n\\t\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"setup.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":3.15,\"server\":\"joesguns\",\"_hash\":\"3b3625aa608a7f37d7592c27fde49ee0052288713ba0f611649877b763edd804\",\"moduleSequenceNumber\":246}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":15,\"minDifficulty\":5,\"moneyAvailable\":2500000,\"moneyMax\":62500000,\"numOpenPortsRequired\":0,\"openPortCount\":3,\"requiredHackingSkill\":10,\"serverGrowth\":20}},\"zer0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zer0\",\"httpPortOpen\":false,\"ip\":\"11.6.0.4\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"ZER0 Nightclub\",\"programs\":[],\"ramUsed\":31.05,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{\"zer0\":[0,0,0,6381]},\"filename\":\"basic-weaken.ns\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":72935.39019636257,\"offlineMoneyMade\":0,\"offlineRunningTime\":84702.592,\"onlineExpGained\":96338.73277968833,\"onlineMoneyMade\":0,\"onlineRunningTime\":110547.40999917194,\"pid\":6,\"ramUsage\":1.75,\"server\":\"zer0\",\"threads\":9,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{\"zer0\":[7499664,19890,0,0]},\"filename\":\"basic-hack.ns\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":155974.28672186218,\"offlineMoneyMade\":0,\"offlineRunningTime\":84702.602,\"onlineExpGained\":144643.97890547238,\"onlineMoneyMade\":7499664,\"onlineRunningTime\":110539.60999917205,\"pid\":7,\"ramUsage\":1.7,\"server\":\"zer0\",\"threads\":9,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.grow(target);\\n\\t}\\n}\",\"filename\":\"basic-grow.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"zer0\",\"_hash\":\"fc7652eef146e96723fb16cbc2683cf66b1d09853fff0ed8b2ca6655039902d8\",\"moduleSequenceNumber\":247}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"basic-hack.ns\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"basic-hack.ns\",\"url\":\"blob:file:///604a86d3-9b72-4aaf-86a8-7e33d54a3cbf\"}],\"ramUsage\":1.7,\"server\":\"zer0\",\"_hash\":\"b431b860a325c1f1e8d3f9afa6bd629bf87ee6500edce2693501368a5588a221\",\"moduleSequenceNumber\":343}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(target);\\n\\t}\\n}\",\"filename\":\"basic-weaken.ns\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"basic-weaken.ns\",\"url\":\"blob:file:///430e286b-e4e9-4f86-a7d0-fbfcb44ebd4b\"}],\"ramUsage\":1.75,\"server\":\"zer0\",\"_hash\":\"ef6ef87a7a369f27563e9f084d651b032b74b974340529a78834d2cbf17c12a5\",\"moduleSequenceNumber\":342}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n// TODO: unused + unfinished, based on setup.ns\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst hostMachine = ns.getHostname();\\n\\tconst target = ns.args[0];\\n\\tvar servers = ns.scan(hostMachine);\\n\\tvar scripts = ns.ls(home, \\\".ns\\\");\\n\\n\\tfor (let entry in scripts) {\\n\\t\\tns.tprint(\\\"found script: \\\" + scripts[entry]);\\n\\t}\\n\\n\\tns.tprint(\\\"Host:  \\\" + hostMachine);\\n\\tfor (let entry in servers) {\\t// depth 0\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\t// depth 1\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== home && subservers.length > 1) {\\n\\t\\t\\t\\tns.tprint(\\\"-----> \\\" + subservers[subentry]);\\n\\t\\t\\t\\tawait takeover(subservers[subentry]);\\n\\t\\t\\t\\tlet subserversd2 = ns.scan(subservers[subentry]); // depth 2\\n\\t\\t\\t\\tfor (let subentryd2 in subserversd2) {\\n\\t\\t\\t\\t\\tif (subserversd2[subentryd2] !== subservers[subentry] && subserversd2[subentryd2] !== servers[entry] && subserversd2.length > 1) {\\n\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------> \\\" + subserversd2[subentryd2]);\\n\\t\\t\\t\\t\\t\\tawait takeover(subserversd2[subentryd2]);\\n\\t\\t\\t\\t\\t\\tlet subserversd3 = ns.scan(subserversd2[subentryd2]);\\t// depth 3\\n\\t\\t\\t\\t\\t\\tfor (let subentryd3 in subserversd3) {\\n\\t\\t\\t\\t\\t\\t\\tif (subserversd3[subentryd3] !== subserversd2[subentryd2] && subserversd3[subentryd3] !== subservers[subentry] && subserversd3.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------> \\\" + subserversd3[subentryd3]);\\n\\t\\t\\t\\t\\t\\t\\t\\tawait takeover(subserversd3[subentryd3]);\\n\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd4 = ns.scan(subserversd3[subentryd3]);\\t// depth 4\\n\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd4 in subserversd4) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd4[subentryd4] !== subserversd3[subentryd3] && subserversd4[subentryd4] !== subserversd2[subentryd2] && subserversd4.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------------> \\\" + subserversd4[subentryd4]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tawait takeover(subserversd4[subentryd4]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd5 = ns.scan(subserversd4[subentryd4]);\\t// depth 5\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd5 in subserversd5) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd5[subentryd5] !== subserversd4[subentryd4] && subserversd5[subentryd5] !== subserversd3[subentryd3] && subserversd5.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-------------------------> \\\" + subserversd5[subentryd5]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tawait takeover(subserversd5[subentryd5]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd6 = ns.scan(subserversd5[subentryd5]);\\t// depth 6\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd6 in subserversd6) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd6[subentryd6] !== subserversd5[subentryd5] && subserversd6[subentryd6] !== subserversd4[subentryd4] && subserversd6.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"------------------------------> \\\" + subserversd6[subentryd6]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tawait takeover(subserversd6[subentryd6]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd7 = ns.scan(subserversd6[subentryd6]);\\t// depth 7\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd7 in subserversd7) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd7[subentryd7] !== subserversd6[subentryd6] && subserversd7[subentryd7] !== subserversd5[subentryd5] && subserversd7.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-----------------------------------> \\\" + subserversd7[subentryd7]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tawait takeover(subserversd7[subentryd7]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tawait takeover(servers[entry]);\\n\\t}\\n\\n\\t/** \\n\\t * \\tAttempts to take over target machine\\t\\n\\t * \\n\\t *  @param {string} tar\\n\\t *  @return {boolean} outcome \\n\\t**/\\n\\tasync function takeover(tar) {\\n\\t\\tlet currentTarget = tar;\\n\\t\\tlet isNotTakenOver = true;\\n\\t\\tlet attemptCounter = 0;\\n\\n\\t\\tif (/*ns.getServerNumPortsRequired <= 5 && */ attemptCounter < 30) {\\n\\t\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\ttry {\\n\\t\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t\\t} catch(error) {\\n\\t\\t\\t\\t\\t\\tns.tprint(\\\"not enough ports to nuke \\\" +  currentTarget);\\n\\t\\t\\t\\t\\t\\treturn false;\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tattemptCounter++;\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.scp(scripts, home, currentTarget);\\n\\t\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"deep-setup.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":3.1,\"server\":\"zer0\",\"_hash\":\"95e9530fb6f69bfe511a604adf704b1d63ca180a1d556d7b1669bf3a470b227e\",\"moduleSequenceNumber\":250}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tconst currentMachine = ns.getHostname();\\n\\tvar servers = ns.scan(currentMachine);\\n\\tvar scripts = ns.ls(home, \\\"basic-\\\");\\n\\n\\tns.tprint(\\\"Host:  \\\" + currentMachine);\\n\\tfor (let entry in servers) {\\t// depth 0\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\t// depth 1\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== home && subservers.length > 1) {\\n\\t\\t\\t\\tns.tprint(\\\"-----> \\\" + subservers[subentry]);\\n\\t\\t\\t\\tlet subserversd2 = ns.scan(subservers[subentry]); // depth 2\\n\\t\\t\\t\\tfor (let subentryd2 in subserversd2) {\\n\\t\\t\\t\\t\\tif (subserversd2[subentryd2] !== subservers[subentry] && subserversd2[subentryd2] !== servers[entry] && subserversd2.length > 1) {\\n\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------> \\\" + subserversd2[subentryd2]);\\n\\t\\t\\t\\t\\t\\tlet subserversd3 = ns.scan(subserversd2[subentryd2]);\\t// depth 3\\n\\t\\t\\t\\t\\t\\tfor (let subentryd3 in subserversd3) {\\n\\t\\t\\t\\t\\t\\t\\tif (subserversd3[subentryd3] !== subserversd2[subentryd2] && subserversd3[subentryd3] !== subservers[subentry] && subserversd3.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------> \\\" + subserversd3[subentryd3]);\\n\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd4 = ns.scan(subserversd3[subentryd3]);\\t// depth 4\\n\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd4 in subserversd4) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd4[subentryd4] !== subserversd3[subentryd3] && subserversd4[subentryd4] !== subserversd2[subentryd2] && subserversd4.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------------> \\\" + subserversd4[subentryd4]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd5 = ns.scan(subserversd4[subentryd4]);\\t// depth 5\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd5 in subserversd5) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd5[subentryd5] !== subserversd4[subentryd4] && subserversd5[subentryd5] !== subserversd3[subentryd3] && subserversd5.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-------------------------> \\\" + subserversd5[subentryd5]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd6 = ns.scan(subserversd5[subentryd5]);\\t// depth 6\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd6 in subserversd6) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd6[subentryd6] !== subserversd5[subentryd5] && subserversd6[subentryd6] !== subserversd4[subentryd4] && subserversd6.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"------------------------------> \\\" + subserversd6[subentryd6]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd7 = ns.scan(subserversd6[subentryd6]);\\t// depth 7\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor(let subentryd7 in subserversd7) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd7[subentryd7] !== subserversd6[subentryd6] && subserversd7[subentryd7] !== subserversd5[subentryd5] && subserversd7.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-----------------------------------> \\\" + subserversd7[subentryd7]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"gigascan.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.05,\"server\":\"zer0\",\"_hash\":\"09d5eb91ac2188cd08d0b0658f50095ede1bc815d40e01a99435a8ab5d16f1b9\",\"moduleSequenceNumber\":251}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tvar servers = ns.scan(home);\\n\\tvar scripts = ns.ls(home, \\\"basic-\\\");\\n\\n\\tfor (let entry in scripts) {\\n\\t\\tns.tprint(\\\"found script: \\\" + scripts[entry]);\\n\\t}\\n\\n\\t// Hack servers (!!! depth = 2 !!!) if needed and populate with scripts\\n\\tfor (let entry in servers) {\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== \\\"home\\\") {\\n\\t\\t\\t\\tns.tprint(\\\"----->   \\\" + subservers[subentry]);\\n\\t\\t\\t\\tif (!ns.hasRootAccess(subservers[subentry])) {\\n\\t\\t\\t\\t\\ttakeover(subservers[subentry]);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tns.tprint(\\\"copying scripts to \\\" + subservers[subentry]);\\n\\t\\t\\t\\tawait ns.scp(scripts, home, subservers[subentry]);\\n\\t\\t\\t\\t//await ns.scp(\\\"setup.ns\\\", home, subservers[subentry]);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (!ns.hasRootAccess(servers[entry])) {\\n\\t\\t\\ttakeover(servers[entry]);\\n\\t\\t}\\n\\t\\tns.tprint(\\\"copying scripts to \\\" + servers[entry]);\\n\\t\\tawait ns.scp(scripts, home, servers[entry]);\\n\\t\\t//await ns.scp(\\\"setup.ns\\\", home, servers[entry]);\\n\\t}\\n\\n\\t/** \\n\\t * \\tAttempts to take over target machine\\t\\n\\t * \\n\\t *  @param {string} tar\\n\\t *  @return {boolean} outcome \\n\\t**/\\n\\tasync function takeover(tar) {\\n\\t\\tlet currentTarget = tar;\\n\\t\\tlet isNotTakenOver = true;\\n\\t\\tlet attemptCounter = 0;\\n\\n\\t\\tif (ns.getServerNumPortsRequired <= 5 && attemptCounter < 50) {\\n\\t\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\n\\t\\t\\t\\tattemptCounter++;\\n\\t\\t\\t}\\n\\n\\t\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"setup.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":3.15,\"server\":\"zer0\",\"_hash\":\"3b3625aa608a7f37d7592c27fde49ee0052288713ba0f611649877b763edd804\",\"moduleSequenceNumber\":252}}],\"serversOnNetwork\":[\"iron-gym\",\"neo-net\",\"silver-helix\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":8.002,\"minDifficulty\":8,\"moneyAvailable\":336,\"moneyMax\":187500000,\"numOpenPortsRequired\":1,\"openPortCount\":3,\"requiredHackingSkill\":75,\"serverGrowth\":40}},\"nectar-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-251551.cct\",\"type\":\"Sanitize Parentheses in Expression\",\"data\":\"()(()()\",\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"nectar-net\",\"httpPortOpen\":false,\"ip\":\"5.6.1.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Nectar Nightclub Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.grow(target);\\n\\t}\\n}\",\"filename\":\"basic-grow.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"nectar-net\",\"_hash\":\"fc7652eef146e96723fb16cbc2683cf66b1d09853fff0ed8b2ca6655039902d8\",\"moduleSequenceNumber\":253}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"basic-hack.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"nectar-net\",\"_hash\":\"b431b860a325c1f1e8d3f9afa6bd629bf87ee6500edce2693501368a5588a221\",\"moduleSequenceNumber\":254}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(target);\\n\\t}\\n}\",\"filename\":\"basic-weaken.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"nectar-net\",\"_hash\":\"ef6ef87a7a369f27563e9f084d651b032b74b974340529a78834d2cbf17c12a5\",\"moduleSequenceNumber\":255}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n// TODO: unused + unfinished, based on setup.ns\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst hostMachine = ns.getHostname();\\n\\tconst target = ns.args[0];\\n\\tvar servers = ns.scan(hostMachine);\\n\\tvar scripts = ns.ls(home, \\\".ns\\\");\\n\\n\\tfor (let entry in scripts) {\\n\\t\\tns.tprint(\\\"found script: \\\" + scripts[entry]);\\n\\t}\\n\\n\\tns.tprint(\\\"Host:  \\\" + hostMachine);\\n\\tfor (let entry in servers) {\\t// depth 0\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\t// depth 1\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== home && subservers.length > 1) {\\n\\t\\t\\t\\tns.tprint(\\\"-----> \\\" + subservers[subentry]);\\n\\t\\t\\t\\tawait takeover(subservers[subentry]);\\n\\t\\t\\t\\tlet subserversd2 = ns.scan(subservers[subentry]); // depth 2\\n\\t\\t\\t\\tfor (let subentryd2 in subserversd2) {\\n\\t\\t\\t\\t\\tif (subserversd2[subentryd2] !== subservers[subentry] && subserversd2[subentryd2] !== servers[entry] && subserversd2.length > 1) {\\n\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------> \\\" + subserversd2[subentryd2]);\\n\\t\\t\\t\\t\\t\\tawait takeover(subserversd2[subentryd2]);\\n\\t\\t\\t\\t\\t\\tlet subserversd3 = ns.scan(subserversd2[subentryd2]);\\t// depth 3\\n\\t\\t\\t\\t\\t\\tfor (let subentryd3 in subserversd3) {\\n\\t\\t\\t\\t\\t\\t\\tif (subserversd3[subentryd3] !== subserversd2[subentryd2] && subserversd3[subentryd3] !== subservers[subentry] && subserversd3.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------> \\\" + subserversd3[subentryd3]);\\n\\t\\t\\t\\t\\t\\t\\t\\tawait takeover(subserversd3[subentryd3]);\\n\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd4 = ns.scan(subserversd3[subentryd3]);\\t// depth 4\\n\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd4 in subserversd4) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd4[subentryd4] !== subserversd3[subentryd3] && subserversd4[subentryd4] !== subserversd2[subentryd2] && subserversd4.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------------> \\\" + subserversd4[subentryd4]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tawait takeover(subserversd4[subentryd4]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd5 = ns.scan(subserversd4[subentryd4]);\\t// depth 5\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd5 in subserversd5) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd5[subentryd5] !== subserversd4[subentryd4] && subserversd5[subentryd5] !== subserversd3[subentryd3] && subserversd5.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-------------------------> \\\" + subserversd5[subentryd5]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tawait takeover(subserversd5[subentryd5]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd6 = ns.scan(subserversd5[subentryd5]);\\t// depth 6\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd6 in subserversd6) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd6[subentryd6] !== subserversd5[subentryd5] && subserversd6[subentryd6] !== subserversd4[subentryd4] && subserversd6.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"------------------------------> \\\" + subserversd6[subentryd6]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tawait takeover(subserversd6[subentryd6]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd7 = ns.scan(subserversd6[subentryd6]);\\t// depth 7\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd7 in subserversd7) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd7[subentryd7] !== subserversd6[subentryd6] && subserversd7[subentryd7] !== subserversd5[subentryd5] && subserversd7.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-----------------------------------> \\\" + subserversd7[subentryd7]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tawait takeover(subserversd7[subentryd7]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tawait takeover(servers[entry]);\\n\\t}\\n\\n\\t/** \\n\\t * \\tAttempts to take over target machine\\t\\n\\t * \\n\\t *  @param {string} tar\\n\\t *  @return {boolean} outcome \\n\\t**/\\n\\tasync function takeover(tar) {\\n\\t\\tlet currentTarget = tar;\\n\\t\\tlet isNotTakenOver = true;\\n\\t\\tlet attemptCounter = 0;\\n\\n\\t\\tif (/*ns.getServerNumPortsRequired <= 5 && */ attemptCounter < 30) {\\n\\t\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\ttry {\\n\\t\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t\\t} catch(error) {\\n\\t\\t\\t\\t\\t\\tns.tprint(\\\"not enough ports to nuke \\\" +  currentTarget);\\n\\t\\t\\t\\t\\t\\treturn false;\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tattemptCounter++;\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.scp(scripts, home, currentTarget);\\n\\t\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"deep-setup.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":3.1,\"server\":\"nectar-net\",\"_hash\":\"95e9530fb6f69bfe511a604adf704b1d63ca180a1d556d7b1669bf3a470b227e\",\"moduleSequenceNumber\":256}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tconst currentMachine = ns.getHostname();\\n\\tvar servers = ns.scan(currentMachine);\\n\\tvar scripts = ns.ls(home, \\\"basic-\\\");\\n\\n\\tns.tprint(\\\"Host:  \\\" + currentMachine);\\n\\tfor (let entry in servers) {\\t// depth 0\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\t// depth 1\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== home && subservers.length > 1) {\\n\\t\\t\\t\\tns.tprint(\\\"-----> \\\" + subservers[subentry]);\\n\\t\\t\\t\\tlet subserversd2 = ns.scan(subservers[subentry]); // depth 2\\n\\t\\t\\t\\tfor (let subentryd2 in subserversd2) {\\n\\t\\t\\t\\t\\tif (subserversd2[subentryd2] !== subservers[subentry] && subserversd2[subentryd2] !== servers[entry] && subserversd2.length > 1) {\\n\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------> \\\" + subserversd2[subentryd2]);\\n\\t\\t\\t\\t\\t\\tlet subserversd3 = ns.scan(subserversd2[subentryd2]);\\t// depth 3\\n\\t\\t\\t\\t\\t\\tfor (let subentryd3 in subserversd3) {\\n\\t\\t\\t\\t\\t\\t\\tif (subserversd3[subentryd3] !== subserversd2[subentryd2] && subserversd3[subentryd3] !== subservers[subentry] && subserversd3.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------> \\\" + subserversd3[subentryd3]);\\n\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd4 = ns.scan(subserversd3[subentryd3]);\\t// depth 4\\n\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd4 in subserversd4) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd4[subentryd4] !== subserversd3[subentryd3] && subserversd4[subentryd4] !== subserversd2[subentryd2] && subserversd4.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------------> \\\" + subserversd4[subentryd4]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd5 = ns.scan(subserversd4[subentryd4]);\\t// depth 5\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd5 in subserversd5) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd5[subentryd5] !== subserversd4[subentryd4] && subserversd5[subentryd5] !== subserversd3[subentryd3] && subserversd5.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-------------------------> \\\" + subserversd5[subentryd5]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd6 = ns.scan(subserversd5[subentryd5]);\\t// depth 6\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd6 in subserversd6) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd6[subentryd6] !== subserversd5[subentryd5] && subserversd6[subentryd6] !== subserversd4[subentryd4] && subserversd6.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"------------------------------> \\\" + subserversd6[subentryd6]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd7 = ns.scan(subserversd6[subentryd6]);\\t// depth 7\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor(let subentryd7 in subserversd7) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd7[subentryd7] !== subserversd6[subentryd6] && subserversd7[subentryd7] !== subserversd5[subentryd5] && subserversd7.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-----------------------------------> \\\" + subserversd7[subentryd7]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"gigascan.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.05,\"server\":\"nectar-net\",\"_hash\":\"09d5eb91ac2188cd08d0b0658f50095ede1bc815d40e01a99435a8ab5d16f1b9\",\"moduleSequenceNumber\":257}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tvar servers = ns.scan(home);\\n\\tvar scripts = ns.ls(home, \\\"basic-\\\");\\n\\n\\tfor (let entry in scripts) {\\n\\t\\tns.tprint(\\\"found script: \\\" + scripts[entry]);\\n\\t}\\n\\n\\t// Hack servers (!!! depth = 2 !!!) if needed and populate with scripts\\n\\tfor (let entry in servers) {\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== \\\"home\\\") {\\n\\t\\t\\t\\tns.tprint(\\\"----->   \\\" + subservers[subentry]);\\n\\t\\t\\t\\tif (!ns.hasRootAccess(subservers[subentry])) {\\n\\t\\t\\t\\t\\ttakeover(subservers[subentry]);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tns.tprint(\\\"copying scripts to \\\" + subservers[subentry]);\\n\\t\\t\\t\\tawait ns.scp(scripts, home, subservers[subentry]);\\n\\t\\t\\t\\t//await ns.scp(\\\"setup.ns\\\", home, subservers[subentry]);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (!ns.hasRootAccess(servers[entry])) {\\n\\t\\t\\ttakeover(servers[entry]);\\n\\t\\t}\\n\\t\\tns.tprint(\\\"copying scripts to \\\" + servers[entry]);\\n\\t\\tawait ns.scp(scripts, home, servers[entry]);\\n\\t\\t//await ns.scp(\\\"setup.ns\\\", home, servers[entry]);\\n\\t}\\n\\n\\t/** \\n\\t * \\tAttempts to take over target machine\\t\\n\\t * \\n\\t *  @param {string} tar\\n\\t *  @return {boolean} outcome \\n\\t**/\\n\\tasync function takeover(tar) {\\n\\t\\tlet currentTarget = tar;\\n\\t\\tlet isNotTakenOver = true;\\n\\t\\tlet attemptCounter = 0;\\n\\n\\t\\tif (ns.getServerNumPortsRequired <= 5 && attemptCounter < 50) {\\n\\t\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\n\\t\\t\\t\\tattemptCounter++;\\n\\t\\t\\t}\\n\\n\\t\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"setup.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":3.15,\"server\":\"nectar-net\",\"_hash\":\"3b3625aa608a7f37d7592c27fde49ee0052288713ba0f611649877b763edd804\",\"moduleSequenceNumber\":258}}],\"serversOnNetwork\":[\"n00dles\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":20,\"minDifficulty\":7,\"moneyAvailable\":2750000,\"moneyMax\":68750000,\"numOpenPortsRequired\":0,\"openPortCount\":3,\"requiredHackingSkill\":20,\"serverGrowth\":25}},\"neo-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"neo-net\",\"httpPortOpen\":false,\"ip\":\"19.3.9.0\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"Neo Nightclub Network\",\"programs\":[],\"ramUsed\":31.05,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{\"neo-net\":[4999698,28575,0,0]},\"filename\":\"basic-hack.ns\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":173015.24127546616,\"offlineMoneyMade\":0,\"offlineRunningTime\":84702.611,\"onlineExpGained\":169815.69998788624,\"onlineMoneyMade\":4999698,\"onlineRunningTime\":109377.00999918897,\"pid\":8,\"ramUsage\":1.7,\"server\":\"neo-net\",\"threads\":9,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{\"neo-net\":[0,0,0,8586]},\"filename\":\"basic-weaken.ns\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":101682.14588014915,\"offlineMoneyMade\":0,\"offlineRunningTime\":84702.61500000002,\"onlineExpGained\":129629.26808437635,\"onlineMoneyMade\":0,\"onlineRunningTime\":109354.6099991893,\"pid\":9,\"ramUsage\":1.75,\"server\":\"neo-net\",\"threads\":9,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.grow(target);\\n\\t}\\n}\",\"filename\":\"basic-grow.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"neo-net\",\"_hash\":\"fc7652eef146e96723fb16cbc2683cf66b1d09853fff0ed8b2ca6655039902d8\",\"moduleSequenceNumber\":259}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"basic-hack.ns\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"basic-hack.ns\",\"url\":\"blob:file:///604a86d3-9b72-4aaf-86a8-7e33d54a3cbf\"}],\"ramUsage\":1.7,\"server\":\"neo-net\",\"_hash\":\"b431b860a325c1f1e8d3f9afa6bd629bf87ee6500edce2693501368a5588a221\",\"moduleSequenceNumber\":344}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(target);\\n\\t}\\n}\",\"filename\":\"basic-weaken.ns\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"basic-weaken.ns\",\"url\":\"blob:file:///430e286b-e4e9-4f86-a7d0-fbfcb44ebd4b\"}],\"ramUsage\":1.75,\"server\":\"neo-net\",\"_hash\":\"ef6ef87a7a369f27563e9f084d651b032b74b974340529a78834d2cbf17c12a5\",\"moduleSequenceNumber\":345}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n// TODO: unused + unfinished, based on setup.ns\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst hostMachine = ns.getHostname();\\n\\tconst target = ns.args[0];\\n\\tvar servers = ns.scan(hostMachine);\\n\\tvar scripts = ns.ls(home, \\\".ns\\\");\\n\\n\\tfor (let entry in scripts) {\\n\\t\\tns.tprint(\\\"found script: \\\" + scripts[entry]);\\n\\t}\\n\\n\\tns.tprint(\\\"Host:  \\\" + hostMachine);\\n\\tfor (let entry in servers) {\\t// depth 0\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\t// depth 1\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== home && subservers.length > 1) {\\n\\t\\t\\t\\tns.tprint(\\\"-----> \\\" + subservers[subentry]);\\n\\t\\t\\t\\tawait takeover(subservers[subentry]);\\n\\t\\t\\t\\tlet subserversd2 = ns.scan(subservers[subentry]); // depth 2\\n\\t\\t\\t\\tfor (let subentryd2 in subserversd2) {\\n\\t\\t\\t\\t\\tif (subserversd2[subentryd2] !== subservers[subentry] && subserversd2[subentryd2] !== servers[entry] && subserversd2.length > 1) {\\n\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------> \\\" + subserversd2[subentryd2]);\\n\\t\\t\\t\\t\\t\\tawait takeover(subserversd2[subentryd2]);\\n\\t\\t\\t\\t\\t\\tlet subserversd3 = ns.scan(subserversd2[subentryd2]);\\t// depth 3\\n\\t\\t\\t\\t\\t\\tfor (let subentryd3 in subserversd3) {\\n\\t\\t\\t\\t\\t\\t\\tif (subserversd3[subentryd3] !== subserversd2[subentryd2] && subserversd3[subentryd3] !== subservers[subentry] && subserversd3.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------> \\\" + subserversd3[subentryd3]);\\n\\t\\t\\t\\t\\t\\t\\t\\tawait takeover(subserversd3[subentryd3]);\\n\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd4 = ns.scan(subserversd3[subentryd3]);\\t// depth 4\\n\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd4 in subserversd4) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd4[subentryd4] !== subserversd3[subentryd3] && subserversd4[subentryd4] !== subserversd2[subentryd2] && subserversd4.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------------> \\\" + subserversd4[subentryd4]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tawait takeover(subserversd4[subentryd4]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd5 = ns.scan(subserversd4[subentryd4]);\\t// depth 5\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd5 in subserversd5) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd5[subentryd5] !== subserversd4[subentryd4] && subserversd5[subentryd5] !== subserversd3[subentryd3] && subserversd5.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-------------------------> \\\" + subserversd5[subentryd5]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tawait takeover(subserversd5[subentryd5]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd6 = ns.scan(subserversd5[subentryd5]);\\t// depth 6\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd6 in subserversd6) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd6[subentryd6] !== subserversd5[subentryd5] && subserversd6[subentryd6] !== subserversd4[subentryd4] && subserversd6.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"------------------------------> \\\" + subserversd6[subentryd6]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tawait takeover(subserversd6[subentryd6]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd7 = ns.scan(subserversd6[subentryd6]);\\t// depth 7\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd7 in subserversd7) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd7[subentryd7] !== subserversd6[subentryd6] && subserversd7[subentryd7] !== subserversd5[subentryd5] && subserversd7.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-----------------------------------> \\\" + subserversd7[subentryd7]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tawait takeover(subserversd7[subentryd7]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tawait takeover(servers[entry]);\\n\\t}\\n\\n\\t/** \\n\\t * \\tAttempts to take over target machine\\t\\n\\t * \\n\\t *  @param {string} tar\\n\\t *  @return {boolean} outcome \\n\\t**/\\n\\tasync function takeover(tar) {\\n\\t\\tlet currentTarget = tar;\\n\\t\\tlet isNotTakenOver = true;\\n\\t\\tlet attemptCounter = 0;\\n\\n\\t\\tif (/*ns.getServerNumPortsRequired <= 5 && */ attemptCounter < 30) {\\n\\t\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\ttry {\\n\\t\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t\\t} catch(error) {\\n\\t\\t\\t\\t\\t\\tns.tprint(\\\"not enough ports to nuke \\\" +  currentTarget);\\n\\t\\t\\t\\t\\t\\treturn false;\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tattemptCounter++;\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.scp(scripts, home, currentTarget);\\n\\t\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"deep-setup.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":3.1,\"server\":\"neo-net\",\"_hash\":\"95e9530fb6f69bfe511a604adf704b1d63ca180a1d556d7b1669bf3a470b227e\",\"moduleSequenceNumber\":262}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tconst currentMachine = ns.getHostname();\\n\\tvar servers = ns.scan(currentMachine);\\n\\tvar scripts = ns.ls(home, \\\"basic-\\\");\\n\\n\\tns.tprint(\\\"Host:  \\\" + currentMachine);\\n\\tfor (let entry in servers) {\\t// depth 0\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\t// depth 1\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== home && subservers.length > 1) {\\n\\t\\t\\t\\tns.tprint(\\\"-----> \\\" + subservers[subentry]);\\n\\t\\t\\t\\tlet subserversd2 = ns.scan(subservers[subentry]); // depth 2\\n\\t\\t\\t\\tfor (let subentryd2 in subserversd2) {\\n\\t\\t\\t\\t\\tif (subserversd2[subentryd2] !== subservers[subentry] && subserversd2[subentryd2] !== servers[entry] && subserversd2.length > 1) {\\n\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------> \\\" + subserversd2[subentryd2]);\\n\\t\\t\\t\\t\\t\\tlet subserversd3 = ns.scan(subserversd2[subentryd2]);\\t// depth 3\\n\\t\\t\\t\\t\\t\\tfor (let subentryd3 in subserversd3) {\\n\\t\\t\\t\\t\\t\\t\\tif (subserversd3[subentryd3] !== subserversd2[subentryd2] && subserversd3[subentryd3] !== subservers[subentry] && subserversd3.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------> \\\" + subserversd3[subentryd3]);\\n\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd4 = ns.scan(subserversd3[subentryd3]);\\t// depth 4\\n\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd4 in subserversd4) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd4[subentryd4] !== subserversd3[subentryd3] && subserversd4[subentryd4] !== subserversd2[subentryd2] && subserversd4.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------------> \\\" + subserversd4[subentryd4]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd5 = ns.scan(subserversd4[subentryd4]);\\t// depth 5\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd5 in subserversd5) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd5[subentryd5] !== subserversd4[subentryd4] && subserversd5[subentryd5] !== subserversd3[subentryd3] && subserversd5.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-------------------------> \\\" + subserversd5[subentryd5]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd6 = ns.scan(subserversd5[subentryd5]);\\t// depth 6\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd6 in subserversd6) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd6[subentryd6] !== subserversd5[subentryd5] && subserversd6[subentryd6] !== subserversd4[subentryd4] && subserversd6.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"------------------------------> \\\" + subserversd6[subentryd6]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd7 = ns.scan(subserversd6[subentryd6]);\\t// depth 7\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor(let subentryd7 in subserversd7) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd7[subentryd7] !== subserversd6[subentryd6] && subserversd7[subentryd7] !== subserversd5[subentryd5] && subserversd7.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-----------------------------------> \\\" + subserversd7[subentryd7]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"gigascan.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.05,\"server\":\"neo-net\",\"_hash\":\"09d5eb91ac2188cd08d0b0658f50095ede1bc815d40e01a99435a8ab5d16f1b9\",\"moduleSequenceNumber\":263}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tvar servers = ns.scan(home);\\n\\tvar scripts = ns.ls(home, \\\"basic-\\\");\\n\\n\\tfor (let entry in scripts) {\\n\\t\\tns.tprint(\\\"found script: \\\" + scripts[entry]);\\n\\t}\\n\\n\\t// Hack servers (!!! depth = 2 !!!) if needed and populate with scripts\\n\\tfor (let entry in servers) {\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== \\\"home\\\") {\\n\\t\\t\\t\\tns.tprint(\\\"----->   \\\" + subservers[subentry]);\\n\\t\\t\\t\\tif (!ns.hasRootAccess(subservers[subentry])) {\\n\\t\\t\\t\\t\\ttakeover(subservers[subentry]);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tns.tprint(\\\"copying scripts to \\\" + subservers[subentry]);\\n\\t\\t\\t\\tawait ns.scp(scripts, home, subservers[subentry]);\\n\\t\\t\\t\\t//await ns.scp(\\\"setup.ns\\\", home, subservers[subentry]);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (!ns.hasRootAccess(servers[entry])) {\\n\\t\\t\\ttakeover(servers[entry]);\\n\\t\\t}\\n\\t\\tns.tprint(\\\"copying scripts to \\\" + servers[entry]);\\n\\t\\tawait ns.scp(scripts, home, servers[entry]);\\n\\t\\t//await ns.scp(\\\"setup.ns\\\", home, servers[entry]);\\n\\t}\\n\\n\\t/** \\n\\t * \\tAttempts to take over target machine\\t\\n\\t * \\n\\t *  @param {string} tar\\n\\t *  @return {boolean} outcome \\n\\t**/\\n\\tasync function takeover(tar) {\\n\\t\\tlet currentTarget = tar;\\n\\t\\tlet isNotTakenOver = true;\\n\\t\\tlet attemptCounter = 0;\\n\\n\\t\\tif (ns.getServerNumPortsRequired <= 5 && attemptCounter < 50) {\\n\\t\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\n\\t\\t\\t\\tattemptCounter++;\\n\\t\\t\\t}\\n\\n\\t\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"setup.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":3.15,\"server\":\"neo-net\",\"_hash\":\"3b3625aa608a7f37d7592c27fde49ee0052288713ba0f611649877b763edd804\",\"moduleSequenceNumber\":264}}],\"serversOnNetwork\":[\"zer0\",\"comptek\",\"netlink\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":8.004000000000001,\"minDifficulty\":8,\"moneyAvailable\":302,\"moneyMax\":125000000,\"numOpenPortsRequired\":1,\"openPortCount\":3,\"requiredHackingSkill\":50,\"serverGrowth\":25}},\"silver-helix\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"silver-helix\",\"httpPortOpen\":false,\"ip\":\"41.8.9.8\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"new-triads.lit\"],\"organizationName\":\"Silver Helix\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.grow(target);\\n\\t}\\n}\",\"filename\":\"basic-grow.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"silver-helix\",\"_hash\":\"fc7652eef146e96723fb16cbc2683cf66b1d09853fff0ed8b2ca6655039902d8\",\"moduleSequenceNumber\":265}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"basic-hack.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"silver-helix\",\"_hash\":\"b431b860a325c1f1e8d3f9afa6bd629bf87ee6500edce2693501368a5588a221\",\"moduleSequenceNumber\":266}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(target);\\n\\t}\\n}\",\"filename\":\"basic-weaken.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"silver-helix\",\"_hash\":\"ef6ef87a7a369f27563e9f084d651b032b74b974340529a78834d2cbf17c12a5\",\"moduleSequenceNumber\":267}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n// TODO: unused + unfinished, based on setup.ns\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst hostMachine = ns.getHostname();\\n\\tconst target = ns.args[0];\\n\\tvar servers = ns.scan(hostMachine);\\n\\tvar scripts = ns.ls(home, \\\".ns\\\");\\n\\n\\tfor (let entry in scripts) {\\n\\t\\tns.tprint(\\\"found script: \\\" + scripts[entry]);\\n\\t}\\n\\n\\tns.tprint(\\\"Host:  \\\" + hostMachine);\\n\\tfor (let entry in servers) {\\t// depth 0\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\t// depth 1\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== home && subservers.length > 1) {\\n\\t\\t\\t\\tns.tprint(\\\"-----> \\\" + subservers[subentry]);\\n\\t\\t\\t\\tawait takeover(subservers[subentry]);\\n\\t\\t\\t\\tlet subserversd2 = ns.scan(subservers[subentry]); // depth 2\\n\\t\\t\\t\\tfor (let subentryd2 in subserversd2) {\\n\\t\\t\\t\\t\\tif (subserversd2[subentryd2] !== subservers[subentry] && subserversd2[subentryd2] !== servers[entry] && subserversd2.length > 1) {\\n\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------> \\\" + subserversd2[subentryd2]);\\n\\t\\t\\t\\t\\t\\tawait takeover(subserversd2[subentryd2]);\\n\\t\\t\\t\\t\\t\\tlet subserversd3 = ns.scan(subserversd2[subentryd2]);\\t// depth 3\\n\\t\\t\\t\\t\\t\\tfor (let subentryd3 in subserversd3) {\\n\\t\\t\\t\\t\\t\\t\\tif (subserversd3[subentryd3] !== subserversd2[subentryd2] && subserversd3[subentryd3] !== subservers[subentry] && subserversd3.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------> \\\" + subserversd3[subentryd3]);\\n\\t\\t\\t\\t\\t\\t\\t\\tawait takeover(subserversd3[subentryd3]);\\n\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd4 = ns.scan(subserversd3[subentryd3]);\\t// depth 4\\n\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd4 in subserversd4) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd4[subentryd4] !== subserversd3[subentryd3] && subserversd4[subentryd4] !== subserversd2[subentryd2] && subserversd4.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------------> \\\" + subserversd4[subentryd4]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tawait takeover(subserversd4[subentryd4]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd5 = ns.scan(subserversd4[subentryd4]);\\t// depth 5\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd5 in subserversd5) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd5[subentryd5] !== subserversd4[subentryd4] && subserversd5[subentryd5] !== subserversd3[subentryd3] && subserversd5.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-------------------------> \\\" + subserversd5[subentryd5]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tawait takeover(subserversd5[subentryd5]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd6 = ns.scan(subserversd5[subentryd5]);\\t// depth 6\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd6 in subserversd6) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd6[subentryd6] !== subserversd5[subentryd5] && subserversd6[subentryd6] !== subserversd4[subentryd4] && subserversd6.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"------------------------------> \\\" + subserversd6[subentryd6]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tawait takeover(subserversd6[subentryd6]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd7 = ns.scan(subserversd6[subentryd6]);\\t// depth 7\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd7 in subserversd7) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd7[subentryd7] !== subserversd6[subentryd6] && subserversd7[subentryd7] !== subserversd5[subentryd5] && subserversd7.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-----------------------------------> \\\" + subserversd7[subentryd7]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tawait takeover(subserversd7[subentryd7]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tawait takeover(servers[entry]);\\n\\t}\\n\\n\\t/** \\n\\t * \\tAttempts to take over target machine\\t\\n\\t * \\n\\t *  @param {string} tar\\n\\t *  @return {boolean} outcome \\n\\t**/\\n\\tasync function takeover(tar) {\\n\\t\\tlet currentTarget = tar;\\n\\t\\tlet isNotTakenOver = true;\\n\\t\\tlet attemptCounter = 0;\\n\\n\\t\\tif (/*ns.getServerNumPortsRequired <= 5 && */ attemptCounter < 30) {\\n\\t\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\ttry {\\n\\t\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t\\t} catch(error) {\\n\\t\\t\\t\\t\\t\\tns.tprint(\\\"not enough ports to nuke \\\" +  currentTarget);\\n\\t\\t\\t\\t\\t\\treturn false;\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tattemptCounter++;\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.scp(scripts, home, currentTarget);\\n\\t\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"deep-setup.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":3.1,\"server\":\"silver-helix\",\"_hash\":\"95e9530fb6f69bfe511a604adf704b1d63ca180a1d556d7b1669bf3a470b227e\",\"moduleSequenceNumber\":268}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tconst currentMachine = ns.getHostname();\\n\\tvar servers = ns.scan(currentMachine);\\n\\tvar scripts = ns.ls(home, \\\"basic-\\\");\\n\\n\\tns.tprint(\\\"Host:  \\\" + currentMachine);\\n\\tfor (let entry in servers) {\\t// depth 0\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\t// depth 1\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== home && subservers.length > 1) {\\n\\t\\t\\t\\tns.tprint(\\\"-----> \\\" + subservers[subentry]);\\n\\t\\t\\t\\tlet subserversd2 = ns.scan(subservers[subentry]); // depth 2\\n\\t\\t\\t\\tfor (let subentryd2 in subserversd2) {\\n\\t\\t\\t\\t\\tif (subserversd2[subentryd2] !== subservers[subentry] && subserversd2[subentryd2] !== servers[entry] && subserversd2.length > 1) {\\n\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------> \\\" + subserversd2[subentryd2]);\\n\\t\\t\\t\\t\\t\\tlet subserversd3 = ns.scan(subserversd2[subentryd2]);\\t// depth 3\\n\\t\\t\\t\\t\\t\\tfor (let subentryd3 in subserversd3) {\\n\\t\\t\\t\\t\\t\\t\\tif (subserversd3[subentryd3] !== subserversd2[subentryd2] && subserversd3[subentryd3] !== subservers[subentry] && subserversd3.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------> \\\" + subserversd3[subentryd3]);\\n\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd4 = ns.scan(subserversd3[subentryd3]);\\t// depth 4\\n\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd4 in subserversd4) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd4[subentryd4] !== subserversd3[subentryd3] && subserversd4[subentryd4] !== subserversd2[subentryd2] && subserversd4.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------------> \\\" + subserversd4[subentryd4]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd5 = ns.scan(subserversd4[subentryd4]);\\t// depth 5\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd5 in subserversd5) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd5[subentryd5] !== subserversd4[subentryd4] && subserversd5[subentryd5] !== subserversd3[subentryd3] && subserversd5.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-------------------------> \\\" + subserversd5[subentryd5]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd6 = ns.scan(subserversd5[subentryd5]);\\t// depth 6\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd6 in subserversd6) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd6[subentryd6] !== subserversd5[subentryd5] && subserversd6[subentryd6] !== subserversd4[subentryd4] && subserversd6.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"------------------------------> \\\" + subserversd6[subentryd6]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd7 = ns.scan(subserversd6[subentryd6]);\\t// depth 7\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor(let subentryd7 in subserversd7) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd7[subentryd7] !== subserversd6[subentryd6] && subserversd7[subentryd7] !== subserversd5[subentryd5] && subserversd7.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-----------------------------------> \\\" + subserversd7[subentryd7]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"gigascan.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.05,\"server\":\"silver-helix\",\"_hash\":\"09d5eb91ac2188cd08d0b0658f50095ede1bc815d40e01a99435a8ab5d16f1b9\",\"moduleSequenceNumber\":269}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tvar servers = ns.scan(home);\\n\\tvar scripts = ns.ls(home, \\\"basic-\\\");\\n\\n\\tfor (let entry in scripts) {\\n\\t\\tns.tprint(\\\"found script: \\\" + scripts[entry]);\\n\\t}\\n\\n\\t// Hack servers (!!! depth = 2 !!!) if needed and populate with scripts\\n\\tfor (let entry in servers) {\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== \\\"home\\\") {\\n\\t\\t\\t\\tns.tprint(\\\"----->   \\\" + subservers[subentry]);\\n\\t\\t\\t\\tif (!ns.hasRootAccess(subservers[subentry])) {\\n\\t\\t\\t\\t\\ttakeover(subservers[subentry]);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tns.tprint(\\\"copying scripts to \\\" + subservers[subentry]);\\n\\t\\t\\t\\tawait ns.scp(scripts, home, subservers[subentry]);\\n\\t\\t\\t\\t//await ns.scp(\\\"setup.ns\\\", home, subservers[subentry]);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (!ns.hasRootAccess(servers[entry])) {\\n\\t\\t\\ttakeover(servers[entry]);\\n\\t\\t}\\n\\t\\tns.tprint(\\\"copying scripts to \\\" + servers[entry]);\\n\\t\\tawait ns.scp(scripts, home, servers[entry]);\\n\\t\\t//await ns.scp(\\\"setup.ns\\\", home, servers[entry]);\\n\\t}\\n\\n\\t/** \\n\\t * \\tAttempts to take over target machine\\t\\n\\t * \\n\\t *  @param {string} tar\\n\\t *  @return {boolean} outcome \\n\\t**/\\n\\tasync function takeover(tar) {\\n\\t\\tlet currentTarget = tar;\\n\\t\\tlet isNotTakenOver = true;\\n\\t\\tlet attemptCounter = 0;\\n\\n\\t\\tif (ns.getServerNumPortsRequired <= 5 && attemptCounter < 50) {\\n\\t\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\n\\t\\t\\t\\tattemptCounter++;\\n\\t\\t\\t}\\n\\n\\t\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"setup.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":3.15,\"server\":\"silver-helix\",\"_hash\":\"3b3625aa608a7f37d7592c27fde49ee0052288713ba0f611649877b763edd804\",\"moduleSequenceNumber\":270}}],\"serversOnNetwork\":[\"zer0\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":30,\"minDifficulty\":10,\"moneyAvailable\":45000000,\"moneyMax\":1125000000,\"numOpenPortsRequired\":2,\"openPortCount\":3,\"requiredHackingSkill\":150,\"serverGrowth\":30}},\"hong-fang-tea\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"hong-fang-tea\",\"httpPortOpen\":false,\"ip\":\"39.1.7.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"brighter-than-the-sun.lit\"],\"organizationName\":\"HongFang Teahouse\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.grow(target);\\n\\t}\\n}\",\"filename\":\"basic-grow.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"hong-fang-tea\",\"_hash\":\"fc7652eef146e96723fb16cbc2683cf66b1d09853fff0ed8b2ca6655039902d8\",\"moduleSequenceNumber\":271}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"basic-hack.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"hong-fang-tea\",\"_hash\":\"b431b860a325c1f1e8d3f9afa6bd629bf87ee6500edce2693501368a5588a221\",\"moduleSequenceNumber\":272}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(target);\\n\\t}\\n}\",\"filename\":\"basic-weaken.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"hong-fang-tea\",\"_hash\":\"ef6ef87a7a369f27563e9f084d651b032b74b974340529a78834d2cbf17c12a5\",\"moduleSequenceNumber\":273}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n// TODO: unused + unfinished, based on setup.ns\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst hostMachine = ns.getHostname();\\n\\tconst target = ns.args[0];\\n\\tvar servers = ns.scan(hostMachine);\\n\\tvar scripts = ns.ls(home, \\\".ns\\\");\\n\\n\\tfor (let entry in scripts) {\\n\\t\\tns.tprint(\\\"found script: \\\" + scripts[entry]);\\n\\t}\\n\\n\\tns.tprint(\\\"Host:  \\\" + hostMachine);\\n\\tfor (let entry in servers) {\\t// depth 0\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\t// depth 1\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== home && subservers.length > 1) {\\n\\t\\t\\t\\tns.tprint(\\\"-----> \\\" + subservers[subentry]);\\n\\t\\t\\t\\tawait takeover(subservers[subentry]);\\n\\t\\t\\t\\tlet subserversd2 = ns.scan(subservers[subentry]); // depth 2\\n\\t\\t\\t\\tfor (let subentryd2 in subserversd2) {\\n\\t\\t\\t\\t\\tif (subserversd2[subentryd2] !== subservers[subentry] && subserversd2[subentryd2] !== servers[entry] && subserversd2.length > 1) {\\n\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------> \\\" + subserversd2[subentryd2]);\\n\\t\\t\\t\\t\\t\\tawait takeover(subserversd2[subentryd2]);\\n\\t\\t\\t\\t\\t\\tlet subserversd3 = ns.scan(subserversd2[subentryd2]);\\t// depth 3\\n\\t\\t\\t\\t\\t\\tfor (let subentryd3 in subserversd3) {\\n\\t\\t\\t\\t\\t\\t\\tif (subserversd3[subentryd3] !== subserversd2[subentryd2] && subserversd3[subentryd3] !== subservers[subentry] && subserversd3.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------> \\\" + subserversd3[subentryd3]);\\n\\t\\t\\t\\t\\t\\t\\t\\tawait takeover(subserversd3[subentryd3]);\\n\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd4 = ns.scan(subserversd3[subentryd3]);\\t// depth 4\\n\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd4 in subserversd4) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd4[subentryd4] !== subserversd3[subentryd3] && subserversd4[subentryd4] !== subserversd2[subentryd2] && subserversd4.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------------> \\\" + subserversd4[subentryd4]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tawait takeover(subserversd4[subentryd4]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd5 = ns.scan(subserversd4[subentryd4]);\\t// depth 5\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd5 in subserversd5) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd5[subentryd5] !== subserversd4[subentryd4] && subserversd5[subentryd5] !== subserversd3[subentryd3] && subserversd5.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-------------------------> \\\" + subserversd5[subentryd5]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tawait takeover(subserversd5[subentryd5]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd6 = ns.scan(subserversd5[subentryd5]);\\t// depth 6\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd6 in subserversd6) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd6[subentryd6] !== subserversd5[subentryd5] && subserversd6[subentryd6] !== subserversd4[subentryd4] && subserversd6.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"------------------------------> \\\" + subserversd6[subentryd6]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tawait takeover(subserversd6[subentryd6]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd7 = ns.scan(subserversd6[subentryd6]);\\t// depth 7\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd7 in subserversd7) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd7[subentryd7] !== subserversd6[subentryd6] && subserversd7[subentryd7] !== subserversd5[subentryd5] && subserversd7.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-----------------------------------> \\\" + subserversd7[subentryd7]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tawait takeover(subserversd7[subentryd7]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tawait takeover(servers[entry]);\\n\\t}\\n\\n\\t/** \\n\\t * \\tAttempts to take over target machine\\t\\n\\t * \\n\\t *  @param {string} tar\\n\\t *  @return {boolean} outcome \\n\\t**/\\n\\tasync function takeover(tar) {\\n\\t\\tlet currentTarget = tar;\\n\\t\\tlet isNotTakenOver = true;\\n\\t\\tlet attemptCounter = 0;\\n\\n\\t\\tif (/*ns.getServerNumPortsRequired <= 5 && */ attemptCounter < 30) {\\n\\t\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\ttry {\\n\\t\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t\\t} catch(error) {\\n\\t\\t\\t\\t\\t\\tns.tprint(\\\"not enough ports to nuke \\\" +  currentTarget);\\n\\t\\t\\t\\t\\t\\treturn false;\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tattemptCounter++;\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.scp(scripts, home, currentTarget);\\n\\t\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"deep-setup.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":3.1,\"server\":\"hong-fang-tea\",\"_hash\":\"95e9530fb6f69bfe511a604adf704b1d63ca180a1d556d7b1669bf3a470b227e\",\"moduleSequenceNumber\":274}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tconst currentMachine = ns.getHostname();\\n\\tvar servers = ns.scan(currentMachine);\\n\\tvar scripts = ns.ls(home, \\\"basic-\\\");\\n\\n\\tns.tprint(\\\"Host:  \\\" + currentMachine);\\n\\tfor (let entry in servers) {\\t// depth 0\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\t// depth 1\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== home && subservers.length > 1) {\\n\\t\\t\\t\\tns.tprint(\\\"-----> \\\" + subservers[subentry]);\\n\\t\\t\\t\\tlet subserversd2 = ns.scan(subservers[subentry]); // depth 2\\n\\t\\t\\t\\tfor (let subentryd2 in subserversd2) {\\n\\t\\t\\t\\t\\tif (subserversd2[subentryd2] !== subservers[subentry] && subserversd2[subentryd2] !== servers[entry] && subserversd2.length > 1) {\\n\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------> \\\" + subserversd2[subentryd2]);\\n\\t\\t\\t\\t\\t\\tlet subserversd3 = ns.scan(subserversd2[subentryd2]);\\t// depth 3\\n\\t\\t\\t\\t\\t\\tfor (let subentryd3 in subserversd3) {\\n\\t\\t\\t\\t\\t\\t\\tif (subserversd3[subentryd3] !== subserversd2[subentryd2] && subserversd3[subentryd3] !== subservers[subentry] && subserversd3.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------> \\\" + subserversd3[subentryd3]);\\n\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd4 = ns.scan(subserversd3[subentryd3]);\\t// depth 4\\n\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd4 in subserversd4) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd4[subentryd4] !== subserversd3[subentryd3] && subserversd4[subentryd4] !== subserversd2[subentryd2] && subserversd4.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------------> \\\" + subserversd4[subentryd4]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd5 = ns.scan(subserversd4[subentryd4]);\\t// depth 5\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd5 in subserversd5) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd5[subentryd5] !== subserversd4[subentryd4] && subserversd5[subentryd5] !== subserversd3[subentryd3] && subserversd5.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-------------------------> \\\" + subserversd5[subentryd5]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd6 = ns.scan(subserversd5[subentryd5]);\\t// depth 6\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd6 in subserversd6) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd6[subentryd6] !== subserversd5[subentryd5] && subserversd6[subentryd6] !== subserversd4[subentryd4] && subserversd6.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"------------------------------> \\\" + subserversd6[subentryd6]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd7 = ns.scan(subserversd6[subentryd6]);\\t// depth 7\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor(let subentryd7 in subserversd7) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd7[subentryd7] !== subserversd6[subentryd6] && subserversd7[subentryd7] !== subserversd5[subentryd5] && subserversd7.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-----------------------------------> \\\" + subserversd7[subentryd7]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"gigascan.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.05,\"server\":\"hong-fang-tea\",\"_hash\":\"09d5eb91ac2188cd08d0b0658f50095ede1bc815d40e01a99435a8ab5d16f1b9\",\"moduleSequenceNumber\":275}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tvar servers = ns.scan(home);\\n\\tvar scripts = ns.ls(home, \\\"basic-\\\");\\n\\n\\tfor (let entry in scripts) {\\n\\t\\tns.tprint(\\\"found script: \\\" + scripts[entry]);\\n\\t}\\n\\n\\t// Hack servers (!!! depth = 2 !!!) if needed and populate with scripts\\n\\tfor (let entry in servers) {\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== \\\"home\\\") {\\n\\t\\t\\t\\tns.tprint(\\\"----->   \\\" + subservers[subentry]);\\n\\t\\t\\t\\tif (!ns.hasRootAccess(subservers[subentry])) {\\n\\t\\t\\t\\t\\ttakeover(subservers[subentry]);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tns.tprint(\\\"copying scripts to \\\" + subservers[subentry]);\\n\\t\\t\\t\\tawait ns.scp(scripts, home, subservers[subentry]);\\n\\t\\t\\t\\t//await ns.scp(\\\"setup.ns\\\", home, subservers[subentry]);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (!ns.hasRootAccess(servers[entry])) {\\n\\t\\t\\ttakeover(servers[entry]);\\n\\t\\t}\\n\\t\\tns.tprint(\\\"copying scripts to \\\" + servers[entry]);\\n\\t\\tawait ns.scp(scripts, home, servers[entry]);\\n\\t\\t//await ns.scp(\\\"setup.ns\\\", home, servers[entry]);\\n\\t}\\n\\n\\t/** \\n\\t * \\tAttempts to take over target machine\\t\\n\\t * \\n\\t *  @param {string} tar\\n\\t *  @return {boolean} outcome \\n\\t**/\\n\\tasync function takeover(tar) {\\n\\t\\tlet currentTarget = tar;\\n\\t\\tlet isNotTakenOver = true;\\n\\t\\tlet attemptCounter = 0;\\n\\n\\t\\tif (ns.getServerNumPortsRequired <= 5 && attemptCounter < 50) {\\n\\t\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\n\\t\\t\\t\\tattemptCounter++;\\n\\t\\t\\t}\\n\\n\\t\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"setup.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":3.15,\"server\":\"hong-fang-tea\",\"_hash\":\"3b3625aa608a7f37d7592c27fde49ee0052288713ba0f611649877b763edd804\",\"moduleSequenceNumber\":276}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":15,\"minDifficulty\":5,\"moneyAvailable\":3000000,\"moneyMax\":75000000,\"numOpenPortsRequired\":0,\"openPortCount\":3,\"requiredHackingSkill\":30,\"serverGrowth\":20}},\"harakiri-sushi\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"harakiri-sushi\",\"httpPortOpen\":false,\"ip\":\"33.1.9.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"HaraKiri Sushi Bar Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.grow(target);\\n\\t}\\n}\",\"filename\":\"basic-grow.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"harakiri-sushi\",\"_hash\":\"fc7652eef146e96723fb16cbc2683cf66b1d09853fff0ed8b2ca6655039902d8\",\"moduleSequenceNumber\":277}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"basic-hack.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"harakiri-sushi\",\"_hash\":\"b431b860a325c1f1e8d3f9afa6bd629bf87ee6500edce2693501368a5588a221\",\"moduleSequenceNumber\":278}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(target);\\n\\t}\\n}\",\"filename\":\"basic-weaken.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"harakiri-sushi\",\"_hash\":\"ef6ef87a7a369f27563e9f084d651b032b74b974340529a78834d2cbf17c12a5\",\"moduleSequenceNumber\":279}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n// TODO: unused + unfinished, based on setup.ns\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst hostMachine = ns.getHostname();\\n\\tconst target = ns.args[0];\\n\\tvar servers = ns.scan(hostMachine);\\n\\tvar scripts = ns.ls(home, \\\".ns\\\");\\n\\n\\tfor (let entry in scripts) {\\n\\t\\tns.tprint(\\\"found script: \\\" + scripts[entry]);\\n\\t}\\n\\n\\tns.tprint(\\\"Host:  \\\" + hostMachine);\\n\\tfor (let entry in servers) {\\t// depth 0\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\t// depth 1\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== home && subservers.length > 1) {\\n\\t\\t\\t\\tns.tprint(\\\"-----> \\\" + subservers[subentry]);\\n\\t\\t\\t\\tawait takeover(subservers[subentry]);\\n\\t\\t\\t\\tlet subserversd2 = ns.scan(subservers[subentry]); // depth 2\\n\\t\\t\\t\\tfor (let subentryd2 in subserversd2) {\\n\\t\\t\\t\\t\\tif (subserversd2[subentryd2] !== subservers[subentry] && subserversd2[subentryd2] !== servers[entry] && subserversd2.length > 1) {\\n\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------> \\\" + subserversd2[subentryd2]);\\n\\t\\t\\t\\t\\t\\tawait takeover(subserversd2[subentryd2]);\\n\\t\\t\\t\\t\\t\\tlet subserversd3 = ns.scan(subserversd2[subentryd2]);\\t// depth 3\\n\\t\\t\\t\\t\\t\\tfor (let subentryd3 in subserversd3) {\\n\\t\\t\\t\\t\\t\\t\\tif (subserversd3[subentryd3] !== subserversd2[subentryd2] && subserversd3[subentryd3] !== subservers[subentry] && subserversd3.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------> \\\" + subserversd3[subentryd3]);\\n\\t\\t\\t\\t\\t\\t\\t\\tawait takeover(subserversd3[subentryd3]);\\n\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd4 = ns.scan(subserversd3[subentryd3]);\\t// depth 4\\n\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd4 in subserversd4) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd4[subentryd4] !== subserversd3[subentryd3] && subserversd4[subentryd4] !== subserversd2[subentryd2] && subserversd4.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------------> \\\" + subserversd4[subentryd4]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tawait takeover(subserversd4[subentryd4]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd5 = ns.scan(subserversd4[subentryd4]);\\t// depth 5\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd5 in subserversd5) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd5[subentryd5] !== subserversd4[subentryd4] && subserversd5[subentryd5] !== subserversd3[subentryd3] && subserversd5.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-------------------------> \\\" + subserversd5[subentryd5]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tawait takeover(subserversd5[subentryd5]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd6 = ns.scan(subserversd5[subentryd5]);\\t// depth 6\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd6 in subserversd6) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd6[subentryd6] !== subserversd5[subentryd5] && subserversd6[subentryd6] !== subserversd4[subentryd4] && subserversd6.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"------------------------------> \\\" + subserversd6[subentryd6]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tawait takeover(subserversd6[subentryd6]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd7 = ns.scan(subserversd6[subentryd6]);\\t// depth 7\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd7 in subserversd7) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd7[subentryd7] !== subserversd6[subentryd6] && subserversd7[subentryd7] !== subserversd5[subentryd5] && subserversd7.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-----------------------------------> \\\" + subserversd7[subentryd7]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tawait takeover(subserversd7[subentryd7]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tawait takeover(servers[entry]);\\n\\t}\\n\\n\\t/** \\n\\t * \\tAttempts to take over target machine\\t\\n\\t * \\n\\t *  @param {string} tar\\n\\t *  @return {boolean} outcome \\n\\t**/\\n\\tasync function takeover(tar) {\\n\\t\\tlet currentTarget = tar;\\n\\t\\tlet isNotTakenOver = true;\\n\\t\\tlet attemptCounter = 0;\\n\\n\\t\\tif (/*ns.getServerNumPortsRequired <= 5 && */ attemptCounter < 30) {\\n\\t\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\ttry {\\n\\t\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t\\t} catch(error) {\\n\\t\\t\\t\\t\\t\\tns.tprint(\\\"not enough ports to nuke \\\" +  currentTarget);\\n\\t\\t\\t\\t\\t\\treturn false;\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tattemptCounter++;\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.scp(scripts, home, currentTarget);\\n\\t\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"deep-setup.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":3.1,\"server\":\"harakiri-sushi\",\"_hash\":\"95e9530fb6f69bfe511a604adf704b1d63ca180a1d556d7b1669bf3a470b227e\",\"moduleSequenceNumber\":280}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tconst currentMachine = ns.getHostname();\\n\\tvar servers = ns.scan(currentMachine);\\n\\tvar scripts = ns.ls(home, \\\"basic-\\\");\\n\\n\\tns.tprint(\\\"Host:  \\\" + currentMachine);\\n\\tfor (let entry in servers) {\\t// depth 0\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\t// depth 1\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== home && subservers.length > 1) {\\n\\t\\t\\t\\tns.tprint(\\\"-----> \\\" + subservers[subentry]);\\n\\t\\t\\t\\tlet subserversd2 = ns.scan(subservers[subentry]); // depth 2\\n\\t\\t\\t\\tfor (let subentryd2 in subserversd2) {\\n\\t\\t\\t\\t\\tif (subserversd2[subentryd2] !== subservers[subentry] && subserversd2[subentryd2] !== servers[entry] && subserversd2.length > 1) {\\n\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------> \\\" + subserversd2[subentryd2]);\\n\\t\\t\\t\\t\\t\\tlet subserversd3 = ns.scan(subserversd2[subentryd2]);\\t// depth 3\\n\\t\\t\\t\\t\\t\\tfor (let subentryd3 in subserversd3) {\\n\\t\\t\\t\\t\\t\\t\\tif (subserversd3[subentryd3] !== subserversd2[subentryd2] && subserversd3[subentryd3] !== subservers[subentry] && subserversd3.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------> \\\" + subserversd3[subentryd3]);\\n\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd4 = ns.scan(subserversd3[subentryd3]);\\t// depth 4\\n\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd4 in subserversd4) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd4[subentryd4] !== subserversd3[subentryd3] && subserversd4[subentryd4] !== subserversd2[subentryd2] && subserversd4.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------------> \\\" + subserversd4[subentryd4]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd5 = ns.scan(subserversd4[subentryd4]);\\t// depth 5\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd5 in subserversd5) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd5[subentryd5] !== subserversd4[subentryd4] && subserversd5[subentryd5] !== subserversd3[subentryd3] && subserversd5.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-------------------------> \\\" + subserversd5[subentryd5]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd6 = ns.scan(subserversd5[subentryd5]);\\t// depth 6\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd6 in subserversd6) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd6[subentryd6] !== subserversd5[subentryd5] && subserversd6[subentryd6] !== subserversd4[subentryd4] && subserversd6.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"------------------------------> \\\" + subserversd6[subentryd6]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd7 = ns.scan(subserversd6[subentryd6]);\\t// depth 7\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor(let subentryd7 in subserversd7) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd7[subentryd7] !== subserversd6[subentryd6] && subserversd7[subentryd7] !== subserversd5[subentryd5] && subserversd7.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-----------------------------------> \\\" + subserversd7[subentryd7]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"gigascan.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.05,\"server\":\"harakiri-sushi\",\"_hash\":\"09d5eb91ac2188cd08d0b0658f50095ede1bc815d40e01a99435a8ab5d16f1b9\",\"moduleSequenceNumber\":281}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tvar servers = ns.scan(home);\\n\\tvar scripts = ns.ls(home, \\\"basic-\\\");\\n\\n\\tfor (let entry in scripts) {\\n\\t\\tns.tprint(\\\"found script: \\\" + scripts[entry]);\\n\\t}\\n\\n\\t// Hack servers (!!! depth = 2 !!!) if needed and populate with scripts\\n\\tfor (let entry in servers) {\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== \\\"home\\\") {\\n\\t\\t\\t\\tns.tprint(\\\"----->   \\\" + subservers[subentry]);\\n\\t\\t\\t\\tif (!ns.hasRootAccess(subservers[subentry])) {\\n\\t\\t\\t\\t\\ttakeover(subservers[subentry]);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tns.tprint(\\\"copying scripts to \\\" + subservers[subentry]);\\n\\t\\t\\t\\tawait ns.scp(scripts, home, subservers[subentry]);\\n\\t\\t\\t\\t//await ns.scp(\\\"setup.ns\\\", home, subservers[subentry]);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (!ns.hasRootAccess(servers[entry])) {\\n\\t\\t\\ttakeover(servers[entry]);\\n\\t\\t}\\n\\t\\tns.tprint(\\\"copying scripts to \\\" + servers[entry]);\\n\\t\\tawait ns.scp(scripts, home, servers[entry]);\\n\\t\\t//await ns.scp(\\\"setup.ns\\\", home, servers[entry]);\\n\\t}\\n\\n\\t/** \\n\\t * \\tAttempts to take over target machine\\t\\n\\t * \\n\\t *  @param {string} tar\\n\\t *  @return {boolean} outcome \\n\\t**/\\n\\tasync function takeover(tar) {\\n\\t\\tlet currentTarget = tar;\\n\\t\\tlet isNotTakenOver = true;\\n\\t\\tlet attemptCounter = 0;\\n\\n\\t\\tif (ns.getServerNumPortsRequired <= 5 && attemptCounter < 50) {\\n\\t\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\n\\t\\t\\t\\tattemptCounter++;\\n\\t\\t\\t}\\n\\n\\t\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"setup.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":3.15,\"server\":\"harakiri-sushi\",\"_hash\":\"3b3625aa608a7f37d7592c27fde49ee0052288713ba0f611649877b763edd804\",\"moduleSequenceNumber\":282}}],\"serversOnNetwork\":[\"home\",\"CSEC\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":15,\"minDifficulty\":5,\"moneyAvailable\":4000000,\"moneyMax\":100000000,\"numOpenPortsRequired\":0,\"openPortCount\":3,\"requiredHackingSkill\":40,\"serverGrowth\":40}},\"phantasy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"phantasy\",\"httpPortOpen\":false,\"ip\":\"51.6.6.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Phantasy Club\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.grow(target);\\n\\t}\\n}\",\"filename\":\"basic-grow.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"phantasy\",\"_hash\":\"fc7652eef146e96723fb16cbc2683cf66b1d09853fff0ed8b2ca6655039902d8\",\"moduleSequenceNumber\":283}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"basic-hack.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"phantasy\",\"_hash\":\"b431b860a325c1f1e8d3f9afa6bd629bf87ee6500edce2693501368a5588a221\",\"moduleSequenceNumber\":284}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(target);\\n\\t}\\n}\",\"filename\":\"basic-weaken.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"phantasy\",\"_hash\":\"ef6ef87a7a369f27563e9f084d651b032b74b974340529a78834d2cbf17c12a5\",\"moduleSequenceNumber\":285}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n// TODO: unused + unfinished, based on setup.ns\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst hostMachine = ns.getHostname();\\n\\tconst target = ns.args[0];\\n\\tvar servers = ns.scan(hostMachine);\\n\\tvar scripts = ns.ls(home, \\\".ns\\\");\\n\\n\\tfor (let entry in scripts) {\\n\\t\\tns.tprint(\\\"found script: \\\" + scripts[entry]);\\n\\t}\\n\\n\\tns.tprint(\\\"Host:  \\\" + hostMachine);\\n\\tfor (let entry in servers) {\\t// depth 0\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\t// depth 1\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== home && subservers.length > 1) {\\n\\t\\t\\t\\tns.tprint(\\\"-----> \\\" + subservers[subentry]);\\n\\t\\t\\t\\tawait takeover(subservers[subentry]);\\n\\t\\t\\t\\tlet subserversd2 = ns.scan(subservers[subentry]); // depth 2\\n\\t\\t\\t\\tfor (let subentryd2 in subserversd2) {\\n\\t\\t\\t\\t\\tif (subserversd2[subentryd2] !== subservers[subentry] && subserversd2[subentryd2] !== servers[entry] && subserversd2.length > 1) {\\n\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------> \\\" + subserversd2[subentryd2]);\\n\\t\\t\\t\\t\\t\\tawait takeover(subserversd2[subentryd2]);\\n\\t\\t\\t\\t\\t\\tlet subserversd3 = ns.scan(subserversd2[subentryd2]);\\t// depth 3\\n\\t\\t\\t\\t\\t\\tfor (let subentryd3 in subserversd3) {\\n\\t\\t\\t\\t\\t\\t\\tif (subserversd3[subentryd3] !== subserversd2[subentryd2] && subserversd3[subentryd3] !== subservers[subentry] && subserversd3.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------> \\\" + subserversd3[subentryd3]);\\n\\t\\t\\t\\t\\t\\t\\t\\tawait takeover(subserversd3[subentryd3]);\\n\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd4 = ns.scan(subserversd3[subentryd3]);\\t// depth 4\\n\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd4 in subserversd4) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd4[subentryd4] !== subserversd3[subentryd3] && subserversd4[subentryd4] !== subserversd2[subentryd2] && subserversd4.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------------> \\\" + subserversd4[subentryd4]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tawait takeover(subserversd4[subentryd4]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd5 = ns.scan(subserversd4[subentryd4]);\\t// depth 5\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd5 in subserversd5) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd5[subentryd5] !== subserversd4[subentryd4] && subserversd5[subentryd5] !== subserversd3[subentryd3] && subserversd5.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-------------------------> \\\" + subserversd5[subentryd5]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tawait takeover(subserversd5[subentryd5]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd6 = ns.scan(subserversd5[subentryd5]);\\t// depth 6\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd6 in subserversd6) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd6[subentryd6] !== subserversd5[subentryd5] && subserversd6[subentryd6] !== subserversd4[subentryd4] && subserversd6.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"------------------------------> \\\" + subserversd6[subentryd6]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tawait takeover(subserversd6[subentryd6]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd7 = ns.scan(subserversd6[subentryd6]);\\t// depth 7\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd7 in subserversd7) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd7[subentryd7] !== subserversd6[subentryd6] && subserversd7[subentryd7] !== subserversd5[subentryd5] && subserversd7.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-----------------------------------> \\\" + subserversd7[subentryd7]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tawait takeover(subserversd7[subentryd7]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tawait takeover(servers[entry]);\\n\\t}\\n\\n\\t/** \\n\\t * \\tAttempts to take over target machine\\t\\n\\t * \\n\\t *  @param {string} tar\\n\\t *  @return {boolean} outcome \\n\\t**/\\n\\tasync function takeover(tar) {\\n\\t\\tlet currentTarget = tar;\\n\\t\\tlet isNotTakenOver = true;\\n\\t\\tlet attemptCounter = 0;\\n\\n\\t\\tif (/*ns.getServerNumPortsRequired <= 5 && */ attemptCounter < 30) {\\n\\t\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\ttry {\\n\\t\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t\\t} catch(error) {\\n\\t\\t\\t\\t\\t\\tns.tprint(\\\"not enough ports to nuke \\\" +  currentTarget);\\n\\t\\t\\t\\t\\t\\treturn false;\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tattemptCounter++;\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.scp(scripts, home, currentTarget);\\n\\t\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"deep-setup.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":3.1,\"server\":\"phantasy\",\"_hash\":\"95e9530fb6f69bfe511a604adf704b1d63ca180a1d556d7b1669bf3a470b227e\",\"moduleSequenceNumber\":286}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tconst currentMachine = ns.getHostname();\\n\\tvar servers = ns.scan(currentMachine);\\n\\tvar scripts = ns.ls(home, \\\"basic-\\\");\\n\\n\\tns.tprint(\\\"Host:  \\\" + currentMachine);\\n\\tfor (let entry in servers) {\\t// depth 0\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\t// depth 1\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== home && subservers.length > 1) {\\n\\t\\t\\t\\tns.tprint(\\\"-----> \\\" + subservers[subentry]);\\n\\t\\t\\t\\tlet subserversd2 = ns.scan(subservers[subentry]); // depth 2\\n\\t\\t\\t\\tfor (let subentryd2 in subserversd2) {\\n\\t\\t\\t\\t\\tif (subserversd2[subentryd2] !== subservers[subentry] && subserversd2[subentryd2] !== servers[entry] && subserversd2.length > 1) {\\n\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------> \\\" + subserversd2[subentryd2]);\\n\\t\\t\\t\\t\\t\\tlet subserversd3 = ns.scan(subserversd2[subentryd2]);\\t// depth 3\\n\\t\\t\\t\\t\\t\\tfor (let subentryd3 in subserversd3) {\\n\\t\\t\\t\\t\\t\\t\\tif (subserversd3[subentryd3] !== subserversd2[subentryd2] && subserversd3[subentryd3] !== subservers[subentry] && subserversd3.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------> \\\" + subserversd3[subentryd3]);\\n\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd4 = ns.scan(subserversd3[subentryd3]);\\t// depth 4\\n\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd4 in subserversd4) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd4[subentryd4] !== subserversd3[subentryd3] && subserversd4[subentryd4] !== subserversd2[subentryd2] && subserversd4.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------------> \\\" + subserversd4[subentryd4]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd5 = ns.scan(subserversd4[subentryd4]);\\t// depth 5\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd5 in subserversd5) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd5[subentryd5] !== subserversd4[subentryd4] && subserversd5[subentryd5] !== subserversd3[subentryd3] && subserversd5.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-------------------------> \\\" + subserversd5[subentryd5]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd6 = ns.scan(subserversd5[subentryd5]);\\t// depth 6\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd6 in subserversd6) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd6[subentryd6] !== subserversd5[subentryd5] && subserversd6[subentryd6] !== subserversd4[subentryd4] && subserversd6.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"------------------------------> \\\" + subserversd6[subentryd6]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd7 = ns.scan(subserversd6[subentryd6]);\\t// depth 7\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor(let subentryd7 in subserversd7) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd7[subentryd7] !== subserversd6[subentryd6] && subserversd7[subentryd7] !== subserversd5[subentryd5] && subserversd7.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-----------------------------------> \\\" + subserversd7[subentryd7]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"gigascan.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.05,\"server\":\"phantasy\",\"_hash\":\"09d5eb91ac2188cd08d0b0658f50095ede1bc815d40e01a99435a8ab5d16f1b9\",\"moduleSequenceNumber\":287}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tvar servers = ns.scan(home);\\n\\tvar scripts = ns.ls(home, \\\"basic-\\\");\\n\\n\\tfor (let entry in scripts) {\\n\\t\\tns.tprint(\\\"found script: \\\" + scripts[entry]);\\n\\t}\\n\\n\\t// Hack servers (!!! depth = 2 !!!) if needed and populate with scripts\\n\\tfor (let entry in servers) {\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== \\\"home\\\") {\\n\\t\\t\\t\\tns.tprint(\\\"----->   \\\" + subservers[subentry]);\\n\\t\\t\\t\\tif (!ns.hasRootAccess(subservers[subentry])) {\\n\\t\\t\\t\\t\\ttakeover(subservers[subentry]);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tns.tprint(\\\"copying scripts to \\\" + subservers[subentry]);\\n\\t\\t\\t\\tawait ns.scp(scripts, home, subservers[subentry]);\\n\\t\\t\\t\\t//await ns.scp(\\\"setup.ns\\\", home, subservers[subentry]);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (!ns.hasRootAccess(servers[entry])) {\\n\\t\\t\\ttakeover(servers[entry]);\\n\\t\\t}\\n\\t\\tns.tprint(\\\"copying scripts to \\\" + servers[entry]);\\n\\t\\tawait ns.scp(scripts, home, servers[entry]);\\n\\t\\t//await ns.scp(\\\"setup.ns\\\", home, servers[entry]);\\n\\t}\\n\\n\\t/** \\n\\t * \\tAttempts to take over target machine\\t\\n\\t * \\n\\t *  @param {string} tar\\n\\t *  @return {boolean} outcome \\n\\t**/\\n\\tasync function takeover(tar) {\\n\\t\\tlet currentTarget = tar;\\n\\t\\tlet isNotTakenOver = true;\\n\\t\\tlet attemptCounter = 0;\\n\\n\\t\\tif (ns.getServerNumPortsRequired <= 5 && attemptCounter < 50) {\\n\\t\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\n\\t\\t\\t\\tattemptCounter++;\\n\\t\\t\\t}\\n\\n\\t\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"setup.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":3.15,\"server\":\"phantasy\",\"_hash\":\"3b3625aa608a7f37d7592c27fde49ee0052288713ba0f611649877b763edd804\",\"moduleSequenceNumber\":288}}],\"serversOnNetwork\":[\"max-hardware\",\"johnson-ortho\",\"crush-fitness\",\"avmnite-02h\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":20,\"minDifficulty\":7,\"moneyAvailable\":24000000,\"moneyMax\":600000000,\"numOpenPortsRequired\":2,\"openPortCount\":3,\"requiredHackingSkill\":100,\"serverGrowth\":35}},\"max-hardware\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-465228-Sector-12.cct\",\"type\":\"Algorithmic Stock Trader IV\",\"data\":[4,[1,74,141,4,96,146,27,54,92,5,69,182,30,144,107,134,189,51,77,137]],\"reward\":{\"name\":\"Sector-12\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"max-hardware\",\"httpPortOpen\":false,\"ip\":\"84.1.0.7\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Max Hardware Store\",\"programs\":[],\"ramUsed\":29.3,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{\"max-hardware\":[0,0,2592,0]},\"filename\":\"basic-grow.ns\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":27542.036407053256,\"offlineMoneyMade\":0,\"offlineRunningTime\":84702.623,\"onlineExpGained\":26590.41836999983,\"onlineMoneyMade\":0,\"onlineRunningTime\":101272.40999930813,\"pid\":10,\"ramUsage\":1.75,\"server\":\"max-hardware\",\"threads\":8,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{\"max-hardware\":[11393784,5715,0,0]},\"filename\":\"basic-hack.ns\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":71321.34467880448,\"offlineMoneyMade\":0,\"offlineRunningTime\":84702.629,\"onlineExpGained\":67930.20942961036,\"onlineMoneyMade\":11393784,\"onlineRunningTime\":101265.20999930824,\"pid\":11,\"ramUsage\":1.7,\"server\":\"max-hardware\",\"threads\":9,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.grow(target);\\n\\t}\\n}\",\"filename\":\"basic-grow.ns\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"basic-grow.ns\",\"url\":\"blob:file:///717062f8-cc1d-4fe0-9300-333acf77345a\"}],\"ramUsage\":1.75,\"server\":\"max-hardware\",\"_hash\":\"fc7652eef146e96723fb16cbc2683cf66b1d09853fff0ed8b2ca6655039902d8\",\"moduleSequenceNumber\":346}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"basic-hack.ns\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"basic-hack.ns\",\"url\":\"blob:file:///604a86d3-9b72-4aaf-86a8-7e33d54a3cbf\"}],\"ramUsage\":1.7,\"server\":\"max-hardware\",\"_hash\":\"b431b860a325c1f1e8d3f9afa6bd629bf87ee6500edce2693501368a5588a221\",\"moduleSequenceNumber\":347}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(target);\\n\\t}\\n}\",\"filename\":\"basic-weaken.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"max-hardware\",\"_hash\":\"ef6ef87a7a369f27563e9f084d651b032b74b974340529a78834d2cbf17c12a5\",\"moduleSequenceNumber\":291}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n// TODO: unused + unfinished, based on setup.ns\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst hostMachine = ns.getHostname();\\n\\tconst target = ns.args[0];\\n\\tvar servers = ns.scan(hostMachine);\\n\\tvar scripts = ns.ls(home, \\\".ns\\\");\\n\\n\\tfor (let entry in scripts) {\\n\\t\\tns.tprint(\\\"found script: \\\" + scripts[entry]);\\n\\t}\\n\\n\\tns.tprint(\\\"Host:  \\\" + hostMachine);\\n\\tfor (let entry in servers) {\\t// depth 0\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\t// depth 1\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== home && subservers.length > 1) {\\n\\t\\t\\t\\tns.tprint(\\\"-----> \\\" + subservers[subentry]);\\n\\t\\t\\t\\tawait takeover(subservers[subentry]);\\n\\t\\t\\t\\tlet subserversd2 = ns.scan(subservers[subentry]); // depth 2\\n\\t\\t\\t\\tfor (let subentryd2 in subserversd2) {\\n\\t\\t\\t\\t\\tif (subserversd2[subentryd2] !== subservers[subentry] && subserversd2[subentryd2] !== servers[entry] && subserversd2.length > 1) {\\n\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------> \\\" + subserversd2[subentryd2]);\\n\\t\\t\\t\\t\\t\\tawait takeover(subserversd2[subentryd2]);\\n\\t\\t\\t\\t\\t\\tlet subserversd3 = ns.scan(subserversd2[subentryd2]);\\t// depth 3\\n\\t\\t\\t\\t\\t\\tfor (let subentryd3 in subserversd3) {\\n\\t\\t\\t\\t\\t\\t\\tif (subserversd3[subentryd3] !== subserversd2[subentryd2] && subserversd3[subentryd3] !== subservers[subentry] && subserversd3.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------> \\\" + subserversd3[subentryd3]);\\n\\t\\t\\t\\t\\t\\t\\t\\tawait takeover(subserversd3[subentryd3]);\\n\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd4 = ns.scan(subserversd3[subentryd3]);\\t// depth 4\\n\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd4 in subserversd4) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd4[subentryd4] !== subserversd3[subentryd3] && subserversd4[subentryd4] !== subserversd2[subentryd2] && subserversd4.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------------> \\\" + subserversd4[subentryd4]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tawait takeover(subserversd4[subentryd4]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd5 = ns.scan(subserversd4[subentryd4]);\\t// depth 5\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd5 in subserversd5) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd5[subentryd5] !== subserversd4[subentryd4] && subserversd5[subentryd5] !== subserversd3[subentryd3] && subserversd5.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-------------------------> \\\" + subserversd5[subentryd5]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tawait takeover(subserversd5[subentryd5]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd6 = ns.scan(subserversd5[subentryd5]);\\t// depth 6\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd6 in subserversd6) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd6[subentryd6] !== subserversd5[subentryd5] && subserversd6[subentryd6] !== subserversd4[subentryd4] && subserversd6.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"------------------------------> \\\" + subserversd6[subentryd6]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tawait takeover(subserversd6[subentryd6]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd7 = ns.scan(subserversd6[subentryd6]);\\t// depth 7\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd7 in subserversd7) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd7[subentryd7] !== subserversd6[subentryd6] && subserversd7[subentryd7] !== subserversd5[subentryd5] && subserversd7.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-----------------------------------> \\\" + subserversd7[subentryd7]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tawait takeover(subserversd7[subentryd7]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tawait takeover(servers[entry]);\\n\\t}\\n\\n\\t/** \\n\\t * \\tAttempts to take over target machine\\t\\n\\t * \\n\\t *  @param {string} tar\\n\\t *  @return {boolean} outcome \\n\\t**/\\n\\tasync function takeover(tar) {\\n\\t\\tlet currentTarget = tar;\\n\\t\\tlet isNotTakenOver = true;\\n\\t\\tlet attemptCounter = 0;\\n\\n\\t\\tif (/*ns.getServerNumPortsRequired <= 5 && */ attemptCounter < 30) {\\n\\t\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\ttry {\\n\\t\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t\\t} catch(error) {\\n\\t\\t\\t\\t\\t\\tns.tprint(\\\"not enough ports to nuke \\\" +  currentTarget);\\n\\t\\t\\t\\t\\t\\treturn false;\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tattemptCounter++;\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.scp(scripts, home, currentTarget);\\n\\t\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"deep-setup.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":3.1,\"server\":\"max-hardware\",\"_hash\":\"95e9530fb6f69bfe511a604adf704b1d63ca180a1d556d7b1669bf3a470b227e\",\"moduleSequenceNumber\":292}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tconst currentMachine = ns.getHostname();\\n\\tvar servers = ns.scan(currentMachine);\\n\\tvar scripts = ns.ls(home, \\\"basic-\\\");\\n\\n\\tns.tprint(\\\"Host:  \\\" + currentMachine);\\n\\tfor (let entry in servers) {\\t// depth 0\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\t// depth 1\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== home && subservers.length > 1) {\\n\\t\\t\\t\\tns.tprint(\\\"-----> \\\" + subservers[subentry]);\\n\\t\\t\\t\\tlet subserversd2 = ns.scan(subservers[subentry]); // depth 2\\n\\t\\t\\t\\tfor (let subentryd2 in subserversd2) {\\n\\t\\t\\t\\t\\tif (subserversd2[subentryd2] !== subservers[subentry] && subserversd2[subentryd2] !== servers[entry] && subserversd2.length > 1) {\\n\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------> \\\" + subserversd2[subentryd2]);\\n\\t\\t\\t\\t\\t\\tlet subserversd3 = ns.scan(subserversd2[subentryd2]);\\t// depth 3\\n\\t\\t\\t\\t\\t\\tfor (let subentryd3 in subserversd3) {\\n\\t\\t\\t\\t\\t\\t\\tif (subserversd3[subentryd3] !== subserversd2[subentryd2] && subserversd3[subentryd3] !== subservers[subentry] && subserversd3.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------> \\\" + subserversd3[subentryd3]);\\n\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd4 = ns.scan(subserversd3[subentryd3]);\\t// depth 4\\n\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd4 in subserversd4) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd4[subentryd4] !== subserversd3[subentryd3] && subserversd4[subentryd4] !== subserversd2[subentryd2] && subserversd4.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------------> \\\" + subserversd4[subentryd4]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd5 = ns.scan(subserversd4[subentryd4]);\\t// depth 5\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd5 in subserversd5) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd5[subentryd5] !== subserversd4[subentryd4] && subserversd5[subentryd5] !== subserversd3[subentryd3] && subserversd5.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-------------------------> \\\" + subserversd5[subentryd5]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd6 = ns.scan(subserversd5[subentryd5]);\\t// depth 6\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd6 in subserversd6) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd6[subentryd6] !== subserversd5[subentryd5] && subserversd6[subentryd6] !== subserversd4[subentryd4] && subserversd6.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"------------------------------> \\\" + subserversd6[subentryd6]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd7 = ns.scan(subserversd6[subentryd6]);\\t// depth 7\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor(let subentryd7 in subserversd7) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd7[subentryd7] !== subserversd6[subentryd6] && subserversd7[subentryd7] !== subserversd5[subentryd5] && subserversd7.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-----------------------------------> \\\" + subserversd7[subentryd7]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"gigascan.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.05,\"server\":\"max-hardware\",\"_hash\":\"09d5eb91ac2188cd08d0b0658f50095ede1bc815d40e01a99435a8ab5d16f1b9\",\"moduleSequenceNumber\":293}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tvar servers = ns.scan(home);\\n\\tvar scripts = ns.ls(home, \\\"basic-\\\");\\n\\n\\tfor (let entry in scripts) {\\n\\t\\tns.tprint(\\\"found script: \\\" + scripts[entry]);\\n\\t}\\n\\n\\t// Hack servers (!!! depth = 2 !!!) if needed and populate with scripts\\n\\tfor (let entry in servers) {\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== \\\"home\\\") {\\n\\t\\t\\t\\tns.tprint(\\\"----->   \\\" + subservers[subentry]);\\n\\t\\t\\t\\tif (!ns.hasRootAccess(subservers[subentry])) {\\n\\t\\t\\t\\t\\ttakeover(subservers[subentry]);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tns.tprint(\\\"copying scripts to \\\" + subservers[subentry]);\\n\\t\\t\\t\\tawait ns.scp(scripts, home, subservers[subentry]);\\n\\t\\t\\t\\t//await ns.scp(\\\"setup.ns\\\", home, subservers[subentry]);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (!ns.hasRootAccess(servers[entry])) {\\n\\t\\t\\ttakeover(servers[entry]);\\n\\t\\t}\\n\\t\\tns.tprint(\\\"copying scripts to \\\" + servers[entry]);\\n\\t\\tawait ns.scp(scripts, home, servers[entry]);\\n\\t\\t//await ns.scp(\\\"setup.ns\\\", home, servers[entry]);\\n\\t}\\n\\n\\t/** \\n\\t * \\tAttempts to take over target machine\\t\\n\\t * \\n\\t *  @param {string} tar\\n\\t *  @return {boolean} outcome \\n\\t**/\\n\\tasync function takeover(tar) {\\n\\t\\tlet currentTarget = tar;\\n\\t\\tlet isNotTakenOver = true;\\n\\t\\tlet attemptCounter = 0;\\n\\n\\t\\tif (ns.getServerNumPortsRequired <= 5 && attemptCounter < 50) {\\n\\t\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\n\\t\\t\\t\\tattemptCounter++;\\n\\t\\t\\t}\\n\\n\\t\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"setup.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":3.15,\"server\":\"max-hardware\",\"_hash\":\"3b3625aa608a7f37d7592c27fde49ee0052288713ba0f611649877b763edd804\",\"moduleSequenceNumber\":294}}],\"serversOnNetwork\":[\"sigma-cosmetics\",\"phantasy\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":33.46799999999966,\"minDifficulty\":5,\"moneyAvailable\":1022.1818728270341,\"moneyMax\":250000000,\"numOpenPortsRequired\":1,\"openPortCount\":3,\"requiredHackingSkill\":80,\"serverGrowth\":30}},\"omega-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omega-net\",\"httpPortOpen\":false,\"ip\":\"29.0.6.0\",\"isConnectedTo\":true,\"maxRam\":32,\"messages\":[\"the-new-god.lit\"],\"organizationName\":\"Omega Software\",\"programs\":[],\"ramUsed\":31.05,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{\"omega-net\":[0,0,0,312]},\"filename\":\"basic-weaken.ns\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":4830.569725431646,\"offlineMoneyMade\":0,\"offlineRunningTime\":45584.882,\"onlineExpGained\":5163.437213999999,\"onlineMoneyMade\":0,\"onlineRunningTime\":34983.01000000983,\"pid\":12,\"ramUsage\":1.75,\"server\":\"omega-net\",\"threads\":8,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{\"omega-net\":[33091506,720,0,0]},\"filename\":\"basic-hack.ns\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":12121.146440175107,\"offlineMoneyMade\":0,\"offlineRunningTime\":45584.888000000006,\"onlineExpGained\":14782.821446812544,\"onlineMoneyMade\":33091506,\"onlineRunningTime\":34972.010000009795,\"pid\":13,\"ramUsage\":1.7,\"server\":\"omega-net\",\"threads\":9,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{\"omega-net\":[0,0,49,0]},\"filename\":\"basic-grow.ns\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":767.2040840062244,\"offlineMoneyMade\":0,\"offlineRunningTime\":45584.891,\"onlineExpGained\":810.9244342499998,\"onlineMoneyMade\":0,\"onlineRunningTime\":34944.410000009695,\"pid\":14,\"ramUsage\":1.75,\"server\":\"omega-net\",\"threads\":1,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.grow(target);\\n\\t}\\n}\",\"filename\":\"basic-grow.ns\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"basic-grow.ns\",\"url\":\"blob:file:///717062f8-cc1d-4fe0-9300-333acf77345a\"}],\"ramUsage\":1.75,\"server\":\"omega-net\",\"_hash\":\"fc7652eef146e96723fb16cbc2683cf66b1d09853fff0ed8b2ca6655039902d8\",\"moduleSequenceNumber\":350}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"basic-hack.ns\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"basic-hack.ns\",\"url\":\"blob:file:///604a86d3-9b72-4aaf-86a8-7e33d54a3cbf\"}],\"ramUsage\":1.7,\"server\":\"omega-net\",\"_hash\":\"b431b860a325c1f1e8d3f9afa6bd629bf87ee6500edce2693501368a5588a221\",\"moduleSequenceNumber\":349}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(target);\\n\\t}\\n}\",\"filename\":\"basic-weaken.ns\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"basic-weaken.ns\",\"url\":\"blob:file:///430e286b-e4e9-4f86-a7d0-fbfcb44ebd4b\"}],\"ramUsage\":1.75,\"server\":\"omega-net\",\"_hash\":\"ef6ef87a7a369f27563e9f084d651b032b74b974340529a78834d2cbf17c12a5\",\"moduleSequenceNumber\":348}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n// TODO: unused + unfinished, based on setup.ns\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst hostMachine = ns.getHostname();\\n\\tconst target = ns.args[0];\\n\\tvar servers = ns.scan(hostMachine);\\n\\tvar scripts = ns.ls(home, \\\".ns\\\");\\n\\n\\tfor (let entry in scripts) {\\n\\t\\tns.tprint(\\\"found script: \\\" + scripts[entry]);\\n\\t}\\n\\n\\tns.tprint(\\\"Host:  \\\" + hostMachine);\\n\\tfor (let entry in servers) {\\t// depth 0\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\t// depth 1\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== home && subservers.length > 1) {\\n\\t\\t\\t\\tns.tprint(\\\"-----> \\\" + subservers[subentry]);\\n\\t\\t\\t\\tawait takeover(subservers[subentry]);\\n\\t\\t\\t\\tlet subserversd2 = ns.scan(subservers[subentry]); // depth 2\\n\\t\\t\\t\\tfor (let subentryd2 in subserversd2) {\\n\\t\\t\\t\\t\\tif (subserversd2[subentryd2] !== subservers[subentry] && subserversd2[subentryd2] !== servers[entry] && subserversd2.length > 1) {\\n\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------> \\\" + subserversd2[subentryd2]);\\n\\t\\t\\t\\t\\t\\tawait takeover(subserversd2[subentryd2]);\\n\\t\\t\\t\\t\\t\\tlet subserversd3 = ns.scan(subserversd2[subentryd2]);\\t// depth 3\\n\\t\\t\\t\\t\\t\\tfor (let subentryd3 in subserversd3) {\\n\\t\\t\\t\\t\\t\\t\\tif (subserversd3[subentryd3] !== subserversd2[subentryd2] && subserversd3[subentryd3] !== subservers[subentry] && subserversd3.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------> \\\" + subserversd3[subentryd3]);\\n\\t\\t\\t\\t\\t\\t\\t\\tawait takeover(subserversd3[subentryd3]);\\n\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd4 = ns.scan(subserversd3[subentryd3]);\\t// depth 4\\n\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd4 in subserversd4) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd4[subentryd4] !== subserversd3[subentryd3] && subserversd4[subentryd4] !== subserversd2[subentryd2] && subserversd4.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------------> \\\" + subserversd4[subentryd4]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tawait takeover(subserversd4[subentryd4]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd5 = ns.scan(subserversd4[subentryd4]);\\t// depth 5\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd5 in subserversd5) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd5[subentryd5] !== subserversd4[subentryd4] && subserversd5[subentryd5] !== subserversd3[subentryd3] && subserversd5.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-------------------------> \\\" + subserversd5[subentryd5]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tawait takeover(subserversd5[subentryd5]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd6 = ns.scan(subserversd5[subentryd5]);\\t// depth 6\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd6 in subserversd6) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd6[subentryd6] !== subserversd5[subentryd5] && subserversd6[subentryd6] !== subserversd4[subentryd4] && subserversd6.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"------------------------------> \\\" + subserversd6[subentryd6]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tawait takeover(subserversd6[subentryd6]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd7 = ns.scan(subserversd6[subentryd6]);\\t// depth 7\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd7 in subserversd7) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd7[subentryd7] !== subserversd6[subentryd6] && subserversd7[subentryd7] !== subserversd5[subentryd5] && subserversd7.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-----------------------------------> \\\" + subserversd7[subentryd7]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tawait takeover(subserversd7[subentryd7]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tawait takeover(servers[entry]);\\n\\t}\\n\\n\\t/** \\n\\t * \\tAttempts to take over target machine\\t\\n\\t * \\n\\t *  @param {string} tar\\n\\t *  @return {boolean} outcome \\n\\t**/\\n\\tasync function takeover(tar) {\\n\\t\\tlet currentTarget = tar;\\n\\t\\tlet isNotTakenOver = true;\\n\\t\\tlet attemptCounter = 0;\\n\\n\\t\\tif (/*ns.getServerNumPortsRequired <= 5 && */ attemptCounter < 30) {\\n\\t\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\ttry {\\n\\t\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t\\t} catch(error) {\\n\\t\\t\\t\\t\\t\\tns.tprint(\\\"not enough ports to nuke \\\" +  currentTarget);\\n\\t\\t\\t\\t\\t\\treturn false;\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tattemptCounter++;\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.scp(scripts, home, currentTarget);\\n\\t\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"deep-setup.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":3.1,\"server\":\"omega-net\",\"_hash\":\"95e9530fb6f69bfe511a604adf704b1d63ca180a1d556d7b1669bf3a470b227e\",\"moduleSequenceNumber\":298}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tconst currentMachine = ns.getHostname();\\n\\tvar servers = ns.scan(currentMachine);\\n\\tvar scripts = ns.ls(home, \\\"basic-\\\");\\n\\n\\tns.tprint(\\\"Host:  \\\" + currentMachine);\\n\\tfor (let entry in servers) {\\t// depth 0\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\t// depth 1\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== home && subservers.length > 1) {\\n\\t\\t\\t\\tns.tprint(\\\"-----> \\\" + subservers[subentry]);\\n\\t\\t\\t\\tlet subserversd2 = ns.scan(subservers[subentry]); // depth 2\\n\\t\\t\\t\\tfor (let subentryd2 in subserversd2) {\\n\\t\\t\\t\\t\\tif (subserversd2[subentryd2] !== subservers[subentry] && subserversd2[subentryd2] !== servers[entry] && subserversd2.length > 1) {\\n\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------> \\\" + subserversd2[subentryd2]);\\n\\t\\t\\t\\t\\t\\tlet subserversd3 = ns.scan(subserversd2[subentryd2]);\\t// depth 3\\n\\t\\t\\t\\t\\t\\tfor (let subentryd3 in subserversd3) {\\n\\t\\t\\t\\t\\t\\t\\tif (subserversd3[subentryd3] !== subserversd2[subentryd2] && subserversd3[subentryd3] !== subservers[subentry] && subserversd3.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------> \\\" + subserversd3[subentryd3]);\\n\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd4 = ns.scan(subserversd3[subentryd3]);\\t// depth 4\\n\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd4 in subserversd4) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd4[subentryd4] !== subserversd3[subentryd3] && subserversd4[subentryd4] !== subserversd2[subentryd2] && subserversd4.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------------> \\\" + subserversd4[subentryd4]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd5 = ns.scan(subserversd4[subentryd4]);\\t// depth 5\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd5 in subserversd5) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd5[subentryd5] !== subserversd4[subentryd4] && subserversd5[subentryd5] !== subserversd3[subentryd3] && subserversd5.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-------------------------> \\\" + subserversd5[subentryd5]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd6 = ns.scan(subserversd5[subentryd5]);\\t// depth 6\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd6 in subserversd6) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd6[subentryd6] !== subserversd5[subentryd5] && subserversd6[subentryd6] !== subserversd4[subentryd4] && subserversd6.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"------------------------------> \\\" + subserversd6[subentryd6]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd7 = ns.scan(subserversd6[subentryd6]);\\t// depth 7\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor(let subentryd7 in subserversd7) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd7[subentryd7] !== subserversd6[subentryd6] && subserversd7[subentryd7] !== subserversd5[subentryd5] && subserversd7.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-----------------------------------> \\\" + subserversd7[subentryd7]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"gigascan.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.05,\"server\":\"omega-net\",\"_hash\":\"09d5eb91ac2188cd08d0b0658f50095ede1bc815d40e01a99435a8ab5d16f1b9\",\"moduleSequenceNumber\":299}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tvar servers = ns.scan(home);\\n\\tvar scripts = ns.ls(home, \\\"basic-\\\");\\n\\n\\tfor (let entry in scripts) {\\n\\t\\tns.tprint(\\\"found script: \\\" + scripts[entry]);\\n\\t}\\n\\n\\t// Hack servers (!!! depth = 2 !!!) if needed and populate with scripts\\n\\tfor (let entry in servers) {\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== \\\"home\\\") {\\n\\t\\t\\t\\tns.tprint(\\\"----->   \\\" + subservers[subentry]);\\n\\t\\t\\t\\tif (!ns.hasRootAccess(subservers[subentry])) {\\n\\t\\t\\t\\t\\ttakeover(subservers[subentry]);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tns.tprint(\\\"copying scripts to \\\" + subservers[subentry]);\\n\\t\\t\\t\\tawait ns.scp(scripts, home, subservers[subentry]);\\n\\t\\t\\t\\t//await ns.scp(\\\"setup.ns\\\", home, subservers[subentry]);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (!ns.hasRootAccess(servers[entry])) {\\n\\t\\t\\ttakeover(servers[entry]);\\n\\t\\t}\\n\\t\\tns.tprint(\\\"copying scripts to \\\" + servers[entry]);\\n\\t\\tawait ns.scp(scripts, home, servers[entry]);\\n\\t\\t//await ns.scp(\\\"setup.ns\\\", home, servers[entry]);\\n\\t}\\n\\n\\t/** \\n\\t * \\tAttempts to take over target machine\\t\\n\\t * \\n\\t *  @param {string} tar\\n\\t *  @return {boolean} outcome \\n\\t**/\\n\\tasync function takeover(tar) {\\n\\t\\tlet currentTarget = tar;\\n\\t\\tlet isNotTakenOver = true;\\n\\t\\tlet attemptCounter = 0;\\n\\n\\t\\tif (ns.getServerNumPortsRequired <= 5 && attemptCounter < 50) {\\n\\t\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\n\\t\\t\\t\\tattemptCounter++;\\n\\t\\t\\t}\\n\\n\\t\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"setup.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":3.15,\"server\":\"omega-net\",\"_hash\":\"3b3625aa608a7f37d7592c27fde49ee0052288713ba0f611649877b763edd804\",\"moduleSequenceNumber\":300}}],\"serversOnNetwork\":[\"CSEC\",\"the-hub\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":28,\"hackDifficulty\":9.030000000000001,\"minDifficulty\":9,\"moneyAvailable\":38199513.17949022,\"moneyMax\":1680574900,\"numOpenPortsRequired\":2,\"openPortCount\":3,\"requiredHackingSkill\":219,\"serverGrowth\":40}},\"crush-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"crush-fitness\",\"httpPortOpen\":false,\"ip\":\"30.7.1.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Crush Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.grow(target);\\n\\t}\\n}\",\"filename\":\"basic-grow.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"crush-fitness\",\"_hash\":\"fc7652eef146e96723fb16cbc2683cf66b1d09853fff0ed8b2ca6655039902d8\",\"moduleSequenceNumber\":301}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"basic-hack.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"crush-fitness\",\"_hash\":\"b431b860a325c1f1e8d3f9afa6bd629bf87ee6500edce2693501368a5588a221\",\"moduleSequenceNumber\":302}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(target);\\n\\t}\\n}\",\"filename\":\"basic-weaken.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"crush-fitness\",\"_hash\":\"ef6ef87a7a369f27563e9f084d651b032b74b974340529a78834d2cbf17c12a5\",\"moduleSequenceNumber\":303}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n// TODO: unused + unfinished, based on setup.ns\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst hostMachine = ns.getHostname();\\n\\tconst target = ns.args[0];\\n\\tvar servers = ns.scan(hostMachine);\\n\\tvar scripts = ns.ls(home, \\\".ns\\\");\\n\\n\\tfor (let entry in scripts) {\\n\\t\\tns.tprint(\\\"found script: \\\" + scripts[entry]);\\n\\t}\\n\\n\\tns.tprint(\\\"Host:  \\\" + hostMachine);\\n\\tfor (let entry in servers) {\\t// depth 0\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\t// depth 1\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== home && subservers.length > 1) {\\n\\t\\t\\t\\tns.tprint(\\\"-----> \\\" + subservers[subentry]);\\n\\t\\t\\t\\tawait takeover(subservers[subentry]);\\n\\t\\t\\t\\tlet subserversd2 = ns.scan(subservers[subentry]); // depth 2\\n\\t\\t\\t\\tfor (let subentryd2 in subserversd2) {\\n\\t\\t\\t\\t\\tif (subserversd2[subentryd2] !== subservers[subentry] && subserversd2[subentryd2] !== servers[entry] && subserversd2.length > 1) {\\n\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------> \\\" + subserversd2[subentryd2]);\\n\\t\\t\\t\\t\\t\\tawait takeover(subserversd2[subentryd2]);\\n\\t\\t\\t\\t\\t\\tlet subserversd3 = ns.scan(subserversd2[subentryd2]);\\t// depth 3\\n\\t\\t\\t\\t\\t\\tfor (let subentryd3 in subserversd3) {\\n\\t\\t\\t\\t\\t\\t\\tif (subserversd3[subentryd3] !== subserversd2[subentryd2] && subserversd3[subentryd3] !== subservers[subentry] && subserversd3.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------> \\\" + subserversd3[subentryd3]);\\n\\t\\t\\t\\t\\t\\t\\t\\tawait takeover(subserversd3[subentryd3]);\\n\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd4 = ns.scan(subserversd3[subentryd3]);\\t// depth 4\\n\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd4 in subserversd4) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd4[subentryd4] !== subserversd3[subentryd3] && subserversd4[subentryd4] !== subserversd2[subentryd2] && subserversd4.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------------> \\\" + subserversd4[subentryd4]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tawait takeover(subserversd4[subentryd4]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd5 = ns.scan(subserversd4[subentryd4]);\\t// depth 5\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd5 in subserversd5) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd5[subentryd5] !== subserversd4[subentryd4] && subserversd5[subentryd5] !== subserversd3[subentryd3] && subserversd5.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-------------------------> \\\" + subserversd5[subentryd5]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tawait takeover(subserversd5[subentryd5]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd6 = ns.scan(subserversd5[subentryd5]);\\t// depth 6\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd6 in subserversd6) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd6[subentryd6] !== subserversd5[subentryd5] && subserversd6[subentryd6] !== subserversd4[subentryd4] && subserversd6.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"------------------------------> \\\" + subserversd6[subentryd6]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tawait takeover(subserversd6[subentryd6]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd7 = ns.scan(subserversd6[subentryd6]);\\t// depth 7\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd7 in subserversd7) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd7[subentryd7] !== subserversd6[subentryd6] && subserversd7[subentryd7] !== subserversd5[subentryd5] && subserversd7.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-----------------------------------> \\\" + subserversd7[subentryd7]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tawait takeover(subserversd7[subentryd7]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tawait takeover(servers[entry]);\\n\\t}\\n\\n\\t/** \\n\\t * \\tAttempts to take over target machine\\t\\n\\t * \\n\\t *  @param {string} tar\\n\\t *  @return {boolean} outcome \\n\\t**/\\n\\tasync function takeover(tar) {\\n\\t\\tlet currentTarget = tar;\\n\\t\\tlet isNotTakenOver = true;\\n\\t\\tlet attemptCounter = 0;\\n\\n\\t\\tif (/*ns.getServerNumPortsRequired <= 5 && */ attemptCounter < 30) {\\n\\t\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\ttry {\\n\\t\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t\\t} catch(error) {\\n\\t\\t\\t\\t\\t\\tns.tprint(\\\"not enough ports to nuke \\\" +  currentTarget);\\n\\t\\t\\t\\t\\t\\treturn false;\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tattemptCounter++;\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.scp(scripts, home, currentTarget);\\n\\t\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"deep-setup.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":3.1,\"server\":\"crush-fitness\",\"_hash\":\"95e9530fb6f69bfe511a604adf704b1d63ca180a1d556d7b1669bf3a470b227e\",\"moduleSequenceNumber\":304}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tconst currentMachine = ns.getHostname();\\n\\tvar servers = ns.scan(currentMachine);\\n\\tvar scripts = ns.ls(home, \\\"basic-\\\");\\n\\n\\tns.tprint(\\\"Host:  \\\" + currentMachine);\\n\\tfor (let entry in servers) {\\t// depth 0\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\t// depth 1\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== home && subservers.length > 1) {\\n\\t\\t\\t\\tns.tprint(\\\"-----> \\\" + subservers[subentry]);\\n\\t\\t\\t\\tlet subserversd2 = ns.scan(subservers[subentry]); // depth 2\\n\\t\\t\\t\\tfor (let subentryd2 in subserversd2) {\\n\\t\\t\\t\\t\\tif (subserversd2[subentryd2] !== subservers[subentry] && subserversd2[subentryd2] !== servers[entry] && subserversd2.length > 1) {\\n\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------> \\\" + subserversd2[subentryd2]);\\n\\t\\t\\t\\t\\t\\tlet subserversd3 = ns.scan(subserversd2[subentryd2]);\\t// depth 3\\n\\t\\t\\t\\t\\t\\tfor (let subentryd3 in subserversd3) {\\n\\t\\t\\t\\t\\t\\t\\tif (subserversd3[subentryd3] !== subserversd2[subentryd2] && subserversd3[subentryd3] !== subservers[subentry] && subserversd3.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------> \\\" + subserversd3[subentryd3]);\\n\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd4 = ns.scan(subserversd3[subentryd3]);\\t// depth 4\\n\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd4 in subserversd4) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd4[subentryd4] !== subserversd3[subentryd3] && subserversd4[subentryd4] !== subserversd2[subentryd2] && subserversd4.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------------> \\\" + subserversd4[subentryd4]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd5 = ns.scan(subserversd4[subentryd4]);\\t// depth 5\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd5 in subserversd5) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd5[subentryd5] !== subserversd4[subentryd4] && subserversd5[subentryd5] !== subserversd3[subentryd3] && subserversd5.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-------------------------> \\\" + subserversd5[subentryd5]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd6 = ns.scan(subserversd5[subentryd5]);\\t// depth 6\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd6 in subserversd6) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd6[subentryd6] !== subserversd5[subentryd5] && subserversd6[subentryd6] !== subserversd4[subentryd4] && subserversd6.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"------------------------------> \\\" + subserversd6[subentryd6]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd7 = ns.scan(subserversd6[subentryd6]);\\t// depth 7\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor(let subentryd7 in subserversd7) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd7[subentryd7] !== subserversd6[subentryd6] && subserversd7[subentryd7] !== subserversd5[subentryd5] && subserversd7.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-----------------------------------> \\\" + subserversd7[subentryd7]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"gigascan.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.05,\"server\":\"crush-fitness\",\"_hash\":\"09d5eb91ac2188cd08d0b0658f50095ede1bc815d40e01a99435a8ab5d16f1b9\",\"moduleSequenceNumber\":305}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tvar servers = ns.scan(home);\\n\\tvar scripts = ns.ls(home, \\\"basic-\\\");\\n\\n\\tfor (let entry in scripts) {\\n\\t\\tns.tprint(\\\"found script: \\\" + scripts[entry]);\\n\\t}\\n\\n\\t// Hack servers (!!! depth = 2 !!!) if needed and populate with scripts\\n\\tfor (let entry in servers) {\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== \\\"home\\\") {\\n\\t\\t\\t\\tns.tprint(\\\"----->   \\\" + subservers[subentry]);\\n\\t\\t\\t\\tif (!ns.hasRootAccess(subservers[subentry])) {\\n\\t\\t\\t\\t\\ttakeover(subservers[subentry]);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tns.tprint(\\\"copying scripts to \\\" + subservers[subentry]);\\n\\t\\t\\t\\tawait ns.scp(scripts, home, subservers[subentry]);\\n\\t\\t\\t\\t//await ns.scp(\\\"setup.ns\\\", home, subservers[subentry]);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (!ns.hasRootAccess(servers[entry])) {\\n\\t\\t\\ttakeover(servers[entry]);\\n\\t\\t}\\n\\t\\tns.tprint(\\\"copying scripts to \\\" + servers[entry]);\\n\\t\\tawait ns.scp(scripts, home, servers[entry]);\\n\\t\\t//await ns.scp(\\\"setup.ns\\\", home, servers[entry]);\\n\\t}\\n\\n\\t/** \\n\\t * \\tAttempts to take over target machine\\t\\n\\t * \\n\\t *  @param {string} tar\\n\\t *  @return {boolean} outcome \\n\\t**/\\n\\tasync function takeover(tar) {\\n\\t\\tlet currentTarget = tar;\\n\\t\\tlet isNotTakenOver = true;\\n\\t\\tlet attemptCounter = 0;\\n\\n\\t\\tif (ns.getServerNumPortsRequired <= 5 && attemptCounter < 50) {\\n\\t\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\n\\t\\t\\t\\tattemptCounter++;\\n\\t\\t\\t}\\n\\n\\t\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"setup.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":3.15,\"server\":\"crush-fitness\",\"_hash\":\"3b3625aa608a7f37d7592c27fde49ee0052288713ba0f611649877b763edd804\",\"moduleSequenceNumber\":306}}],\"serversOnNetwork\":[\"phantasy\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":44,\"hackDifficulty\":44,\"minDifficulty\":15,\"moneyAvailable\":46476623,\"moneyMax\":1161915575,\"numOpenPortsRequired\":2,\"openPortCount\":3,\"requiredHackingSkill\":239,\"serverGrowth\":33}},\"iron-gym\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-997952.cct\",\"type\":\"Array Jumping Game\",\"data\":[6,5,6,1,2,1,0,4,0],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"iron-gym\",\"httpPortOpen\":false,\"ip\":\"31.9.9.8\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Iron Gym Network\",\"programs\":[],\"ramUsed\":30.9,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{\"iron-gym\":[19999608,14760,0,0]},\"filename\":\"basic-hack.ns\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":129488.9377411993,\"offlineMoneyMade\":0,\"offlineRunningTime\":84702.65100000001,\"onlineExpGained\":159862.86268875684,\"onlineMoneyMade\":19999608,\"onlineRunningTime\":111114.00999916371,\"pid\":15,\"ramUsage\":1.7,\"server\":\"iron-gym\",\"threads\":12,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{\"iron-gym\":[0,0,0,2598]},\"filename\":\"basic-weaken.ns\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":30041.831094477562,\"offlineMoneyMade\":0,\"offlineRunningTime\":84702.65500000001,\"onlineExpGained\":45509.9405287497,\"onlineMoneyMade\":0,\"onlineRunningTime\":111056.60999916455,\"pid\":16,\"ramUsage\":1.75,\"server\":\"iron-gym\",\"threads\":6,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.grow(target);\\n\\t}\\n}\",\"filename\":\"basic-grow.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"iron-gym\",\"_hash\":\"fc7652eef146e96723fb16cbc2683cf66b1d09853fff0ed8b2ca6655039902d8\",\"moduleSequenceNumber\":307}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"basic-hack.ns\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"basic-hack.ns\",\"url\":\"blob:file:///604a86d3-9b72-4aaf-86a8-7e33d54a3cbf\"}],\"ramUsage\":1.7,\"server\":\"iron-gym\",\"_hash\":\"b431b860a325c1f1e8d3f9afa6bd629bf87ee6500edce2693501368a5588a221\",\"moduleSequenceNumber\":351}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(target);\\n\\t}\\n}\",\"filename\":\"basic-weaken.ns\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"basic-weaken.ns\",\"url\":\"blob:file:///430e286b-e4e9-4f86-a7d0-fbfcb44ebd4b\"}],\"ramUsage\":1.75,\"server\":\"iron-gym\",\"_hash\":\"ef6ef87a7a369f27563e9f084d651b032b74b974340529a78834d2cbf17c12a5\",\"moduleSequenceNumber\":352}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n// TODO: unused + unfinished, based on setup.ns\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst hostMachine = ns.getHostname();\\n\\tconst target = ns.args[0];\\n\\tvar servers = ns.scan(hostMachine);\\n\\tvar scripts = ns.ls(home, \\\".ns\\\");\\n\\n\\tfor (let entry in scripts) {\\n\\t\\tns.tprint(\\\"found script: \\\" + scripts[entry]);\\n\\t}\\n\\n\\tns.tprint(\\\"Host:  \\\" + hostMachine);\\n\\tfor (let entry in servers) {\\t// depth 0\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\t// depth 1\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== home && subservers.length > 1) {\\n\\t\\t\\t\\tns.tprint(\\\"-----> \\\" + subservers[subentry]);\\n\\t\\t\\t\\tawait takeover(subservers[subentry]);\\n\\t\\t\\t\\tlet subserversd2 = ns.scan(subservers[subentry]); // depth 2\\n\\t\\t\\t\\tfor (let subentryd2 in subserversd2) {\\n\\t\\t\\t\\t\\tif (subserversd2[subentryd2] !== subservers[subentry] && subserversd2[subentryd2] !== servers[entry] && subserversd2.length > 1) {\\n\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------> \\\" + subserversd2[subentryd2]);\\n\\t\\t\\t\\t\\t\\tawait takeover(subserversd2[subentryd2]);\\n\\t\\t\\t\\t\\t\\tlet subserversd3 = ns.scan(subserversd2[subentryd2]);\\t// depth 3\\n\\t\\t\\t\\t\\t\\tfor (let subentryd3 in subserversd3) {\\n\\t\\t\\t\\t\\t\\t\\tif (subserversd3[subentryd3] !== subserversd2[subentryd2] && subserversd3[subentryd3] !== subservers[subentry] && subserversd3.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------> \\\" + subserversd3[subentryd3]);\\n\\t\\t\\t\\t\\t\\t\\t\\tawait takeover(subserversd3[subentryd3]);\\n\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd4 = ns.scan(subserversd3[subentryd3]);\\t// depth 4\\n\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd4 in subserversd4) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd4[subentryd4] !== subserversd3[subentryd3] && subserversd4[subentryd4] !== subserversd2[subentryd2] && subserversd4.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------------> \\\" + subserversd4[subentryd4]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tawait takeover(subserversd4[subentryd4]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd5 = ns.scan(subserversd4[subentryd4]);\\t// depth 5\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd5 in subserversd5) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd5[subentryd5] !== subserversd4[subentryd4] && subserversd5[subentryd5] !== subserversd3[subentryd3] && subserversd5.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-------------------------> \\\" + subserversd5[subentryd5]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tawait takeover(subserversd5[subentryd5]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd6 = ns.scan(subserversd5[subentryd5]);\\t// depth 6\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd6 in subserversd6) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd6[subentryd6] !== subserversd5[subentryd5] && subserversd6[subentryd6] !== subserversd4[subentryd4] && subserversd6.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"------------------------------> \\\" + subserversd6[subentryd6]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tawait takeover(subserversd6[subentryd6]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd7 = ns.scan(subserversd6[subentryd6]);\\t// depth 7\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd7 in subserversd7) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd7[subentryd7] !== subserversd6[subentryd6] && subserversd7[subentryd7] !== subserversd5[subentryd5] && subserversd7.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-----------------------------------> \\\" + subserversd7[subentryd7]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tawait takeover(subserversd7[subentryd7]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tawait takeover(servers[entry]);\\n\\t}\\n\\n\\t/** \\n\\t * \\tAttempts to take over target machine\\t\\n\\t * \\n\\t *  @param {string} tar\\n\\t *  @return {boolean} outcome \\n\\t**/\\n\\tasync function takeover(tar) {\\n\\t\\tlet currentTarget = tar;\\n\\t\\tlet isNotTakenOver = true;\\n\\t\\tlet attemptCounter = 0;\\n\\n\\t\\tif (/*ns.getServerNumPortsRequired <= 5 && */ attemptCounter < 30) {\\n\\t\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\ttry {\\n\\t\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t\\t} catch(error) {\\n\\t\\t\\t\\t\\t\\tns.tprint(\\\"not enough ports to nuke \\\" +  currentTarget);\\n\\t\\t\\t\\t\\t\\treturn false;\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tattemptCounter++;\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.scp(scripts, home, currentTarget);\\n\\t\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"deep-setup.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":3.1,\"server\":\"iron-gym\",\"_hash\":\"95e9530fb6f69bfe511a604adf704b1d63ca180a1d556d7b1669bf3a470b227e\",\"moduleSequenceNumber\":310}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tconst currentMachine = ns.getHostname();\\n\\tvar servers = ns.scan(currentMachine);\\n\\tvar scripts = ns.ls(home, \\\"basic-\\\");\\n\\n\\tns.tprint(\\\"Host:  \\\" + currentMachine);\\n\\tfor (let entry in servers) {\\t// depth 0\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\t// depth 1\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== home && subservers.length > 1) {\\n\\t\\t\\t\\tns.tprint(\\\"-----> \\\" + subservers[subentry]);\\n\\t\\t\\t\\tlet subserversd2 = ns.scan(subservers[subentry]); // depth 2\\n\\t\\t\\t\\tfor (let subentryd2 in subserversd2) {\\n\\t\\t\\t\\t\\tif (subserversd2[subentryd2] !== subservers[subentry] && subserversd2[subentryd2] !== servers[entry] && subserversd2.length > 1) {\\n\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------> \\\" + subserversd2[subentryd2]);\\n\\t\\t\\t\\t\\t\\tlet subserversd3 = ns.scan(subserversd2[subentryd2]);\\t// depth 3\\n\\t\\t\\t\\t\\t\\tfor (let subentryd3 in subserversd3) {\\n\\t\\t\\t\\t\\t\\t\\tif (subserversd3[subentryd3] !== subserversd2[subentryd2] && subserversd3[subentryd3] !== subservers[subentry] && subserversd3.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------> \\\" + subserversd3[subentryd3]);\\n\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd4 = ns.scan(subserversd3[subentryd3]);\\t// depth 4\\n\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd4 in subserversd4) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd4[subentryd4] !== subserversd3[subentryd3] && subserversd4[subentryd4] !== subserversd2[subentryd2] && subserversd4.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------------> \\\" + subserversd4[subentryd4]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd5 = ns.scan(subserversd4[subentryd4]);\\t// depth 5\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd5 in subserversd5) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd5[subentryd5] !== subserversd4[subentryd4] && subserversd5[subentryd5] !== subserversd3[subentryd3] && subserversd5.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-------------------------> \\\" + subserversd5[subentryd5]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd6 = ns.scan(subserversd5[subentryd5]);\\t// depth 6\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd6 in subserversd6) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd6[subentryd6] !== subserversd5[subentryd5] && subserversd6[subentryd6] !== subserversd4[subentryd4] && subserversd6.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"------------------------------> \\\" + subserversd6[subentryd6]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd7 = ns.scan(subserversd6[subentryd6]);\\t// depth 7\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor(let subentryd7 in subserversd7) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd7[subentryd7] !== subserversd6[subentryd6] && subserversd7[subentryd7] !== subserversd5[subentryd5] && subserversd7.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-----------------------------------> \\\" + subserversd7[subentryd7]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"gigascan.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.05,\"server\":\"iron-gym\",\"_hash\":\"09d5eb91ac2188cd08d0b0658f50095ede1bc815d40e01a99435a8ab5d16f1b9\",\"moduleSequenceNumber\":311}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tvar servers = ns.scan(home);\\n\\tvar scripts = ns.ls(home, \\\"basic-\\\");\\n\\n\\tfor (let entry in scripts) {\\n\\t\\tns.tprint(\\\"found script: \\\" + scripts[entry]);\\n\\t}\\n\\n\\t// Hack servers (!!! depth = 2 !!!) if needed and populate with scripts\\n\\tfor (let entry in servers) {\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== \\\"home\\\") {\\n\\t\\t\\t\\tns.tprint(\\\"----->   \\\" + subservers[subentry]);\\n\\t\\t\\t\\tif (!ns.hasRootAccess(subservers[subentry])) {\\n\\t\\t\\t\\t\\ttakeover(subservers[subentry]);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tns.tprint(\\\"copying scripts to \\\" + subservers[subentry]);\\n\\t\\t\\t\\tawait ns.scp(scripts, home, subservers[subentry]);\\n\\t\\t\\t\\t//await ns.scp(\\\"setup.ns\\\", home, subservers[subentry]);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (!ns.hasRootAccess(servers[entry])) {\\n\\t\\t\\ttakeover(servers[entry]);\\n\\t\\t}\\n\\t\\tns.tprint(\\\"copying scripts to \\\" + servers[entry]);\\n\\t\\tawait ns.scp(scripts, home, servers[entry]);\\n\\t\\t//await ns.scp(\\\"setup.ns\\\", home, servers[entry]);\\n\\t}\\n\\n\\t/** \\n\\t * \\tAttempts to take over target machine\\t\\n\\t * \\n\\t *  @param {string} tar\\n\\t *  @return {boolean} outcome \\n\\t**/\\n\\tasync function takeover(tar) {\\n\\t\\tlet currentTarget = tar;\\n\\t\\tlet isNotTakenOver = true;\\n\\t\\tlet attemptCounter = 0;\\n\\n\\t\\tif (ns.getServerNumPortsRequired <= 5 && attemptCounter < 50) {\\n\\t\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\n\\t\\t\\t\\tattemptCounter++;\\n\\t\\t\\t}\\n\\n\\t\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"setup.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":3.15,\"server\":\"iron-gym\",\"_hash\":\"3b3625aa608a7f37d7592c27fde49ee0052288713ba0f611649877b763edd804\",\"moduleSequenceNumber\":312}}],\"serversOnNetwork\":[\"home\",\"zer0\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":10,\"minDifficulty\":10,\"moneyAvailable\":392,\"moneyMax\":500000000,\"numOpenPortsRequired\":1,\"openPortCount\":3,\"requiredHackingSkill\":100,\"serverGrowth\":20}},\"millenium-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"millenium-fitness\",\"httpPortOpen\":false,\"ip\":\"31.9.3.9\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[],\"organizationName\":\"Millenium Fitness Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.grow(target);\\n\\t}\\n}\",\"filename\":\"basic-grow.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"millenium-fitness\",\"_hash\":\"fc7652eef146e96723fb16cbc2683cf66b1d09853fff0ed8b2ca6655039902d8\",\"moduleSequenceNumber\":313}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"basic-hack.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"millenium-fitness\",\"_hash\":\"b431b860a325c1f1e8d3f9afa6bd629bf87ee6500edce2693501368a5588a221\",\"moduleSequenceNumber\":314}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(target);\\n\\t}\\n}\",\"filename\":\"basic-weaken.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"millenium-fitness\",\"_hash\":\"ef6ef87a7a369f27563e9f084d651b032b74b974340529a78834d2cbf17c12a5\",\"moduleSequenceNumber\":315}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n// TODO: unused + unfinished, based on setup.ns\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst hostMachine = ns.getHostname();\\n\\tconst target = ns.args[0];\\n\\tvar servers = ns.scan(hostMachine);\\n\\tvar scripts = ns.ls(home, \\\".ns\\\");\\n\\n\\tfor (let entry in scripts) {\\n\\t\\tns.tprint(\\\"found script: \\\" + scripts[entry]);\\n\\t}\\n\\n\\tns.tprint(\\\"Host:  \\\" + hostMachine);\\n\\tfor (let entry in servers) {\\t// depth 0\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\t// depth 1\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== home && subservers.length > 1) {\\n\\t\\t\\t\\tns.tprint(\\\"-----> \\\" + subservers[subentry]);\\n\\t\\t\\t\\tawait takeover(subservers[subentry]);\\n\\t\\t\\t\\tlet subserversd2 = ns.scan(subservers[subentry]); // depth 2\\n\\t\\t\\t\\tfor (let subentryd2 in subserversd2) {\\n\\t\\t\\t\\t\\tif (subserversd2[subentryd2] !== subservers[subentry] && subserversd2[subentryd2] !== servers[entry] && subserversd2.length > 1) {\\n\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------> \\\" + subserversd2[subentryd2]);\\n\\t\\t\\t\\t\\t\\tawait takeover(subserversd2[subentryd2]);\\n\\t\\t\\t\\t\\t\\tlet subserversd3 = ns.scan(subserversd2[subentryd2]);\\t// depth 3\\n\\t\\t\\t\\t\\t\\tfor (let subentryd3 in subserversd3) {\\n\\t\\t\\t\\t\\t\\t\\tif (subserversd3[subentryd3] !== subserversd2[subentryd2] && subserversd3[subentryd3] !== subservers[subentry] && subserversd3.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------> \\\" + subserversd3[subentryd3]);\\n\\t\\t\\t\\t\\t\\t\\t\\tawait takeover(subserversd3[subentryd3]);\\n\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd4 = ns.scan(subserversd3[subentryd3]);\\t// depth 4\\n\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd4 in subserversd4) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd4[subentryd4] !== subserversd3[subentryd3] && subserversd4[subentryd4] !== subserversd2[subentryd2] && subserversd4.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------------> \\\" + subserversd4[subentryd4]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tawait takeover(subserversd4[subentryd4]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd5 = ns.scan(subserversd4[subentryd4]);\\t// depth 5\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd5 in subserversd5) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd5[subentryd5] !== subserversd4[subentryd4] && subserversd5[subentryd5] !== subserversd3[subentryd3] && subserversd5.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-------------------------> \\\" + subserversd5[subentryd5]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tawait takeover(subserversd5[subentryd5]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd6 = ns.scan(subserversd5[subentryd5]);\\t// depth 6\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd6 in subserversd6) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd6[subentryd6] !== subserversd5[subentryd5] && subserversd6[subentryd6] !== subserversd4[subentryd4] && subserversd6.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"------------------------------> \\\" + subserversd6[subentryd6]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tawait takeover(subserversd6[subentryd6]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd7 = ns.scan(subserversd6[subentryd6]);\\t// depth 7\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd7 in subserversd7) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd7[subentryd7] !== subserversd6[subentryd6] && subserversd7[subentryd7] !== subserversd5[subentryd5] && subserversd7.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-----------------------------------> \\\" + subserversd7[subentryd7]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tawait takeover(subserversd7[subentryd7]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tawait takeover(servers[entry]);\\n\\t}\\n\\n\\t/** \\n\\t * \\tAttempts to take over target machine\\t\\n\\t * \\n\\t *  @param {string} tar\\n\\t *  @return {boolean} outcome \\n\\t**/\\n\\tasync function takeover(tar) {\\n\\t\\tlet currentTarget = tar;\\n\\t\\tlet isNotTakenOver = true;\\n\\t\\tlet attemptCounter = 0;\\n\\n\\t\\tif (/*ns.getServerNumPortsRequired <= 5 && */ attemptCounter < 30) {\\n\\t\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\ttry {\\n\\t\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t\\t} catch(error) {\\n\\t\\t\\t\\t\\t\\tns.tprint(\\\"not enough ports to nuke \\\" +  currentTarget);\\n\\t\\t\\t\\t\\t\\treturn false;\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tattemptCounter++;\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.scp(scripts, home, currentTarget);\\n\\t\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"deep-setup.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":3.1,\"server\":\"millenium-fitness\",\"_hash\":\"95e9530fb6f69bfe511a604adf704b1d63ca180a1d556d7b1669bf3a470b227e\",\"moduleSequenceNumber\":316}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tconst currentMachine = ns.getHostname();\\n\\tvar servers = ns.scan(currentMachine);\\n\\tvar scripts = ns.ls(home, \\\"basic-\\\");\\n\\n\\tns.tprint(\\\"Host:  \\\" + currentMachine);\\n\\tfor (let entry in servers) {\\t// depth 0\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\t// depth 1\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== home && subservers.length > 1) {\\n\\t\\t\\t\\tns.tprint(\\\"-----> \\\" + subservers[subentry]);\\n\\t\\t\\t\\tlet subserversd2 = ns.scan(subservers[subentry]); // depth 2\\n\\t\\t\\t\\tfor (let subentryd2 in subserversd2) {\\n\\t\\t\\t\\t\\tif (subserversd2[subentryd2] !== subservers[subentry] && subserversd2[subentryd2] !== servers[entry] && subserversd2.length > 1) {\\n\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------> \\\" + subserversd2[subentryd2]);\\n\\t\\t\\t\\t\\t\\tlet subserversd3 = ns.scan(subserversd2[subentryd2]);\\t// depth 3\\n\\t\\t\\t\\t\\t\\tfor (let subentryd3 in subserversd3) {\\n\\t\\t\\t\\t\\t\\t\\tif (subserversd3[subentryd3] !== subserversd2[subentryd2] && subserversd3[subentryd3] !== subservers[subentry] && subserversd3.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------> \\\" + subserversd3[subentryd3]);\\n\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd4 = ns.scan(subserversd3[subentryd3]);\\t// depth 4\\n\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd4 in subserversd4) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd4[subentryd4] !== subserversd3[subentryd3] && subserversd4[subentryd4] !== subserversd2[subentryd2] && subserversd4.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------------> \\\" + subserversd4[subentryd4]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd5 = ns.scan(subserversd4[subentryd4]);\\t// depth 5\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd5 in subserversd5) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd5[subentryd5] !== subserversd4[subentryd4] && subserversd5[subentryd5] !== subserversd3[subentryd3] && subserversd5.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-------------------------> \\\" + subserversd5[subentryd5]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd6 = ns.scan(subserversd5[subentryd5]);\\t// depth 6\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd6 in subserversd6) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd6[subentryd6] !== subserversd5[subentryd5] && subserversd6[subentryd6] !== subserversd4[subentryd4] && subserversd6.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"------------------------------> \\\" + subserversd6[subentryd6]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd7 = ns.scan(subserversd6[subentryd6]);\\t// depth 7\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor(let subentryd7 in subserversd7) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd7[subentryd7] !== subserversd6[subentryd6] && subserversd7[subentryd7] !== subserversd5[subentryd5] && subserversd7.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-----------------------------------> \\\" + subserversd7[subentryd7]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"gigascan.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.05,\"server\":\"millenium-fitness\",\"_hash\":\"09d5eb91ac2188cd08d0b0658f50095ede1bc815d40e01a99435a8ab5d16f1b9\",\"moduleSequenceNumber\":317}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tvar servers = ns.scan(home);\\n\\tvar scripts = ns.ls(home, \\\"basic-\\\");\\n\\n\\tfor (let entry in scripts) {\\n\\t\\tns.tprint(\\\"found script: \\\" + scripts[entry]);\\n\\t}\\n\\n\\t// Hack servers (!!! depth = 2 !!!) if needed and populate with scripts\\n\\tfor (let entry in servers) {\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== \\\"home\\\") {\\n\\t\\t\\t\\tns.tprint(\\\"----->   \\\" + subservers[subentry]);\\n\\t\\t\\t\\tif (!ns.hasRootAccess(subservers[subentry])) {\\n\\t\\t\\t\\t\\ttakeover(subservers[subentry]);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tns.tprint(\\\"copying scripts to \\\" + subservers[subentry]);\\n\\t\\t\\t\\tawait ns.scp(scripts, home, subservers[subentry]);\\n\\t\\t\\t\\t//await ns.scp(\\\"setup.ns\\\", home, subservers[subentry]);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (!ns.hasRootAccess(servers[entry])) {\\n\\t\\t\\ttakeover(servers[entry]);\\n\\t\\t}\\n\\t\\tns.tprint(\\\"copying scripts to \\\" + servers[entry]);\\n\\t\\tawait ns.scp(scripts, home, servers[entry]);\\n\\t\\t//await ns.scp(\\\"setup.ns\\\", home, servers[entry]);\\n\\t}\\n\\n\\t/** \\n\\t * \\tAttempts to take over target machine\\t\\n\\t * \\n\\t *  @param {string} tar\\n\\t *  @return {boolean} outcome \\n\\t**/\\n\\tasync function takeover(tar) {\\n\\t\\tlet currentTarget = tar;\\n\\t\\tlet isNotTakenOver = true;\\n\\t\\tlet attemptCounter = 0;\\n\\n\\t\\tif (ns.getServerNumPortsRequired <= 5 && attemptCounter < 50) {\\n\\t\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\n\\t\\t\\t\\tattemptCounter++;\\n\\t\\t\\t}\\n\\n\\t\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"setup.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":3.15,\"server\":\"millenium-fitness\",\"_hash\":\"3b3625aa608a7f37d7592c27fde49ee0052288713ba0f611649877b763edd804\",\"moduleSequenceNumber\":318}}],\"serversOnNetwork\":[\"zb-institute\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":50,\"hackDifficulty\":50,\"minDifficulty\":17,\"moneyAvailable\":250000000,\"moneyMax\":6250000000,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":483,\"serverGrowth\":35}},\"powerhouse-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"powerhouse-fitness\",\"httpPortOpen\":false,\"ip\":\"22.4.3.6\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Powerhouse Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\".\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":62,\"hackDifficulty\":62,\"minDifficulty\":21,\"moneyAvailable\":900000000,\"moneyMax\":22500000000,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1073,\"serverGrowth\":58}},\"snap-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-93497.cct\",\"type\":\"Merge Overlapping Intervals\",\"data\":[[18,19],[8,13],[13,15],[15,23],[11,13],[15,22],[3,10]],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"snap-fitness\",\"httpPortOpen\":false,\"ip\":\"26.0.4.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Snap Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"lexo-corp\",\"omnia\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":40,\"hackDifficulty\":40,\"minDifficulty\":13,\"moneyAvailable\":450000000,\"moneyMax\":11250000000,\"numOpenPortsRequired\":4,\"openPortCount\":3,\"requiredHackingSkill\":698,\"serverGrowth\":40}},\"run4theh111z\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-513404.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[13,11],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"run4theh111z\",\"httpPortOpen\":false,\"ip\":\"30.4.8.0\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[\"simulated-reality.lit\",\"the-new-god.lit\"],\"organizationName\":\"The Runners\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"taiyang-digital\",\"fulcrumtech\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":544,\"serverGrowth\":0}},\"I.I.I.I\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"I.I.I.I\",\"httpPortOpen\":false,\"ip\":\"83.7.5.7\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"I.I.I.I\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.grow(target);\\n\\t}\\n}\",\"filename\":\"basic-grow.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"I.I.I.I\",\"_hash\":\"fc7652eef146e96723fb16cbc2683cf66b1d09853fff0ed8b2ca6655039902d8\",\"moduleSequenceNumber\":319}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"basic-hack.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"I.I.I.I\",\"_hash\":\"b431b860a325c1f1e8d3f9afa6bd629bf87ee6500edce2693501368a5588a221\",\"moduleSequenceNumber\":320}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(target);\\n\\t}\\n}\",\"filename\":\"basic-weaken.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"I.I.I.I\",\"_hash\":\"ef6ef87a7a369f27563e9f084d651b032b74b974340529a78834d2cbf17c12a5\",\"moduleSequenceNumber\":321}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n// TODO: unused + unfinished, based on setup.ns\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst hostMachine = ns.getHostname();\\n\\tconst target = ns.args[0];\\n\\tvar servers = ns.scan(hostMachine);\\n\\tvar scripts = ns.ls(home, \\\".ns\\\");\\n\\n\\tfor (let entry in scripts) {\\n\\t\\tns.tprint(\\\"found script: \\\" + scripts[entry]);\\n\\t}\\n\\n\\tns.tprint(\\\"Host:  \\\" + hostMachine);\\n\\tfor (let entry in servers) {\\t// depth 0\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\t// depth 1\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== home && subservers.length > 1) {\\n\\t\\t\\t\\tns.tprint(\\\"-----> \\\" + subservers[subentry]);\\n\\t\\t\\t\\tawait takeover(subservers[subentry]);\\n\\t\\t\\t\\tlet subserversd2 = ns.scan(subservers[subentry]); // depth 2\\n\\t\\t\\t\\tfor (let subentryd2 in subserversd2) {\\n\\t\\t\\t\\t\\tif (subserversd2[subentryd2] !== subservers[subentry] && subserversd2[subentryd2] !== servers[entry] && subserversd2.length > 1) {\\n\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------> \\\" + subserversd2[subentryd2]);\\n\\t\\t\\t\\t\\t\\tawait takeover(subserversd2[subentryd2]);\\n\\t\\t\\t\\t\\t\\tlet subserversd3 = ns.scan(subserversd2[subentryd2]);\\t// depth 3\\n\\t\\t\\t\\t\\t\\tfor (let subentryd3 in subserversd3) {\\n\\t\\t\\t\\t\\t\\t\\tif (subserversd3[subentryd3] !== subserversd2[subentryd2] && subserversd3[subentryd3] !== subservers[subentry] && subserversd3.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------> \\\" + subserversd3[subentryd3]);\\n\\t\\t\\t\\t\\t\\t\\t\\tawait takeover(subserversd3[subentryd3]);\\n\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd4 = ns.scan(subserversd3[subentryd3]);\\t// depth 4\\n\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd4 in subserversd4) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd4[subentryd4] !== subserversd3[subentryd3] && subserversd4[subentryd4] !== subserversd2[subentryd2] && subserversd4.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------------> \\\" + subserversd4[subentryd4]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tawait takeover(subserversd4[subentryd4]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd5 = ns.scan(subserversd4[subentryd4]);\\t// depth 5\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd5 in subserversd5) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd5[subentryd5] !== subserversd4[subentryd4] && subserversd5[subentryd5] !== subserversd3[subentryd3] && subserversd5.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-------------------------> \\\" + subserversd5[subentryd5]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tawait takeover(subserversd5[subentryd5]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd6 = ns.scan(subserversd5[subentryd5]);\\t// depth 6\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd6 in subserversd6) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd6[subentryd6] !== subserversd5[subentryd5] && subserversd6[subentryd6] !== subserversd4[subentryd4] && subserversd6.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"------------------------------> \\\" + subserversd6[subentryd6]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tawait takeover(subserversd6[subentryd6]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd7 = ns.scan(subserversd6[subentryd6]);\\t// depth 7\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd7 in subserversd7) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd7[subentryd7] !== subserversd6[subentryd6] && subserversd7[subentryd7] !== subserversd5[subentryd5] && subserversd7.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-----------------------------------> \\\" + subserversd7[subentryd7]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tawait takeover(subserversd7[subentryd7]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tawait takeover(servers[entry]);\\n\\t}\\n\\n\\t/** \\n\\t * \\tAttempts to take over target machine\\t\\n\\t * \\n\\t *  @param {string} tar\\n\\t *  @return {boolean} outcome \\n\\t**/\\n\\tasync function takeover(tar) {\\n\\t\\tlet currentTarget = tar;\\n\\t\\tlet isNotTakenOver = true;\\n\\t\\tlet attemptCounter = 0;\\n\\n\\t\\tif (/*ns.getServerNumPortsRequired <= 5 && */ attemptCounter < 30) {\\n\\t\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\ttry {\\n\\t\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t\\t} catch(error) {\\n\\t\\t\\t\\t\\t\\tns.tprint(\\\"not enough ports to nuke \\\" +  currentTarget);\\n\\t\\t\\t\\t\\t\\treturn false;\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tattemptCounter++;\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.scp(scripts, home, currentTarget);\\n\\t\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"deep-setup.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":3.1,\"server\":\"I.I.I.I\",\"_hash\":\"95e9530fb6f69bfe511a604adf704b1d63ca180a1d556d7b1669bf3a470b227e\",\"moduleSequenceNumber\":322}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tconst currentMachine = ns.getHostname();\\n\\tvar servers = ns.scan(currentMachine);\\n\\tvar scripts = ns.ls(home, \\\"basic-\\\");\\n\\n\\tns.tprint(\\\"Host:  \\\" + currentMachine);\\n\\tfor (let entry in servers) {\\t// depth 0\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\t// depth 1\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== home && subservers.length > 1) {\\n\\t\\t\\t\\tns.tprint(\\\"-----> \\\" + subservers[subentry]);\\n\\t\\t\\t\\tlet subserversd2 = ns.scan(subservers[subentry]); // depth 2\\n\\t\\t\\t\\tfor (let subentryd2 in subserversd2) {\\n\\t\\t\\t\\t\\tif (subserversd2[subentryd2] !== subservers[subentry] && subserversd2[subentryd2] !== servers[entry] && subserversd2.length > 1) {\\n\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------> \\\" + subserversd2[subentryd2]);\\n\\t\\t\\t\\t\\t\\tlet subserversd3 = ns.scan(subserversd2[subentryd2]);\\t// depth 3\\n\\t\\t\\t\\t\\t\\tfor (let subentryd3 in subserversd3) {\\n\\t\\t\\t\\t\\t\\t\\tif (subserversd3[subentryd3] !== subserversd2[subentryd2] && subserversd3[subentryd3] !== subservers[subentry] && subserversd3.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------> \\\" + subserversd3[subentryd3]);\\n\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd4 = ns.scan(subserversd3[subentryd3]);\\t// depth 4\\n\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd4 in subserversd4) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd4[subentryd4] !== subserversd3[subentryd3] && subserversd4[subentryd4] !== subserversd2[subentryd2] && subserversd4.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------------> \\\" + subserversd4[subentryd4]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd5 = ns.scan(subserversd4[subentryd4]);\\t// depth 5\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd5 in subserversd5) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd5[subentryd5] !== subserversd4[subentryd4] && subserversd5[subentryd5] !== subserversd3[subentryd3] && subserversd5.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-------------------------> \\\" + subserversd5[subentryd5]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd6 = ns.scan(subserversd5[subentryd5]);\\t// depth 6\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd6 in subserversd6) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd6[subentryd6] !== subserversd5[subentryd5] && subserversd6[subentryd6] !== subserversd4[subentryd4] && subserversd6.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"------------------------------> \\\" + subserversd6[subentryd6]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd7 = ns.scan(subserversd6[subentryd6]);\\t// depth 7\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor(let subentryd7 in subserversd7) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd7[subentryd7] !== subserversd6[subentryd6] && subserversd7[subentryd7] !== subserversd5[subentryd5] && subserversd7.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-----------------------------------> \\\" + subserversd7[subentryd7]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"gigascan.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.05,\"server\":\"I.I.I.I\",\"_hash\":\"09d5eb91ac2188cd08d0b0658f50095ede1bc815d40e01a99435a8ab5d16f1b9\",\"moduleSequenceNumber\":323}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tvar servers = ns.scan(home);\\n\\tvar scripts = ns.ls(home, \\\"basic-\\\");\\n\\n\\tfor (let entry in scripts) {\\n\\t\\tns.tprint(\\\"found script: \\\" + scripts[entry]);\\n\\t}\\n\\n\\t// Hack servers (!!! depth = 2 !!!) if needed and populate with scripts\\n\\tfor (let entry in servers) {\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== \\\"home\\\") {\\n\\t\\t\\t\\tns.tprint(\\\"----->   \\\" + subservers[subentry]);\\n\\t\\t\\t\\tif (!ns.hasRootAccess(subservers[subentry])) {\\n\\t\\t\\t\\t\\ttakeover(subservers[subentry]);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tns.tprint(\\\"copying scripts to \\\" + subservers[subentry]);\\n\\t\\t\\t\\tawait ns.scp(scripts, home, subservers[subentry]);\\n\\t\\t\\t\\t//await ns.scp(\\\"setup.ns\\\", home, subservers[subentry]);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (!ns.hasRootAccess(servers[entry])) {\\n\\t\\t\\ttakeover(servers[entry]);\\n\\t\\t}\\n\\t\\tns.tprint(\\\"copying scripts to \\\" + servers[entry]);\\n\\t\\tawait ns.scp(scripts, home, servers[entry]);\\n\\t\\t//await ns.scp(\\\"setup.ns\\\", home, servers[entry]);\\n\\t}\\n\\n\\t/** \\n\\t * \\tAttempts to take over target machine\\t\\n\\t * \\n\\t *  @param {string} tar\\n\\t *  @return {boolean} outcome \\n\\t**/\\n\\tasync function takeover(tar) {\\n\\t\\tlet currentTarget = tar;\\n\\t\\tlet isNotTakenOver = true;\\n\\t\\tlet attemptCounter = 0;\\n\\n\\t\\tif (ns.getServerNumPortsRequired <= 5 && attemptCounter < 50) {\\n\\t\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\n\\t\\t\\t\\tattemptCounter++;\\n\\t\\t\\t}\\n\\n\\t\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"setup.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":3.15,\"server\":\"I.I.I.I\",\"_hash\":\"3b3625aa608a7f37d7592c27fde49ee0052288713ba0f611649877b763edd804\",\"moduleSequenceNumber\":324}}],\"serversOnNetwork\":[\"avmnite-02h\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":357,\"serverGrowth\":0}},\"avmnite-02h\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"avmnite-02h\",\"httpPortOpen\":false,\"ip\":\"10.9.8.7\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"NiteSec\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"basic-hack.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"avmnite-02h\",\"_hash\":\"b431b860a325c1f1e8d3f9afa6bd629bf87ee6500edce2693501368a5588a221\",\"moduleSequenceNumber\":325}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.grow(target);\\n\\t}\\n}\",\"filename\":\"basic-grow.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"avmnite-02h\",\"_hash\":\"fc7652eef146e96723fb16cbc2683cf66b1d09853fff0ed8b2ca6655039902d8\",\"moduleSequenceNumber\":326}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(target);\\n\\t}\\n}\",\"filename\":\"basic-weaken.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"avmnite-02h\",\"_hash\":\"ef6ef87a7a369f27563e9f084d651b032b74b974340529a78834d2cbf17c12a5\",\"moduleSequenceNumber\":327}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n// TODO: unused + unfinished, based on setup.ns\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst hostMachine = ns.getHostname();\\n\\tconst target = ns.args[0];\\n\\tvar servers = ns.scan(hostMachine);\\n\\tvar scripts = ns.ls(home, \\\".ns\\\");\\n\\n\\tfor (let entry in scripts) {\\n\\t\\tns.tprint(\\\"found script: \\\" + scripts[entry]);\\n\\t}\\n\\n\\tns.tprint(\\\"Host:  \\\" + hostMachine);\\n\\tfor (let entry in servers) {\\t// depth 0\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\t// depth 1\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== home && subservers.length > 1) {\\n\\t\\t\\t\\tns.tprint(\\\"-----> \\\" + subservers[subentry]);\\n\\t\\t\\t\\tawait takeover(subservers[subentry]);\\n\\t\\t\\t\\tlet subserversd2 = ns.scan(subservers[subentry]); // depth 2\\n\\t\\t\\t\\tfor (let subentryd2 in subserversd2) {\\n\\t\\t\\t\\t\\tif (subserversd2[subentryd2] !== subservers[subentry] && subserversd2[subentryd2] !== servers[entry] && subserversd2.length > 1) {\\n\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------> \\\" + subserversd2[subentryd2]);\\n\\t\\t\\t\\t\\t\\tawait takeover(subserversd2[subentryd2]);\\n\\t\\t\\t\\t\\t\\tlet subserversd3 = ns.scan(subserversd2[subentryd2]);\\t// depth 3\\n\\t\\t\\t\\t\\t\\tfor (let subentryd3 in subserversd3) {\\n\\t\\t\\t\\t\\t\\t\\tif (subserversd3[subentryd3] !== subserversd2[subentryd2] && subserversd3[subentryd3] !== subservers[subentry] && subserversd3.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------> \\\" + subserversd3[subentryd3]);\\n\\t\\t\\t\\t\\t\\t\\t\\tawait takeover(subserversd3[subentryd3]);\\n\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd4 = ns.scan(subserversd3[subentryd3]);\\t// depth 4\\n\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd4 in subserversd4) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd4[subentryd4] !== subserversd3[subentryd3] && subserversd4[subentryd4] !== subserversd2[subentryd2] && subserversd4.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------------> \\\" + subserversd4[subentryd4]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tawait takeover(subserversd4[subentryd4]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd5 = ns.scan(subserversd4[subentryd4]);\\t// depth 5\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd5 in subserversd5) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd5[subentryd5] !== subserversd4[subentryd4] && subserversd5[subentryd5] !== subserversd3[subentryd3] && subserversd5.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-------------------------> \\\" + subserversd5[subentryd5]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tawait takeover(subserversd5[subentryd5]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd6 = ns.scan(subserversd5[subentryd5]);\\t// depth 6\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd6 in subserversd6) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd6[subentryd6] !== subserversd5[subentryd5] && subserversd6[subentryd6] !== subserversd4[subentryd4] && subserversd6.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"------------------------------> \\\" + subserversd6[subentryd6]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tawait takeover(subserversd6[subentryd6]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd7 = ns.scan(subserversd6[subentryd6]);\\t// depth 7\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd7 in subserversd7) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd7[subentryd7] !== subserversd6[subentryd6] && subserversd7[subentryd7] !== subserversd5[subentryd5] && subserversd7.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-----------------------------------> \\\" + subserversd7[subentryd7]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tawait takeover(subserversd7[subentryd7]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tawait takeover(servers[entry]);\\n\\t}\\n\\n\\t/** \\n\\t * \\tAttempts to take over target machine\\t\\n\\t * \\n\\t *  @param {string} tar\\n\\t *  @return {boolean} outcome \\n\\t**/\\n\\tasync function takeover(tar) {\\n\\t\\tlet currentTarget = tar;\\n\\t\\tlet isNotTakenOver = true;\\n\\t\\tlet attemptCounter = 0;\\n\\n\\t\\tif (/*ns.getServerNumPortsRequired <= 5 && */ attemptCounter < 30) {\\n\\t\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\ttry {\\n\\t\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t\\t} catch(error) {\\n\\t\\t\\t\\t\\t\\tns.tprint(\\\"not enough ports to nuke \\\" +  currentTarget);\\n\\t\\t\\t\\t\\t\\treturn false;\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tattemptCounter++;\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.scp(scripts, home, currentTarget);\\n\\t\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"deep-setup.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":3.1,\"server\":\"avmnite-02h\",\"_hash\":\"95e9530fb6f69bfe511a604adf704b1d63ca180a1d556d7b1669bf3a470b227e\",\"moduleSequenceNumber\":328}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tconst currentMachine = ns.getHostname();\\n\\tvar servers = ns.scan(currentMachine);\\n\\tvar scripts = ns.ls(home, \\\"basic-\\\");\\n\\n\\tns.tprint(\\\"Host:  \\\" + currentMachine);\\n\\tfor (let entry in servers) {\\t// depth 0\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\t// depth 1\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== home && subservers.length > 1) {\\n\\t\\t\\t\\tns.tprint(\\\"-----> \\\" + subservers[subentry]);\\n\\t\\t\\t\\tlet subserversd2 = ns.scan(subservers[subentry]); // depth 2\\n\\t\\t\\t\\tfor (let subentryd2 in subserversd2) {\\n\\t\\t\\t\\t\\tif (subserversd2[subentryd2] !== subservers[subentry] && subserversd2[subentryd2] !== servers[entry] && subserversd2.length > 1) {\\n\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------> \\\" + subserversd2[subentryd2]);\\n\\t\\t\\t\\t\\t\\tlet subserversd3 = ns.scan(subserversd2[subentryd2]);\\t// depth 3\\n\\t\\t\\t\\t\\t\\tfor (let subentryd3 in subserversd3) {\\n\\t\\t\\t\\t\\t\\t\\tif (subserversd3[subentryd3] !== subserversd2[subentryd2] && subserversd3[subentryd3] !== subservers[subentry] && subserversd3.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------> \\\" + subserversd3[subentryd3]);\\n\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd4 = ns.scan(subserversd3[subentryd3]);\\t// depth 4\\n\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd4 in subserversd4) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd4[subentryd4] !== subserversd3[subentryd3] && subserversd4[subentryd4] !== subserversd2[subentryd2] && subserversd4.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------------> \\\" + subserversd4[subentryd4]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd5 = ns.scan(subserversd4[subentryd4]);\\t// depth 5\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd5 in subserversd5) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd5[subentryd5] !== subserversd4[subentryd4] && subserversd5[subentryd5] !== subserversd3[subentryd3] && subserversd5.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-------------------------> \\\" + subserversd5[subentryd5]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd6 = ns.scan(subserversd5[subentryd5]);\\t// depth 6\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd6 in subserversd6) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd6[subentryd6] !== subserversd5[subentryd5] && subserversd6[subentryd6] !== subserversd4[subentryd4] && subserversd6.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"------------------------------> \\\" + subserversd6[subentryd6]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd7 = ns.scan(subserversd6[subentryd6]);\\t// depth 7\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor(let subentryd7 in subserversd7) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd7[subentryd7] !== subserversd6[subentryd6] && subserversd7[subentryd7] !== subserversd5[subentryd5] && subserversd7.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-----------------------------------> \\\" + subserversd7[subentryd7]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"gigascan.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.05,\"server\":\"avmnite-02h\",\"_hash\":\"09d5eb91ac2188cd08d0b0658f50095ede1bc815d40e01a99435a8ab5d16f1b9\",\"moduleSequenceNumber\":329}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tvar servers = ns.scan(home);\\n\\tvar scripts = ns.ls(home, \\\"basic-\\\");\\n\\n\\tfor (let entry in scripts) {\\n\\t\\tns.tprint(\\\"found script: \\\" + scripts[entry]);\\n\\t}\\n\\n\\t// Hack servers (!!! depth = 2 !!!) if needed and populate with scripts\\n\\tfor (let entry in servers) {\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== \\\"home\\\") {\\n\\t\\t\\t\\tns.tprint(\\\"----->   \\\" + subservers[subentry]);\\n\\t\\t\\t\\tif (!ns.hasRootAccess(subservers[subentry])) {\\n\\t\\t\\t\\t\\ttakeover(subservers[subentry]);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tns.tprint(\\\"copying scripts to \\\" + subservers[subentry]);\\n\\t\\t\\t\\tawait ns.scp(scripts, home, subservers[subentry]);\\n\\t\\t\\t\\t//await ns.scp(\\\"setup.ns\\\", home, subservers[subentry]);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (!ns.hasRootAccess(servers[entry])) {\\n\\t\\t\\ttakeover(servers[entry]);\\n\\t\\t}\\n\\t\\tns.tprint(\\\"copying scripts to \\\" + servers[entry]);\\n\\t\\tawait ns.scp(scripts, home, servers[entry]);\\n\\t\\t//await ns.scp(\\\"setup.ns\\\", home, servers[entry]);\\n\\t}\\n\\n\\t/** \\n\\t * \\tAttempts to take over target machine\\t\\n\\t * \\n\\t *  @param {string} tar\\n\\t *  @return {boolean} outcome \\n\\t**/\\n\\tasync function takeover(tar) {\\n\\t\\tlet currentTarget = tar;\\n\\t\\tlet isNotTakenOver = true;\\n\\t\\tlet attemptCounter = 0;\\n\\n\\t\\tif (ns.getServerNumPortsRequired <= 5 && attemptCounter < 50) {\\n\\t\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\n\\t\\t\\t\\tattemptCounter++;\\n\\t\\t\\t}\\n\\n\\t\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"setup.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":3.15,\"server\":\"avmnite-02h\",\"_hash\":\"3b3625aa608a7f37d7592c27fde49ee0052288713ba0f611649877b763edd804\",\"moduleSequenceNumber\":330}}],\"serversOnNetwork\":[\"phantasy\",\"summit-uni\",\"syscore\",\"catalyst\",\"I.I.I.I\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":2,\"openPortCount\":3,\"requiredHackingSkill\":213,\"serverGrowth\":0}},\".\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\".\",\"httpPortOpen\":false,\"ip\":\"25.7.4.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\".\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"stormtech\",\"blade\",\"powerhouse-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":539,\"serverGrowth\":0}},\"CSEC\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-135916.cct\",\"type\":\"Find Largest Prime Factor\",\"data\":342547805,\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-710996.cct\",\"type\":\"Algorithmic Stock Trader II\",\"data\":[9,14,135,150,140,67,89,56,35,150,100,78,37],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"CSEC\",\"httpPortOpen\":false,\"ip\":\"53.9.9.2\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"CyberSec\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.grow(target);\\n\\t}\\n}\",\"filename\":\"basic-grow.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"CSEC\",\"_hash\":\"fc7652eef146e96723fb16cbc2683cf66b1d09853fff0ed8b2ca6655039902d8\",\"moduleSequenceNumber\":331}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"basic-hack.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"CSEC\",\"_hash\":\"b431b860a325c1f1e8d3f9afa6bd629bf87ee6500edce2693501368a5588a221\",\"moduleSequenceNumber\":332}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(target);\\n\\t}\\n}\",\"filename\":\"basic-weaken.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"CSEC\",\"_hash\":\"ef6ef87a7a369f27563e9f084d651b032b74b974340529a78834d2cbf17c12a5\",\"moduleSequenceNumber\":333}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n// TODO: unused + unfinished, based on setup.ns\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst hostMachine = ns.getHostname();\\n\\tconst target = ns.args[0];\\n\\tvar servers = ns.scan(hostMachine);\\n\\tvar scripts = ns.ls(home, \\\".ns\\\");\\n\\n\\tfor (let entry in scripts) {\\n\\t\\tns.tprint(\\\"found script: \\\" + scripts[entry]);\\n\\t}\\n\\n\\tns.tprint(\\\"Host:  \\\" + hostMachine);\\n\\tfor (let entry in servers) {\\t// depth 0\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\t// depth 1\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== home && subservers.length > 1) {\\n\\t\\t\\t\\tns.tprint(\\\"-----> \\\" + subservers[subentry]);\\n\\t\\t\\t\\tawait takeover(subservers[subentry]);\\n\\t\\t\\t\\tlet subserversd2 = ns.scan(subservers[subentry]); // depth 2\\n\\t\\t\\t\\tfor (let subentryd2 in subserversd2) {\\n\\t\\t\\t\\t\\tif (subserversd2[subentryd2] !== subservers[subentry] && subserversd2[subentryd2] !== servers[entry] && subserversd2.length > 1) {\\n\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------> \\\" + subserversd2[subentryd2]);\\n\\t\\t\\t\\t\\t\\tawait takeover(subserversd2[subentryd2]);\\n\\t\\t\\t\\t\\t\\tlet subserversd3 = ns.scan(subserversd2[subentryd2]);\\t// depth 3\\n\\t\\t\\t\\t\\t\\tfor (let subentryd3 in subserversd3) {\\n\\t\\t\\t\\t\\t\\t\\tif (subserversd3[subentryd3] !== subserversd2[subentryd2] && subserversd3[subentryd3] !== subservers[subentry] && subserversd3.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------> \\\" + subserversd3[subentryd3]);\\n\\t\\t\\t\\t\\t\\t\\t\\tawait takeover(subserversd3[subentryd3]);\\n\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd4 = ns.scan(subserversd3[subentryd3]);\\t// depth 4\\n\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd4 in subserversd4) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd4[subentryd4] !== subserversd3[subentryd3] && subserversd4[subentryd4] !== subserversd2[subentryd2] && subserversd4.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------------> \\\" + subserversd4[subentryd4]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tawait takeover(subserversd4[subentryd4]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd5 = ns.scan(subserversd4[subentryd4]);\\t// depth 5\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd5 in subserversd5) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd5[subentryd5] !== subserversd4[subentryd4] && subserversd5[subentryd5] !== subserversd3[subentryd3] && subserversd5.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-------------------------> \\\" + subserversd5[subentryd5]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tawait takeover(subserversd5[subentryd5]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd6 = ns.scan(subserversd5[subentryd5]);\\t// depth 6\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd6 in subserversd6) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd6[subentryd6] !== subserversd5[subentryd5] && subserversd6[subentryd6] !== subserversd4[subentryd4] && subserversd6.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"------------------------------> \\\" + subserversd6[subentryd6]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tawait takeover(subserversd6[subentryd6]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd7 = ns.scan(subserversd6[subentryd6]);\\t// depth 7\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd7 in subserversd7) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd7[subentryd7] !== subserversd6[subentryd6] && subserversd7[subentryd7] !== subserversd5[subentryd5] && subserversd7.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-----------------------------------> \\\" + subserversd7[subentryd7]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tawait takeover(subserversd7[subentryd7]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tawait takeover(servers[entry]);\\n\\t}\\n\\n\\t/** \\n\\t * \\tAttempts to take over target machine\\t\\n\\t * \\n\\t *  @param {string} tar\\n\\t *  @return {boolean} outcome \\n\\t**/\\n\\tasync function takeover(tar) {\\n\\t\\tlet currentTarget = tar;\\n\\t\\tlet isNotTakenOver = true;\\n\\t\\tlet attemptCounter = 0;\\n\\n\\t\\tif (/*ns.getServerNumPortsRequired <= 5 && */ attemptCounter < 30) {\\n\\t\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\ttry {\\n\\t\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t\\t} catch(error) {\\n\\t\\t\\t\\t\\t\\tns.tprint(\\\"not enough ports to nuke \\\" +  currentTarget);\\n\\t\\t\\t\\t\\t\\treturn false;\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tattemptCounter++;\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.scp(scripts, home, currentTarget);\\n\\t\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"deep-setup.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":3.1,\"server\":\"CSEC\",\"_hash\":\"95e9530fb6f69bfe511a604adf704b1d63ca180a1d556d7b1669bf3a470b227e\",\"moduleSequenceNumber\":334}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tconst currentMachine = ns.getHostname();\\n\\tvar servers = ns.scan(currentMachine);\\n\\tvar scripts = ns.ls(home, \\\"basic-\\\");\\n\\n\\tns.tprint(\\\"Host:  \\\" + currentMachine);\\n\\tfor (let entry in servers) {\\t// depth 0\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\t// depth 1\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== home && subservers.length > 1) {\\n\\t\\t\\t\\tns.tprint(\\\"-----> \\\" + subservers[subentry]);\\n\\t\\t\\t\\tlet subserversd2 = ns.scan(subservers[subentry]); // depth 2\\n\\t\\t\\t\\tfor (let subentryd2 in subserversd2) {\\n\\t\\t\\t\\t\\tif (subserversd2[subentryd2] !== subservers[subentry] && subserversd2[subentryd2] !== servers[entry] && subserversd2.length > 1) {\\n\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------> \\\" + subserversd2[subentryd2]);\\n\\t\\t\\t\\t\\t\\tlet subserversd3 = ns.scan(subserversd2[subentryd2]);\\t// depth 3\\n\\t\\t\\t\\t\\t\\tfor (let subentryd3 in subserversd3) {\\n\\t\\t\\t\\t\\t\\t\\tif (subserversd3[subentryd3] !== subserversd2[subentryd2] && subserversd3[subentryd3] !== subservers[subentry] && subserversd3.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------> \\\" + subserversd3[subentryd3]);\\n\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd4 = ns.scan(subserversd3[subentryd3]);\\t// depth 4\\n\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd4 in subserversd4) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd4[subentryd4] !== subserversd3[subentryd3] && subserversd4[subentryd4] !== subserversd2[subentryd2] && subserversd4.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------------> \\\" + subserversd4[subentryd4]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd5 = ns.scan(subserversd4[subentryd4]);\\t// depth 5\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd5 in subserversd5) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd5[subentryd5] !== subserversd4[subentryd4] && subserversd5[subentryd5] !== subserversd3[subentryd3] && subserversd5.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-------------------------> \\\" + subserversd5[subentryd5]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd6 = ns.scan(subserversd5[subentryd5]);\\t// depth 6\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd6 in subserversd6) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd6[subentryd6] !== subserversd5[subentryd5] && subserversd6[subentryd6] !== subserversd4[subentryd4] && subserversd6.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"------------------------------> \\\" + subserversd6[subentryd6]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd7 = ns.scan(subserversd6[subentryd6]);\\t// depth 7\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor(let subentryd7 in subserversd7) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd7[subentryd7] !== subserversd6[subentryd6] && subserversd7[subentryd7] !== subserversd5[subentryd5] && subserversd7.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-----------------------------------> \\\" + subserversd7[subentryd7]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"gigascan.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.05,\"server\":\"CSEC\",\"_hash\":\"09d5eb91ac2188cd08d0b0658f50095ede1bc815d40e01a99435a8ab5d16f1b9\",\"moduleSequenceNumber\":335}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tvar servers = ns.scan(home);\\n\\tvar scripts = ns.ls(home, \\\"basic-\\\");\\n\\n\\tfor (let entry in scripts) {\\n\\t\\tns.tprint(\\\"found script: \\\" + scripts[entry]);\\n\\t}\\n\\n\\t// Hack servers (!!! depth = 2 !!!) if needed and populate with scripts\\n\\tfor (let entry in servers) {\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== \\\"home\\\") {\\n\\t\\t\\t\\tns.tprint(\\\"----->   \\\" + subservers[subentry]);\\n\\t\\t\\t\\tif (!ns.hasRootAccess(subservers[subentry])) {\\n\\t\\t\\t\\t\\ttakeover(subservers[subentry]);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tns.tprint(\\\"copying scripts to \\\" + subservers[subentry]);\\n\\t\\t\\t\\tawait ns.scp(scripts, home, subservers[subentry]);\\n\\t\\t\\t\\t//await ns.scp(\\\"setup.ns\\\", home, subservers[subentry]);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (!ns.hasRootAccess(servers[entry])) {\\n\\t\\t\\ttakeover(servers[entry]);\\n\\t\\t}\\n\\t\\tns.tprint(\\\"copying scripts to \\\" + servers[entry]);\\n\\t\\tawait ns.scp(scripts, home, servers[entry]);\\n\\t\\t//await ns.scp(\\\"setup.ns\\\", home, servers[entry]);\\n\\t}\\n\\n\\t/** \\n\\t * \\tAttempts to take over target machine\\t\\n\\t * \\n\\t *  @param {string} tar\\n\\t *  @return {boolean} outcome \\n\\t**/\\n\\tasync function takeover(tar) {\\n\\t\\tlet currentTarget = tar;\\n\\t\\tlet isNotTakenOver = true;\\n\\t\\tlet attemptCounter = 0;\\n\\n\\t\\tif (ns.getServerNumPortsRequired <= 5 && attemptCounter < 50) {\\n\\t\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\n\\t\\t\\t\\tattemptCounter++;\\n\\t\\t\\t}\\n\\n\\t\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"setup.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":3.15,\"server\":\"CSEC\",\"_hash\":\"3b3625aa608a7f37d7592c27fde49ee0052288713ba0f611649877b763edd804\",\"moduleSequenceNumber\":336}}],\"serversOnNetwork\":[\"harakiri-sushi\",\"omega-net\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":1,\"openPortCount\":3,\"requiredHackingSkill\":51,\"serverGrowth\":0}},\"The-Cave\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-219675.cct\",\"type\":\"Algorithmic Stock Trader I\",\"data\":[185,178,111,36,157,162,39,49,97,86,101,83,175,2,136,173,158,155,21,192,164,77,85,51,66,82,137,67,127,32,177,46,100,194,79,31,101,20,169,54,140,122,80,27,32],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"The-Cave\",\"httpPortOpen\":false,\"ip\":\"63.4.0.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"alpha-omega.lit\"],\"organizationName\":\"Helios\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"clarkinc\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":925,\"serverGrowth\":0}},\"w0r1d_d43m0n\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"w0r1d_d43m0n\",\"httpPortOpen\":false,\"ip\":\"59.6.4.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"w0r1d_d43m0n\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":3000,\"serverGrowth\":0}},\"darkweb\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"darkweb\",\"httpPortOpen\":false,\"ip\":\"98.9.0.7\",\"isConnectedTo\":false,\"maxRam\":1,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":3,\"requiredHackingSkill\":1,\"serverGrowth\":1}}}","CompaniesSave":"{\"ECorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"ECorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"MegaCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"MegaCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Bachman & Associates\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Bachman & Associates\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.6,\"salaryMultiplier\":2.6,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Blade Industries\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Blade Industries\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"NWO\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NWO\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Clarke Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Clarke Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"OmniTek Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"OmniTek Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Four Sigma\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Four Sigma\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.5,\"salaryMultiplier\":2.5,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"KuaiGong International\":{\"ctor\":\"Company\",\"data\":{\"name\":\"KuaiGong International\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.2,\"salaryMultiplier\":2.2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Fulcrum Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Fulcrum Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Storm Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Storm Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"DefComm\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DefComm\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Helios Labs\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Helios Labs\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"VitaLife\":{\"ctor\":\"Company\",\"data\":{\"name\":\"VitaLife\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Icarus Microsystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Icarus Microsystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Universal Energy\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Universal Energy\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Galactic Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Galactic Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"AeroCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"AeroCorp\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Omnia Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omnia Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Solaris Space Systems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Solaris Space Systems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":4,\"rolloverRep\":0,\"isMegacorp\":false}},\"DeltaOne\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DeltaOne\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.6,\"salaryMultiplier\":1.6,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Global Pharmaceuticals\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Global Pharmaceuticals\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Nova Medical\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Nova Medical\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Central Intelligence Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Central Intelligence Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"National Security Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"National Security Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Watchdog Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Watchdog Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"LexoCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"LexoCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.4,\"salaryMultiplier\":1.4,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Rho Construction\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Rho Construction\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Alpha Enterprises\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Alpha Enterprises\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Aevum Police Headquarters\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Aevum Police Headquarters\",\"info\":\"\",\"companyPositions\":{\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"SysCore Securities\":{\"ctor\":\"Company\",\"data\":{\"name\":\"SysCore Securities\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"CompuTek\":{\"ctor\":\"Company\",\"data\":{\"name\":\"CompuTek\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"NetLink Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NetLink Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Carmichael Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Carmichael Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"FoodNStuff\":{\"ctor\":\"Company\",\"data\":{\"name\":\"FoodNStuff\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Joe's Guns\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Joe's Guns\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Omega Software\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omega Software\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true},\"expMultiplier\":1.1,\"salaryMultiplier\":1.1,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Noodle Bar\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Noodle Bar\",\"info\":\"\",\"companyPositions\":{\"Waiter\":true,\"Part-time Waiter\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}}}","FactionsSave":"{\"Illuminati\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"QLink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Illuminati\",\"playerReputation\":0}},\"Daedalus\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"The Red Pill\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Daedalus\",\"playerReputation\":0}},\"The Covenant\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib III\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"SPTN-97 Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Covenant\",\"playerReputation\":0}},\"ECorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"NeuroFlux Governor\",\"ECorp HVMind Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"ECorp\",\"playerReputation\":0}},\"MegaCorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"CordiARC Fusion Reactor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"MegaCorp\",\"playerReputation\":0}},\"Bachman & Associates\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"SmartJaw\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bachman & Associates\",\"playerReputation\":0}},\"Blade Industries\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"NeuroFlux Governor\",\"HyperSight Corneal Implant\",\"Neotra\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Blade Industries\",\"playerReputation\":0}},\"NWO\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"Neurotrainer III\",\"Power Recirculation Core\",\"Xanipher\",\"Hydroflame Left Arm\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"NWO\",\"playerReputation\":0}},\"Clarke Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Neuronal Densification\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"nextSENS Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Clarke Incorporated\",\"playerReputation\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"NeuroFlux Governor\",\"OmniTek InfoLoad\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"OmniTek Incorporated\",\"playerReputation\":0}},\"Four Sigma\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"PC Direct-Neural Interface\",\"ADR-V1 Pheromone Gene\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"Neurotrainer III\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Four Sigma\",\"playerReputation\":0}},\"KuaiGong International\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module Core V2 Upgrade\",\"Speech Enhancement\",\"FocusWire\",\"NeuroFlux Governor\",\"HyperSight Corneal Implant\",\"Photosynthetic Cells\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"KuaiGong International\",\"playerReputation\":0}},\"Fulcrum Secret Technologies\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface Optimization Submodule\",\"PC Direct-Neural Interface NeuroNet Injector\",\"NeuroFlux Governor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Fulcrum Secret Technologies\",\"playerReputation\":0}},\"BitRunners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Neural Accelerator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"Cranial Signal Processors - Gen V\",\"NeuroFlux Governor\",\"Neurotrainer II\",\"BitRunners Neurolink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"BitRunners\",\"playerReputation\":0}},\"The Black Hand\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Artificial Synaptic Potentiation\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Neuralstimulator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"NeuroFlux Governor\",\"The Black Hand\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Black Hand\",\"playerReputation\":0}},\"NiteSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"BitWire\",\"Artificial Synaptic Potentiation\",\"Neural-Retention Enhancement\",\"DataJack\",\"Embedded Netburner Module\",\"Cranial Signal Processors - Gen II\",\"Cranial Signal Processors - Gen III\",\"NeuroFlux Governor\",\"Neurotrainer II\",\"CRTX42-AA Gene Modification\"],\"favor\":78.4517,\"isBanned\":false,\"isMember\":true,\"name\":\"NiteSec\",\"playerReputation\":265106.5430737946}},\"Aevum\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Wired Reflexes\",\"Speech Processor Implant\",\"Synaptic Enhancement Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"Neurotrainer I\",\"PCMatrix\"],\"favor\":26.2273,\"isBanned\":false,\"isMember\":true,\"name\":\"Aevum\",\"playerReputation\":29647.516312433887}},\"Chongqing\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"Neuregen Gene Modification\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Chongqing\",\"playerReputation\":0}},\"Ishima\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"INFRARET Enhancement\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Ishima\",\"playerReputation\":0}},\"New Tokyo\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"NutriGen Implant\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"New Tokyo\",\"playerReputation\":0}},\"Sector-12\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"CashRoot Starter Kit\"],\"favor\":27.1365,\"isBanned\":false,\"isMember\":true,\"name\":\"Sector-12\",\"playerReputation\":30478.228005317465}},\"Volhaven\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Combat Rib I\",\"Combat Rib II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"DermaForce Particle Barrier\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Volhaven\",\"playerReputation\":0}},\"Speakers for the Dead\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Unstable Circadian Modulator\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"Speech Enhancement\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Graphene BrachiBlades Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Speakers for the Dead\",\"playerReputation\":0}},\"The Dark Army\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Wired Reflexes\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Power Recirculation Core\",\"Graphene Bionic Arms Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Dark Army\",\"playerReputation\":0}},\"The Syndicate\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"ADR-V1 Pheromone Gene\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Power Recirculation Core\",\"BrachiBlades\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Syndicate\",\"playerReputation\":0}},\"Silhouette\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"TITN-41 Gene-Modification Injection\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Silhouette\",\"playerReputation\":0}},\"Tetrads\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"NeuroFlux Governor\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"Power Recirculation Core\",\"Bionic Arms\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Tetrads\",\"playerReputation\":0}},\"Slum Snakes\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"NeuroFlux Governor\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"SmartSonar Implant\"],\"favor\":1,\"isBanned\":false,\"isMember\":true,\"name\":\"Slum Snakes\",\"playerReputation\":8529.328941321099}},\"Netburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Hacknet Node CPU Architecture Neural-Upload\",\"Hacknet Node Cache Architecture Neural-Upload\",\"Hacknet Node NIC Architecture Neural-Upload\",\"Hacknet Node Kernel Direct-Neural Interface\",\"Hacknet Node Core Direct-Neural Interface\",\"NeuroFlux Governor\"],\"favor\":28.6385,\"isBanned\":false,\"isMember\":true,\"name\":\"Netburners\",\"playerReputation\":31761.219054050376}},\"Tian Di Hui\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Nanofiber Weave\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"Social Negotiation Assistant (S.N.A)\",\"Neuroreceptor Management Implant\"],\"favor\":8.0963,\"isBanned\":false,\"isMember\":false,\"name\":\"Tian Di Hui\",\"playerReputation\":0}},\"CyberSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"BitWire\",\"Synaptic Enhancement Implant\",\"Cranial Signal Processors - Gen I\",\"Cranial Signal Processors - Gen II\",\"NeuroFlux Governor\",\"Neurotrainer I\"],\"favor\":51.22,\"isBanned\":false,\"isMember\":true,\"name\":\"CyberSec\",\"playerReputation\":46645.69481160769}},\"Bladeburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"EsperTech Bladeburner Eyewear\",\"EMS-4 Recombination\",\"ORION-MKIV Shoulder\",\"Hyperion Plasma Cannon V1\",\"Hyperion Plasma Cannon V2\",\"GOLEM Serum\",\"Vangelis Virus\",\"Vangelis Virus 3.0\",\"I.N.T.E.R.L.I.N.K.E.D\",\"Blade's Runners\",\"BLADE-51b Tesla Armor\",\"BLADE-51b Tesla Armor: Power Cells Upgrade\",\"BLADE-51b Tesla Armor: Energy Shielding Upgrade\",\"BLADE-51b Tesla Armor: Unibeam Upgrade\",\"BLADE-51b Tesla Armor: Omnibeam Upgrade\",\"BLADE-51b Tesla Armor: IPU Upgrade\",\"The Blade's Simulacrum\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bladeburners\",\"playerReputation\":0}},\"Church of the Machine God\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Stanek's Gift - Genesis\",\"Stanek's Gift - Awakening\",\"Stanek's Gift - Serenity\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Church of the Machine God\",\"playerReputation\":0}}}","AliasesSave":"{}","GlobalAliasesSave":"{}","MessagesSave":"{\"j0.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j0.msg\",\"msg\":\"I know you can sense it. I know you're searching for it. It's why you spend night after night at your computer. <br><br>It's real, I've seen it. And I can help you find it. But not right now. You're not ready yet.<br><br>Use this program to track your progress<br><br>The fl1ght.exe program was added to your home computer<br><br>-jump3R\",\"recvd\":true}},\"j1.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j1.msg\",\"msg\":\"Soon you will be contacted by a hacking group known as CyberSec. They can help you with your search. <br><br>You should join them, garner their favor, and exploit them for their Augmentations. But do not trust them. They are not what they seem. No one is.<br><br>-jump3R\",\"recvd\":true}},\"j2.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j2.msg\",\"msg\":\"Do not try to save the world. There is no world to save. If you want to find the truth, worry only about yourself. Ethics and morals will get you killed. <br><br>Watch out for a hacking group known as NiteSec.<br><br>-jump3R\",\"recvd\":true}},\"j3.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j3.msg\",\"msg\":\"You must learn to walk before you can run. And you must run before you can fly. Look for the black hand. <br><br>I.I.I.I <br><br>-jump3R\",\"recvd\":false}},\"j4.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j4.msg\",\"msg\":\"To find what you are searching for, you must understand the bits. The bits are all around us. The runners will help you.<br><br>-jump3R\",\"recvd\":false}},\"csec-test.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"csec-test.msg\",\"msg\":\"We've been watching you. Your skills are very impressive. But you're wasting your talents. If you join us, you can put your skills to good use and change the world for the better. If you join us, we can unlock your full potential. <br><br>But first, you must pass our test. Find and install the backdoor on our server. <br><br>-CyberSec\",\"recvd\":true}},\"nitesec-test.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"nitesec-test.msg\",\"msg\":\"People say that the corrupted governments and corporations rule the world. Yes, maybe they do. But do you know who everyone really fears? People like us. Because they can't hide from us. Because they can't fight shadows and ideas with bullets. <br><br>Join us, and people will fear you, too. <br><br>Find and install the backdoor on our server. Then, we will contact you again.<br><br>-NiteSec\",\"recvd\":true}},\"19dfj3l1nd.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"19dfj3l1nd.msg\",\"msg\":\"We know what you are doing. We know what drives you. We know what you are looking for. <br><br> We can help you find the answers.<br><br>run4theh111z\",\"recvd\":false}},\"icarus.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"icarus.msg\",\"msg\":\"@)(#V%*N)@(#*)*C)@#%*)*V)@#(*%V@)(#VN%*)@#(*%<br>)@B(*#%)@)M#B*%V)____FIND___#$@)#%(B*)@#(*%B)<br>@_#(%_@#M(BDSPOMB__THE-CAVE_#)$(*@#$)@#BNBEGB<br>DFLSMFVMV)#@($*)@#*$MV)@#(*$V)M#(*$)M@(#*VM$)\",\"recvd\":false}}}","StockMarketSave":"{\"lastUpdate\":0,\"Orders\":{},\"storedCycles\":0,\"ticksUntilCycle\":0}","SettingsSave":"{\"ActiveScriptsServerPageSize\":10,\"ActiveScriptsScriptPageSize\":10,\"AutosaveInterval\":60,\"CodeInstructionRunTime\":25,\"DisableASCIIArt\":false,\"DisableHotkeys\":false,\"DisableTextEffects\":false,\"EnableBashHotkeys\":false,\"TimestampsFormat\":\"\",\"Locale\":\"en\",\"MaxLogCapacity\":50,\"MaxPortCapacity\":50,\"MaxTerminalCapacity\":500,\"OwnedAugmentationsOrder\":1,\"PurchaseAugmentationsOrder\":0,\"SaveGameOnFileSave\":true,\"SuppressBuyAugmentationConfirmation\":false,\"SuppressFactionInvites\":false,\"SuppressMessages\":false,\"SuppressTravelConfirmation\":false,\"SuppressBladeburnerPopup\":false,\"SuppressTIXPopup\":false,\"SuppressSavedGameToast\":false,\"UseIEC60027_2\":false,\"MonacoTheme\":\"monokai\",\"MonacoInsertSpaces\":false,\"MonacoFontSize\":20,\"MonacoVim\":false,\"theme\":{\"primarylight\":\"#0f0\",\"primary\":\"#0c0\",\"primarydark\":\"#090\",\"successlight\":\"#0f0\",\"success\":\"#0c0\",\"successdark\":\"#090\",\"errorlight\":\"#f00\",\"error\":\"#c00\",\"errordark\":\"#900\",\"secondarylight\":\"#AAA\",\"secondary\":\"#888\",\"secondarydark\":\"#666\",\"warninglight\":\"#ff0\",\"warning\":\"#cc0\",\"warningdark\":\"#990\",\"infolight\":\"#69f\",\"info\":\"#36c\",\"infodark\":\"#039\",\"welllight\":\"#444\",\"well\":\"#222\",\"white\":\"#fff\",\"black\":\"#000\",\"hp\":\"#dd3434\",\"money\":\"#ffd700\",\"hack\":\"#adff2f\",\"combat\":\"#faffdf\",\"cha\":\"#a671d1\",\"int\":\"#6495ed\",\"rep\":\"#faffdf\",\"disabled\":\"#66cfbc\",\"backgroundprimary\":\"#000\",\"backgroundsecondary\":\"#000\",\"button\":\"#333\"}}","VersionSave":"8","AllGangsSave":"","LastExportBonus":"1641216066215","StaneksGiftSave":"{\"ctor\":\"StaneksGift\",\"data\":{\"storedCycles\":0,\"fragments\":[]}}"}}
