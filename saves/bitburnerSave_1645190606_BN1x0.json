{"ctor":"BitburnerSaveObject","data":{"PlayerSave":"{\"ctor\":\"PlayerObject\",\"data\":{\"hacking\":2223,\"hp\":10,\"max_hp\":10,\"strength\":175,\"defense\":1,\"dexterity\":2,\"agility\":1,\"charisma\":1,\"intelligence\":0,\"hacking_chance_mult\":1.7086528941658565,\"hacking_speed_mult\":1.6715264593208465,\"hacking_money_mult\":5.543324159179236,\"hacking_grow_mult\":2.590665943628297,\"hacking_exp\":2711629587.6633663,\"strength_exp\":28464.83191531421,\"defense_exp\":7.865261804855509,\"dexterity_exp\":7.865261804855509,\"agility_exp\":7.865261804855509,\"charisma_exp\":0,\"intelligence_exp\":0,\"hacking_mult\":4.491336694935282,\"strength_mult\":1.361950096078876,\"defense_mult\":1.1843044313729356,\"dexterity_mult\":1.8876628331653218,\"agility_mult\":1.2435196529415824,\"charisma_mult\":1.563281849412275,\"hacking_exp_mult\":4.73066772052895,\"strength_exp_mult\":1.4981451056867636,\"defense_exp_mult\":1.4981451056867636,\"dexterity_exp_mult\":1.4981451056867636,\"agility_exp_mult\":1.4981451056867636,\"charisma_exp_mult\":1.4981451056867636,\"company_rep_mult\":1.977551539506528,\"faction_rep_mult\":1.4981451056867634,\"money\":461786644698.981,\"city\":\"Volhaven\",\"location\":\"CompuTek\",\"jobs\":{},\"companyName\":\"\",\"currentServer\":\"home\",\"purchasedServers\":[\"beehive\"],\"hacknetNodes\":[{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":27394.029319350862,\"onlineTimeSeconds\":1017928.9999942023,\"ram\":64,\"totalMoneyGenerated\":24104575076.0405,\"name\":\"hacknet-node-0\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":27394.029319350862,\"onlineTimeSeconds\":1017928.9999942023,\"ram\":64,\"totalMoneyGenerated\":23599247361.242775,\"name\":\"hacknet-node-1\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":27394.029319350862,\"onlineTimeSeconds\":1017928.7999942023,\"ram\":64,\"totalMoneyGenerated\":23603370980.193474,\"name\":\"hacknet-node-2\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":27394.029319350862,\"onlineTimeSeconds\":847782.5999938089,\"ram\":64,\"totalMoneyGenerated\":23224099315.99036,\"name\":\"hacknet-node-3\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":27394.029319350862,\"onlineTimeSeconds\":847781.9999938088,\"ram\":64,\"totalMoneyGenerated\":22921826575.093124,\"name\":\"hacknet-node-4\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":27394.029319350862,\"onlineTimeSeconds\":847781.7999938088,\"ram\":64,\"totalMoneyGenerated\":21732875874.32923,\"name\":\"hacknet-node-5\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":27394.029319350862,\"onlineTimeSeconds\":847781.5999938089,\"ram\":64,\"totalMoneyGenerated\":22932008467.952972,\"name\":\"hacknet-node-6\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":27394.029319350862,\"onlineTimeSeconds\":623887.7999919823,\"ram\":64,\"totalMoneyGenerated\":17090654747.697016,\"name\":\"hacknet-node-7\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":27394.029319350862,\"onlineTimeSeconds\":623887.7999919823,\"ram\":64,\"totalMoneyGenerated\":17090614008.493645,\"name\":\"hacknet-node-8\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":27394.029319350862,\"onlineTimeSeconds\":623887.5999919823,\"ram\":64,\"totalMoneyGenerated\":17090426194.187822,\"name\":\"hacknet-node-9\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":27394.029319350862,\"onlineTimeSeconds\":623885.7999919828,\"ram\":64,\"totalMoneyGenerated\":17090471573.878433,\"name\":\"hacknet-node-10\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":27394.029319350862,\"onlineTimeSeconds\":623885.5999919827,\"ram\":64,\"totalMoneyGenerated\":17090515396.260641,\"name\":\"hacknet-node-11\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":27394.029319350862,\"onlineTimeSeconds\":623885.3999919828,\"ram\":64,\"totalMoneyGenerated\":17090362474.948744,\"name\":\"hacknet-node-12\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":27394.029319350862,\"onlineTimeSeconds\":623869.1999919864,\"ram\":64,\"totalMoneyGenerated\":17090176177.691462,\"name\":\"hacknet-node-13\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":27394.029319350862,\"onlineTimeSeconds\":623868.9999919864,\"ram\":64,\"totalMoneyGenerated\":17089968016.223522,\"name\":\"hacknet-node-14\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":27394.029319350862,\"onlineTimeSeconds\":623868.5999919865,\"ram\":64,\"totalMoneyGenerated\":17090155476.526453,\"name\":\"hacknet-node-15\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":27394.029319350862,\"onlineTimeSeconds\":623868.3999919865,\"ram\":64,\"totalMoneyGenerated\":17090066613.671238,\"name\":\"hacknet-node-16\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":27394.029319350862,\"onlineTimeSeconds\":623868.3999919865,\"ram\":64,\"totalMoneyGenerated\":17090011841.293964,\"name\":\"hacknet-node-17\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":27394.029319350862,\"onlineTimeSeconds\":623868.1999919866,\"ram\":64,\"totalMoneyGenerated\":17090108566.820206,\"name\":\"hacknet-node-18\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":3136.2731446861344,\"onlineTimeSeconds\":623848.5999919908,\"ram\":1,\"totalMoneyGenerated\":1956548347.2699516,\"name\":\"hacknet-node-19\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":27394.029319350862,\"onlineTimeSeconds\":623843.5999919919,\"ram\":64,\"totalMoneyGenerated\":17089516342.041084,\"name\":\"hacknet-node-20\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":27394.029319350862,\"onlineTimeSeconds\":623839.5999919928,\"ram\":64,\"totalMoneyGenerated\":17089359836.513824,\"name\":\"hacknet-node-21\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":27394.029319350862,\"onlineTimeSeconds\":623838.799991993,\"ram\":64,\"totalMoneyGenerated\":17089321485.320816,\"name\":\"hacknet-node-22\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":27394.029319350862,\"onlineTimeSeconds\":623838.3999919931,\"ram\":64,\"totalMoneyGenerated\":17089272184.580784,\"name\":\"hacknet-node-23\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":27394.029319350862,\"onlineTimeSeconds\":623823.1999919964,\"ram\":64,\"totalMoneyGenerated\":17088959851.363304,\"name\":\"hacknet-node-24\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":27394.029319350862,\"onlineTimeSeconds\":623816.7999919978,\"ram\":64,\"totalMoneyGenerated\":17088795483.155039,\"name\":\"hacknet-node-25\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":27394.029319350862,\"onlineTimeSeconds\":623813.1999919986,\"ram\":64,\"totalMoneyGenerated\":17088685908.829916,\"name\":\"hacknet-node-26\"}}],\"hashManager\":{\"ctor\":\"HashManager\",\"data\":{\"capacity\":0,\"hashes\":0,\"upgrades\":{\"Sell for Money\":0,\"Sell for Corporation Funds\":0,\"Reduce Minimum Security\":0,\"Increase Maximum Money\":0,\"Improve Studying\":0,\"Improve Gym Training\":0,\"Exchange for Corporation Research\":0,\"Exchange for Bladeburner Rank\":0,\"Exchange for Bladeburner SP\":0,\"Generate Coding Contract\":0}}},\"factions\":[\"Netburners\",\"Sector-12\",\"The Black Hand\",\"NiteSec\",\"Aevum\",\"BitRunners\",\"CyberSec\",\"Tian Di Hui\"],\"factionInvitations\":[],\"queuedAugmentations\":[{\"level\":1,\"name\":\"PCMatrix\"},{\"level\":1,\"name\":\"Nanofiber Weave\"},{\"level\":18,\"name\":\"NeuroFlux Governor\"},{\"level\":19,\"name\":\"NeuroFlux Governor\"},{\"level\":20,\"name\":\"NeuroFlux Governor\"},{\"level\":21,\"name\":\"NeuroFlux Governor\"},{\"level\":22,\"name\":\"NeuroFlux Governor\"},{\"level\":23,\"name\":\"NeuroFlux Governor\"},{\"level\":24,\"name\":\"NeuroFlux Governor\"}],\"augmentations\":[{\"level\":1,\"name\":\"Synaptic Enhancement Implant\"},{\"level\":1,\"name\":\"Neurotrainer I\"},{\"level\":1,\"name\":\"Neurotrainer II\"},{\"level\":1,\"name\":\"Neural-Retention Enhancement\"},{\"level\":1,\"name\":\"BitWire\"},{\"level\":17,\"name\":\"NeuroFlux Governor\"},{\"level\":1,\"name\":\"Hacknet Node CPU Architecture Neural-Upload\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen I\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen II\"},{\"level\":1,\"name\":\"Hacknet Node NIC Architecture Neural-Upload\"},{\"level\":1,\"name\":\"Hacknet Node Cache Architecture Neural-Upload\"},{\"level\":1,\"name\":\"Hacknet Node Kernel Direct-Neural Interface\"},{\"level\":1,\"name\":\"Hacknet Node Core Direct-Neural Interface\"},{\"level\":1,\"name\":\"Artificial Synaptic Potentiation\"},{\"level\":1,\"name\":\"ADR-V1 Pheromone Gene\"},{\"level\":1,\"name\":\"Wired Reflexes\"},{\"level\":1,\"name\":\"Neuralstimulator\"},{\"level\":1,\"name\":\"Enhanced Myelin Sheathing\"},{\"level\":1,\"name\":\"The Black Hand\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen III\"},{\"level\":1,\"name\":\"DataJack\"},{\"level\":1,\"name\":\"Embedded Netburner Module\"},{\"level\":1,\"name\":\"CRTX42-AA Gene Modification\"},{\"level\":1,\"name\":\"Augmented Targeting I\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen IV\"},{\"level\":1,\"name\":\"Neuroreceptor Management Implant\"},{\"level\":1,\"name\":\"Artificial Bio-neural Network Implant\"},{\"level\":1,\"name\":\"Embedded Netburner Module Core Implant\"},{\"level\":1,\"name\":\"Neural Accelerator\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen V\"},{\"level\":1,\"name\":\"Embedded Netburner Module Core V2 Upgrade\"},{\"level\":1,\"name\":\"BitRunners Neurolink\"},{\"level\":1,\"name\":\"CashRoot Starter Kit\"},{\"level\":1,\"name\":\"Speech Processor Implant\"},{\"level\":1,\"name\":\"Augmented Targeting II\"},{\"level\":1,\"name\":\"Social Negotiation Assistant (S.N.A)\"},{\"level\":1,\"name\":\"Nuoptimal Nootropic Injector Implant\"},{\"level\":1,\"name\":\"Speech Enhancement\"}],\"sourceFiles\":[],\"numPeopleKilled\":0,\"karma\":-3.5,\"crime_money_mult\":1.1843044313729356,\"crime_success_mult\":1.1843044313729356,\"isWorking\":false,\"focus\":true,\"workType\":\"\",\"workCostMult\":4,\"workExpMult\":3,\"currentWorkFactionName\":\"\",\"currentWorkFactionDescription\":\"\",\"workHackExpGainRate\":0,\"workStrExpGainRate\":0,\"workDefExpGainRate\":0,\"workDexExpGainRate\":0,\"workAgiExpGainRate\":0,\"workChaExpGainRate\":0,\"workRepGainRate\":0,\"workMoneyGainRate\":0,\"workMoneyLossRate\":0,\"workHackExpGained\":0,\"workStrExpGained\":0,\"workDefExpGained\":0,\"workDexExpGained\":0,\"workAgiExpGained\":0,\"workChaExpGained\":0,\"workRepGained\":0,\"workMoneyGained\":0,\"createProgramName\":\"\",\"createProgramReqLvl\":1000,\"className\":\"\",\"crimeType\":\"\",\"timeWorked\":0,\"timeWorkedCreateProgram\":0,\"timeNeededToCompleteWork\":14400000,\"work_money_mult\":1.3027348745102292,\"hacknet_node_money_mult\":2.986926804462985,\"hacknet_node_purchase_cost_mult\":0.6448515429387038,\"hacknet_node_ram_cost_mult\":0.8429431933839266,\"hacknet_node_core_cost_mult\":0.8429431933839266,\"hacknet_node_level_cost_mult\":0.7165017143763376,\"hasWseAccount\":true,\"hasTixApiAccess\":true,\"has4SData\":true,\"has4SDataTixApi\":true,\"gang\":null,\"corporation\":null,\"bladeburner\":null,\"bladeburner_max_stamina_mult\":1,\"bladeburner_stamina_gain_mult\":1,\"bladeburner_analysis_mult\":1,\"bladeburner_success_chance_mult\":1,\"sleeves\":[],\"resleeves\":[],\"sleevesFromCovenant\":0,\"bitNodeN\":1,\"lastUpdate\":1645190606197,\"totalPlaytime\":4330018400,\"playtimeSinceLastAug\":1017934600,\"playtimeSinceLastBitnode\":4330018400,\"moneySourceA\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":-103358776,\"codingcontract\":0,\"corporation\":0,\"crime\":0,\"gang\":0,\"hacking\":2071388336.111125,\"hacknet\":488781994096.16693,\"hacknet_expenses\":-21606597443.595848,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":0,\"total\":461785644698.981,\"work\":0,\"servers\":-14080000,\"other\":-309800000,\"augmentations\":-7033901514.144933}},\"moneySourceB\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":-243652528,\"codingcontract\":0,\"corporation\":0,\"crime\":5246159.850692849,\"gang\":0,\"hacking\":220278845373.6896,\"hacknet\":1891804707876.9229,\"hacknet_expenses\":-141910899560.04337,\"hospitalization\":-4500000,\"infiltration\":0,\"sleeves\":0,\"stock\":6898613252.897437,\"total\":707906722686.4136,\"work\":10193289.025092782,\"servers\":-22426167257.018974,\"other\":-6512265235.149254,\"augmentations\":-1239993398405.6912}},\"scriptProdSinceLastAug\":1023633071.0035902,\"exploits\":[],\"achievements\":[{\"ID\":\"NITESEC\",\"unlockedOn\":1641743061748},{\"ID\":\"BRUTESSH.EXE\",\"unlockedOn\":1641743061763},{\"ID\":\"FTPCRACK.EXE\",\"unlockedOn\":1641743061765},{\"ID\":\"RELAYSMTP.EXE\",\"unlockedOn\":1641743061767},{\"ID\":\"HTTPWORM.EXE\",\"unlockedOn\":1641743061769},{\"ID\":\"SQLINJECT.EXE\",\"unlockedOn\":1641743061771},{\"ID\":\"INSTALL_1\",\"unlockedOn\":1641743061775},{\"ID\":\"NS2\",\"unlockedOn\":1641743061779},{\"ID\":\"FIRST_HACKNET_NODE\",\"unlockedOn\":1641743061781},{\"ID\":\"MAX_HACKNET_NODE\",\"unlockedOn\":1641743061784},{\"ID\":\"HACKNET_NODE_10M\",\"unlockedOn\":1641743061786},{\"ID\":\"DONATION\",\"unlockedOn\":1641743061788},{\"ID\":\"TRAVEL\",\"unlockedOn\":1641743061790},{\"ID\":\"TOR\",\"unlockedOn\":1641743061794},{\"ID\":\"4S\",\"unlockedOn\":1641743061797},{\"ID\":\"DRAIN_SERVER\",\"unlockedOn\":1641743121759},{\"ID\":\"THE_BLACK_HAND\",\"unlockedOn\":1641745701759},{\"ID\":\"HOSPITALIZED\",\"unlockedOn\":1641817199927},{\"ID\":\"30_HACKNET_NODE\",\"unlockedOn\":1642339248219},{\"ID\":\"CYBERSEC\",\"unlockedOn\":1642755461567},{\"ID\":\"BITRUNNERS\",\"unlockedOn\":1643671752087},{\"ID\":\"REPUTATION_10M\",\"unlockedOn\":1644533282891},{\"ID\":\"WORKOUT\",\"unlockedOn\":1644578406989},{\"ID\":\"FORMULAS.EXE\",\"unlockedOn\":1644614488119}],\"factionWorkType\":\"Faction Hacking Work\",\"committingCrimeThruSingFn\":false,\"singFnCrimeWorkerScript\":null}}","AllServersSave":"{\"home\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":2,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"home\",\"httpPortOpen\":true,\"ip\":\"90.5.7.0\",\"isConnectedTo\":true,\"maxRam\":4096,\"messages\":[\"hackers-starting-handbook.lit\",\"j0.msg\",\"j1.msg\",\"csec-test.msg\",\"j2.msg\",\"nitesec-test.msg\",\"j3.msg\",\"j4.msg\",\"19dfj3l1nd.msg\"],\"organizationName\":\"Home PC\",\"programs\":[\"NUKE.exe\",\"FTPCrack.exe\",\"relaySMTP.exe\",\"BruteSSH.exe\",\"fl1ght.exe\",\"ServerProfiler.exe\",\"DeepscanV1.exe\",\"AutoLink.exe\",\"HTTPWorm.exe\",\"DeepscanV2.exe\",\"SQLInject.exe\",\"Formulas.exe\"],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"basic-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"basic-hack.js\",\"url\":\"blob:file:///c4f6dd41-ddf8-4d87-ba64-ef7a091a46d5\",\"moduleSequenceNumber\":1421}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"home\",\"moduleSequenceNumber\":711,\"_hash\":\"b431b860a325c1f1e8d3f9afa6bd629bf87ee6500edce2693501368a5588a221\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.grow(target);\\n\\t}\\n}\",\"filename\":\"basic-grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"basic-grow.js\",\"url\":\"blob:file:///7a9b8941-447b-42b2-9d90-4b64fc1aef03\",\"moduleSequenceNumber\":1423}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":712,\"_hash\":\"fc7652eef146e96723fb16cbc2683cf66b1d09853fff0ed8b2ca6655039902d8\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(target);\\n\\t}\\n}\",\"filename\":\"basic-weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"basic-weaken.js\",\"url\":\"blob:file:///939e0292-1d58-4a20-83d7-9dc6dd3153bb\",\"moduleSequenceNumber\":1422}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":713,\"_hash\":\"ef6ef87a7a369f27563e9f084d651b032b74b974340529a78834d2cbf17c12a5\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tvar servers = ns.scan(home);\\n\\tvar scripts = ns.ls(home, \\\".js\\\");\\n\\n\\tfor (let entry in scripts) {\\n\\t\\tns.tprint(\\\"found script: \\\" + scripts[entry]);\\n\\t}\\n\\n\\t// Hack servers (!!! depth = 2 !!!) if needed and populate with scripts\\n\\tfor (let entry in servers) {\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== \\\"home\\\") {\\n\\t\\t\\t\\tns.tprint(\\\"----->   \\\" + subservers[subentry]);\\n\\t\\t\\t\\tif (!ns.hasRootAccess(subservers[subentry])) {\\n\\t\\t\\t\\t\\ttakeover(subservers[subentry]);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tns.tprint(\\\"copying scripts to \\\" + subservers[subentry]);\\n\\t\\t\\t\\tawait ns.scp(scripts, home, subservers[subentry]);\\n\\t\\t\\t\\t//await ns.scp(\\\"setup.ns\\\", home, subservers[subentry]);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (!ns.hasRootAccess(servers[entry])) {\\n\\t\\t\\ttakeover(servers[entry]);\\n\\t\\t}\\n\\t\\tns.tprint(\\\"copying scripts to \\\" + servers[entry]);\\n\\t\\tawait ns.scp(scripts, home, servers[entry]);\\n\\t\\t//await ns.scp(\\\"setup.ns\\\", home, servers[entry]);\\n\\t}\\n\\n\\t/** \\n\\t * \\tAttempts to take over target machine\\t\\n\\t * \\n\\t *  @param {string} tar\\n\\t *  @return {boolean} outcome \\n\\t**/\\n\\tasync function takeover(tar) {\\n\\t\\tlet currentTarget = tar;\\n\\t\\tlet isNotTakenOver = true;\\n\\t\\tlet attemptCounter = 0;\\n\\n\\t\\tif (ns.getServerNumPortsRequired <= 5 && attemptCounter < 50) {\\n\\t\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\n\\t\\t\\t\\tattemptCounter++;\\n\\t\\t\\t}\\n\\n\\t\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"setup.js\",\"url\":\"blob:file:///688783b6-8bfb-4afb-a73b-9e0903ed4c20\",\"moduleSequenceNumber\":8065}],\"dependents\":[],\"ramUsage\":3.15,\"server\":\"home\",\"moduleSequenceNumber\":714,\"_hash\":\"4c81fd5db4f8fe4d722783f42191167d5d6d91fc10ae0fac9e104775c4fc3a2c\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerList, takeover } from \\\"modules/helper.js\\\";\\n\\n/** @param {NS} ns **/\\n// TODO: unused + unfinished, based on setup.ns\\nexport async function main(ns) {\\n\\tconst myServers = [\\\"home\\\"];\\n\\n\\tvar servers = await getServerList(myServers, 0, ns);\\n\\n\\tfor (let entry in servers) {\\t\\n\\t\\tawait takeover(servers[entry], ns);\\n\\t}\\n}\",\"filename\":\"deep-setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/modules/helper.js\",\"url\":\"blob:file:///9a16d725-8b4d-4681-8443-103c6a1ad9a6\",\"moduleSequenceNumber\":6399},{\"filename\":\"deep-setup.js\",\"url\":\"blob:file:///602c781c-ea97-48cf-a520-f81788bf6877\",\"moduleSequenceNumber\":6401}],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"home\",\"moduleSequenceNumber\":715,\"_hash\":\"fa44df621eca0f1166505a7bef87b89a9fadd830d92c73316cd5bc3ef5206f4c\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet targetRam = ns.getServerMaxRam(ns.args[0]);\\n\\tlet scriptMem = ns.getScriptRam(ns.args[1]);\\n\\n\\tns.tprint(\\\"Maximum possible threads for \\\" + ns.args[1] + \\\": \\\" + Math.floor(targetRam / scriptMem));\\n\\tns.exit;\\n}\",\"filename\":\"ram-usage.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"ram-usage.js\",\"url\":\"blob:file:///45b3d934-401c-4c9e-ae31-ea9254ed9a6c\",\"moduleSequenceNumber\":5902}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":716,\"_hash\":\"79e21ded0793dceaa73c6e11d7b184dbca238d9dd4f83ccaffe923eef76c02f2\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServersWithMoney } from \\\"modules/helper.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tawait getServersWithMoney(ns);\\n}\",\"filename\":\"find-profitable-servers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/modules/helper.js\",\"url\":\"blob:file:///0946195a-c38c-410f-8f8a-82e55b010a00\",\"moduleSequenceNumber\":275942},{\"filename\":\"find-profitable-servers.js\",\"url\":\"blob:file:///34000850-2e52-4ff3-8fac-c993d0a3dec5\",\"moduleSequenceNumber\":276655}],\"dependents\":[],\"ramUsage\":4.15,\"server\":\"home\",\"moduleSequenceNumber\":291615,\"_hash\":\"dc082db7a076b3bfd1fb273bbdf15b0a97f1ba5e3bb443dd1918b2e5239841e4\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Returns an array of all hostnames in the network tree\\n * \\n * @param {string[]} myServers\\n * @param {number} safetyCounter Prevents infnite recursion\\n * @param {NS} ns\\n */\\nexport async function getServerList(myServers, safetyCounter, ns) {\\n\\tlet srvrsSeen = myServers;\\n\\tlet currServScanResult = [];\\n\\n\\tfor (let serverSeen in srvrsSeen) {\\n\\t\\tcurrServScanResult = ns.scan(srvrsSeen[serverSeen]);\\n\\t\\tfor (let entry in currServScanResult) {\\n\\t\\t\\tif (!srvrsSeen.includes(currServScanResult[entry])) {\\n\\t\\t\\t\\tsrvrsSeen.push(currServScanResult[entry]);\\n\\t\\t\\t\\tif ((++safetyCounter) < 250) {\\n\\t\\t\\t\\t\\tawait getServerList(srvrsSeen, safetyCounter, ns);\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tns.exit();\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\t//Filter out invalid values (NaN, null, {}, undefined)\\n\\tsrvrsSeen = srvrsSeen.filter(x => x != null);\\n\\treturn srvrsSeen;\\n}\\n\\n\\n/** \\n * \\tAttempts to take over target machine\\t\\n * \\n *  @param {string} target\\n * \\t@param {NS} ns\\n *  @return {boolean} outcome \\n**/\\nexport async function takeover(target, ns) {\\n\\tconst home = \\\"home\\\";\\n\\tlet currentTarget = target;\\n\\tlet isNotTakenOver = true;\\n\\tlet attemptCounter = 0;\\n\\n\\tlet scripts = ns.ls(home, \\\".js\\\");\\n\\t//scripts.push(ns.ls(home, \\\".ns\\\")); //in case of deprecated .ns scripts\\n\\n\\tif (!ns.hasRootAccess(currentTarget) && attemptCounter < 30) {\\n\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\ttry {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t} catch (error) {\\n\\t\\t\\t\\t\\tns.tprint(\\\"not enough ports to nuke \\\" + currentTarget);\\n\\t\\t\\t\\t\\treturn false;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t}\\n\\t\\t\\tattemptCounter++;\\n\\t\\t}\\n\\n\\t\\tawait ns.scp(scripts, home, currentTarget);\\n\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\\n\\n\\n\\n/** \\n * \\tReturns a sorted map of all servers with the currently available money\\t\\n * \\n * \\t@param {NS} ns\\n *  @return {Map} server list \\n**/\\nexport async function getServersWithMoney(ns) {\\n\\n\\tconst unsortedServersMap = new Map();\\n\\tlet serversOwned = [\\\"home\\\", ...ns.getPurchasedServers()];\\n\\tlet serversSeen = [\\\"home\\\", ...await getServerList(serversOwned, 0, ns)];\\n\\n\\tserversSeen = removeOwnedServers(serversSeen, ns);\\n\\n\\t//Get money currently available on server and save in a map\\n\\tfor (let server in serversSeen) {\\n\\t\\tunsortedServersMap.set(serversSeen[server], ns.getServerMoneyAvailable(serversSeen[server]));\\n\\t}\\n\\n\\t//sort by values (asc)\\n\\tconst sortedMap = new Map([...unsortedServersMap.entries()].sort((a, b) => b[1] - a[1]));\\n\\n\\t//Remove servers that contain no money\\n\\tfor (const [key, value] of sortedMap.entries()) {\\n\\t\\tif (value == 0) {\\n\\t\\t\\tsortedMap.delete(key);\\n\\t\\t}\\n\\t}\\n\\t\\n\\t/*\\n\\tfor (const [key, value] of sortedMap.entries()) {\\n\\t\\tns.tprint(\\\"Server: \\\" + key + \\\"  Money available: \\\" + value);\\n\\t}\\n\\t*/\\n\\n\\treturn sortedMap;\\n}\\n\\n\\n/**\\n * Returns the list of all servers excluding purchased servers and home\\n * \\n * @param {string[]} serverList\\n * @param {NS} ns\\n * \\n * @return {string[]} list of all servers excluding purchased and home\\n */\\nexport function removeOwnedServers(serverList, ns) {\\n\\tconst toRemove = new Set([\\\"home\\\", ...ns.getPurchasedServers()]);\\n\\tlet listOfServers = serverList;\\n\\n\\tlistOfServers = listOfServers.filter( x => !toRemove.has(x));\\n\\n\\treturn listOfServers;\\n}\",\"filename\":\"/modules/helper.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/modules/full-server-scan.ns\",\"url\":\"blob:file:///f0fc84af-969c-47c1-b00d-5dd0a3b92590\"}],\"dependents\":[],\"ramUsage\":5.4,\"server\":\"home\",\"moduleSequenceNumber\":292327,\"_hash\":\"4f93efcfd2d3e94b515fcafd88561e1004c6ba39e213d9b582505fbc3013a732\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerList, removeOwnedServers  } from \\\"modules/helper.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet serversSeen = [\\\"home\\\"]; // home + bought servers\\n\\tserversSeen = await getServerList(serversSeen, 0, ns);\\n\\tserversSeen = removeOwnedServers(serversSeen, ns);\\n\\tns.tprint(serversSeen);\\n}\",\"filename\":\"list-servers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/modules/helper.js\",\"url\":\"blob:file:///5fce0eb9-784d-414b-b181-ad02ffa89cf5\",\"moduleSequenceNumber\":278078},{\"filename\":\"list-servers.js\",\"url\":\"blob:file:///1e187f44-728d-4e14-985b-dcc312569dc4\",\"moduleSequenceNumber\":280213}],\"dependents\":[],\"ramUsage\":4.05,\"server\":\"home\",\"moduleSequenceNumber\":291616,\"_hash\":\"a6671a1379e16a087f0bac6fa17ea15a778ba4e3ce3367541a16a00ba340ca3b\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\t//todo\\n}\",\"filename\":\"buy-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":720,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}}],\"serversOnNetwork\":[\"n00dles\",\"foodnstuff\",\"sigma-cosmetics\",\"joesguns\",\"hong-fang-tea\",\"harakiri-sushi\",\"iron-gym\",\"darkweb\",\"beehive\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"ecorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-33013.cct\",\"type\":\"Merge Overlapping Intervals\",\"data\":[[20,21],[24,27],[12,19],[13,21],[17,27],[14,21],[3,11],[6,8],[20,21],[18,28],[1,9],[20,21],[10,12],[22,25],[12,15],[18,22],[4,11],[4,9],[24,33],[16,26]],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"ecorp\",\"httpPortOpen\":true,\"ip\":\"81.9.9.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"ECorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Returns an array of all hostnames in the network tree\\n * \\n * @param {string[]} myServers\\n * @param {number} safetyCounter Prevents infnite recursion\\n * @param {NS} ns\\n */\\nexport async function getServerList(myServers, safetyCounter, ns) {\\n\\tlet srvrsSeen = myServers;\\n\\tlet currServScanResult = [];\\n\\n\\tfor (let serverSeen in srvrsSeen) {\\n\\t\\tcurrServScanResult = ns.scan(srvrsSeen[serverSeen]);\\n\\t\\tfor (let entry in currServScanResult) {\\n\\t\\t\\tif (!srvrsSeen.includes(currServScanResult[entry])) {\\n\\t\\t\\t\\tsrvrsSeen.push(currServScanResult[entry]);\\n\\t\\t\\t\\tif ((++safetyCounter) < 250) {\\n\\t\\t\\t\\t\\tawait getServerList(srvrsSeen, safetyCounter, ns);\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tns.exit();\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\t//Filter out invalid values (NaN, null, {}, undefined)\\n\\tsrvrsSeen = srvrsSeen.filter(x => x);\\n\\treturn srvrsSeen;\\n}\\n\\n\\n/** \\n * \\tAttempts to take over target machine\\t\\n * \\n *  @param {string} target\\n * \\t@param {NS} ns\\n *  @return {boolean} outcome \\n**/\\nexport async function takeover(target, ns) {\\n\\tconst home = \\\"home\\\";\\n\\tlet currentTarget = target;\\n\\tlet isNotTakenOver = true;\\n\\tlet attemptCounter = 0;\\n\\n\\tlet scripts = ns.ls(home, \\\".js\\\");\\n\\t//scripts.push(ns.ls(home, \\\".ns\\\")); //in case of deprecated .ns scripts\\n\\n\\tif (!ns.hasRootAccess(currentTarget) && attemptCounter < 30) {\\n\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\ttry {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t} catch (error) {\\n\\t\\t\\t\\t\\tns.tprint(\\\"not enough ports to nuke \\\" + currentTarget);\\n\\t\\t\\t\\t\\treturn false;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t}\\n\\t\\t\\tattemptCounter++;\\n\\t\\t}\\n\\n\\t\\tawait ns.scp(scripts, home, currentTarget);\\n\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\",\"filename\":\"/modules/helper.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"ecorp\",\"moduleSequenceNumber\":721,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.grow(target);\\n\\t}\\n}\",\"filename\":\"basic-grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"ecorp\",\"moduleSequenceNumber\":722,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"basic-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"ecorp\",\"moduleSequenceNumber\":723,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(target);\\n\\t}\\n}\",\"filename\":\"basic-weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"ecorp\",\"moduleSequenceNumber\":724,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerList, takeover } from \\\"modules/helper.js\\\";\\n\\n/** @param {NS} ns **/\\n// TODO: unused + unfinished, based on setup.ns\\nexport async function main(ns) {\\n\\tconst myServers = [\\\"home\\\"];\\n\\n\\tvar servers = await getServerList(myServers, 0, ns);\\n\\n\\tfor (let entry in servers) {\\t\\n\\t\\tawait takeover(servers[entry], ns);\\n\\t}\\n}\",\"filename\":\"deep-setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"ecorp\",\"moduleSequenceNumber\":725,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\t//\\n}\",\"filename\":\"formulas-testing.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"ecorp\",\"moduleSequenceNumber\":726,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tconst currentMachine = ns.getHostname();\\n\\tvar servers = ns.scan(currentMachine);\\n\\tvar scripts = ns.ls(home, \\\"basic-\\\");\\n\\n\\tns.tprint(\\\"Host:  \\\" + currentMachine);\\n\\tfor (let entry in servers) {\\t// depth 0\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\t// depth 1\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== home && subservers.length > 1) {\\n\\t\\t\\t\\tns.tprint(\\\"-----> \\\" + subservers[subentry]);\\n\\t\\t\\t\\tlet subserversd2 = ns.scan(subservers[subentry]); // depth 2\\n\\t\\t\\t\\tfor (let subentryd2 in subserversd2) {\\n\\t\\t\\t\\t\\tif (subserversd2[subentryd2] !== subservers[subentry] && subserversd2[subentryd2] !== servers[entry] && subserversd2.length > 1) {\\n\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------> \\\" + subserversd2[subentryd2]);\\n\\t\\t\\t\\t\\t\\tlet subserversd3 = ns.scan(subserversd2[subentryd2]);\\t// depth 3\\n\\t\\t\\t\\t\\t\\tfor (let subentryd3 in subserversd3) {\\n\\t\\t\\t\\t\\t\\t\\tif (subserversd3[subentryd3] !== subserversd2[subentryd2] && subserversd3[subentryd3] !== subservers[subentry] && subserversd3.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------> \\\" + subserversd3[subentryd3]);\\n\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd4 = ns.scan(subserversd3[subentryd3]);\\t// depth 4\\n\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd4 in subserversd4) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd4[subentryd4] !== subserversd3[subentryd3] && subserversd4[subentryd4] !== subserversd2[subentryd2] && subserversd4.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------------> \\\" + subserversd4[subentryd4]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd5 = ns.scan(subserversd4[subentryd4]);\\t// depth 5\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd5 in subserversd5) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd5[subentryd5] !== subserversd4[subentryd4] && subserversd5[subentryd5] !== subserversd3[subentryd3] && subserversd5.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-------------------------> \\\" + subserversd5[subentryd5]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd6 = ns.scan(subserversd5[subentryd5]);\\t// depth 6\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd6 in subserversd6) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd6[subentryd6] !== subserversd5[subentryd5] && subserversd6[subentryd6] !== subserversd4[subentryd4] && subserversd6.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"------------------------------> \\\" + subserversd6[subentryd6]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd7 = ns.scan(subserversd6[subentryd6]);\\t// depth 7\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor(let subentryd7 in subserversd7) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd7[subentryd7] !== subserversd6[subentryd6] && subserversd7[subentryd7] !== subserversd5[subentryd5] && subserversd7.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-----------------------------------> \\\" + subserversd7[subentryd7]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"gigascan.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.05,\"server\":\"ecorp\",\"moduleSequenceNumber\":727,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet targetRam = ns.getServerMaxRam(ns.args[0]);\\n\\tlet scriptMem = ns.getScriptRam(ns.args[1]);\\n\\n\\tns.tprint(\\\"Maximum possible threads for \\\" + ns.args[1] + \\\": \\\" + Math.floor(targetRam / scriptMem));\\n\\tns.exit;\\n}\",\"filename\":\"ram-usage.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"ecorp\",\"moduleSequenceNumber\":728,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerList } from \\\"modules/helper.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet serversSeen = [\\\"home\\\"]; // home + bought servers\\n\\tlet contractList = [];\\n\\n\\tserversSeen = await getServerList(serversSeen, 0, ns);\\n\\n\\tns.tprint(serversSeen);\\n}\",\"filename\":\"search-coding-contracts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"ecorp\",\"moduleSequenceNumber\":729,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tvar servers = ns.scan(home);\\n\\tvar scripts = ns.ls(home, \\\".js\\\");\\n\\n\\tfor (let entry in scripts) {\\n\\t\\tns.tprint(\\\"found script: \\\" + scripts[entry]);\\n\\t}\\n\\n\\t// Hack servers (!!! depth = 2 !!!) if needed and populate with scripts\\n\\tfor (let entry in servers) {\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== \\\"home\\\") {\\n\\t\\t\\t\\tns.tprint(\\\"----->   \\\" + subservers[subentry]);\\n\\t\\t\\t\\tif (!ns.hasRootAccess(subservers[subentry])) {\\n\\t\\t\\t\\t\\ttakeover(subservers[subentry]);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tns.tprint(\\\"copying scripts to \\\" + subservers[subentry]);\\n\\t\\t\\t\\tawait ns.scp(scripts, home, subservers[subentry]);\\n\\t\\t\\t\\t//await ns.scp(\\\"setup.ns\\\", home, subservers[subentry]);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (!ns.hasRootAccess(servers[entry])) {\\n\\t\\t\\ttakeover(servers[entry]);\\n\\t\\t}\\n\\t\\tns.tprint(\\\"copying scripts to \\\" + servers[entry]);\\n\\t\\tawait ns.scp(scripts, home, servers[entry]);\\n\\t\\t//await ns.scp(\\\"setup.ns\\\", home, servers[entry]);\\n\\t}\\n\\n\\t/** \\n\\t * \\tAttempts to take over target machine\\t\\n\\t * \\n\\t *  @param {string} tar\\n\\t *  @return {boolean} outcome \\n\\t**/\\n\\tasync function takeover(tar) {\\n\\t\\tlet currentTarget = tar;\\n\\t\\tlet isNotTakenOver = true;\\n\\t\\tlet attemptCounter = 0;\\n\\n\\t\\tif (ns.getServerNumPortsRequired <= 5 && attemptCounter < 50) {\\n\\t\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\n\\t\\t\\t\\tattemptCounter++;\\n\\t\\t\\t}\\n\\n\\t\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.15,\"server\":\"ecorp\",\"moduleSequenceNumber\":730,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}}],\"serversOnNetwork\":[\"b-and-a\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":47942723399,\"moneyMax\":1198568084975,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1376,\"serverGrowth\":99}},\"megacorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"megacorp\",\"httpPortOpen\":true,\"ip\":\"33.3.0.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"MegaCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Returns an array of all hostnames in the network tree\\n * \\n * @param {string[]} myServers\\n * @param {number} safetyCounter Prevents infnite recursion\\n * @param {NS} ns\\n */\\nexport async function getServerList(myServers, safetyCounter, ns) {\\n\\tlet srvrsSeen = myServers;\\n\\tlet currServScanResult = [];\\n\\n\\tfor (let serverSeen in srvrsSeen) {\\n\\t\\tcurrServScanResult = ns.scan(srvrsSeen[serverSeen]);\\n\\t\\tfor (let entry in currServScanResult) {\\n\\t\\t\\tif (!srvrsSeen.includes(currServScanResult[entry])) {\\n\\t\\t\\t\\tsrvrsSeen.push(currServScanResult[entry]);\\n\\t\\t\\t\\tif ((++safetyCounter) < 250) {\\n\\t\\t\\t\\t\\tawait getServerList(srvrsSeen, safetyCounter, ns);\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tns.exit();\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\t//Filter out invalid values (NaN, null, {}, undefined)\\n\\tsrvrsSeen = srvrsSeen.filter(x => x);\\n\\treturn srvrsSeen;\\n}\\n\\n\\n/** \\n * \\tAttempts to take over target machine\\t\\n * \\n *  @param {string} target\\n * \\t@param {NS} ns\\n *  @return {boolean} outcome \\n**/\\nexport async function takeover(target, ns) {\\n\\tconst home = \\\"home\\\";\\n\\tlet currentTarget = target;\\n\\tlet isNotTakenOver = true;\\n\\tlet attemptCounter = 0;\\n\\n\\tlet scripts = ns.ls(home, \\\".js\\\");\\n\\t//scripts.push(ns.ls(home, \\\".ns\\\")); //in case of deprecated .ns scripts\\n\\n\\tif (!ns.hasRootAccess(currentTarget) && attemptCounter < 30) {\\n\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\ttry {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t} catch (error) {\\n\\t\\t\\t\\t\\tns.tprint(\\\"not enough ports to nuke \\\" + currentTarget);\\n\\t\\t\\t\\t\\treturn false;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t}\\n\\t\\t\\tattemptCounter++;\\n\\t\\t}\\n\\n\\t\\tawait ns.scp(scripts, home, currentTarget);\\n\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\",\"filename\":\"/modules/helper.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"megacorp\",\"moduleSequenceNumber\":731,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.grow(target);\\n\\t}\\n}\",\"filename\":\"basic-grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"megacorp\",\"moduleSequenceNumber\":732,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"basic-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"megacorp\",\"moduleSequenceNumber\":733,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(target);\\n\\t}\\n}\",\"filename\":\"basic-weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"megacorp\",\"moduleSequenceNumber\":734,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerList, takeover } from \\\"modules/helper.js\\\";\\n\\n/** @param {NS} ns **/\\n// TODO: unused + unfinished, based on setup.ns\\nexport async function main(ns) {\\n\\tconst myServers = [\\\"home\\\"];\\n\\n\\tvar servers = await getServerList(myServers, 0, ns);\\n\\n\\tfor (let entry in servers) {\\t\\n\\t\\tawait takeover(servers[entry], ns);\\n\\t}\\n}\",\"filename\":\"deep-setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"megacorp\",\"moduleSequenceNumber\":735,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\t//\\n}\",\"filename\":\"formulas-testing.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"megacorp\",\"moduleSequenceNumber\":736,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tconst currentMachine = ns.getHostname();\\n\\tvar servers = ns.scan(currentMachine);\\n\\tvar scripts = ns.ls(home, \\\"basic-\\\");\\n\\n\\tns.tprint(\\\"Host:  \\\" + currentMachine);\\n\\tfor (let entry in servers) {\\t// depth 0\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\t// depth 1\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== home && subservers.length > 1) {\\n\\t\\t\\t\\tns.tprint(\\\"-----> \\\" + subservers[subentry]);\\n\\t\\t\\t\\tlet subserversd2 = ns.scan(subservers[subentry]); // depth 2\\n\\t\\t\\t\\tfor (let subentryd2 in subserversd2) {\\n\\t\\t\\t\\t\\tif (subserversd2[subentryd2] !== subservers[subentry] && subserversd2[subentryd2] !== servers[entry] && subserversd2.length > 1) {\\n\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------> \\\" + subserversd2[subentryd2]);\\n\\t\\t\\t\\t\\t\\tlet subserversd3 = ns.scan(subserversd2[subentryd2]);\\t// depth 3\\n\\t\\t\\t\\t\\t\\tfor (let subentryd3 in subserversd3) {\\n\\t\\t\\t\\t\\t\\t\\tif (subserversd3[subentryd3] !== subserversd2[subentryd2] && subserversd3[subentryd3] !== subservers[subentry] && subserversd3.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------> \\\" + subserversd3[subentryd3]);\\n\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd4 = ns.scan(subserversd3[subentryd3]);\\t// depth 4\\n\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd4 in subserversd4) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd4[subentryd4] !== subserversd3[subentryd3] && subserversd4[subentryd4] !== subserversd2[subentryd2] && subserversd4.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------------> \\\" + subserversd4[subentryd4]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd5 = ns.scan(subserversd4[subentryd4]);\\t// depth 5\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd5 in subserversd5) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd5[subentryd5] !== subserversd4[subentryd4] && subserversd5[subentryd5] !== subserversd3[subentryd3] && subserversd5.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-------------------------> \\\" + subserversd5[subentryd5]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd6 = ns.scan(subserversd5[subentryd5]);\\t// depth 6\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd6 in subserversd6) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd6[subentryd6] !== subserversd5[subentryd5] && subserversd6[subentryd6] !== subserversd4[subentryd4] && subserversd6.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"------------------------------> \\\" + subserversd6[subentryd6]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd7 = ns.scan(subserversd6[subentryd6]);\\t// depth 7\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor(let subentryd7 in subserversd7) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd7[subentryd7] !== subserversd6[subentryd6] && subserversd7[subentryd7] !== subserversd5[subentryd5] && subserversd7.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-----------------------------------> \\\" + subserversd7[subentryd7]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"gigascan.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.05,\"server\":\"megacorp\",\"moduleSequenceNumber\":737,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet targetRam = ns.getServerMaxRam(ns.args[0]);\\n\\tlet scriptMem = ns.getScriptRam(ns.args[1]);\\n\\n\\tns.tprint(\\\"Maximum possible threads for \\\" + ns.args[1] + \\\": \\\" + Math.floor(targetRam / scriptMem));\\n\\tns.exit;\\n}\",\"filename\":\"ram-usage.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"megacorp\",\"moduleSequenceNumber\":738,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerList } from \\\"modules/helper.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet serversSeen = [\\\"home\\\"]; // home + bought servers\\n\\tlet contractList = [];\\n\\n\\tserversSeen = await getServerList(serversSeen, 0, ns);\\n\\n\\tns.tprint(serversSeen);\\n}\",\"filename\":\"search-coding-contracts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"megacorp\",\"moduleSequenceNumber\":739,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tvar servers = ns.scan(home);\\n\\tvar scripts = ns.ls(home, \\\".js\\\");\\n\\n\\tfor (let entry in scripts) {\\n\\t\\tns.tprint(\\\"found script: \\\" + scripts[entry]);\\n\\t}\\n\\n\\t// Hack servers (!!! depth = 2 !!!) if needed and populate with scripts\\n\\tfor (let entry in servers) {\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== \\\"home\\\") {\\n\\t\\t\\t\\tns.tprint(\\\"----->   \\\" + subservers[subentry]);\\n\\t\\t\\t\\tif (!ns.hasRootAccess(subservers[subentry])) {\\n\\t\\t\\t\\t\\ttakeover(subservers[subentry]);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tns.tprint(\\\"copying scripts to \\\" + subservers[subentry]);\\n\\t\\t\\t\\tawait ns.scp(scripts, home, subservers[subentry]);\\n\\t\\t\\t\\t//await ns.scp(\\\"setup.ns\\\", home, subservers[subentry]);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (!ns.hasRootAccess(servers[entry])) {\\n\\t\\t\\ttakeover(servers[entry]);\\n\\t\\t}\\n\\t\\tns.tprint(\\\"copying scripts to \\\" + servers[entry]);\\n\\t\\tawait ns.scp(scripts, home, servers[entry]);\\n\\t\\t//await ns.scp(\\\"setup.ns\\\", home, servers[entry]);\\n\\t}\\n\\n\\t/** \\n\\t * \\tAttempts to take over target machine\\t\\n\\t * \\n\\t *  @param {string} tar\\n\\t *  @return {boolean} outcome \\n\\t**/\\n\\tasync function takeover(tar) {\\n\\t\\tlet currentTarget = tar;\\n\\t\\tlet isNotTakenOver = true;\\n\\t\\tlet attemptCounter = 0;\\n\\n\\t\\tif (ns.getServerNumPortsRequired <= 5 && attemptCounter < 50) {\\n\\t\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\n\\t\\t\\t\\tattemptCounter++;\\n\\t\\t\\t}\\n\\n\\t\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.15,\"server\":\"megacorp\",\"moduleSequenceNumber\":740,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}}],\"serversOnNetwork\":[\"powerhouse-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":58470098964,\"moneyMax\":1461752474100,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1138,\"serverGrowth\":99}},\"b-and-a\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-934673.cct\",\"type\":\"Subarray with Maximum Sum\",\"data\":[-9,5,6,-9,-7,-1,4,2,2,-1,-2,9,3,2,0,-6],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"b-and-a\",\"httpPortOpen\":true,\"ip\":\"93.8.3.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Bachman & Associates\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Returns an array of all hostnames in the network tree\\n * \\n * @param {string[]} myServers\\n * @param {number} safetyCounter Prevents infnite recursion\\n * @param {NS} ns\\n */\\nexport async function getServerList(myServers, safetyCounter, ns) {\\n\\tlet srvrsSeen = myServers;\\n\\tlet currServScanResult = [];\\n\\n\\tfor (let serverSeen in srvrsSeen) {\\n\\t\\tcurrServScanResult = ns.scan(srvrsSeen[serverSeen]);\\n\\t\\tfor (let entry in currServScanResult) {\\n\\t\\t\\tif (!srvrsSeen.includes(currServScanResult[entry])) {\\n\\t\\t\\t\\tsrvrsSeen.push(currServScanResult[entry]);\\n\\t\\t\\t\\tif ((++safetyCounter) < 250) {\\n\\t\\t\\t\\t\\tawait getServerList(srvrsSeen, safetyCounter, ns);\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tns.exit();\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\t//Filter out invalid values (NaN, null, {}, undefined)\\n\\tsrvrsSeen = srvrsSeen.filter(x => x);\\n\\treturn srvrsSeen;\\n}\\n\\n\\n/** \\n * \\tAttempts to take over target machine\\t\\n * \\n *  @param {string} target\\n * \\t@param {NS} ns\\n *  @return {boolean} outcome \\n**/\\nexport async function takeover(target, ns) {\\n\\tconst home = \\\"home\\\";\\n\\tlet currentTarget = target;\\n\\tlet isNotTakenOver = true;\\n\\tlet attemptCounter = 0;\\n\\n\\tlet scripts = ns.ls(home, \\\".js\\\");\\n\\t//scripts.push(ns.ls(home, \\\".ns\\\")); //in case of deprecated .ns scripts\\n\\n\\tif (!ns.hasRootAccess(currentTarget) && attemptCounter < 30) {\\n\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\ttry {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t} catch (error) {\\n\\t\\t\\t\\t\\tns.tprint(\\\"not enough ports to nuke \\\" + currentTarget);\\n\\t\\t\\t\\t\\treturn false;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t}\\n\\t\\t\\tattemptCounter++;\\n\\t\\t}\\n\\n\\t\\tawait ns.scp(scripts, home, currentTarget);\\n\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\",\"filename\":\"/modules/helper.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"b-and-a\",\"moduleSequenceNumber\":741,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.grow(target);\\n\\t}\\n}\",\"filename\":\"basic-grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"b-and-a\",\"moduleSequenceNumber\":742,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"basic-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"b-and-a\",\"moduleSequenceNumber\":743,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(target);\\n\\t}\\n}\",\"filename\":\"basic-weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"b-and-a\",\"moduleSequenceNumber\":744,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerList, takeover } from \\\"modules/helper.js\\\";\\n\\n/** @param {NS} ns **/\\n// TODO: unused + unfinished, based on setup.ns\\nexport async function main(ns) {\\n\\tconst myServers = [\\\"home\\\"];\\n\\n\\tvar servers = await getServerList(myServers, 0, ns);\\n\\n\\tfor (let entry in servers) {\\t\\n\\t\\tawait takeover(servers[entry], ns);\\n\\t}\\n}\",\"filename\":\"deep-setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"b-and-a\",\"moduleSequenceNumber\":745,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\t//\\n}\",\"filename\":\"formulas-testing.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"b-and-a\",\"moduleSequenceNumber\":746,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tconst currentMachine = ns.getHostname();\\n\\tvar servers = ns.scan(currentMachine);\\n\\tvar scripts = ns.ls(home, \\\"basic-\\\");\\n\\n\\tns.tprint(\\\"Host:  \\\" + currentMachine);\\n\\tfor (let entry in servers) {\\t// depth 0\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\t// depth 1\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== home && subservers.length > 1) {\\n\\t\\t\\t\\tns.tprint(\\\"-----> \\\" + subservers[subentry]);\\n\\t\\t\\t\\tlet subserversd2 = ns.scan(subservers[subentry]); // depth 2\\n\\t\\t\\t\\tfor (let subentryd2 in subserversd2) {\\n\\t\\t\\t\\t\\tif (subserversd2[subentryd2] !== subservers[subentry] && subserversd2[subentryd2] !== servers[entry] && subserversd2.length > 1) {\\n\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------> \\\" + subserversd2[subentryd2]);\\n\\t\\t\\t\\t\\t\\tlet subserversd3 = ns.scan(subserversd2[subentryd2]);\\t// depth 3\\n\\t\\t\\t\\t\\t\\tfor (let subentryd3 in subserversd3) {\\n\\t\\t\\t\\t\\t\\t\\tif (subserversd3[subentryd3] !== subserversd2[subentryd2] && subserversd3[subentryd3] !== subservers[subentry] && subserversd3.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------> \\\" + subserversd3[subentryd3]);\\n\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd4 = ns.scan(subserversd3[subentryd3]);\\t// depth 4\\n\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd4 in subserversd4) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd4[subentryd4] !== subserversd3[subentryd3] && subserversd4[subentryd4] !== subserversd2[subentryd2] && subserversd4.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------------> \\\" + subserversd4[subentryd4]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd5 = ns.scan(subserversd4[subentryd4]);\\t// depth 5\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd5 in subserversd5) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd5[subentryd5] !== subserversd4[subentryd4] && subserversd5[subentryd5] !== subserversd3[subentryd3] && subserversd5.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-------------------------> \\\" + subserversd5[subentryd5]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd6 = ns.scan(subserversd5[subentryd5]);\\t// depth 6\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd6 in subserversd6) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd6[subentryd6] !== subserversd5[subentryd5] && subserversd6[subentryd6] !== subserversd4[subentryd4] && subserversd6.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"------------------------------> \\\" + subserversd6[subentryd6]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd7 = ns.scan(subserversd6[subentryd6]);\\t// depth 7\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor(let subentryd7 in subserversd7) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd7[subentryd7] !== subserversd6[subentryd6] && subserversd7[subentryd7] !== subserversd5[subentryd5] && subserversd7.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-----------------------------------> \\\" + subserversd7[subentryd7]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"gigascan.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.05,\"server\":\"b-and-a\",\"moduleSequenceNumber\":747,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet targetRam = ns.getServerMaxRam(ns.args[0]);\\n\\tlet scriptMem = ns.getScriptRam(ns.args[1]);\\n\\n\\tns.tprint(\\\"Maximum possible threads for \\\" + ns.args[1] + \\\": \\\" + Math.floor(targetRam / scriptMem));\\n\\tns.exit;\\n}\",\"filename\":\"ram-usage.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"b-and-a\",\"moduleSequenceNumber\":748,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerList } from \\\"modules/helper.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet serversSeen = [\\\"home\\\"]; // home + bought servers\\n\\tlet contractList = [];\\n\\n\\tserversSeen = await getServerList(serversSeen, 0, ns);\\n\\n\\tns.tprint(serversSeen);\\n}\",\"filename\":\"search-coding-contracts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"b-and-a\",\"moduleSequenceNumber\":749,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tvar servers = ns.scan(home);\\n\\tvar scripts = ns.ls(home, \\\".js\\\");\\n\\n\\tfor (let entry in scripts) {\\n\\t\\tns.tprint(\\\"found script: \\\" + scripts[entry]);\\n\\t}\\n\\n\\t// Hack servers (!!! depth = 2 !!!) if needed and populate with scripts\\n\\tfor (let entry in servers) {\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== \\\"home\\\") {\\n\\t\\t\\t\\tns.tprint(\\\"----->   \\\" + subservers[subentry]);\\n\\t\\t\\t\\tif (!ns.hasRootAccess(subservers[subentry])) {\\n\\t\\t\\t\\t\\ttakeover(subservers[subentry]);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tns.tprint(\\\"copying scripts to \\\" + subservers[subentry]);\\n\\t\\t\\t\\tawait ns.scp(scripts, home, subservers[subentry]);\\n\\t\\t\\t\\t//await ns.scp(\\\"setup.ns\\\", home, subservers[subentry]);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (!ns.hasRootAccess(servers[entry])) {\\n\\t\\t\\ttakeover(servers[entry]);\\n\\t\\t}\\n\\t\\tns.tprint(\\\"copying scripts to \\\" + servers[entry]);\\n\\t\\tawait ns.scp(scripts, home, servers[entry]);\\n\\t\\t//await ns.scp(\\\"setup.ns\\\", home, servers[entry]);\\n\\t}\\n\\n\\t/** \\n\\t * \\tAttempts to take over target machine\\t\\n\\t * \\n\\t *  @param {string} tar\\n\\t *  @return {boolean} outcome \\n\\t**/\\n\\tasync function takeover(tar) {\\n\\t\\tlet currentTarget = tar;\\n\\t\\tlet isNotTakenOver = true;\\n\\t\\tlet attemptCounter = 0;\\n\\n\\t\\tif (ns.getServerNumPortsRequired <= 5 && attemptCounter < 50) {\\n\\t\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\n\\t\\t\\t\\tattemptCounter++;\\n\\t\\t\\t}\\n\\n\\t\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.15,\"server\":\"b-and-a\",\"moduleSequenceNumber\":750,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}}],\"serversOnNetwork\":[\"kuai-gong\",\"ecorp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":77,\"hackDifficulty\":77,\"minDifficulty\":26,\"moneyAvailable\":29782807784,\"moneyMax\":744570194600,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":985,\"serverGrowth\":65}},\"blade\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-359486.cct\",\"type\":\"Sanitize Parentheses in Expression\",\"data\":\"(a())()a()\",\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"blade\",\"httpPortOpen\":true,\"ip\":\"30.1.8.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Blade Industries\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Returns an array of all hostnames in the network tree\\n * \\n * @param {string[]} myServers\\n * @param {number} safetyCounter Prevents infnite recursion\\n * @param {NS} ns\\n */\\nexport async function getServerList(myServers, safetyCounter, ns) {\\n\\tlet srvrsSeen = myServers;\\n\\tlet currServScanResult = [];\\n\\n\\tfor (let serverSeen in srvrsSeen) {\\n\\t\\tcurrServScanResult = ns.scan(srvrsSeen[serverSeen]);\\n\\t\\tfor (let entry in currServScanResult) {\\n\\t\\t\\tif (!srvrsSeen.includes(currServScanResult[entry])) {\\n\\t\\t\\t\\tsrvrsSeen.push(currServScanResult[entry]);\\n\\t\\t\\t\\tif ((++safetyCounter) < 250) {\\n\\t\\t\\t\\t\\tawait getServerList(srvrsSeen, safetyCounter, ns);\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tns.exit();\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\t//Filter out invalid values (NaN, null, {}, undefined)\\n\\tsrvrsSeen = srvrsSeen.filter(x => x);\\n\\treturn srvrsSeen;\\n}\\n\\n\\n/** \\n * \\tAttempts to take over target machine\\t\\n * \\n *  @param {string} target\\n * \\t@param {NS} ns\\n *  @return {boolean} outcome \\n**/\\nexport async function takeover(target, ns) {\\n\\tconst home = \\\"home\\\";\\n\\tlet currentTarget = target;\\n\\tlet isNotTakenOver = true;\\n\\tlet attemptCounter = 0;\\n\\n\\tlet scripts = ns.ls(home, \\\".js\\\");\\n\\t//scripts.push(ns.ls(home, \\\".ns\\\")); //in case of deprecated .ns scripts\\n\\n\\tif (!ns.hasRootAccess(currentTarget) && attemptCounter < 30) {\\n\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\ttry {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t} catch (error) {\\n\\t\\t\\t\\t\\tns.tprint(\\\"not enough ports to nuke \\\" + currentTarget);\\n\\t\\t\\t\\t\\treturn false;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t}\\n\\t\\t\\tattemptCounter++;\\n\\t\\t}\\n\\n\\t\\tawait ns.scp(scripts, home, currentTarget);\\n\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\",\"filename\":\"/modules/helper.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"blade\",\"moduleSequenceNumber\":751,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.grow(target);\\n\\t}\\n}\",\"filename\":\"basic-grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"blade\",\"moduleSequenceNumber\":752,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"basic-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"blade\",\"moduleSequenceNumber\":753,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(target);\\n\\t}\\n}\",\"filename\":\"basic-weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"blade\",\"moduleSequenceNumber\":754,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerList, takeover } from \\\"modules/helper.js\\\";\\n\\n/** @param {NS} ns **/\\n// TODO: unused + unfinished, based on setup.ns\\nexport async function main(ns) {\\n\\tconst myServers = [\\\"home\\\"];\\n\\n\\tvar servers = await getServerList(myServers, 0, ns);\\n\\n\\tfor (let entry in servers) {\\t\\n\\t\\tawait takeover(servers[entry], ns);\\n\\t}\\n}\",\"filename\":\"deep-setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"blade\",\"moduleSequenceNumber\":755,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\t//\\n}\",\"filename\":\"formulas-testing.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"blade\",\"moduleSequenceNumber\":756,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tconst currentMachine = ns.getHostname();\\n\\tvar servers = ns.scan(currentMachine);\\n\\tvar scripts = ns.ls(home, \\\"basic-\\\");\\n\\n\\tns.tprint(\\\"Host:  \\\" + currentMachine);\\n\\tfor (let entry in servers) {\\t// depth 0\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\t// depth 1\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== home && subservers.length > 1) {\\n\\t\\t\\t\\tns.tprint(\\\"-----> \\\" + subservers[subentry]);\\n\\t\\t\\t\\tlet subserversd2 = ns.scan(subservers[subentry]); // depth 2\\n\\t\\t\\t\\tfor (let subentryd2 in subserversd2) {\\n\\t\\t\\t\\t\\tif (subserversd2[subentryd2] !== subservers[subentry] && subserversd2[subentryd2] !== servers[entry] && subserversd2.length > 1) {\\n\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------> \\\" + subserversd2[subentryd2]);\\n\\t\\t\\t\\t\\t\\tlet subserversd3 = ns.scan(subserversd2[subentryd2]);\\t// depth 3\\n\\t\\t\\t\\t\\t\\tfor (let subentryd3 in subserversd3) {\\n\\t\\t\\t\\t\\t\\t\\tif (subserversd3[subentryd3] !== subserversd2[subentryd2] && subserversd3[subentryd3] !== subservers[subentry] && subserversd3.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------> \\\" + subserversd3[subentryd3]);\\n\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd4 = ns.scan(subserversd3[subentryd3]);\\t// depth 4\\n\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd4 in subserversd4) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd4[subentryd4] !== subserversd3[subentryd3] && subserversd4[subentryd4] !== subserversd2[subentryd2] && subserversd4.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------------> \\\" + subserversd4[subentryd4]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd5 = ns.scan(subserversd4[subentryd4]);\\t// depth 5\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd5 in subserversd5) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd5[subentryd5] !== subserversd4[subentryd4] && subserversd5[subentryd5] !== subserversd3[subentryd3] && subserversd5.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-------------------------> \\\" + subserversd5[subentryd5]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd6 = ns.scan(subserversd5[subentryd5]);\\t// depth 6\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd6 in subserversd6) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd6[subentryd6] !== subserversd5[subentryd5] && subserversd6[subentryd6] !== subserversd4[subentryd4] && subserversd6.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"------------------------------> \\\" + subserversd6[subentryd6]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd7 = ns.scan(subserversd6[subentryd6]);\\t// depth 7\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor(let subentryd7 in subserversd7) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd7[subentryd7] !== subserversd6[subentryd6] && subserversd7[subentryd7] !== subserversd5[subentryd5] && subserversd7.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-----------------------------------> \\\" + subserversd7[subentryd7]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"gigascan.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.05,\"server\":\"blade\",\"moduleSequenceNumber\":757,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet targetRam = ns.getServerMaxRam(ns.args[0]);\\n\\tlet scriptMem = ns.getScriptRam(ns.args[1]);\\n\\n\\tns.tprint(\\\"Maximum possible threads for \\\" + ns.args[1] + \\\": \\\" + Math.floor(targetRam / scriptMem));\\n\\tns.exit;\\n}\",\"filename\":\"ram-usage.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"blade\",\"moduleSequenceNumber\":758,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerList } from \\\"modules/helper.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet serversSeen = [\\\"home\\\"]; // home + bought servers\\n\\tlet contractList = [];\\n\\n\\tserversSeen = await getServerList(serversSeen, 0, ns);\\n\\n\\tns.tprint(serversSeen);\\n}\",\"filename\":\"search-coding-contracts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"blade\",\"moduleSequenceNumber\":759,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tvar servers = ns.scan(home);\\n\\tvar scripts = ns.ls(home, \\\".js\\\");\\n\\n\\tfor (let entry in scripts) {\\n\\t\\tns.tprint(\\\"found script: \\\" + scripts[entry]);\\n\\t}\\n\\n\\t// Hack servers (!!! depth = 2 !!!) if needed and populate with scripts\\n\\tfor (let entry in servers) {\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== \\\"home\\\") {\\n\\t\\t\\t\\tns.tprint(\\\"----->   \\\" + subservers[subentry]);\\n\\t\\t\\t\\tif (!ns.hasRootAccess(subservers[subentry])) {\\n\\t\\t\\t\\t\\ttakeover(subservers[subentry]);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tns.tprint(\\\"copying scripts to \\\" + subservers[subentry]);\\n\\t\\t\\t\\tawait ns.scp(scripts, home, subservers[subentry]);\\n\\t\\t\\t\\t//await ns.scp(\\\"setup.ns\\\", home, subservers[subentry]);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (!ns.hasRootAccess(servers[entry])) {\\n\\t\\t\\ttakeover(servers[entry]);\\n\\t\\t}\\n\\t\\tns.tprint(\\\"copying scripts to \\\" + servers[entry]);\\n\\t\\tawait ns.scp(scripts, home, servers[entry]);\\n\\t\\t//await ns.scp(\\\"setup.ns\\\", home, servers[entry]);\\n\\t}\\n\\n\\t/** \\n\\t * \\tAttempts to take over target machine\\t\\n\\t * \\n\\t *  @param {string} tar\\n\\t *  @return {boolean} outcome \\n\\t**/\\n\\tasync function takeover(tar) {\\n\\t\\tlet currentTarget = tar;\\n\\t\\tlet isNotTakenOver = true;\\n\\t\\tlet attemptCounter = 0;\\n\\n\\t\\tif (ns.getServerNumPortsRequired <= 5 && attemptCounter < 50) {\\n\\t\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\n\\t\\t\\t\\tattemptCounter++;\\n\\t\\t\\t}\\n\\n\\t\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.15,\"server\":\"blade\",\"moduleSequenceNumber\":760,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}}],\"serversOnNetwork\":[\"kuai-gong\",\"The-Cave\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":89,\"hackDifficulty\":89,\"minDifficulty\":30,\"moneyAvailable\":20833608380,\"moneyMax\":520840209500,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1068,\"serverGrowth\":79}},\"nwo\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-272514.cct\",\"type\":\"Sanitize Parentheses in Expression\",\"data\":\"((()(a)a(()))()a())\",\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"nwo\",\"httpPortOpen\":true,\"ip\":\"33.2.9.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"NWO\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Returns an array of all hostnames in the network tree\\n * \\n * @param {string[]} myServers\\n * @param {number} safetyCounter Prevents infnite recursion\\n * @param {NS} ns\\n */\\nexport async function getServerList(myServers, safetyCounter, ns) {\\n\\tlet srvrsSeen = myServers;\\n\\tlet currServScanResult = [];\\n\\n\\tfor (let serverSeen in srvrsSeen) {\\n\\t\\tcurrServScanResult = ns.scan(srvrsSeen[serverSeen]);\\n\\t\\tfor (let entry in currServScanResult) {\\n\\t\\t\\tif (!srvrsSeen.includes(currServScanResult[entry])) {\\n\\t\\t\\t\\tsrvrsSeen.push(currServScanResult[entry]);\\n\\t\\t\\t\\tif ((++safetyCounter) < 250) {\\n\\t\\t\\t\\t\\tawait getServerList(srvrsSeen, safetyCounter, ns);\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tns.exit();\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\t//Filter out invalid values (NaN, null, {}, undefined)\\n\\tsrvrsSeen = srvrsSeen.filter(x => x);\\n\\treturn srvrsSeen;\\n}\\n\\n\\n/** \\n * \\tAttempts to take over target machine\\t\\n * \\n *  @param {string} target\\n * \\t@param {NS} ns\\n *  @return {boolean} outcome \\n**/\\nexport async function takeover(target, ns) {\\n\\tconst home = \\\"home\\\";\\n\\tlet currentTarget = target;\\n\\tlet isNotTakenOver = true;\\n\\tlet attemptCounter = 0;\\n\\n\\tlet scripts = ns.ls(home, \\\".js\\\");\\n\\t//scripts.push(ns.ls(home, \\\".ns\\\")); //in case of deprecated .ns scripts\\n\\n\\tif (!ns.hasRootAccess(currentTarget) && attemptCounter < 30) {\\n\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\ttry {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t} catch (error) {\\n\\t\\t\\t\\t\\tns.tprint(\\\"not enough ports to nuke \\\" + currentTarget);\\n\\t\\t\\t\\t\\treturn false;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t}\\n\\t\\t\\tattemptCounter++;\\n\\t\\t}\\n\\n\\t\\tawait ns.scp(scripts, home, currentTarget);\\n\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\",\"filename\":\"/modules/helper.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"nwo\",\"moduleSequenceNumber\":761,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.grow(target);\\n\\t}\\n}\",\"filename\":\"basic-grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"nwo\",\"moduleSequenceNumber\":762,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"basic-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"nwo\",\"moduleSequenceNumber\":763,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(target);\\n\\t}\\n}\",\"filename\":\"basic-weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"nwo\",\"moduleSequenceNumber\":764,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerList, takeover } from \\\"modules/helper.js\\\";\\n\\n/** @param {NS} ns **/\\n// TODO: unused + unfinished, based on setup.ns\\nexport async function main(ns) {\\n\\tconst myServers = [\\\"home\\\"];\\n\\n\\tvar servers = await getServerList(myServers, 0, ns);\\n\\n\\tfor (let entry in servers) {\\t\\n\\t\\tawait takeover(servers[entry], ns);\\n\\t}\\n}\",\"filename\":\"deep-setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"nwo\",\"moduleSequenceNumber\":765,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\t//\\n}\",\"filename\":\"formulas-testing.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"nwo\",\"moduleSequenceNumber\":766,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tconst currentMachine = ns.getHostname();\\n\\tvar servers = ns.scan(currentMachine);\\n\\tvar scripts = ns.ls(home, \\\"basic-\\\");\\n\\n\\tns.tprint(\\\"Host:  \\\" + currentMachine);\\n\\tfor (let entry in servers) {\\t// depth 0\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\t// depth 1\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== home && subservers.length > 1) {\\n\\t\\t\\t\\tns.tprint(\\\"-----> \\\" + subservers[subentry]);\\n\\t\\t\\t\\tlet subserversd2 = ns.scan(subservers[subentry]); // depth 2\\n\\t\\t\\t\\tfor (let subentryd2 in subserversd2) {\\n\\t\\t\\t\\t\\tif (subserversd2[subentryd2] !== subservers[subentry] && subserversd2[subentryd2] !== servers[entry] && subserversd2.length > 1) {\\n\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------> \\\" + subserversd2[subentryd2]);\\n\\t\\t\\t\\t\\t\\tlet subserversd3 = ns.scan(subserversd2[subentryd2]);\\t// depth 3\\n\\t\\t\\t\\t\\t\\tfor (let subentryd3 in subserversd3) {\\n\\t\\t\\t\\t\\t\\t\\tif (subserversd3[subentryd3] !== subserversd2[subentryd2] && subserversd3[subentryd3] !== subservers[subentry] && subserversd3.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------> \\\" + subserversd3[subentryd3]);\\n\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd4 = ns.scan(subserversd3[subentryd3]);\\t// depth 4\\n\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd4 in subserversd4) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd4[subentryd4] !== subserversd3[subentryd3] && subserversd4[subentryd4] !== subserversd2[subentryd2] && subserversd4.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------------> \\\" + subserversd4[subentryd4]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd5 = ns.scan(subserversd4[subentryd4]);\\t// depth 5\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd5 in subserversd5) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd5[subentryd5] !== subserversd4[subentryd4] && subserversd5[subentryd5] !== subserversd3[subentryd3] && subserversd5.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-------------------------> \\\" + subserversd5[subentryd5]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd6 = ns.scan(subserversd5[subentryd5]);\\t// depth 6\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd6 in subserversd6) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd6[subentryd6] !== subserversd5[subentryd5] && subserversd6[subentryd6] !== subserversd4[subentryd4] && subserversd6.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"------------------------------> \\\" + subserversd6[subentryd6]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd7 = ns.scan(subserversd6[subentryd6]);\\t// depth 7\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor(let subentryd7 in subserversd7) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd7[subentryd7] !== subserversd6[subentryd6] && subserversd7[subentryd7] !== subserversd5[subentryd5] && subserversd7.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-----------------------------------> \\\" + subserversd7[subentryd7]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"gigascan.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.05,\"server\":\"nwo\",\"moduleSequenceNumber\":767,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet targetRam = ns.getServerMaxRam(ns.args[0]);\\n\\tlet scriptMem = ns.getScriptRam(ns.args[1]);\\n\\n\\tns.tprint(\\\"Maximum possible threads for \\\" + ns.args[1] + \\\": \\\" + Math.floor(targetRam / scriptMem));\\n\\tns.exit;\\n}\",\"filename\":\"ram-usage.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"nwo\",\"moduleSequenceNumber\":768,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerList } from \\\"modules/helper.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet serversSeen = [\\\"home\\\"]; // home + bought servers\\n\\tlet contractList = [];\\n\\n\\tserversSeen = await getServerList(serversSeen, 0, ns);\\n\\n\\tns.tprint(serversSeen);\\n}\",\"filename\":\"search-coding-contracts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"nwo\",\"moduleSequenceNumber\":769,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tvar servers = ns.scan(home);\\n\\tvar scripts = ns.ls(home, \\\".js\\\");\\n\\n\\tfor (let entry in scripts) {\\n\\t\\tns.tprint(\\\"found script: \\\" + scripts[entry]);\\n\\t}\\n\\n\\t// Hack servers (!!! depth = 2 !!!) if needed and populate with scripts\\n\\tfor (let entry in servers) {\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== \\\"home\\\") {\\n\\t\\t\\t\\tns.tprint(\\\"----->   \\\" + subservers[subentry]);\\n\\t\\t\\t\\tif (!ns.hasRootAccess(subservers[subentry])) {\\n\\t\\t\\t\\t\\ttakeover(subservers[subentry]);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tns.tprint(\\\"copying scripts to \\\" + subservers[subentry]);\\n\\t\\t\\t\\tawait ns.scp(scripts, home, subservers[subentry]);\\n\\t\\t\\t\\t//await ns.scp(\\\"setup.ns\\\", home, subservers[subentry]);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (!ns.hasRootAccess(servers[entry])) {\\n\\t\\t\\ttakeover(servers[entry]);\\n\\t\\t}\\n\\t\\tns.tprint(\\\"copying scripts to \\\" + servers[entry]);\\n\\t\\tawait ns.scp(scripts, home, servers[entry]);\\n\\t\\t//await ns.scp(\\\"setup.ns\\\", home, servers[entry]);\\n\\t}\\n\\n\\t/** \\n\\t * \\tAttempts to take over target machine\\t\\n\\t * \\n\\t *  @param {string} tar\\n\\t *  @return {boolean} outcome \\n\\t**/\\n\\tasync function takeover(tar) {\\n\\t\\tlet currentTarget = tar;\\n\\t\\tlet isNotTakenOver = true;\\n\\t\\tlet attemptCounter = 0;\\n\\n\\t\\tif (ns.getServerNumPortsRequired <= 5 && attemptCounter < 50) {\\n\\t\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\n\\t\\t\\t\\tattemptCounter++;\\n\\t\\t\\t}\\n\\n\\t\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.15,\"server\":\"nwo\",\"moduleSequenceNumber\":770,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}}],\"serversOnNetwork\":[\"omnitek\",\"fulcrumassets\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":37802834511,\"moneyMax\":945070862775,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1211,\"serverGrowth\":83}},\"clarkinc\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"clarkinc\",\"httpPortOpen\":true,\"ip\":\"38.9.6.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"beyond-man.lit\",\"cost-of-immortality.lit\"],\"organizationName\":\"Clarke Incorporated\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Returns an array of all hostnames in the network tree\\n * \\n * @param {string[]} myServers\\n * @param {number} safetyCounter Prevents infnite recursion\\n * @param {NS} ns\\n */\\nexport async function getServerList(myServers, safetyCounter, ns) {\\n\\tlet srvrsSeen = myServers;\\n\\tlet currServScanResult = [];\\n\\n\\tfor (let serverSeen in srvrsSeen) {\\n\\t\\tcurrServScanResult = ns.scan(srvrsSeen[serverSeen]);\\n\\t\\tfor (let entry in currServScanResult) {\\n\\t\\t\\tif (!srvrsSeen.includes(currServScanResult[entry])) {\\n\\t\\t\\t\\tsrvrsSeen.push(currServScanResult[entry]);\\n\\t\\t\\t\\tif ((++safetyCounter) < 250) {\\n\\t\\t\\t\\t\\tawait getServerList(srvrsSeen, safetyCounter, ns);\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tns.exit();\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\t//Filter out invalid values (NaN, null, {}, undefined)\\n\\tsrvrsSeen = srvrsSeen.filter(x => x);\\n\\treturn srvrsSeen;\\n}\\n\\n\\n/** \\n * \\tAttempts to take over target machine\\t\\n * \\n *  @param {string} target\\n * \\t@param {NS} ns\\n *  @return {boolean} outcome \\n**/\\nexport async function takeover(target, ns) {\\n\\tconst home = \\\"home\\\";\\n\\tlet currentTarget = target;\\n\\tlet isNotTakenOver = true;\\n\\tlet attemptCounter = 0;\\n\\n\\tlet scripts = ns.ls(home, \\\".js\\\");\\n\\t//scripts.push(ns.ls(home, \\\".ns\\\")); //in case of deprecated .ns scripts\\n\\n\\tif (!ns.hasRootAccess(currentTarget) && attemptCounter < 30) {\\n\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\ttry {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t} catch (error) {\\n\\t\\t\\t\\t\\tns.tprint(\\\"not enough ports to nuke \\\" + currentTarget);\\n\\t\\t\\t\\t\\treturn false;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t}\\n\\t\\t\\tattemptCounter++;\\n\\t\\t}\\n\\n\\t\\tawait ns.scp(scripts, home, currentTarget);\\n\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\",\"filename\":\"/modules/helper.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"clarkinc\",\"moduleSequenceNumber\":771,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.grow(target);\\n\\t}\\n}\",\"filename\":\"basic-grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"clarkinc\",\"moduleSequenceNumber\":772,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"basic-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"clarkinc\",\"moduleSequenceNumber\":773,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(target);\\n\\t}\\n}\",\"filename\":\"basic-weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"clarkinc\",\"moduleSequenceNumber\":774,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerList, takeover } from \\\"modules/helper.js\\\";\\n\\n/** @param {NS} ns **/\\n// TODO: unused + unfinished, based on setup.ns\\nexport async function main(ns) {\\n\\tconst myServers = [\\\"home\\\"];\\n\\n\\tvar servers = await getServerList(myServers, 0, ns);\\n\\n\\tfor (let entry in servers) {\\t\\n\\t\\tawait takeover(servers[entry], ns);\\n\\t}\\n}\",\"filename\":\"deep-setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"clarkinc\",\"moduleSequenceNumber\":775,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\t//\\n}\",\"filename\":\"formulas-testing.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"clarkinc\",\"moduleSequenceNumber\":776,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tconst currentMachine = ns.getHostname();\\n\\tvar servers = ns.scan(currentMachine);\\n\\tvar scripts = ns.ls(home, \\\"basic-\\\");\\n\\n\\tns.tprint(\\\"Host:  \\\" + currentMachine);\\n\\tfor (let entry in servers) {\\t// depth 0\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\t// depth 1\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== home && subservers.length > 1) {\\n\\t\\t\\t\\tns.tprint(\\\"-----> \\\" + subservers[subentry]);\\n\\t\\t\\t\\tlet subserversd2 = ns.scan(subservers[subentry]); // depth 2\\n\\t\\t\\t\\tfor (let subentryd2 in subserversd2) {\\n\\t\\t\\t\\t\\tif (subserversd2[subentryd2] !== subservers[subentry] && subserversd2[subentryd2] !== servers[entry] && subserversd2.length > 1) {\\n\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------> \\\" + subserversd2[subentryd2]);\\n\\t\\t\\t\\t\\t\\tlet subserversd3 = ns.scan(subserversd2[subentryd2]);\\t// depth 3\\n\\t\\t\\t\\t\\t\\tfor (let subentryd3 in subserversd3) {\\n\\t\\t\\t\\t\\t\\t\\tif (subserversd3[subentryd3] !== subserversd2[subentryd2] && subserversd3[subentryd3] !== subservers[subentry] && subserversd3.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------> \\\" + subserversd3[subentryd3]);\\n\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd4 = ns.scan(subserversd3[subentryd3]);\\t// depth 4\\n\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd4 in subserversd4) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd4[subentryd4] !== subserversd3[subentryd3] && subserversd4[subentryd4] !== subserversd2[subentryd2] && subserversd4.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------------> \\\" + subserversd4[subentryd4]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd5 = ns.scan(subserversd4[subentryd4]);\\t// depth 5\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd5 in subserversd5) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd5[subentryd5] !== subserversd4[subentryd4] && subserversd5[subentryd5] !== subserversd3[subentryd3] && subserversd5.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-------------------------> \\\" + subserversd5[subentryd5]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd6 = ns.scan(subserversd5[subentryd5]);\\t// depth 6\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd6 in subserversd6) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd6[subentryd6] !== subserversd5[subentryd5] && subserversd6[subentryd6] !== subserversd4[subentryd4] && subserversd6.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"------------------------------> \\\" + subserversd6[subentryd6]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd7 = ns.scan(subserversd6[subentryd6]);\\t// depth 7\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor(let subentryd7 in subserversd7) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd7[subentryd7] !== subserversd6[subentryd6] && subserversd7[subentryd7] !== subserversd5[subentryd5] && subserversd7.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-----------------------------------> \\\" + subserversd7[subentryd7]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"gigascan.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.05,\"server\":\"clarkinc\",\"moduleSequenceNumber\":777,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet targetRam = ns.getServerMaxRam(ns.args[0]);\\n\\tlet scriptMem = ns.getScriptRam(ns.args[1]);\\n\\n\\tns.tprint(\\\"Maximum possible threads for \\\" + ns.args[1] + \\\": \\\" + Math.floor(targetRam / scriptMem));\\n\\tns.exit;\\n}\",\"filename\":\"ram-usage.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"clarkinc\",\"moduleSequenceNumber\":778,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerList } from \\\"modules/helper.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet serversSeen = [\\\"home\\\"]; // home + bought servers\\n\\tlet contractList = [];\\n\\n\\tserversSeen = await getServerList(serversSeen, 0, ns);\\n\\n\\tns.tprint(serversSeen);\\n}\",\"filename\":\"search-coding-contracts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"clarkinc\",\"moduleSequenceNumber\":779,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tvar servers = ns.scan(home);\\n\\tvar scripts = ns.ls(home, \\\".js\\\");\\n\\n\\tfor (let entry in scripts) {\\n\\t\\tns.tprint(\\\"found script: \\\" + scripts[entry]);\\n\\t}\\n\\n\\t// Hack servers (!!! depth = 2 !!!) if needed and populate with scripts\\n\\tfor (let entry in servers) {\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== \\\"home\\\") {\\n\\t\\t\\t\\tns.tprint(\\\"----->   \\\" + subservers[subentry]);\\n\\t\\t\\t\\tif (!ns.hasRootAccess(subservers[subentry])) {\\n\\t\\t\\t\\t\\ttakeover(subservers[subentry]);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tns.tprint(\\\"copying scripts to \\\" + subservers[subentry]);\\n\\t\\t\\t\\tawait ns.scp(scripts, home, subservers[subentry]);\\n\\t\\t\\t\\t//await ns.scp(\\\"setup.ns\\\", home, subservers[subentry]);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (!ns.hasRootAccess(servers[entry])) {\\n\\t\\t\\ttakeover(servers[entry]);\\n\\t\\t}\\n\\t\\tns.tprint(\\\"copying scripts to \\\" + servers[entry]);\\n\\t\\tawait ns.scp(scripts, home, servers[entry]);\\n\\t\\t//await ns.scp(\\\"setup.ns\\\", home, servers[entry]);\\n\\t}\\n\\n\\t/** \\n\\t * \\tAttempts to take over target machine\\t\\n\\t * \\n\\t *  @param {string} tar\\n\\t *  @return {boolean} outcome \\n\\t**/\\n\\tasync function takeover(tar) {\\n\\t\\tlet currentTarget = tar;\\n\\t\\tlet isNotTakenOver = true;\\n\\t\\tlet attemptCounter = 0;\\n\\n\\t\\tif (ns.getServerNumPortsRequired <= 5 && attemptCounter < 50) {\\n\\t\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\n\\t\\t\\t\\tattemptCounter++;\\n\\t\\t\\t}\\n\\n\\t\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.15,\"server\":\"clarkinc\",\"moduleSequenceNumber\":780,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}}],\"serversOnNetwork\":[\"4sigma\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":56,\"hackDifficulty\":56,\"minDifficulty\":19,\"moneyAvailable\":19341601629,\"moneyMax\":483540040725,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1128,\"serverGrowth\":65}},\"omnitek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-843765-Netburners.cct\",\"type\":\"Spiralize Matrix\",\"data\":[[37,15],[14,15],[4,12],[7,19],[33,49],[47,26],[45,4],[26,29]],\"reward\":{\"name\":\"Netburners\",\"type\":0}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-113314.cct\",\"type\":\"Spiralize Matrix\",\"data\":[[20,13,48,25,37,38,28,8,33,36,33,3,30,4],[24,40,5,50,28,38,30,40,34,5,15,35,34,5],[11,3,46,42,5,27,2,49,33,29,37,33,16,36],[44,2,6,43,48,7,3,47,9,4,23,10,31,13],[34,2,34,43,15,23,38,17,22,46,6,31,43,9],[38,39,19,7,43,27,26,14,2,26,14,20,20,15],[30,18,14,49,4,16,38,13,20,32,7,3,44,27],[17,2,38,44,2,6,1,22,22,35,6,8,4,37],[15,47,10,44,42,19,7,4,21,37,2,22,18,2],[50,12,16,50,36,3,6,9,13,36,36,36,23,3],[29,11,32,15,29,17,43,40,29,42,36,3,2,18],[48,12,49,10,49,41,46,11,16,4,16,7,18,37],[19,17,36,23,12,33,11,5,37,28,2,24,18,42],[7,12,12,27,31,8,38,34,20,26,16,34,30,44]],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omnitek\",\"httpPortOpen\":true,\"ip\":\"31.0.4.8\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"coded-intelligence.lit\",\"history-of-synthoids.lit\"],\"organizationName\":\"OmniTek Incorporated\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Returns an array of all hostnames in the network tree\\n * \\n * @param {string[]} myServers\\n * @param {number} safetyCounter Prevents infnite recursion\\n * @param {NS} ns\\n */\\nexport async function getServerList(myServers, safetyCounter, ns) {\\n\\tlet srvrsSeen = myServers;\\n\\tlet currServScanResult = [];\\n\\n\\tfor (let serverSeen in srvrsSeen) {\\n\\t\\tcurrServScanResult = ns.scan(srvrsSeen[serverSeen]);\\n\\t\\tfor (let entry in currServScanResult) {\\n\\t\\t\\tif (!srvrsSeen.includes(currServScanResult[entry])) {\\n\\t\\t\\t\\tsrvrsSeen.push(currServScanResult[entry]);\\n\\t\\t\\t\\tif ((++safetyCounter) < 250) {\\n\\t\\t\\t\\t\\tawait getServerList(srvrsSeen, safetyCounter, ns);\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tns.exit();\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\t//Filter out invalid values (NaN, null, {}, undefined)\\n\\tsrvrsSeen = srvrsSeen.filter(x => x);\\n\\treturn srvrsSeen;\\n}\\n\\n\\n/** \\n * \\tAttempts to take over target machine\\t\\n * \\n *  @param {string} target\\n * \\t@param {NS} ns\\n *  @return {boolean} outcome \\n**/\\nexport async function takeover(target, ns) {\\n\\tconst home = \\\"home\\\";\\n\\tlet currentTarget = target;\\n\\tlet isNotTakenOver = true;\\n\\tlet attemptCounter = 0;\\n\\n\\tlet scripts = ns.ls(home, \\\".js\\\");\\n\\t//scripts.push(ns.ls(home, \\\".ns\\\")); //in case of deprecated .ns scripts\\n\\n\\tif (!ns.hasRootAccess(currentTarget) && attemptCounter < 30) {\\n\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\ttry {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t} catch (error) {\\n\\t\\t\\t\\t\\tns.tprint(\\\"not enough ports to nuke \\\" + currentTarget);\\n\\t\\t\\t\\t\\treturn false;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t}\\n\\t\\t\\tattemptCounter++;\\n\\t\\t}\\n\\n\\t\\tawait ns.scp(scripts, home, currentTarget);\\n\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\",\"filename\":\"/modules/helper.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"omnitek\",\"moduleSequenceNumber\":781,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.grow(target);\\n\\t}\\n}\",\"filename\":\"basic-grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"omnitek\",\"moduleSequenceNumber\":782,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"basic-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"omnitek\",\"moduleSequenceNumber\":783,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(target);\\n\\t}\\n}\",\"filename\":\"basic-weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"omnitek\",\"moduleSequenceNumber\":784,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerList, takeover } from \\\"modules/helper.js\\\";\\n\\n/** @param {NS} ns **/\\n// TODO: unused + unfinished, based on setup.ns\\nexport async function main(ns) {\\n\\tconst myServers = [\\\"home\\\"];\\n\\n\\tvar servers = await getServerList(myServers, 0, ns);\\n\\n\\tfor (let entry in servers) {\\t\\n\\t\\tawait takeover(servers[entry], ns);\\n\\t}\\n}\",\"filename\":\"deep-setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"omnitek\",\"moduleSequenceNumber\":785,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\t//\\n}\",\"filename\":\"formulas-testing.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"omnitek\",\"moduleSequenceNumber\":786,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tconst currentMachine = ns.getHostname();\\n\\tvar servers = ns.scan(currentMachine);\\n\\tvar scripts = ns.ls(home, \\\"basic-\\\");\\n\\n\\tns.tprint(\\\"Host:  \\\" + currentMachine);\\n\\tfor (let entry in servers) {\\t// depth 0\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\t// depth 1\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== home && subservers.length > 1) {\\n\\t\\t\\t\\tns.tprint(\\\"-----> \\\" + subservers[subentry]);\\n\\t\\t\\t\\tlet subserversd2 = ns.scan(subservers[subentry]); // depth 2\\n\\t\\t\\t\\tfor (let subentryd2 in subserversd2) {\\n\\t\\t\\t\\t\\tif (subserversd2[subentryd2] !== subservers[subentry] && subserversd2[subentryd2] !== servers[entry] && subserversd2.length > 1) {\\n\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------> \\\" + subserversd2[subentryd2]);\\n\\t\\t\\t\\t\\t\\tlet subserversd3 = ns.scan(subserversd2[subentryd2]);\\t// depth 3\\n\\t\\t\\t\\t\\t\\tfor (let subentryd3 in subserversd3) {\\n\\t\\t\\t\\t\\t\\t\\tif (subserversd3[subentryd3] !== subserversd2[subentryd2] && subserversd3[subentryd3] !== subservers[subentry] && subserversd3.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------> \\\" + subserversd3[subentryd3]);\\n\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd4 = ns.scan(subserversd3[subentryd3]);\\t// depth 4\\n\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd4 in subserversd4) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd4[subentryd4] !== subserversd3[subentryd3] && subserversd4[subentryd4] !== subserversd2[subentryd2] && subserversd4.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------------> \\\" + subserversd4[subentryd4]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd5 = ns.scan(subserversd4[subentryd4]);\\t// depth 5\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd5 in subserversd5) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd5[subentryd5] !== subserversd4[subentryd4] && subserversd5[subentryd5] !== subserversd3[subentryd3] && subserversd5.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-------------------------> \\\" + subserversd5[subentryd5]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd6 = ns.scan(subserversd5[subentryd5]);\\t// depth 6\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd6 in subserversd6) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd6[subentryd6] !== subserversd5[subentryd5] && subserversd6[subentryd6] !== subserversd4[subentryd4] && subserversd6.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"------------------------------> \\\" + subserversd6[subentryd6]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd7 = ns.scan(subserversd6[subentryd6]);\\t// depth 7\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor(let subentryd7 in subserversd7) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd7[subentryd7] !== subserversd6[subentryd6] && subserversd7[subentryd7] !== subserversd5[subentryd5] && subserversd7.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-----------------------------------> \\\" + subserversd7[subentryd7]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"gigascan.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.05,\"server\":\"omnitek\",\"moduleSequenceNumber\":787,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet targetRam = ns.getServerMaxRam(ns.args[0]);\\n\\tlet scriptMem = ns.getScriptRam(ns.args[1]);\\n\\n\\tns.tprint(\\\"Maximum possible threads for \\\" + ns.args[1] + \\\": \\\" + Math.floor(targetRam / scriptMem));\\n\\tns.exit;\\n}\",\"filename\":\"ram-usage.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"omnitek\",\"moduleSequenceNumber\":788,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerList } from \\\"modules/helper.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet serversSeen = [\\\"home\\\"]; // home + bought servers\\n\\tlet contractList = [];\\n\\n\\tserversSeen = await getServerList(serversSeen, 0, ns);\\n\\n\\tns.tprint(serversSeen);\\n}\",\"filename\":\"search-coding-contracts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"omnitek\",\"moduleSequenceNumber\":789,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tvar servers = ns.scan(home);\\n\\tvar scripts = ns.ls(home, \\\".js\\\");\\n\\n\\tfor (let entry in scripts) {\\n\\t\\tns.tprint(\\\"found script: \\\" + scripts[entry]);\\n\\t}\\n\\n\\t// Hack servers (!!! depth = 2 !!!) if needed and populate with scripts\\n\\tfor (let entry in servers) {\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== \\\"home\\\") {\\n\\t\\t\\t\\tns.tprint(\\\"----->   \\\" + subservers[subentry]);\\n\\t\\t\\t\\tif (!ns.hasRootAccess(subservers[subentry])) {\\n\\t\\t\\t\\t\\ttakeover(subservers[subentry]);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tns.tprint(\\\"copying scripts to \\\" + subservers[subentry]);\\n\\t\\t\\t\\tawait ns.scp(scripts, home, subservers[subentry]);\\n\\t\\t\\t\\t//await ns.scp(\\\"setup.ns\\\", home, subservers[subentry]);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (!ns.hasRootAccess(servers[entry])) {\\n\\t\\t\\ttakeover(servers[entry]);\\n\\t\\t}\\n\\t\\tns.tprint(\\\"copying scripts to \\\" + servers[entry]);\\n\\t\\tawait ns.scp(scripts, home, servers[entry]);\\n\\t\\t//await ns.scp(\\\"setup.ns\\\", home, servers[entry]);\\n\\t}\\n\\n\\t/** \\n\\t * \\tAttempts to take over target machine\\t\\n\\t * \\n\\t *  @param {string} tar\\n\\t *  @return {boolean} outcome \\n\\t**/\\n\\tasync function takeover(tar) {\\n\\t\\tlet currentTarget = tar;\\n\\t\\tlet isNotTakenOver = true;\\n\\t\\tlet attemptCounter = 0;\\n\\n\\t\\tif (ns.getServerNumPortsRequired <= 5 && attemptCounter < 50) {\\n\\t\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\n\\t\\t\\t\\tattemptCounter++;\\n\\t\\t\\t}\\n\\n\\t\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.15,\"server\":\"omnitek\",\"moduleSequenceNumber\":790,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}}],\"serversOnNetwork\":[\"stormtech\",\"nwo\",\"powerhouse-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":92,\"hackDifficulty\":92,\"minDifficulty\":31,\"moneyAvailable\":15083802046,\"moneyMax\":377095051150,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":937,\"serverGrowth\":99}},\"4sigma\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"4sigma\",\"httpPortOpen\":true,\"ip\":\"48.6.2.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Four Sigma\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Returns an array of all hostnames in the network tree\\n * \\n * @param {string[]} myServers\\n * @param {number} safetyCounter Prevents infnite recursion\\n * @param {NS} ns\\n */\\nexport async function getServerList(myServers, safetyCounter, ns) {\\n\\tlet srvrsSeen = myServers;\\n\\tlet currServScanResult = [];\\n\\n\\tfor (let serverSeen in srvrsSeen) {\\n\\t\\tcurrServScanResult = ns.scan(srvrsSeen[serverSeen]);\\n\\t\\tfor (let entry in currServScanResult) {\\n\\t\\t\\tif (!srvrsSeen.includes(currServScanResult[entry])) {\\n\\t\\t\\t\\tsrvrsSeen.push(currServScanResult[entry]);\\n\\t\\t\\t\\tif ((++safetyCounter) < 250) {\\n\\t\\t\\t\\t\\tawait getServerList(srvrsSeen, safetyCounter, ns);\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tns.exit();\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\t//Filter out invalid values (NaN, null, {}, undefined)\\n\\tsrvrsSeen = srvrsSeen.filter(x => x);\\n\\treturn srvrsSeen;\\n}\\n\\n\\n/** \\n * \\tAttempts to take over target machine\\t\\n * \\n *  @param {string} target\\n * \\t@param {NS} ns\\n *  @return {boolean} outcome \\n**/\\nexport async function takeover(target, ns) {\\n\\tconst home = \\\"home\\\";\\n\\tlet currentTarget = target;\\n\\tlet isNotTakenOver = true;\\n\\tlet attemptCounter = 0;\\n\\n\\tlet scripts = ns.ls(home, \\\".js\\\");\\n\\t//scripts.push(ns.ls(home, \\\".ns\\\")); //in case of deprecated .ns scripts\\n\\n\\tif (!ns.hasRootAccess(currentTarget) && attemptCounter < 30) {\\n\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\ttry {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t} catch (error) {\\n\\t\\t\\t\\t\\tns.tprint(\\\"not enough ports to nuke \\\" + currentTarget);\\n\\t\\t\\t\\t\\treturn false;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t}\\n\\t\\t\\tattemptCounter++;\\n\\t\\t}\\n\\n\\t\\tawait ns.scp(scripts, home, currentTarget);\\n\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\",\"filename\":\"/modules/helper.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"4sigma\",\"moduleSequenceNumber\":791,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.grow(target);\\n\\t}\\n}\",\"filename\":\"basic-grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"4sigma\",\"moduleSequenceNumber\":792,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"basic-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"4sigma\",\"moduleSequenceNumber\":793,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(target);\\n\\t}\\n}\",\"filename\":\"basic-weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"4sigma\",\"moduleSequenceNumber\":794,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerList, takeover } from \\\"modules/helper.js\\\";\\n\\n/** @param {NS} ns **/\\n// TODO: unused + unfinished, based on setup.ns\\nexport async function main(ns) {\\n\\tconst myServers = [\\\"home\\\"];\\n\\n\\tvar servers = await getServerList(myServers, 0, ns);\\n\\n\\tfor (let entry in servers) {\\t\\n\\t\\tawait takeover(servers[entry], ns);\\n\\t}\\n}\",\"filename\":\"deep-setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"4sigma\",\"moduleSequenceNumber\":795,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\t//\\n}\",\"filename\":\"formulas-testing.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"4sigma\",\"moduleSequenceNumber\":796,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tconst currentMachine = ns.getHostname();\\n\\tvar servers = ns.scan(currentMachine);\\n\\tvar scripts = ns.ls(home, \\\"basic-\\\");\\n\\n\\tns.tprint(\\\"Host:  \\\" + currentMachine);\\n\\tfor (let entry in servers) {\\t// depth 0\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\t// depth 1\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== home && subservers.length > 1) {\\n\\t\\t\\t\\tns.tprint(\\\"-----> \\\" + subservers[subentry]);\\n\\t\\t\\t\\tlet subserversd2 = ns.scan(subservers[subentry]); // depth 2\\n\\t\\t\\t\\tfor (let subentryd2 in subserversd2) {\\n\\t\\t\\t\\t\\tif (subserversd2[subentryd2] !== subservers[subentry] && subserversd2[subentryd2] !== servers[entry] && subserversd2.length > 1) {\\n\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------> \\\" + subserversd2[subentryd2]);\\n\\t\\t\\t\\t\\t\\tlet subserversd3 = ns.scan(subserversd2[subentryd2]);\\t// depth 3\\n\\t\\t\\t\\t\\t\\tfor (let subentryd3 in subserversd3) {\\n\\t\\t\\t\\t\\t\\t\\tif (subserversd3[subentryd3] !== subserversd2[subentryd2] && subserversd3[subentryd3] !== subservers[subentry] && subserversd3.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------> \\\" + subserversd3[subentryd3]);\\n\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd4 = ns.scan(subserversd3[subentryd3]);\\t// depth 4\\n\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd4 in subserversd4) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd4[subentryd4] !== subserversd3[subentryd3] && subserversd4[subentryd4] !== subserversd2[subentryd2] && subserversd4.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------------> \\\" + subserversd4[subentryd4]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd5 = ns.scan(subserversd4[subentryd4]);\\t// depth 5\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd5 in subserversd5) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd5[subentryd5] !== subserversd4[subentryd4] && subserversd5[subentryd5] !== subserversd3[subentryd3] && subserversd5.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-------------------------> \\\" + subserversd5[subentryd5]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd6 = ns.scan(subserversd5[subentryd5]);\\t// depth 6\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd6 in subserversd6) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd6[subentryd6] !== subserversd5[subentryd5] && subserversd6[subentryd6] !== subserversd4[subentryd4] && subserversd6.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"------------------------------> \\\" + subserversd6[subentryd6]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd7 = ns.scan(subserversd6[subentryd6]);\\t// depth 7\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor(let subentryd7 in subserversd7) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd7[subentryd7] !== subserversd6[subentryd6] && subserversd7[subentryd7] !== subserversd5[subentryd5] && subserversd7.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-----------------------------------> \\\" + subserversd7[subentryd7]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"gigascan.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.05,\"server\":\"4sigma\",\"moduleSequenceNumber\":797,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet targetRam = ns.getServerMaxRam(ns.args[0]);\\n\\tlet scriptMem = ns.getScriptRam(ns.args[1]);\\n\\n\\tns.tprint(\\\"Maximum possible threads for \\\" + ns.args[1] + \\\": \\\" + Math.floor(targetRam / scriptMem));\\n\\tns.exit;\\n}\",\"filename\":\"ram-usage.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"4sigma\",\"moduleSequenceNumber\":798,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerList } from \\\"modules/helper.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet serversSeen = [\\\"home\\\"]; // home + bought servers\\n\\tlet contractList = [];\\n\\n\\tserversSeen = await getServerList(serversSeen, 0, ns);\\n\\n\\tns.tprint(serversSeen);\\n}\",\"filename\":\"search-coding-contracts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"4sigma\",\"moduleSequenceNumber\":799,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tvar servers = ns.scan(home);\\n\\tvar scripts = ns.ls(home, \\\".js\\\");\\n\\n\\tfor (let entry in scripts) {\\n\\t\\tns.tprint(\\\"found script: \\\" + scripts[entry]);\\n\\t}\\n\\n\\t// Hack servers (!!! depth = 2 !!!) if needed and populate with scripts\\n\\tfor (let entry in servers) {\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== \\\"home\\\") {\\n\\t\\t\\t\\tns.tprint(\\\"----->   \\\" + subservers[subentry]);\\n\\t\\t\\t\\tif (!ns.hasRootAccess(subservers[subentry])) {\\n\\t\\t\\t\\t\\ttakeover(subservers[subentry]);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tns.tprint(\\\"copying scripts to \\\" + subservers[subentry]);\\n\\t\\t\\t\\tawait ns.scp(scripts, home, subservers[subentry]);\\n\\t\\t\\t\\t//await ns.scp(\\\"setup.ns\\\", home, subservers[subentry]);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (!ns.hasRootAccess(servers[entry])) {\\n\\t\\t\\ttakeover(servers[entry]);\\n\\t\\t}\\n\\t\\tns.tprint(\\\"copying scripts to \\\" + servers[entry]);\\n\\t\\tawait ns.scp(scripts, home, servers[entry]);\\n\\t\\t//await ns.scp(\\\"setup.ns\\\", home, servers[entry]);\\n\\t}\\n\\n\\t/** \\n\\t * \\tAttempts to take over target machine\\t\\n\\t * \\n\\t *  @param {string} tar\\n\\t *  @return {boolean} outcome \\n\\t**/\\n\\tasync function takeover(tar) {\\n\\t\\tlet currentTarget = tar;\\n\\t\\tlet isNotTakenOver = true;\\n\\t\\tlet attemptCounter = 0;\\n\\n\\t\\tif (ns.getServerNumPortsRequired <= 5 && attemptCounter < 50) {\\n\\t\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\n\\t\\t\\t\\tattemptCounter++;\\n\\t\\t\\t}\\n\\n\\t\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.15,\"server\":\"4sigma\",\"moduleSequenceNumber\":800,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}}],\"serversOnNetwork\":[\"vitalife\",\"clarkinc\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":74,\"hackDifficulty\":74,\"minDifficulty\":25,\"moneyAvailable\":16637368640,\"moneyMax\":415934216000,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1027,\"serverGrowth\":95}},\"kuai-gong\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-904831.cct\",\"type\":\"Generate IP Addresses\",\"data\":\"2551112995\",\"reward\":{\"name\":\"\",\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-797277.cct\",\"type\":\"Array Jumping Game\",\"data\":[0,10,10,2,5,10,9,9,5,0,1,2,1,0,0,7,5,8,4,3],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"kuai-gong\",\"httpPortOpen\":true,\"ip\":\"85.8.0.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"KuaiGong International\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Returns an array of all hostnames in the network tree\\n * \\n * @param {string[]} myServers\\n * @param {number} safetyCounter Prevents infnite recursion\\n * @param {NS} ns\\n */\\nexport async function getServerList(myServers, safetyCounter, ns) {\\n\\tlet srvrsSeen = myServers;\\n\\tlet currServScanResult = [];\\n\\n\\tfor (let serverSeen in srvrsSeen) {\\n\\t\\tcurrServScanResult = ns.scan(srvrsSeen[serverSeen]);\\n\\t\\tfor (let entry in currServScanResult) {\\n\\t\\t\\tif (!srvrsSeen.includes(currServScanResult[entry])) {\\n\\t\\t\\t\\tsrvrsSeen.push(currServScanResult[entry]);\\n\\t\\t\\t\\tif ((++safetyCounter) < 250) {\\n\\t\\t\\t\\t\\tawait getServerList(srvrsSeen, safetyCounter, ns);\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tns.exit();\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\t//Filter out invalid values (NaN, null, {}, undefined)\\n\\tsrvrsSeen = srvrsSeen.filter(x => x);\\n\\treturn srvrsSeen;\\n}\\n\\n\\n/** \\n * \\tAttempts to take over target machine\\t\\n * \\n *  @param {string} target\\n * \\t@param {NS} ns\\n *  @return {boolean} outcome \\n**/\\nexport async function takeover(target, ns) {\\n\\tconst home = \\\"home\\\";\\n\\tlet currentTarget = target;\\n\\tlet isNotTakenOver = true;\\n\\tlet attemptCounter = 0;\\n\\n\\tlet scripts = ns.ls(home, \\\".js\\\");\\n\\t//scripts.push(ns.ls(home, \\\".ns\\\")); //in case of deprecated .ns scripts\\n\\n\\tif (!ns.hasRootAccess(currentTarget) && attemptCounter < 30) {\\n\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\ttry {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t} catch (error) {\\n\\t\\t\\t\\t\\tns.tprint(\\\"not enough ports to nuke \\\" + currentTarget);\\n\\t\\t\\t\\t\\treturn false;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t}\\n\\t\\t\\tattemptCounter++;\\n\\t\\t}\\n\\n\\t\\tawait ns.scp(scripts, home, currentTarget);\\n\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\",\"filename\":\"/modules/helper.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"kuai-gong\",\"moduleSequenceNumber\":801,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.grow(target);\\n\\t}\\n}\",\"filename\":\"basic-grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"kuai-gong\",\"moduleSequenceNumber\":802,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"basic-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"kuai-gong\",\"moduleSequenceNumber\":803,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(target);\\n\\t}\\n}\",\"filename\":\"basic-weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"kuai-gong\",\"moduleSequenceNumber\":804,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerList, takeover } from \\\"modules/helper.js\\\";\\n\\n/** @param {NS} ns **/\\n// TODO: unused + unfinished, based on setup.ns\\nexport async function main(ns) {\\n\\tconst myServers = [\\\"home\\\"];\\n\\n\\tvar servers = await getServerList(myServers, 0, ns);\\n\\n\\tfor (let entry in servers) {\\t\\n\\t\\tawait takeover(servers[entry], ns);\\n\\t}\\n}\",\"filename\":\"deep-setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"kuai-gong\",\"moduleSequenceNumber\":805,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\t//\\n}\",\"filename\":\"formulas-testing.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"kuai-gong\",\"moduleSequenceNumber\":806,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tconst currentMachine = ns.getHostname();\\n\\tvar servers = ns.scan(currentMachine);\\n\\tvar scripts = ns.ls(home, \\\"basic-\\\");\\n\\n\\tns.tprint(\\\"Host:  \\\" + currentMachine);\\n\\tfor (let entry in servers) {\\t// depth 0\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\t// depth 1\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== home && subservers.length > 1) {\\n\\t\\t\\t\\tns.tprint(\\\"-----> \\\" + subservers[subentry]);\\n\\t\\t\\t\\tlet subserversd2 = ns.scan(subservers[subentry]); // depth 2\\n\\t\\t\\t\\tfor (let subentryd2 in subserversd2) {\\n\\t\\t\\t\\t\\tif (subserversd2[subentryd2] !== subservers[subentry] && subserversd2[subentryd2] !== servers[entry] && subserversd2.length > 1) {\\n\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------> \\\" + subserversd2[subentryd2]);\\n\\t\\t\\t\\t\\t\\tlet subserversd3 = ns.scan(subserversd2[subentryd2]);\\t// depth 3\\n\\t\\t\\t\\t\\t\\tfor (let subentryd3 in subserversd3) {\\n\\t\\t\\t\\t\\t\\t\\tif (subserversd3[subentryd3] !== subserversd2[subentryd2] && subserversd3[subentryd3] !== subservers[subentry] && subserversd3.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------> \\\" + subserversd3[subentryd3]);\\n\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd4 = ns.scan(subserversd3[subentryd3]);\\t// depth 4\\n\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd4 in subserversd4) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd4[subentryd4] !== subserversd3[subentryd3] && subserversd4[subentryd4] !== subserversd2[subentryd2] && subserversd4.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------------> \\\" + subserversd4[subentryd4]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd5 = ns.scan(subserversd4[subentryd4]);\\t// depth 5\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd5 in subserversd5) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd5[subentryd5] !== subserversd4[subentryd4] && subserversd5[subentryd5] !== subserversd3[subentryd3] && subserversd5.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-------------------------> \\\" + subserversd5[subentryd5]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd6 = ns.scan(subserversd5[subentryd5]);\\t// depth 6\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd6 in subserversd6) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd6[subentryd6] !== subserversd5[subentryd5] && subserversd6[subentryd6] !== subserversd4[subentryd4] && subserversd6.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"------------------------------> \\\" + subserversd6[subentryd6]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd7 = ns.scan(subserversd6[subentryd6]);\\t// depth 7\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor(let subentryd7 in subserversd7) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd7[subentryd7] !== subserversd6[subentryd6] && subserversd7[subentryd7] !== subserversd5[subentryd5] && subserversd7.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-----------------------------------> \\\" + subserversd7[subentryd7]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"gigascan.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.05,\"server\":\"kuai-gong\",\"moduleSequenceNumber\":807,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet targetRam = ns.getServerMaxRam(ns.args[0]);\\n\\tlet scriptMem = ns.getScriptRam(ns.args[1]);\\n\\n\\tns.tprint(\\\"Maximum possible threads for \\\" + ns.args[1] + \\\": \\\" + Math.floor(targetRam / scriptMem));\\n\\tns.exit;\\n}\",\"filename\":\"ram-usage.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"kuai-gong\",\"moduleSequenceNumber\":808,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerList } from \\\"modules/helper.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet serversSeen = [\\\"home\\\"]; // home + bought servers\\n\\tlet contractList = [];\\n\\n\\tserversSeen = await getServerList(serversSeen, 0, ns);\\n\\n\\tns.tprint(serversSeen);\\n}\",\"filename\":\"search-coding-contracts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"kuai-gong\",\"moduleSequenceNumber\":809,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tvar servers = ns.scan(home);\\n\\tvar scripts = ns.ls(home, \\\".js\\\");\\n\\n\\tfor (let entry in scripts) {\\n\\t\\tns.tprint(\\\"found script: \\\" + scripts[entry]);\\n\\t}\\n\\n\\t// Hack servers (!!! depth = 2 !!!) if needed and populate with scripts\\n\\tfor (let entry in servers) {\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== \\\"home\\\") {\\n\\t\\t\\t\\tns.tprint(\\\"----->   \\\" + subservers[subentry]);\\n\\t\\t\\t\\tif (!ns.hasRootAccess(subservers[subentry])) {\\n\\t\\t\\t\\t\\ttakeover(subservers[subentry]);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tns.tprint(\\\"copying scripts to \\\" + subservers[subentry]);\\n\\t\\t\\t\\tawait ns.scp(scripts, home, subservers[subentry]);\\n\\t\\t\\t\\t//await ns.scp(\\\"setup.ns\\\", home, subservers[subentry]);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (!ns.hasRootAccess(servers[entry])) {\\n\\t\\t\\ttakeover(servers[entry]);\\n\\t\\t}\\n\\t\\tns.tprint(\\\"copying scripts to \\\" + servers[entry]);\\n\\t\\tawait ns.scp(scripts, home, servers[entry]);\\n\\t\\t//await ns.scp(\\\"setup.ns\\\", home, servers[entry]);\\n\\t}\\n\\n\\t/** \\n\\t * \\tAttempts to take over target machine\\t\\n\\t * \\n\\t *  @param {string} tar\\n\\t *  @return {boolean} outcome \\n\\t**/\\n\\tasync function takeover(tar) {\\n\\t\\tlet currentTarget = tar;\\n\\t\\tlet isNotTakenOver = true;\\n\\t\\tlet attemptCounter = 0;\\n\\n\\t\\tif (ns.getServerNumPortsRequired <= 5 && attemptCounter < 50) {\\n\\t\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\n\\t\\t\\t\\tattemptCounter++;\\n\\t\\t\\t}\\n\\n\\t\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.15,\"server\":\"kuai-gong\",\"moduleSequenceNumber\":810,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}}],\"serversOnNetwork\":[\"vitalife\",\"b-and-a\",\"blade\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":21832554216,\"moneyMax\":545813855400,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1213,\"serverGrowth\":98}},\"fulcrumtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-697391.cct\",\"type\":\"Algorithmic Stock Trader I\",\"data\":[14,6,78,145,112,74,119,144,74,65,85,130,112],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"fulcrumtech\",\"httpPortOpen\":true,\"ip\":\"7.0.0.8\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Returns an array of all hostnames in the network tree\\n * \\n * @param {string[]} myServers\\n * @param {number} safetyCounter Prevents infnite recursion\\n * @param {NS} ns\\n */\\nexport async function getServerList(myServers, safetyCounter, ns) {\\n\\tlet srvrsSeen = myServers;\\n\\tlet currServScanResult = [];\\n\\n\\tfor (let serverSeen in srvrsSeen) {\\n\\t\\tcurrServScanResult = ns.scan(srvrsSeen[serverSeen]);\\n\\t\\tfor (let entry in currServScanResult) {\\n\\t\\t\\tif (!srvrsSeen.includes(currServScanResult[entry])) {\\n\\t\\t\\t\\tsrvrsSeen.push(currServScanResult[entry]);\\n\\t\\t\\t\\tif ((++safetyCounter) < 250) {\\n\\t\\t\\t\\t\\tawait getServerList(srvrsSeen, safetyCounter, ns);\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tns.exit();\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\t//Filter out invalid values (NaN, null, {}, undefined)\\n\\tsrvrsSeen = srvrsSeen.filter(x => x);\\n\\treturn srvrsSeen;\\n}\\n\\n\\n/** \\n * \\tAttempts to take over target machine\\t\\n * \\n *  @param {string} target\\n * \\t@param {NS} ns\\n *  @return {boolean} outcome \\n**/\\nexport async function takeover(target, ns) {\\n\\tconst home = \\\"home\\\";\\n\\tlet currentTarget = target;\\n\\tlet isNotTakenOver = true;\\n\\tlet attemptCounter = 0;\\n\\n\\tlet scripts = ns.ls(home, \\\".js\\\");\\n\\t//scripts.push(ns.ls(home, \\\".ns\\\")); //in case of deprecated .ns scripts\\n\\n\\tif (!ns.hasRootAccess(currentTarget) && attemptCounter < 30) {\\n\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\ttry {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t} catch (error) {\\n\\t\\t\\t\\t\\tns.tprint(\\\"not enough ports to nuke \\\" + currentTarget);\\n\\t\\t\\t\\t\\treturn false;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t}\\n\\t\\t\\tattemptCounter++;\\n\\t\\t}\\n\\n\\t\\tawait ns.scp(scripts, home, currentTarget);\\n\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\",\"filename\":\"/modules/helper.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"fulcrumtech\",\"moduleSequenceNumber\":811,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.grow(target);\\n\\t}\\n}\",\"filename\":\"basic-grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"fulcrumtech\",\"moduleSequenceNumber\":812,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"basic-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"fulcrumtech\",\"moduleSequenceNumber\":813,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(target);\\n\\t}\\n}\",\"filename\":\"basic-weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"fulcrumtech\",\"moduleSequenceNumber\":814,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerList, takeover } from \\\"modules/helper.js\\\";\\n\\n/** @param {NS} ns **/\\n// TODO: unused + unfinished, based on setup.ns\\nexport async function main(ns) {\\n\\tconst myServers = [\\\"home\\\"];\\n\\n\\tvar servers = await getServerList(myServers, 0, ns);\\n\\n\\tfor (let entry in servers) {\\t\\n\\t\\tawait takeover(servers[entry], ns);\\n\\t}\\n}\",\"filename\":\"deep-setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"fulcrumtech\",\"moduleSequenceNumber\":815,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\t//\\n}\",\"filename\":\"formulas-testing.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"fulcrumtech\",\"moduleSequenceNumber\":816,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tconst currentMachine = ns.getHostname();\\n\\tvar servers = ns.scan(currentMachine);\\n\\tvar scripts = ns.ls(home, \\\"basic-\\\");\\n\\n\\tns.tprint(\\\"Host:  \\\" + currentMachine);\\n\\tfor (let entry in servers) {\\t// depth 0\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\t// depth 1\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== home && subservers.length > 1) {\\n\\t\\t\\t\\tns.tprint(\\\"-----> \\\" + subservers[subentry]);\\n\\t\\t\\t\\tlet subserversd2 = ns.scan(subservers[subentry]); // depth 2\\n\\t\\t\\t\\tfor (let subentryd2 in subserversd2) {\\n\\t\\t\\t\\t\\tif (subserversd2[subentryd2] !== subservers[subentry] && subserversd2[subentryd2] !== servers[entry] && subserversd2.length > 1) {\\n\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------> \\\" + subserversd2[subentryd2]);\\n\\t\\t\\t\\t\\t\\tlet subserversd3 = ns.scan(subserversd2[subentryd2]);\\t// depth 3\\n\\t\\t\\t\\t\\t\\tfor (let subentryd3 in subserversd3) {\\n\\t\\t\\t\\t\\t\\t\\tif (subserversd3[subentryd3] !== subserversd2[subentryd2] && subserversd3[subentryd3] !== subservers[subentry] && subserversd3.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------> \\\" + subserversd3[subentryd3]);\\n\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd4 = ns.scan(subserversd3[subentryd3]);\\t// depth 4\\n\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd4 in subserversd4) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd4[subentryd4] !== subserversd3[subentryd3] && subserversd4[subentryd4] !== subserversd2[subentryd2] && subserversd4.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------------> \\\" + subserversd4[subentryd4]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd5 = ns.scan(subserversd4[subentryd4]);\\t// depth 5\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd5 in subserversd5) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd5[subentryd5] !== subserversd4[subentryd4] && subserversd5[subentryd5] !== subserversd3[subentryd3] && subserversd5.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-------------------------> \\\" + subserversd5[subentryd5]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd6 = ns.scan(subserversd5[subentryd5]);\\t// depth 6\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd6 in subserversd6) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd6[subentryd6] !== subserversd5[subentryd5] && subserversd6[subentryd6] !== subserversd4[subentryd4] && subserversd6.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"------------------------------> \\\" + subserversd6[subentryd6]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd7 = ns.scan(subserversd6[subentryd6]);\\t// depth 7\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor(let subentryd7 in subserversd7) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd7[subentryd7] !== subserversd6[subentryd6] && subserversd7[subentryd7] !== subserversd5[subentryd5] && subserversd7.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-----------------------------------> \\\" + subserversd7[subentryd7]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"gigascan.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.05,\"server\":\"fulcrumtech\",\"moduleSequenceNumber\":817,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet targetRam = ns.getServerMaxRam(ns.args[0]);\\n\\tlet scriptMem = ns.getScriptRam(ns.args[1]);\\n\\n\\tns.tprint(\\\"Maximum possible threads for \\\" + ns.args[1] + \\\": \\\" + Math.floor(targetRam / scriptMem));\\n\\tns.exit;\\n}\",\"filename\":\"ram-usage.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"fulcrumtech\",\"moduleSequenceNumber\":818,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerList } from \\\"modules/helper.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet serversSeen = [\\\"home\\\"]; // home + bought servers\\n\\tlet contractList = [];\\n\\n\\tserversSeen = await getServerList(serversSeen, 0, ns);\\n\\n\\tns.tprint(serversSeen);\\n}\",\"filename\":\"search-coding-contracts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"fulcrumtech\",\"moduleSequenceNumber\":819,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tvar servers = ns.scan(home);\\n\\tvar scripts = ns.ls(home, \\\".js\\\");\\n\\n\\tfor (let entry in scripts) {\\n\\t\\tns.tprint(\\\"found script: \\\" + scripts[entry]);\\n\\t}\\n\\n\\t// Hack servers (!!! depth = 2 !!!) if needed and populate with scripts\\n\\tfor (let entry in servers) {\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== \\\"home\\\") {\\n\\t\\t\\t\\tns.tprint(\\\"----->   \\\" + subservers[subentry]);\\n\\t\\t\\t\\tif (!ns.hasRootAccess(subservers[subentry])) {\\n\\t\\t\\t\\t\\ttakeover(subservers[subentry]);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tns.tprint(\\\"copying scripts to \\\" + subservers[subentry]);\\n\\t\\t\\t\\tawait ns.scp(scripts, home, subservers[subentry]);\\n\\t\\t\\t\\t//await ns.scp(\\\"setup.ns\\\", home, subservers[subentry]);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (!ns.hasRootAccess(servers[entry])) {\\n\\t\\t\\ttakeover(servers[entry]);\\n\\t\\t}\\n\\t\\tns.tprint(\\\"copying scripts to \\\" + servers[entry]);\\n\\t\\tawait ns.scp(scripts, home, servers[entry]);\\n\\t\\t//await ns.scp(\\\"setup.ns\\\", home, servers[entry]);\\n\\t}\\n\\n\\t/** \\n\\t * \\tAttempts to take over target machine\\t\\n\\t * \\n\\t *  @param {string} tar\\n\\t *  @return {boolean} outcome \\n\\t**/\\n\\tasync function takeover(tar) {\\n\\t\\tlet currentTarget = tar;\\n\\t\\tlet isNotTakenOver = true;\\n\\t\\tlet attemptCounter = 0;\\n\\n\\t\\tif (ns.getServerNumPortsRequired <= 5 && attemptCounter < 50) {\\n\\t\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\n\\t\\t\\t\\tattemptCounter++;\\n\\t\\t\\t}\\n\\n\\t\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.15,\"server\":\"fulcrumtech\",\"moduleSequenceNumber\":820,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}}],\"serversOnNetwork\":[\"microdyne\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":94,\"hackDifficulty\":94,\"minDifficulty\":31,\"moneyAvailable\":1430617538,\"moneyMax\":35765438450,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1103,\"serverGrowth\":82}},\"fulcrumassets\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-937855.cct\",\"type\":\"Find All Valid Math Expressions\",\"data\":[\"76925826657\",-30],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"fulcrumassets\",\"httpPortOpen\":true,\"ip\":\"37.0.4.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Returns an array of all hostnames in the network tree\\n * \\n * @param {string[]} myServers\\n * @param {number} safetyCounter Prevents infnite recursion\\n * @param {NS} ns\\n */\\nexport async function getServerList(myServers, safetyCounter, ns) {\\n\\tlet srvrsSeen = myServers;\\n\\tlet currServScanResult = [];\\n\\n\\tfor (let serverSeen in srvrsSeen) {\\n\\t\\tcurrServScanResult = ns.scan(srvrsSeen[serverSeen]);\\n\\t\\tfor (let entry in currServScanResult) {\\n\\t\\t\\tif (!srvrsSeen.includes(currServScanResult[entry])) {\\n\\t\\t\\t\\tsrvrsSeen.push(currServScanResult[entry]);\\n\\t\\t\\t\\tif ((++safetyCounter) < 250) {\\n\\t\\t\\t\\t\\tawait getServerList(srvrsSeen, safetyCounter, ns);\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tns.exit();\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\t//Filter out invalid values (NaN, null, {}, undefined)\\n\\tsrvrsSeen = srvrsSeen.filter(x => x);\\n\\treturn srvrsSeen;\\n}\\n\\n\\n/** \\n * \\tAttempts to take over target machine\\t\\n * \\n *  @param {string} target\\n * \\t@param {NS} ns\\n *  @return {boolean} outcome \\n**/\\nexport async function takeover(target, ns) {\\n\\tconst home = \\\"home\\\";\\n\\tlet currentTarget = target;\\n\\tlet isNotTakenOver = true;\\n\\tlet attemptCounter = 0;\\n\\n\\tlet scripts = ns.ls(home, \\\".js\\\");\\n\\t//scripts.push(ns.ls(home, \\\".ns\\\")); //in case of deprecated .ns scripts\\n\\n\\tif (!ns.hasRootAccess(currentTarget) && attemptCounter < 30) {\\n\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\ttry {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t} catch (error) {\\n\\t\\t\\t\\t\\tns.tprint(\\\"not enough ports to nuke \\\" + currentTarget);\\n\\t\\t\\t\\t\\treturn false;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t}\\n\\t\\t\\tattemptCounter++;\\n\\t\\t}\\n\\n\\t\\tawait ns.scp(scripts, home, currentTarget);\\n\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\",\"filename\":\"/modules/helper.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"fulcrumassets\",\"moduleSequenceNumber\":821,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.grow(target);\\n\\t}\\n}\",\"filename\":\"basic-grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"fulcrumassets\",\"moduleSequenceNumber\":822,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"basic-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"fulcrumassets\",\"moduleSequenceNumber\":823,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(target);\\n\\t}\\n}\",\"filename\":\"basic-weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"fulcrumassets\",\"moduleSequenceNumber\":824,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerList, takeover } from \\\"modules/helper.js\\\";\\n\\n/** @param {NS} ns **/\\n// TODO: unused + unfinished, based on setup.ns\\nexport async function main(ns) {\\n\\tconst myServers = [\\\"home\\\"];\\n\\n\\tvar servers = await getServerList(myServers, 0, ns);\\n\\n\\tfor (let entry in servers) {\\t\\n\\t\\tawait takeover(servers[entry], ns);\\n\\t}\\n}\",\"filename\":\"deep-setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"fulcrumassets\",\"moduleSequenceNumber\":825,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\t//\\n}\",\"filename\":\"formulas-testing.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"fulcrumassets\",\"moduleSequenceNumber\":826,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tconst currentMachine = ns.getHostname();\\n\\tvar servers = ns.scan(currentMachine);\\n\\tvar scripts = ns.ls(home, \\\"basic-\\\");\\n\\n\\tns.tprint(\\\"Host:  \\\" + currentMachine);\\n\\tfor (let entry in servers) {\\t// depth 0\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\t// depth 1\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== home && subservers.length > 1) {\\n\\t\\t\\t\\tns.tprint(\\\"-----> \\\" + subservers[subentry]);\\n\\t\\t\\t\\tlet subserversd2 = ns.scan(subservers[subentry]); // depth 2\\n\\t\\t\\t\\tfor (let subentryd2 in subserversd2) {\\n\\t\\t\\t\\t\\tif (subserversd2[subentryd2] !== subservers[subentry] && subserversd2[subentryd2] !== servers[entry] && subserversd2.length > 1) {\\n\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------> \\\" + subserversd2[subentryd2]);\\n\\t\\t\\t\\t\\t\\tlet subserversd3 = ns.scan(subserversd2[subentryd2]);\\t// depth 3\\n\\t\\t\\t\\t\\t\\tfor (let subentryd3 in subserversd3) {\\n\\t\\t\\t\\t\\t\\t\\tif (subserversd3[subentryd3] !== subserversd2[subentryd2] && subserversd3[subentryd3] !== subservers[subentry] && subserversd3.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------> \\\" + subserversd3[subentryd3]);\\n\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd4 = ns.scan(subserversd3[subentryd3]);\\t// depth 4\\n\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd4 in subserversd4) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd4[subentryd4] !== subserversd3[subentryd3] && subserversd4[subentryd4] !== subserversd2[subentryd2] && subserversd4.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------------> \\\" + subserversd4[subentryd4]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd5 = ns.scan(subserversd4[subentryd4]);\\t// depth 5\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd5 in subserversd5) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd5[subentryd5] !== subserversd4[subentryd4] && subserversd5[subentryd5] !== subserversd3[subentryd3] && subserversd5.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-------------------------> \\\" + subserversd5[subentryd5]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd6 = ns.scan(subserversd5[subentryd5]);\\t// depth 6\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd6 in subserversd6) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd6[subentryd6] !== subserversd5[subentryd5] && subserversd6[subentryd6] !== subserversd4[subentryd4] && subserversd6.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"------------------------------> \\\" + subserversd6[subentryd6]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd7 = ns.scan(subserversd6[subentryd6]);\\t// depth 7\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor(let subentryd7 in subserversd7) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd7[subentryd7] !== subserversd6[subentryd6] && subserversd7[subentryd7] !== subserversd5[subentryd5] && subserversd7.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-----------------------------------> \\\" + subserversd7[subentryd7]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"gigascan.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.05,\"server\":\"fulcrumassets\",\"moduleSequenceNumber\":827,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet targetRam = ns.getServerMaxRam(ns.args[0]);\\n\\tlet scriptMem = ns.getScriptRam(ns.args[1]);\\n\\n\\tns.tprint(\\\"Maximum possible threads for \\\" + ns.args[1] + \\\": \\\" + Math.floor(targetRam / scriptMem));\\n\\tns.exit;\\n}\",\"filename\":\"ram-usage.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"fulcrumassets\",\"moduleSequenceNumber\":828,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerList } from \\\"modules/helper.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet serversSeen = [\\\"home\\\"]; // home + bought servers\\n\\tlet contractList = [];\\n\\n\\tserversSeen = await getServerList(serversSeen, 0, ns);\\n\\n\\tns.tprint(serversSeen);\\n}\",\"filename\":\"search-coding-contracts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"fulcrumassets\",\"moduleSequenceNumber\":829,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tvar servers = ns.scan(home);\\n\\tvar scripts = ns.ls(home, \\\".js\\\");\\n\\n\\tfor (let entry in scripts) {\\n\\t\\tns.tprint(\\\"found script: \\\" + scripts[entry]);\\n\\t}\\n\\n\\t// Hack servers (!!! depth = 2 !!!) if needed and populate with scripts\\n\\tfor (let entry in servers) {\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== \\\"home\\\") {\\n\\t\\t\\t\\tns.tprint(\\\"----->   \\\" + subservers[subentry]);\\n\\t\\t\\t\\tif (!ns.hasRootAccess(subservers[subentry])) {\\n\\t\\t\\t\\t\\ttakeover(subservers[subentry]);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tns.tprint(\\\"copying scripts to \\\" + subservers[subentry]);\\n\\t\\t\\t\\tawait ns.scp(scripts, home, subservers[subentry]);\\n\\t\\t\\t\\t//await ns.scp(\\\"setup.ns\\\", home, subservers[subentry]);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (!ns.hasRootAccess(servers[entry])) {\\n\\t\\t\\ttakeover(servers[entry]);\\n\\t\\t}\\n\\t\\tns.tprint(\\\"copying scripts to \\\" + servers[entry]);\\n\\t\\tawait ns.scp(scripts, home, servers[entry]);\\n\\t\\t//await ns.scp(\\\"setup.ns\\\", home, servers[entry]);\\n\\t}\\n\\n\\t/** \\n\\t * \\tAttempts to take over target machine\\t\\n\\t * \\n\\t *  @param {string} tar\\n\\t *  @return {boolean} outcome \\n\\t**/\\n\\tasync function takeover(tar) {\\n\\t\\tlet currentTarget = tar;\\n\\t\\tlet isNotTakenOver = true;\\n\\t\\tlet attemptCounter = 0;\\n\\n\\t\\tif (ns.getServerNumPortsRequired <= 5 && attemptCounter < 50) {\\n\\t\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\n\\t\\t\\t\\tattemptCounter++;\\n\\t\\t\\t}\\n\\n\\t\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.15,\"server\":\"fulcrumassets\",\"moduleSequenceNumber\":830,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}}],\"serversOnNetwork\":[\"nwo\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":1000000,\"moneyMax\":25000000,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1189,\"serverGrowth\":1}},\"stormtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-573527.cct\",\"type\":\"Array Jumping Game\",\"data\":[0,9,1,0,1,1],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"stormtech\",\"httpPortOpen\":true,\"ip\":\"57.5.3.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Storm Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Returns an array of all hostnames in the network tree\\n * \\n * @param {string[]} myServers\\n * @param {number} safetyCounter Prevents infnite recursion\\n * @param {NS} ns\\n */\\nexport async function getServerList(myServers, safetyCounter, ns) {\\n\\tlet srvrsSeen = myServers;\\n\\tlet currServScanResult = [];\\n\\n\\tfor (let serverSeen in srvrsSeen) {\\n\\t\\tcurrServScanResult = ns.scan(srvrsSeen[serverSeen]);\\n\\t\\tfor (let entry in currServScanResult) {\\n\\t\\t\\tif (!srvrsSeen.includes(currServScanResult[entry])) {\\n\\t\\t\\t\\tsrvrsSeen.push(currServScanResult[entry]);\\n\\t\\t\\t\\tif ((++safetyCounter) < 250) {\\n\\t\\t\\t\\t\\tawait getServerList(srvrsSeen, safetyCounter, ns);\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tns.exit();\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\t//Filter out invalid values (NaN, null, {}, undefined)\\n\\tsrvrsSeen = srvrsSeen.filter(x => x);\\n\\treturn srvrsSeen;\\n}\\n\\n\\n/** \\n * \\tAttempts to take over target machine\\t\\n * \\n *  @param {string} target\\n * \\t@param {NS} ns\\n *  @return {boolean} outcome \\n**/\\nexport async function takeover(target, ns) {\\n\\tconst home = \\\"home\\\";\\n\\tlet currentTarget = target;\\n\\tlet isNotTakenOver = true;\\n\\tlet attemptCounter = 0;\\n\\n\\tlet scripts = ns.ls(home, \\\".js\\\");\\n\\t//scripts.push(ns.ls(home, \\\".ns\\\")); //in case of deprecated .ns scripts\\n\\n\\tif (!ns.hasRootAccess(currentTarget) && attemptCounter < 30) {\\n\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\ttry {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t} catch (error) {\\n\\t\\t\\t\\t\\tns.tprint(\\\"not enough ports to nuke \\\" + currentTarget);\\n\\t\\t\\t\\t\\treturn false;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t}\\n\\t\\t\\tattemptCounter++;\\n\\t\\t}\\n\\n\\t\\tawait ns.scp(scripts, home, currentTarget);\\n\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\",\"filename\":\"/modules/helper.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"stormtech\",\"moduleSequenceNumber\":831,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.grow(target);\\n\\t}\\n}\",\"filename\":\"basic-grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"stormtech\",\"moduleSequenceNumber\":832,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"basic-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"stormtech\",\"moduleSequenceNumber\":833,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(target);\\n\\t}\\n}\",\"filename\":\"basic-weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"stormtech\",\"moduleSequenceNumber\":834,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerList, takeover } from \\\"modules/helper.js\\\";\\n\\n/** @param {NS} ns **/\\n// TODO: unused + unfinished, based on setup.ns\\nexport async function main(ns) {\\n\\tconst myServers = [\\\"home\\\"];\\n\\n\\tvar servers = await getServerList(myServers, 0, ns);\\n\\n\\tfor (let entry in servers) {\\t\\n\\t\\tawait takeover(servers[entry], ns);\\n\\t}\\n}\",\"filename\":\"deep-setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"stormtech\",\"moduleSequenceNumber\":835,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\t//\\n}\",\"filename\":\"formulas-testing.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"stormtech\",\"moduleSequenceNumber\":836,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tconst currentMachine = ns.getHostname();\\n\\tvar servers = ns.scan(currentMachine);\\n\\tvar scripts = ns.ls(home, \\\"basic-\\\");\\n\\n\\tns.tprint(\\\"Host:  \\\" + currentMachine);\\n\\tfor (let entry in servers) {\\t// depth 0\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\t// depth 1\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== home && subservers.length > 1) {\\n\\t\\t\\t\\tns.tprint(\\\"-----> \\\" + subservers[subentry]);\\n\\t\\t\\t\\tlet subserversd2 = ns.scan(subservers[subentry]); // depth 2\\n\\t\\t\\t\\tfor (let subentryd2 in subserversd2) {\\n\\t\\t\\t\\t\\tif (subserversd2[subentryd2] !== subservers[subentry] && subserversd2[subentryd2] !== servers[entry] && subserversd2.length > 1) {\\n\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------> \\\" + subserversd2[subentryd2]);\\n\\t\\t\\t\\t\\t\\tlet subserversd3 = ns.scan(subserversd2[subentryd2]);\\t// depth 3\\n\\t\\t\\t\\t\\t\\tfor (let subentryd3 in subserversd3) {\\n\\t\\t\\t\\t\\t\\t\\tif (subserversd3[subentryd3] !== subserversd2[subentryd2] && subserversd3[subentryd3] !== subservers[subentry] && subserversd3.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------> \\\" + subserversd3[subentryd3]);\\n\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd4 = ns.scan(subserversd3[subentryd3]);\\t// depth 4\\n\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd4 in subserversd4) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd4[subentryd4] !== subserversd3[subentryd3] && subserversd4[subentryd4] !== subserversd2[subentryd2] && subserversd4.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------------> \\\" + subserversd4[subentryd4]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd5 = ns.scan(subserversd4[subentryd4]);\\t// depth 5\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd5 in subserversd5) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd5[subentryd5] !== subserversd4[subentryd4] && subserversd5[subentryd5] !== subserversd3[subentryd3] && subserversd5.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-------------------------> \\\" + subserversd5[subentryd5]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd6 = ns.scan(subserversd5[subentryd5]);\\t// depth 6\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd6 in subserversd6) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd6[subentryd6] !== subserversd5[subentryd5] && subserversd6[subentryd6] !== subserversd4[subentryd4] && subserversd6.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"------------------------------> \\\" + subserversd6[subentryd6]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd7 = ns.scan(subserversd6[subentryd6]);\\t// depth 7\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor(let subentryd7 in subserversd7) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd7[subentryd7] !== subserversd6[subentryd6] && subserversd7[subentryd7] !== subserversd5[subentryd5] && subserversd7.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-----------------------------------> \\\" + subserversd7[subentryd7]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"gigascan.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.05,\"server\":\"stormtech\",\"moduleSequenceNumber\":837,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet targetRam = ns.getServerMaxRam(ns.args[0]);\\n\\tlet scriptMem = ns.getScriptRam(ns.args[1]);\\n\\n\\tns.tprint(\\\"Maximum possible threads for \\\" + ns.args[1] + \\\": \\\" + Math.floor(targetRam / scriptMem));\\n\\tns.exit;\\n}\",\"filename\":\"ram-usage.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"stormtech\",\"moduleSequenceNumber\":838,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerList } from \\\"modules/helper.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet serversSeen = [\\\"home\\\"]; // home + bought servers\\n\\tlet contractList = [];\\n\\n\\tserversSeen = await getServerList(serversSeen, 0, ns);\\n\\n\\tns.tprint(serversSeen);\\n}\",\"filename\":\"search-coding-contracts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"stormtech\",\"moduleSequenceNumber\":839,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tvar servers = ns.scan(home);\\n\\tvar scripts = ns.ls(home, \\\".js\\\");\\n\\n\\tfor (let entry in scripts) {\\n\\t\\tns.tprint(\\\"found script: \\\" + scripts[entry]);\\n\\t}\\n\\n\\t// Hack servers (!!! depth = 2 !!!) if needed and populate with scripts\\n\\tfor (let entry in servers) {\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== \\\"home\\\") {\\n\\t\\t\\t\\tns.tprint(\\\"----->   \\\" + subservers[subentry]);\\n\\t\\t\\t\\tif (!ns.hasRootAccess(subservers[subentry])) {\\n\\t\\t\\t\\t\\ttakeover(subservers[subentry]);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tns.tprint(\\\"copying scripts to \\\" + subservers[subentry]);\\n\\t\\t\\t\\tawait ns.scp(scripts, home, subservers[subentry]);\\n\\t\\t\\t\\t//await ns.scp(\\\"setup.ns\\\", home, subservers[subentry]);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (!ns.hasRootAccess(servers[entry])) {\\n\\t\\t\\ttakeover(servers[entry]);\\n\\t\\t}\\n\\t\\tns.tprint(\\\"copying scripts to \\\" + servers[entry]);\\n\\t\\tawait ns.scp(scripts, home, servers[entry]);\\n\\t\\t//await ns.scp(\\\"setup.ns\\\", home, servers[entry]);\\n\\t}\\n\\n\\t/** \\n\\t * \\tAttempts to take over target machine\\t\\n\\t * \\n\\t *  @param {string} tar\\n\\t *  @return {boolean} outcome \\n\\t**/\\n\\tasync function takeover(tar) {\\n\\t\\tlet currentTarget = tar;\\n\\t\\tlet isNotTakenOver = true;\\n\\t\\tlet attemptCounter = 0;\\n\\n\\t\\tif (ns.getServerNumPortsRequired <= 5 && attemptCounter < 50) {\\n\\t\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\n\\t\\t\\t\\tattemptCounter++;\\n\\t\\t\\t}\\n\\n\\t\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.15,\"server\":\"stormtech\",\"moduleSequenceNumber\":840,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}}],\"serversOnNetwork\":[\"run4theh111z\",\"omnitek\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":85,\"hackDifficulty\":85,\"minDifficulty\":28,\"moneyAvailable\":1054925894,\"moneyMax\":26373147350,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":993,\"serverGrowth\":91}},\"defcomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-196677.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[156,74,159,173,134,93,76,92],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"defcomm\",\"httpPortOpen\":true,\"ip\":\"87.1.3.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DefComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Returns an array of all hostnames in the network tree\\n * \\n * @param {string[]} myServers\\n * @param {number} safetyCounter Prevents infnite recursion\\n * @param {NS} ns\\n */\\nexport async function getServerList(myServers, safetyCounter, ns) {\\n\\tlet srvrsSeen = myServers;\\n\\tlet currServScanResult = [];\\n\\n\\tfor (let serverSeen in srvrsSeen) {\\n\\t\\tcurrServScanResult = ns.scan(srvrsSeen[serverSeen]);\\n\\t\\tfor (let entry in currServScanResult) {\\n\\t\\t\\tif (!srvrsSeen.includes(currServScanResult[entry])) {\\n\\t\\t\\t\\tsrvrsSeen.push(currServScanResult[entry]);\\n\\t\\t\\t\\tif ((++safetyCounter) < 250) {\\n\\t\\t\\t\\t\\tawait getServerList(srvrsSeen, safetyCounter, ns);\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tns.exit();\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\t//Filter out invalid values (NaN, null, {}, undefined)\\n\\tsrvrsSeen = srvrsSeen.filter(x => x);\\n\\treturn srvrsSeen;\\n}\\n\\n\\n/** \\n * \\tAttempts to take over target machine\\t\\n * \\n *  @param {string} target\\n * \\t@param {NS} ns\\n *  @return {boolean} outcome \\n**/\\nexport async function takeover(target, ns) {\\n\\tconst home = \\\"home\\\";\\n\\tlet currentTarget = target;\\n\\tlet isNotTakenOver = true;\\n\\tlet attemptCounter = 0;\\n\\n\\tlet scripts = ns.ls(home, \\\".js\\\");\\n\\t//scripts.push(ns.ls(home, \\\".ns\\\")); //in case of deprecated .ns scripts\\n\\n\\tif (!ns.hasRootAccess(currentTarget) && attemptCounter < 30) {\\n\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\ttry {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t} catch (error) {\\n\\t\\t\\t\\t\\tns.tprint(\\\"not enough ports to nuke \\\" + currentTarget);\\n\\t\\t\\t\\t\\treturn false;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t}\\n\\t\\t\\tattemptCounter++;\\n\\t\\t}\\n\\n\\t\\tawait ns.scp(scripts, home, currentTarget);\\n\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\",\"filename\":\"/modules/helper.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"defcomm\",\"moduleSequenceNumber\":841,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.grow(target);\\n\\t}\\n}\",\"filename\":\"basic-grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"defcomm\",\"moduleSequenceNumber\":842,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"basic-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"defcomm\",\"moduleSequenceNumber\":843,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(target);\\n\\t}\\n}\",\"filename\":\"basic-weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"defcomm\",\"moduleSequenceNumber\":844,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerList, takeover } from \\\"modules/helper.js\\\";\\n\\n/** @param {NS} ns **/\\n// TODO: unused + unfinished, based on setup.ns\\nexport async function main(ns) {\\n\\tconst myServers = [\\\"home\\\"];\\n\\n\\tvar servers = await getServerList(myServers, 0, ns);\\n\\n\\tfor (let entry in servers) {\\t\\n\\t\\tawait takeover(servers[entry], ns);\\n\\t}\\n}\",\"filename\":\"deep-setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"defcomm\",\"moduleSequenceNumber\":845,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\t//\\n}\",\"filename\":\"formulas-testing.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"defcomm\",\"moduleSequenceNumber\":846,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tconst currentMachine = ns.getHostname();\\n\\tvar servers = ns.scan(currentMachine);\\n\\tvar scripts = ns.ls(home, \\\"basic-\\\");\\n\\n\\tns.tprint(\\\"Host:  \\\" + currentMachine);\\n\\tfor (let entry in servers) {\\t// depth 0\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\t// depth 1\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== home && subservers.length > 1) {\\n\\t\\t\\t\\tns.tprint(\\\"-----> \\\" + subservers[subentry]);\\n\\t\\t\\t\\tlet subserversd2 = ns.scan(subservers[subentry]); // depth 2\\n\\t\\t\\t\\tfor (let subentryd2 in subserversd2) {\\n\\t\\t\\t\\t\\tif (subserversd2[subentryd2] !== subservers[subentry] && subserversd2[subentryd2] !== servers[entry] && subserversd2.length > 1) {\\n\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------> \\\" + subserversd2[subentryd2]);\\n\\t\\t\\t\\t\\t\\tlet subserversd3 = ns.scan(subserversd2[subentryd2]);\\t// depth 3\\n\\t\\t\\t\\t\\t\\tfor (let subentryd3 in subserversd3) {\\n\\t\\t\\t\\t\\t\\t\\tif (subserversd3[subentryd3] !== subserversd2[subentryd2] && subserversd3[subentryd3] !== subservers[subentry] && subserversd3.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------> \\\" + subserversd3[subentryd3]);\\n\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd4 = ns.scan(subserversd3[subentryd3]);\\t// depth 4\\n\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd4 in subserversd4) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd4[subentryd4] !== subserversd3[subentryd3] && subserversd4[subentryd4] !== subserversd2[subentryd2] && subserversd4.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------------> \\\" + subserversd4[subentryd4]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd5 = ns.scan(subserversd4[subentryd4]);\\t// depth 5\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd5 in subserversd5) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd5[subentryd5] !== subserversd4[subentryd4] && subserversd5[subentryd5] !== subserversd3[subentryd3] && subserversd5.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-------------------------> \\\" + subserversd5[subentryd5]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd6 = ns.scan(subserversd5[subentryd5]);\\t// depth 6\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd6 in subserversd6) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd6[subentryd6] !== subserversd5[subentryd5] && subserversd6[subentryd6] !== subserversd4[subentryd4] && subserversd6.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"------------------------------> \\\" + subserversd6[subentryd6]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd7 = ns.scan(subserversd6[subentryd6]);\\t// depth 7\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor(let subentryd7 in subserversd7) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd7[subentryd7] !== subserversd6[subentryd6] && subserversd7[subentryd7] !== subserversd5[subentryd5] && subserversd7.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-----------------------------------> \\\" + subserversd7[subentryd7]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"gigascan.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.05,\"server\":\"defcomm\",\"moduleSequenceNumber\":847,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet targetRam = ns.getServerMaxRam(ns.args[0]);\\n\\tlet scriptMem = ns.getScriptRam(ns.args[1]);\\n\\n\\tns.tprint(\\\"Maximum possible threads for \\\" + ns.args[1] + \\\": \\\" + Math.floor(targetRam / scriptMem));\\n\\tns.exit;\\n}\",\"filename\":\"ram-usage.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"defcomm\",\"moduleSequenceNumber\":848,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerList } from \\\"modules/helper.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet serversSeen = [\\\"home\\\"]; // home + bought servers\\n\\tlet contractList = [];\\n\\n\\tserversSeen = await getServerList(serversSeen, 0, ns);\\n\\n\\tns.tprint(serversSeen);\\n}\",\"filename\":\"search-coding-contracts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"defcomm\",\"moduleSequenceNumber\":849,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tvar servers = ns.scan(home);\\n\\tvar scripts = ns.ls(home, \\\".js\\\");\\n\\n\\tfor (let entry in scripts) {\\n\\t\\tns.tprint(\\\"found script: \\\" + scripts[entry]);\\n\\t}\\n\\n\\t// Hack servers (!!! depth = 2 !!!) if needed and populate with scripts\\n\\tfor (let entry in servers) {\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== \\\"home\\\") {\\n\\t\\t\\t\\tns.tprint(\\\"----->   \\\" + subservers[subentry]);\\n\\t\\t\\t\\tif (!ns.hasRootAccess(subservers[subentry])) {\\n\\t\\t\\t\\t\\ttakeover(subservers[subentry]);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tns.tprint(\\\"copying scripts to \\\" + subservers[subentry]);\\n\\t\\t\\t\\tawait ns.scp(scripts, home, subservers[subentry]);\\n\\t\\t\\t\\t//await ns.scp(\\\"setup.ns\\\", home, subservers[subentry]);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (!ns.hasRootAccess(servers[entry])) {\\n\\t\\t\\ttakeover(servers[entry]);\\n\\t\\t}\\n\\t\\tns.tprint(\\\"copying scripts to \\\" + servers[entry]);\\n\\t\\tawait ns.scp(scripts, home, servers[entry]);\\n\\t\\t//await ns.scp(\\\"setup.ns\\\", home, servers[entry]);\\n\\t}\\n\\n\\t/** \\n\\t * \\tAttempts to take over target machine\\t\\n\\t * \\n\\t *  @param {string} tar\\n\\t *  @return {boolean} outcome \\n\\t**/\\n\\tasync function takeover(tar) {\\n\\t\\tlet currentTarget = tar;\\n\\t\\tlet isNotTakenOver = true;\\n\\t\\tlet attemptCounter = 0;\\n\\n\\t\\tif (ns.getServerNumPortsRequired <= 5 && attemptCounter < 50) {\\n\\t\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\n\\t\\t\\t\\tattemptCounter++;\\n\\t\\t\\t}\\n\\n\\t\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.15,\"server\":\"defcomm\",\"moduleSequenceNumber\":850,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}}],\"serversOnNetwork\":[\"deltaone\",\"nova-med\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":84,\"hackDifficulty\":84,\"minDifficulty\":28,\"moneyAvailable\":880393413,\"moneyMax\":22009835325,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":956,\"serverGrowth\":52}},\"infocomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"infocomm\",\"httpPortOpen\":true,\"ip\":\"15.1.7.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"InfoComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Returns an array of all hostnames in the network tree\\n * \\n * @param {string[]} myServers\\n * @param {number} safetyCounter Prevents infnite recursion\\n * @param {NS} ns\\n */\\nexport async function getServerList(myServers, safetyCounter, ns) {\\n\\tlet srvrsSeen = myServers;\\n\\tlet currServScanResult = [];\\n\\n\\tfor (let serverSeen in srvrsSeen) {\\n\\t\\tcurrServScanResult = ns.scan(srvrsSeen[serverSeen]);\\n\\t\\tfor (let entry in currServScanResult) {\\n\\t\\t\\tif (!srvrsSeen.includes(currServScanResult[entry])) {\\n\\t\\t\\t\\tsrvrsSeen.push(currServScanResult[entry]);\\n\\t\\t\\t\\tif ((++safetyCounter) < 250) {\\n\\t\\t\\t\\t\\tawait getServerList(srvrsSeen, safetyCounter, ns);\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tns.exit();\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\t//Filter out invalid values (NaN, null, {}, undefined)\\n\\tsrvrsSeen = srvrsSeen.filter(x => x);\\n\\treturn srvrsSeen;\\n}\\n\\n\\n/** \\n * \\tAttempts to take over target machine\\t\\n * \\n *  @param {string} target\\n * \\t@param {NS} ns\\n *  @return {boolean} outcome \\n**/\\nexport async function takeover(target, ns) {\\n\\tconst home = \\\"home\\\";\\n\\tlet currentTarget = target;\\n\\tlet isNotTakenOver = true;\\n\\tlet attemptCounter = 0;\\n\\n\\tlet scripts = ns.ls(home, \\\".js\\\");\\n\\t//scripts.push(ns.ls(home, \\\".ns\\\")); //in case of deprecated .ns scripts\\n\\n\\tif (!ns.hasRootAccess(currentTarget) && attemptCounter < 30) {\\n\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\ttry {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t} catch (error) {\\n\\t\\t\\t\\t\\tns.tprint(\\\"not enough ports to nuke \\\" + currentTarget);\\n\\t\\t\\t\\t\\treturn false;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t}\\n\\t\\t\\tattemptCounter++;\\n\\t\\t}\\n\\n\\t\\tawait ns.scp(scripts, home, currentTarget);\\n\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\",\"filename\":\"/modules/helper.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"infocomm\",\"moduleSequenceNumber\":851,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.grow(target);\\n\\t}\\n}\",\"filename\":\"basic-grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"infocomm\",\"moduleSequenceNumber\":852,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"basic-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"infocomm\",\"moduleSequenceNumber\":853,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(target);\\n\\t}\\n}\",\"filename\":\"basic-weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"infocomm\",\"moduleSequenceNumber\":854,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerList, takeover } from \\\"modules/helper.js\\\";\\n\\n/** @param {NS} ns **/\\n// TODO: unused + unfinished, based on setup.ns\\nexport async function main(ns) {\\n\\tconst myServers = [\\\"home\\\"];\\n\\n\\tvar servers = await getServerList(myServers, 0, ns);\\n\\n\\tfor (let entry in servers) {\\t\\n\\t\\tawait takeover(servers[entry], ns);\\n\\t}\\n}\",\"filename\":\"deep-setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"infocomm\",\"moduleSequenceNumber\":855,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\t//\\n}\",\"filename\":\"formulas-testing.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"infocomm\",\"moduleSequenceNumber\":856,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tconst currentMachine = ns.getHostname();\\n\\tvar servers = ns.scan(currentMachine);\\n\\tvar scripts = ns.ls(home, \\\"basic-\\\");\\n\\n\\tns.tprint(\\\"Host:  \\\" + currentMachine);\\n\\tfor (let entry in servers) {\\t// depth 0\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\t// depth 1\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== home && subservers.length > 1) {\\n\\t\\t\\t\\tns.tprint(\\\"-----> \\\" + subservers[subentry]);\\n\\t\\t\\t\\tlet subserversd2 = ns.scan(subservers[subentry]); // depth 2\\n\\t\\t\\t\\tfor (let subentryd2 in subserversd2) {\\n\\t\\t\\t\\t\\tif (subserversd2[subentryd2] !== subservers[subentry] && subserversd2[subentryd2] !== servers[entry] && subserversd2.length > 1) {\\n\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------> \\\" + subserversd2[subentryd2]);\\n\\t\\t\\t\\t\\t\\tlet subserversd3 = ns.scan(subserversd2[subentryd2]);\\t// depth 3\\n\\t\\t\\t\\t\\t\\tfor (let subentryd3 in subserversd3) {\\n\\t\\t\\t\\t\\t\\t\\tif (subserversd3[subentryd3] !== subserversd2[subentryd2] && subserversd3[subentryd3] !== subservers[subentry] && subserversd3.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------> \\\" + subserversd3[subentryd3]);\\n\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd4 = ns.scan(subserversd3[subentryd3]);\\t// depth 4\\n\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd4 in subserversd4) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd4[subentryd4] !== subserversd3[subentryd3] && subserversd4[subentryd4] !== subserversd2[subentryd2] && subserversd4.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------------> \\\" + subserversd4[subentryd4]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd5 = ns.scan(subserversd4[subentryd4]);\\t// depth 5\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd5 in subserversd5) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd5[subentryd5] !== subserversd4[subentryd4] && subserversd5[subentryd5] !== subserversd3[subentryd3] && subserversd5.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-------------------------> \\\" + subserversd5[subentryd5]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd6 = ns.scan(subserversd5[subentryd5]);\\t// depth 6\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd6 in subserversd6) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd6[subentryd6] !== subserversd5[subentryd5] && subserversd6[subentryd6] !== subserversd4[subentryd4] && subserversd6.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"------------------------------> \\\" + subserversd6[subentryd6]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd7 = ns.scan(subserversd6[subentryd6]);\\t// depth 7\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor(let subentryd7 in subserversd7) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd7[subentryd7] !== subserversd6[subentryd6] && subserversd7[subentryd7] !== subserversd5[subentryd5] && subserversd7.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-----------------------------------> \\\" + subserversd7[subentryd7]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"gigascan.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.05,\"server\":\"infocomm\",\"moduleSequenceNumber\":857,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet targetRam = ns.getServerMaxRam(ns.args[0]);\\n\\tlet scriptMem = ns.getScriptRam(ns.args[1]);\\n\\n\\tns.tprint(\\\"Maximum possible threads for \\\" + ns.args[1] + \\\": \\\" + Math.floor(targetRam / scriptMem));\\n\\tns.exit;\\n}\",\"filename\":\"ram-usage.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"infocomm\",\"moduleSequenceNumber\":858,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerList } from \\\"modules/helper.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet serversSeen = [\\\"home\\\"]; // home + bought servers\\n\\tlet contractList = [];\\n\\n\\tserversSeen = await getServerList(serversSeen, 0, ns);\\n\\n\\tns.tprint(serversSeen);\\n}\",\"filename\":\"search-coding-contracts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"infocomm\",\"moduleSequenceNumber\":859,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tvar servers = ns.scan(home);\\n\\tvar scripts = ns.ls(home, \\\".js\\\");\\n\\n\\tfor (let entry in scripts) {\\n\\t\\tns.tprint(\\\"found script: \\\" + scripts[entry]);\\n\\t}\\n\\n\\t// Hack servers (!!! depth = 2 !!!) if needed and populate with scripts\\n\\tfor (let entry in servers) {\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== \\\"home\\\") {\\n\\t\\t\\t\\tns.tprint(\\\"----->   \\\" + subservers[subentry]);\\n\\t\\t\\t\\tif (!ns.hasRootAccess(subservers[subentry])) {\\n\\t\\t\\t\\t\\ttakeover(subservers[subentry]);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tns.tprint(\\\"copying scripts to \\\" + subservers[subentry]);\\n\\t\\t\\t\\tawait ns.scp(scripts, home, subservers[subentry]);\\n\\t\\t\\t\\t//await ns.scp(\\\"setup.ns\\\", home, subservers[subentry]);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (!ns.hasRootAccess(servers[entry])) {\\n\\t\\t\\ttakeover(servers[entry]);\\n\\t\\t}\\n\\t\\tns.tprint(\\\"copying scripts to \\\" + servers[entry]);\\n\\t\\tawait ns.scp(scripts, home, servers[entry]);\\n\\t\\t//await ns.scp(\\\"setup.ns\\\", home, servers[entry]);\\n\\t}\\n\\n\\t/** \\n\\t * \\tAttempts to take over target machine\\t\\n\\t * \\n\\t *  @param {string} tar\\n\\t *  @return {boolean} outcome \\n\\t**/\\n\\tasync function takeover(tar) {\\n\\t\\tlet currentTarget = tar;\\n\\t\\tlet isNotTakenOver = true;\\n\\t\\tlet attemptCounter = 0;\\n\\n\\t\\tif (ns.getServerNumPortsRequired <= 5 && attemptCounter < 50) {\\n\\t\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\n\\t\\t\\t\\tattemptCounter++;\\n\\t\\t\\t}\\n\\n\\t\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.15,\"server\":\"infocomm\",\"moduleSequenceNumber\":860,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}}],\"serversOnNetwork\":[\"solaris\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":70,\"hackDifficulty\":70,\"minDifficulty\":23,\"moneyAvailable\":766535822,\"moneyMax\":19163395550,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":903,\"serverGrowth\":42}},\"helios\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"helios\",\"httpPortOpen\":true,\"ip\":\"79.2.5.2\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Helios Labs\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Returns an array of all hostnames in the network tree\\n * \\n * @param {string[]} myServers\\n * @param {number} safetyCounter Prevents infnite recursion\\n * @param {NS} ns\\n */\\nexport async function getServerList(myServers, safetyCounter, ns) {\\n\\tlet srvrsSeen = myServers;\\n\\tlet currServScanResult = [];\\n\\n\\tfor (let serverSeen in srvrsSeen) {\\n\\t\\tcurrServScanResult = ns.scan(srvrsSeen[serverSeen]);\\n\\t\\tfor (let entry in currServScanResult) {\\n\\t\\t\\tif (!srvrsSeen.includes(currServScanResult[entry])) {\\n\\t\\t\\t\\tsrvrsSeen.push(currServScanResult[entry]);\\n\\t\\t\\t\\tif ((++safetyCounter) < 250) {\\n\\t\\t\\t\\t\\tawait getServerList(srvrsSeen, safetyCounter, ns);\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tns.exit();\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\t//Filter out invalid values (NaN, null, {}, undefined)\\n\\tsrvrsSeen = srvrsSeen.filter(x => x);\\n\\treturn srvrsSeen;\\n}\\n\\n\\n/** \\n * \\tAttempts to take over target machine\\t\\n * \\n *  @param {string} target\\n * \\t@param {NS} ns\\n *  @return {boolean} outcome \\n**/\\nexport async function takeover(target, ns) {\\n\\tconst home = \\\"home\\\";\\n\\tlet currentTarget = target;\\n\\tlet isNotTakenOver = true;\\n\\tlet attemptCounter = 0;\\n\\n\\tlet scripts = ns.ls(home, \\\".js\\\");\\n\\t//scripts.push(ns.ls(home, \\\".ns\\\")); //in case of deprecated .ns scripts\\n\\n\\tif (!ns.hasRootAccess(currentTarget) && attemptCounter < 30) {\\n\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\ttry {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t} catch (error) {\\n\\t\\t\\t\\t\\tns.tprint(\\\"not enough ports to nuke \\\" + currentTarget);\\n\\t\\t\\t\\t\\treturn false;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t}\\n\\t\\t\\tattemptCounter++;\\n\\t\\t}\\n\\n\\t\\tawait ns.scp(scripts, home, currentTarget);\\n\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\",\"filename\":\"/modules/helper.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"helios\",\"moduleSequenceNumber\":861,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.grow(target);\\n\\t}\\n}\",\"filename\":\"basic-grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"helios\",\"moduleSequenceNumber\":862,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"basic-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"helios\",\"moduleSequenceNumber\":863,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(target);\\n\\t}\\n}\",\"filename\":\"basic-weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"helios\",\"moduleSequenceNumber\":864,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerList, takeover } from \\\"modules/helper.js\\\";\\n\\n/** @param {NS} ns **/\\n// TODO: unused + unfinished, based on setup.ns\\nexport async function main(ns) {\\n\\tconst myServers = [\\\"home\\\"];\\n\\n\\tvar servers = await getServerList(myServers, 0, ns);\\n\\n\\tfor (let entry in servers) {\\t\\n\\t\\tawait takeover(servers[entry], ns);\\n\\t}\\n}\",\"filename\":\"deep-setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"helios\",\"moduleSequenceNumber\":865,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\t//\\n}\",\"filename\":\"formulas-testing.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"helios\",\"moduleSequenceNumber\":866,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tconst currentMachine = ns.getHostname();\\n\\tvar servers = ns.scan(currentMachine);\\n\\tvar scripts = ns.ls(home, \\\"basic-\\\");\\n\\n\\tns.tprint(\\\"Host:  \\\" + currentMachine);\\n\\tfor (let entry in servers) {\\t// depth 0\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\t// depth 1\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== home && subservers.length > 1) {\\n\\t\\t\\t\\tns.tprint(\\\"-----> \\\" + subservers[subentry]);\\n\\t\\t\\t\\tlet subserversd2 = ns.scan(subservers[subentry]); // depth 2\\n\\t\\t\\t\\tfor (let subentryd2 in subserversd2) {\\n\\t\\t\\t\\t\\tif (subserversd2[subentryd2] !== subservers[subentry] && subserversd2[subentryd2] !== servers[entry] && subserversd2.length > 1) {\\n\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------> \\\" + subserversd2[subentryd2]);\\n\\t\\t\\t\\t\\t\\tlet subserversd3 = ns.scan(subserversd2[subentryd2]);\\t// depth 3\\n\\t\\t\\t\\t\\t\\tfor (let subentryd3 in subserversd3) {\\n\\t\\t\\t\\t\\t\\t\\tif (subserversd3[subentryd3] !== subserversd2[subentryd2] && subserversd3[subentryd3] !== subservers[subentry] && subserversd3.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------> \\\" + subserversd3[subentryd3]);\\n\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd4 = ns.scan(subserversd3[subentryd3]);\\t// depth 4\\n\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd4 in subserversd4) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd4[subentryd4] !== subserversd3[subentryd3] && subserversd4[subentryd4] !== subserversd2[subentryd2] && subserversd4.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------------> \\\" + subserversd4[subentryd4]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd5 = ns.scan(subserversd4[subentryd4]);\\t// depth 5\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd5 in subserversd5) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd5[subentryd5] !== subserversd4[subentryd4] && subserversd5[subentryd5] !== subserversd3[subentryd3] && subserversd5.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-------------------------> \\\" + subserversd5[subentryd5]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd6 = ns.scan(subserversd5[subentryd5]);\\t// depth 6\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd6 in subserversd6) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd6[subentryd6] !== subserversd5[subentryd5] && subserversd6[subentryd6] !== subserversd4[subentryd4] && subserversd6.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"------------------------------> \\\" + subserversd6[subentryd6]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd7 = ns.scan(subserversd6[subentryd6]);\\t// depth 7\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor(let subentryd7 in subserversd7) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd7[subentryd7] !== subserversd6[subentryd6] && subserversd7[subentryd7] !== subserversd5[subentryd5] && subserversd7.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-----------------------------------> \\\" + subserversd7[subentryd7]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"gigascan.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.05,\"server\":\"helios\",\"moduleSequenceNumber\":867,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet targetRam = ns.getServerMaxRam(ns.args[0]);\\n\\tlet scriptMem = ns.getScriptRam(ns.args[1]);\\n\\n\\tns.tprint(\\\"Maximum possible threads for \\\" + ns.args[1] + \\\": \\\" + Math.floor(targetRam / scriptMem));\\n\\tns.exit;\\n}\",\"filename\":\"ram-usage.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"helios\",\"moduleSequenceNumber\":868,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerList } from \\\"modules/helper.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet serversSeen = [\\\"home\\\"]; // home + bought servers\\n\\tlet contractList = [];\\n\\n\\tserversSeen = await getServerList(serversSeen, 0, ns);\\n\\n\\tns.tprint(serversSeen);\\n}\",\"filename\":\"search-coding-contracts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"helios\",\"moduleSequenceNumber\":869,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tvar servers = ns.scan(home);\\n\\tvar scripts = ns.ls(home, \\\".js\\\");\\n\\n\\tfor (let entry in scripts) {\\n\\t\\tns.tprint(\\\"found script: \\\" + scripts[entry]);\\n\\t}\\n\\n\\t// Hack servers (!!! depth = 2 !!!) if needed and populate with scripts\\n\\tfor (let entry in servers) {\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== \\\"home\\\") {\\n\\t\\t\\t\\tns.tprint(\\\"----->   \\\" + subservers[subentry]);\\n\\t\\t\\t\\tif (!ns.hasRootAccess(subservers[subentry])) {\\n\\t\\t\\t\\t\\ttakeover(subservers[subentry]);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tns.tprint(\\\"copying scripts to \\\" + subservers[subentry]);\\n\\t\\t\\t\\tawait ns.scp(scripts, home, subservers[subentry]);\\n\\t\\t\\t\\t//await ns.scp(\\\"setup.ns\\\", home, subservers[subentry]);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (!ns.hasRootAccess(servers[entry])) {\\n\\t\\t\\ttakeover(servers[entry]);\\n\\t\\t}\\n\\t\\tns.tprint(\\\"copying scripts to \\\" + servers[entry]);\\n\\t\\tawait ns.scp(scripts, home, servers[entry]);\\n\\t\\t//await ns.scp(\\\"setup.ns\\\", home, servers[entry]);\\n\\t}\\n\\n\\t/** \\n\\t * \\tAttempts to take over target machine\\t\\n\\t * \\n\\t *  @param {string} tar\\n\\t *  @return {boolean} outcome \\n\\t**/\\n\\tasync function takeover(tar) {\\n\\t\\tlet currentTarget = tar;\\n\\t\\tlet isNotTakenOver = true;\\n\\t\\tlet attemptCounter = 0;\\n\\n\\t\\tif (ns.getServerNumPortsRequired <= 5 && attemptCounter < 50) {\\n\\t\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\n\\t\\t\\t\\tattemptCounter++;\\n\\t\\t\\t}\\n\\n\\t\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.15,\"server\":\"helios\",\"moduleSequenceNumber\":870,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}}],\"serversOnNetwork\":[\"applied-energetics\",\".\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":92,\"hackDifficulty\":92,\"minDifficulty\":31,\"moneyAvailable\":716610572,\"moneyMax\":17915264300,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":827,\"serverGrowth\":75}},\"vitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-205204.cct\",\"type\":\"Merge Overlapping Intervals\",\"data\":[[14,23],[22,24],[4,13],[4,14],[21,23],[22,27],[18,28],[15,24],[11,19],[4,12],[17,21],[17,21],[20,23],[17,20],[14,19],[9,17],[4,11],[10,14],[8,18]],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"vitalife\",\"httpPortOpen\":true,\"ip\":\"99.1.2.4\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"VitaLife\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Returns an array of all hostnames in the network tree\\n * \\n * @param {string[]} myServers\\n * @param {number} safetyCounter Prevents infnite recursion\\n * @param {NS} ns\\n */\\nexport async function getServerList(myServers, safetyCounter, ns) {\\n\\tlet srvrsSeen = myServers;\\n\\tlet currServScanResult = [];\\n\\n\\tfor (let serverSeen in srvrsSeen) {\\n\\t\\tcurrServScanResult = ns.scan(srvrsSeen[serverSeen]);\\n\\t\\tfor (let entry in currServScanResult) {\\n\\t\\t\\tif (!srvrsSeen.includes(currServScanResult[entry])) {\\n\\t\\t\\t\\tsrvrsSeen.push(currServScanResult[entry]);\\n\\t\\t\\t\\tif ((++safetyCounter) < 250) {\\n\\t\\t\\t\\t\\tawait getServerList(srvrsSeen, safetyCounter, ns);\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tns.exit();\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\t//Filter out invalid values (NaN, null, {}, undefined)\\n\\tsrvrsSeen = srvrsSeen.filter(x => x);\\n\\treturn srvrsSeen;\\n}\\n\\n\\n/** \\n * \\tAttempts to take over target machine\\t\\n * \\n *  @param {string} target\\n * \\t@param {NS} ns\\n *  @return {boolean} outcome \\n**/\\nexport async function takeover(target, ns) {\\n\\tconst home = \\\"home\\\";\\n\\tlet currentTarget = target;\\n\\tlet isNotTakenOver = true;\\n\\tlet attemptCounter = 0;\\n\\n\\tlet scripts = ns.ls(home, \\\".js\\\");\\n\\t//scripts.push(ns.ls(home, \\\".ns\\\")); //in case of deprecated .ns scripts\\n\\n\\tif (!ns.hasRootAccess(currentTarget) && attemptCounter < 30) {\\n\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\ttry {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t} catch (error) {\\n\\t\\t\\t\\t\\tns.tprint(\\\"not enough ports to nuke \\\" + currentTarget);\\n\\t\\t\\t\\t\\treturn false;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t}\\n\\t\\t\\tattemptCounter++;\\n\\t\\t}\\n\\n\\t\\tawait ns.scp(scripts, home, currentTarget);\\n\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\",\"filename\":\"/modules/helper.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"vitalife\",\"moduleSequenceNumber\":871,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.grow(target);\\n\\t}\\n}\",\"filename\":\"basic-grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"vitalife\",\"moduleSequenceNumber\":872,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"basic-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"vitalife\",\"moduleSequenceNumber\":873,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(target);\\n\\t}\\n}\",\"filename\":\"basic-weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"vitalife\",\"moduleSequenceNumber\":874,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerList, takeover } from \\\"modules/helper.js\\\";\\n\\n/** @param {NS} ns **/\\n// TODO: unused + unfinished, based on setup.ns\\nexport async function main(ns) {\\n\\tconst myServers = [\\\"home\\\"];\\n\\n\\tvar servers = await getServerList(myServers, 0, ns);\\n\\n\\tfor (let entry in servers) {\\t\\n\\t\\tawait takeover(servers[entry], ns);\\n\\t}\\n}\",\"filename\":\"deep-setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"vitalife\",\"moduleSequenceNumber\":875,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\t//\\n}\",\"filename\":\"formulas-testing.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"vitalife\",\"moduleSequenceNumber\":876,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tconst currentMachine = ns.getHostname();\\n\\tvar servers = ns.scan(currentMachine);\\n\\tvar scripts = ns.ls(home, \\\"basic-\\\");\\n\\n\\tns.tprint(\\\"Host:  \\\" + currentMachine);\\n\\tfor (let entry in servers) {\\t// depth 0\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\t// depth 1\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== home && subservers.length > 1) {\\n\\t\\t\\t\\tns.tprint(\\\"-----> \\\" + subservers[subentry]);\\n\\t\\t\\t\\tlet subserversd2 = ns.scan(subservers[subentry]); // depth 2\\n\\t\\t\\t\\tfor (let subentryd2 in subserversd2) {\\n\\t\\t\\t\\t\\tif (subserversd2[subentryd2] !== subservers[subentry] && subserversd2[subentryd2] !== servers[entry] && subserversd2.length > 1) {\\n\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------> \\\" + subserversd2[subentryd2]);\\n\\t\\t\\t\\t\\t\\tlet subserversd3 = ns.scan(subserversd2[subentryd2]);\\t// depth 3\\n\\t\\t\\t\\t\\t\\tfor (let subentryd3 in subserversd3) {\\n\\t\\t\\t\\t\\t\\t\\tif (subserversd3[subentryd3] !== subserversd2[subentryd2] && subserversd3[subentryd3] !== subservers[subentry] && subserversd3.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------> \\\" + subserversd3[subentryd3]);\\n\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd4 = ns.scan(subserversd3[subentryd3]);\\t// depth 4\\n\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd4 in subserversd4) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd4[subentryd4] !== subserversd3[subentryd3] && subserversd4[subentryd4] !== subserversd2[subentryd2] && subserversd4.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------------> \\\" + subserversd4[subentryd4]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd5 = ns.scan(subserversd4[subentryd4]);\\t// depth 5\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd5 in subserversd5) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd5[subentryd5] !== subserversd4[subentryd4] && subserversd5[subentryd5] !== subserversd3[subentryd3] && subserversd5.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-------------------------> \\\" + subserversd5[subentryd5]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd6 = ns.scan(subserversd5[subentryd5]);\\t// depth 6\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd6 in subserversd6) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd6[subentryd6] !== subserversd5[subentryd5] && subserversd6[subentryd6] !== subserversd4[subentryd4] && subserversd6.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"------------------------------> \\\" + subserversd6[subentryd6]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd7 = ns.scan(subserversd6[subentryd6]);\\t// depth 7\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor(let subentryd7 in subserversd7) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd7[subentryd7] !== subserversd6[subentryd6] && subserversd7[subentryd7] !== subserversd5[subentryd5] && subserversd7.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-----------------------------------> \\\" + subserversd7[subentryd7]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"gigascan.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.05,\"server\":\"vitalife\",\"moduleSequenceNumber\":877,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet targetRam = ns.getServerMaxRam(ns.args[0]);\\n\\tlet scriptMem = ns.getScriptRam(ns.args[1]);\\n\\n\\tns.tprint(\\\"Maximum possible threads for \\\" + ns.args[1] + \\\": \\\" + Math.floor(targetRam / scriptMem));\\n\\tns.exit;\\n}\",\"filename\":\"ram-usage.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"vitalife\",\"moduleSequenceNumber\":878,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerList } from \\\"modules/helper.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet serversSeen = [\\\"home\\\"]; // home + bought servers\\n\\tlet contractList = [];\\n\\n\\tserversSeen = await getServerList(serversSeen, 0, ns);\\n\\n\\tns.tprint(serversSeen);\\n}\",\"filename\":\"search-coding-contracts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"vitalife\",\"moduleSequenceNumber\":879,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tvar servers = ns.scan(home);\\n\\tvar scripts = ns.ls(home, \\\".js\\\");\\n\\n\\tfor (let entry in scripts) {\\n\\t\\tns.tprint(\\\"found script: \\\" + scripts[entry]);\\n\\t}\\n\\n\\t// Hack servers (!!! depth = 2 !!!) if needed and populate with scripts\\n\\tfor (let entry in servers) {\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== \\\"home\\\") {\\n\\t\\t\\t\\tns.tprint(\\\"----->   \\\" + subservers[subentry]);\\n\\t\\t\\t\\tif (!ns.hasRootAccess(subservers[subentry])) {\\n\\t\\t\\t\\t\\ttakeover(subservers[subentry]);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tns.tprint(\\\"copying scripts to \\\" + subservers[subentry]);\\n\\t\\t\\t\\tawait ns.scp(scripts, home, subservers[subentry]);\\n\\t\\t\\t\\t//await ns.scp(\\\"setup.ns\\\", home, subservers[subentry]);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (!ns.hasRootAccess(servers[entry])) {\\n\\t\\t\\ttakeover(servers[entry]);\\n\\t\\t}\\n\\t\\tns.tprint(\\\"copying scripts to \\\" + servers[entry]);\\n\\t\\tawait ns.scp(scripts, home, servers[entry]);\\n\\t\\t//await ns.scp(\\\"setup.ns\\\", home, servers[entry]);\\n\\t}\\n\\n\\t/** \\n\\t * \\tAttempts to take over target machine\\t\\n\\t * \\n\\t *  @param {string} tar\\n\\t *  @return {boolean} outcome \\n\\t**/\\n\\tasync function takeover(tar) {\\n\\t\\tlet currentTarget = tar;\\n\\t\\tlet isNotTakenOver = true;\\n\\t\\tlet attemptCounter = 0;\\n\\n\\t\\tif (ns.getServerNumPortsRequired <= 5 && attemptCounter < 50) {\\n\\t\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\n\\t\\t\\t\\tattemptCounter++;\\n\\t\\t\\t}\\n\\n\\t\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.15,\"server\":\"vitalife\",\"moduleSequenceNumber\":880,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}}],\"serversOnNetwork\":[\"microdyne\",\"4sigma\",\"kuai-gong\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":80,\"hackDifficulty\":80,\"minDifficulty\":27,\"moneyAvailable\":702162192,\"moneyMax\":17554054800,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":798,\"serverGrowth\":63}},\"icarus\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-71268.cct\",\"type\":\"Sanitize Parentheses in Expression\",\"data\":\"(((a()\",\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"icarus\",\"httpPortOpen\":true,\"ip\":\"68.3.0.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Icarus Microsystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Returns an array of all hostnames in the network tree\\n * \\n * @param {string[]} myServers\\n * @param {number} safetyCounter Prevents infnite recursion\\n * @param {NS} ns\\n */\\nexport async function getServerList(myServers, safetyCounter, ns) {\\n\\tlet srvrsSeen = myServers;\\n\\tlet currServScanResult = [];\\n\\n\\tfor (let serverSeen in srvrsSeen) {\\n\\t\\tcurrServScanResult = ns.scan(srvrsSeen[serverSeen]);\\n\\t\\tfor (let entry in currServScanResult) {\\n\\t\\t\\tif (!srvrsSeen.includes(currServScanResult[entry])) {\\n\\t\\t\\t\\tsrvrsSeen.push(currServScanResult[entry]);\\n\\t\\t\\t\\tif ((++safetyCounter) < 250) {\\n\\t\\t\\t\\t\\tawait getServerList(srvrsSeen, safetyCounter, ns);\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tns.exit();\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\t//Filter out invalid values (NaN, null, {}, undefined)\\n\\tsrvrsSeen = srvrsSeen.filter(x => x);\\n\\treturn srvrsSeen;\\n}\\n\\n\\n/** \\n * \\tAttempts to take over target machine\\t\\n * \\n *  @param {string} target\\n * \\t@param {NS} ns\\n *  @return {boolean} outcome \\n**/\\nexport async function takeover(target, ns) {\\n\\tconst home = \\\"home\\\";\\n\\tlet currentTarget = target;\\n\\tlet isNotTakenOver = true;\\n\\tlet attemptCounter = 0;\\n\\n\\tlet scripts = ns.ls(home, \\\".js\\\");\\n\\t//scripts.push(ns.ls(home, \\\".ns\\\")); //in case of deprecated .ns scripts\\n\\n\\tif (!ns.hasRootAccess(currentTarget) && attemptCounter < 30) {\\n\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\ttry {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t} catch (error) {\\n\\t\\t\\t\\t\\tns.tprint(\\\"not enough ports to nuke \\\" + currentTarget);\\n\\t\\t\\t\\t\\treturn false;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t}\\n\\t\\t\\tattemptCounter++;\\n\\t\\t}\\n\\n\\t\\tawait ns.scp(scripts, home, currentTarget);\\n\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\",\"filename\":\"/modules/helper.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"icarus\",\"moduleSequenceNumber\":881,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.grow(target);\\n\\t}\\n}\",\"filename\":\"basic-grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"icarus\",\"moduleSequenceNumber\":882,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"basic-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"icarus\",\"moduleSequenceNumber\":883,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(target);\\n\\t}\\n}\",\"filename\":\"basic-weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"icarus\",\"moduleSequenceNumber\":884,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerList, takeover } from \\\"modules/helper.js\\\";\\n\\n/** @param {NS} ns **/\\n// TODO: unused + unfinished, based on setup.ns\\nexport async function main(ns) {\\n\\tconst myServers = [\\\"home\\\"];\\n\\n\\tvar servers = await getServerList(myServers, 0, ns);\\n\\n\\tfor (let entry in servers) {\\t\\n\\t\\tawait takeover(servers[entry], ns);\\n\\t}\\n}\",\"filename\":\"deep-setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"icarus\",\"moduleSequenceNumber\":885,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\t//\\n}\",\"filename\":\"formulas-testing.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"icarus\",\"moduleSequenceNumber\":886,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tconst currentMachine = ns.getHostname();\\n\\tvar servers = ns.scan(currentMachine);\\n\\tvar scripts = ns.ls(home, \\\"basic-\\\");\\n\\n\\tns.tprint(\\\"Host:  \\\" + currentMachine);\\n\\tfor (let entry in servers) {\\t// depth 0\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\t// depth 1\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== home && subservers.length > 1) {\\n\\t\\t\\t\\tns.tprint(\\\"-----> \\\" + subservers[subentry]);\\n\\t\\t\\t\\tlet subserversd2 = ns.scan(subservers[subentry]); // depth 2\\n\\t\\t\\t\\tfor (let subentryd2 in subserversd2) {\\n\\t\\t\\t\\t\\tif (subserversd2[subentryd2] !== subservers[subentry] && subserversd2[subentryd2] !== servers[entry] && subserversd2.length > 1) {\\n\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------> \\\" + subserversd2[subentryd2]);\\n\\t\\t\\t\\t\\t\\tlet subserversd3 = ns.scan(subserversd2[subentryd2]);\\t// depth 3\\n\\t\\t\\t\\t\\t\\tfor (let subentryd3 in subserversd3) {\\n\\t\\t\\t\\t\\t\\t\\tif (subserversd3[subentryd3] !== subserversd2[subentryd2] && subserversd3[subentryd3] !== subservers[subentry] && subserversd3.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------> \\\" + subserversd3[subentryd3]);\\n\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd4 = ns.scan(subserversd3[subentryd3]);\\t// depth 4\\n\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd4 in subserversd4) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd4[subentryd4] !== subserversd3[subentryd3] && subserversd4[subentryd4] !== subserversd2[subentryd2] && subserversd4.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------------> \\\" + subserversd4[subentryd4]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd5 = ns.scan(subserversd4[subentryd4]);\\t// depth 5\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd5 in subserversd5) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd5[subentryd5] !== subserversd4[subentryd4] && subserversd5[subentryd5] !== subserversd3[subentryd3] && subserversd5.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-------------------------> \\\" + subserversd5[subentryd5]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd6 = ns.scan(subserversd5[subentryd5]);\\t// depth 6\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd6 in subserversd6) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd6[subentryd6] !== subserversd5[subentryd5] && subserversd6[subentryd6] !== subserversd4[subentryd4] && subserversd6.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"------------------------------> \\\" + subserversd6[subentryd6]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd7 = ns.scan(subserversd6[subentryd6]);\\t// depth 7\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor(let subentryd7 in subserversd7) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd7[subentryd7] !== subserversd6[subentryd6] && subserversd7[subentryd7] !== subserversd5[subentryd5] && subserversd7.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-----------------------------------> \\\" + subserversd7[subentryd7]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"gigascan.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.05,\"server\":\"icarus\",\"moduleSequenceNumber\":887,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet targetRam = ns.getServerMaxRam(ns.args[0]);\\n\\tlet scriptMem = ns.getScriptRam(ns.args[1]);\\n\\n\\tns.tprint(\\\"Maximum possible threads for \\\" + ns.args[1] + \\\": \\\" + Math.floor(targetRam / scriptMem));\\n\\tns.exit;\\n}\",\"filename\":\"ram-usage.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"icarus\",\"moduleSequenceNumber\":888,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerList } from \\\"modules/helper.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet serversSeen = [\\\"home\\\"]; // home + bought servers\\n\\tlet contractList = [];\\n\\n\\tserversSeen = await getServerList(serversSeen, 0, ns);\\n\\n\\tns.tprint(serversSeen);\\n}\",\"filename\":\"search-coding-contracts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"icarus\",\"moduleSequenceNumber\":889,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tvar servers = ns.scan(home);\\n\\tvar scripts = ns.ls(home, \\\".js\\\");\\n\\n\\tfor (let entry in scripts) {\\n\\t\\tns.tprint(\\\"found script: \\\" + scripts[entry]);\\n\\t}\\n\\n\\t// Hack servers (!!! depth = 2 !!!) if needed and populate with scripts\\n\\tfor (let entry in servers) {\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== \\\"home\\\") {\\n\\t\\t\\t\\tns.tprint(\\\"----->   \\\" + subservers[subentry]);\\n\\t\\t\\t\\tif (!ns.hasRootAccess(subservers[subentry])) {\\n\\t\\t\\t\\t\\ttakeover(subservers[subentry]);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tns.tprint(\\\"copying scripts to \\\" + subservers[subentry]);\\n\\t\\t\\t\\tawait ns.scp(scripts, home, subservers[subentry]);\\n\\t\\t\\t\\t//await ns.scp(\\\"setup.ns\\\", home, subservers[subentry]);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (!ns.hasRootAccess(servers[entry])) {\\n\\t\\t\\ttakeover(servers[entry]);\\n\\t\\t}\\n\\t\\tns.tprint(\\\"copying scripts to \\\" + servers[entry]);\\n\\t\\tawait ns.scp(scripts, home, servers[entry]);\\n\\t\\t//await ns.scp(\\\"setup.ns\\\", home, servers[entry]);\\n\\t}\\n\\n\\t/** \\n\\t * \\tAttempts to take over target machine\\t\\n\\t * \\n\\t *  @param {string} tar\\n\\t *  @return {boolean} outcome \\n\\t**/\\n\\tasync function takeover(tar) {\\n\\t\\tlet currentTarget = tar;\\n\\t\\tlet isNotTakenOver = true;\\n\\t\\tlet attemptCounter = 0;\\n\\n\\t\\tif (ns.getServerNumPortsRequired <= 5 && attemptCounter < 50) {\\n\\t\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\n\\t\\t\\t\\tattemptCounter++;\\n\\t\\t\\t}\\n\\n\\t\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.15,\"server\":\"icarus\",\"moduleSequenceNumber\":890,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}}],\"serversOnNetwork\":[\"deltaone\",\"taiyang-digital\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":89,\"hackDifficulty\":89,\"minDifficulty\":30,\"moneyAvailable\":967701018,\"moneyMax\":24192525450,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":879,\"serverGrowth\":91}},\"univ-energy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"univ-energy\",\"httpPortOpen\":true,\"ip\":\"37.3.7.9\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[],\"organizationName\":\"Universal Energy\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Returns an array of all hostnames in the network tree\\n * \\n * @param {string[]} myServers\\n * @param {number} safetyCounter Prevents infnite recursion\\n * @param {NS} ns\\n */\\nexport async function getServerList(myServers, safetyCounter, ns) {\\n\\tlet srvrsSeen = myServers;\\n\\tlet currServScanResult = [];\\n\\n\\tfor (let serverSeen in srvrsSeen) {\\n\\t\\tcurrServScanResult = ns.scan(srvrsSeen[serverSeen]);\\n\\t\\tfor (let entry in currServScanResult) {\\n\\t\\t\\tif (!srvrsSeen.includes(currServScanResult[entry])) {\\n\\t\\t\\t\\tsrvrsSeen.push(currServScanResult[entry]);\\n\\t\\t\\t\\tif ((++safetyCounter) < 250) {\\n\\t\\t\\t\\t\\tawait getServerList(srvrsSeen, safetyCounter, ns);\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tns.exit();\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\t//Filter out invalid values (NaN, null, {}, undefined)\\n\\tsrvrsSeen = srvrsSeen.filter(x => x);\\n\\treturn srvrsSeen;\\n}\\n\\n\\n/** \\n * \\tAttempts to take over target machine\\t\\n * \\n *  @param {string} target\\n * \\t@param {NS} ns\\n *  @return {boolean} outcome \\n**/\\nexport async function takeover(target, ns) {\\n\\tconst home = \\\"home\\\";\\n\\tlet currentTarget = target;\\n\\tlet isNotTakenOver = true;\\n\\tlet attemptCounter = 0;\\n\\n\\tlet scripts = ns.ls(home, \\\".js\\\");\\n\\t//scripts.push(ns.ls(home, \\\".ns\\\")); //in case of deprecated .ns scripts\\n\\n\\tif (!ns.hasRootAccess(currentTarget) && attemptCounter < 30) {\\n\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\ttry {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t} catch (error) {\\n\\t\\t\\t\\t\\tns.tprint(\\\"not enough ports to nuke \\\" + currentTarget);\\n\\t\\t\\t\\t\\treturn false;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t}\\n\\t\\t\\tattemptCounter++;\\n\\t\\t}\\n\\n\\t\\tawait ns.scp(scripts, home, currentTarget);\\n\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\",\"filename\":\"/modules/helper.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"univ-energy\",\"moduleSequenceNumber\":891,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.grow(target);\\n\\t}\\n}\",\"filename\":\"basic-grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"univ-energy\",\"moduleSequenceNumber\":892,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"basic-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"univ-energy\",\"moduleSequenceNumber\":893,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(target);\\n\\t}\\n}\",\"filename\":\"basic-weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"univ-energy\",\"moduleSequenceNumber\":894,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerList, takeover } from \\\"modules/helper.js\\\";\\n\\n/** @param {NS} ns **/\\n// TODO: unused + unfinished, based on setup.ns\\nexport async function main(ns) {\\n\\tconst myServers = [\\\"home\\\"];\\n\\n\\tvar servers = await getServerList(myServers, 0, ns);\\n\\n\\tfor (let entry in servers) {\\t\\n\\t\\tawait takeover(servers[entry], ns);\\n\\t}\\n}\",\"filename\":\"deep-setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"univ-energy\",\"moduleSequenceNumber\":895,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\t//\\n}\",\"filename\":\"formulas-testing.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"univ-energy\",\"moduleSequenceNumber\":896,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tconst currentMachine = ns.getHostname();\\n\\tvar servers = ns.scan(currentMachine);\\n\\tvar scripts = ns.ls(home, \\\"basic-\\\");\\n\\n\\tns.tprint(\\\"Host:  \\\" + currentMachine);\\n\\tfor (let entry in servers) {\\t// depth 0\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\t// depth 1\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== home && subservers.length > 1) {\\n\\t\\t\\t\\tns.tprint(\\\"-----> \\\" + subservers[subentry]);\\n\\t\\t\\t\\tlet subserversd2 = ns.scan(subservers[subentry]); // depth 2\\n\\t\\t\\t\\tfor (let subentryd2 in subserversd2) {\\n\\t\\t\\t\\t\\tif (subserversd2[subentryd2] !== subservers[subentry] && subserversd2[subentryd2] !== servers[entry] && subserversd2.length > 1) {\\n\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------> \\\" + subserversd2[subentryd2]);\\n\\t\\t\\t\\t\\t\\tlet subserversd3 = ns.scan(subserversd2[subentryd2]);\\t// depth 3\\n\\t\\t\\t\\t\\t\\tfor (let subentryd3 in subserversd3) {\\n\\t\\t\\t\\t\\t\\t\\tif (subserversd3[subentryd3] !== subserversd2[subentryd2] && subserversd3[subentryd3] !== subservers[subentry] && subserversd3.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------> \\\" + subserversd3[subentryd3]);\\n\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd4 = ns.scan(subserversd3[subentryd3]);\\t// depth 4\\n\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd4 in subserversd4) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd4[subentryd4] !== subserversd3[subentryd3] && subserversd4[subentryd4] !== subserversd2[subentryd2] && subserversd4.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------------> \\\" + subserversd4[subentryd4]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd5 = ns.scan(subserversd4[subentryd4]);\\t// depth 5\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd5 in subserversd5) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd5[subentryd5] !== subserversd4[subentryd4] && subserversd5[subentryd5] !== subserversd3[subentryd3] && subserversd5.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-------------------------> \\\" + subserversd5[subentryd5]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd6 = ns.scan(subserversd5[subentryd5]);\\t// depth 6\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd6 in subserversd6) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd6[subentryd6] !== subserversd5[subentryd5] && subserversd6[subentryd6] !== subserversd4[subentryd4] && subserversd6.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"------------------------------> \\\" + subserversd6[subentryd6]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd7 = ns.scan(subserversd6[subentryd6]);\\t// depth 7\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor(let subentryd7 in subserversd7) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd7[subentryd7] !== subserversd6[subentryd6] && subserversd7[subentryd7] !== subserversd5[subentryd5] && subserversd7.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-----------------------------------> \\\" + subserversd7[subentryd7]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"gigascan.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.05,\"server\":\"univ-energy\",\"moduleSequenceNumber\":897,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet targetRam = ns.getServerMaxRam(ns.args[0]);\\n\\tlet scriptMem = ns.getScriptRam(ns.args[1]);\\n\\n\\tns.tprint(\\\"Maximum possible threads for \\\" + ns.args[1] + \\\": \\\" + Math.floor(targetRam / scriptMem));\\n\\tns.exit;\\n}\",\"filename\":\"ram-usage.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"univ-energy\",\"moduleSequenceNumber\":898,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerList } from \\\"modules/helper.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet serversSeen = [\\\"home\\\"]; // home + bought servers\\n\\tlet contractList = [];\\n\\n\\tserversSeen = await getServerList(serversSeen, 0, ns);\\n\\n\\tns.tprint(serversSeen);\\n}\",\"filename\":\"search-coding-contracts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"univ-energy\",\"moduleSequenceNumber\":899,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tvar servers = ns.scan(home);\\n\\tvar scripts = ns.ls(home, \\\".js\\\");\\n\\n\\tfor (let entry in scripts) {\\n\\t\\tns.tprint(\\\"found script: \\\" + scripts[entry]);\\n\\t}\\n\\n\\t// Hack servers (!!! depth = 2 !!!) if needed and populate with scripts\\n\\tfor (let entry in servers) {\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== \\\"home\\\") {\\n\\t\\t\\t\\tns.tprint(\\\"----->   \\\" + subservers[subentry]);\\n\\t\\t\\t\\tif (!ns.hasRootAccess(subservers[subentry])) {\\n\\t\\t\\t\\t\\ttakeover(subservers[subentry]);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tns.tprint(\\\"copying scripts to \\\" + subservers[subentry]);\\n\\t\\t\\t\\tawait ns.scp(scripts, home, subservers[subentry]);\\n\\t\\t\\t\\t//await ns.scp(\\\"setup.ns\\\", home, subservers[subentry]);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (!ns.hasRootAccess(servers[entry])) {\\n\\t\\t\\ttakeover(servers[entry]);\\n\\t\\t}\\n\\t\\tns.tprint(\\\"copying scripts to \\\" + servers[entry]);\\n\\t\\tawait ns.scp(scripts, home, servers[entry]);\\n\\t\\t//await ns.scp(\\\"setup.ns\\\", home, servers[entry]);\\n\\t}\\n\\n\\t/** \\n\\t * \\tAttempts to take over target machine\\t\\n\\t * \\n\\t *  @param {string} tar\\n\\t *  @return {boolean} outcome \\n\\t**/\\n\\tasync function takeover(tar) {\\n\\t\\tlet currentTarget = tar;\\n\\t\\tlet isNotTakenOver = true;\\n\\t\\tlet attemptCounter = 0;\\n\\n\\t\\tif (ns.getServerNumPortsRequired <= 5 && attemptCounter < 50) {\\n\\t\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\n\\t\\t\\t\\tattemptCounter++;\\n\\t\\t\\t}\\n\\n\\t\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.15,\"server\":\"univ-energy\",\"moduleSequenceNumber\":900,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}}],\"serversOnNetwork\":[\"unitalife\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":89,\"hackDifficulty\":89,\"minDifficulty\":30,\"moneyAvailable\":1109630240,\"moneyMax\":27740756000,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":854,\"serverGrowth\":83}},\"titan-labs\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"titan-labs\",\"httpPortOpen\":true,\"ip\":\"69.9.7.7\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"coded-intelligence.lit\"],\"organizationName\":\"Titan Laboratories\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Returns an array of all hostnames in the network tree\\n * \\n * @param {string[]} myServers\\n * @param {number} safetyCounter Prevents infnite recursion\\n * @param {NS} ns\\n */\\nexport async function getServerList(myServers, safetyCounter, ns) {\\n\\tlet srvrsSeen = myServers;\\n\\tlet currServScanResult = [];\\n\\n\\tfor (let serverSeen in srvrsSeen) {\\n\\t\\tcurrServScanResult = ns.scan(srvrsSeen[serverSeen]);\\n\\t\\tfor (let entry in currServScanResult) {\\n\\t\\t\\tif (!srvrsSeen.includes(currServScanResult[entry])) {\\n\\t\\t\\t\\tsrvrsSeen.push(currServScanResult[entry]);\\n\\t\\t\\t\\tif ((++safetyCounter) < 250) {\\n\\t\\t\\t\\t\\tawait getServerList(srvrsSeen, safetyCounter, ns);\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tns.exit();\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\t//Filter out invalid values (NaN, null, {}, undefined)\\n\\tsrvrsSeen = srvrsSeen.filter(x => x);\\n\\treturn srvrsSeen;\\n}\\n\\n\\n/** \\n * \\tAttempts to take over target machine\\t\\n * \\n *  @param {string} target\\n * \\t@param {NS} ns\\n *  @return {boolean} outcome \\n**/\\nexport async function takeover(target, ns) {\\n\\tconst home = \\\"home\\\";\\n\\tlet currentTarget = target;\\n\\tlet isNotTakenOver = true;\\n\\tlet attemptCounter = 0;\\n\\n\\tlet scripts = ns.ls(home, \\\".js\\\");\\n\\t//scripts.push(ns.ls(home, \\\".ns\\\")); //in case of deprecated .ns scripts\\n\\n\\tif (!ns.hasRootAccess(currentTarget) && attemptCounter < 30) {\\n\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\ttry {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t} catch (error) {\\n\\t\\t\\t\\t\\tns.tprint(\\\"not enough ports to nuke \\\" + currentTarget);\\n\\t\\t\\t\\t\\treturn false;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t}\\n\\t\\t\\tattemptCounter++;\\n\\t\\t}\\n\\n\\t\\tawait ns.scp(scripts, home, currentTarget);\\n\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\",\"filename\":\"/modules/helper.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"titan-labs\",\"moduleSequenceNumber\":901,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.grow(target);\\n\\t}\\n}\",\"filename\":\"basic-grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"titan-labs\",\"moduleSequenceNumber\":902,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"basic-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"titan-labs\",\"moduleSequenceNumber\":903,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(target);\\n\\t}\\n}\",\"filename\":\"basic-weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"titan-labs\",\"moduleSequenceNumber\":904,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerList, takeover } from \\\"modules/helper.js\\\";\\n\\n/** @param {NS} ns **/\\n// TODO: unused + unfinished, based on setup.ns\\nexport async function main(ns) {\\n\\tconst myServers = [\\\"home\\\"];\\n\\n\\tvar servers = await getServerList(myServers, 0, ns);\\n\\n\\tfor (let entry in servers) {\\t\\n\\t\\tawait takeover(servers[entry], ns);\\n\\t}\\n}\",\"filename\":\"deep-setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"titan-labs\",\"moduleSequenceNumber\":905,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\t//\\n}\",\"filename\":\"formulas-testing.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"titan-labs\",\"moduleSequenceNumber\":906,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tconst currentMachine = ns.getHostname();\\n\\tvar servers = ns.scan(currentMachine);\\n\\tvar scripts = ns.ls(home, \\\"basic-\\\");\\n\\n\\tns.tprint(\\\"Host:  \\\" + currentMachine);\\n\\tfor (let entry in servers) {\\t// depth 0\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\t// depth 1\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== home && subservers.length > 1) {\\n\\t\\t\\t\\tns.tprint(\\\"-----> \\\" + subservers[subentry]);\\n\\t\\t\\t\\tlet subserversd2 = ns.scan(subservers[subentry]); // depth 2\\n\\t\\t\\t\\tfor (let subentryd2 in subserversd2) {\\n\\t\\t\\t\\t\\tif (subserversd2[subentryd2] !== subservers[subentry] && subserversd2[subentryd2] !== servers[entry] && subserversd2.length > 1) {\\n\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------> \\\" + subserversd2[subentryd2]);\\n\\t\\t\\t\\t\\t\\tlet subserversd3 = ns.scan(subserversd2[subentryd2]);\\t// depth 3\\n\\t\\t\\t\\t\\t\\tfor (let subentryd3 in subserversd3) {\\n\\t\\t\\t\\t\\t\\t\\tif (subserversd3[subentryd3] !== subserversd2[subentryd2] && subserversd3[subentryd3] !== subservers[subentry] && subserversd3.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------> \\\" + subserversd3[subentryd3]);\\n\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd4 = ns.scan(subserversd3[subentryd3]);\\t// depth 4\\n\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd4 in subserversd4) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd4[subentryd4] !== subserversd3[subentryd3] && subserversd4[subentryd4] !== subserversd2[subentryd2] && subserversd4.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------------> \\\" + subserversd4[subentryd4]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd5 = ns.scan(subserversd4[subentryd4]);\\t// depth 5\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd5 in subserversd5) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd5[subentryd5] !== subserversd4[subentryd4] && subserversd5[subentryd5] !== subserversd3[subentryd3] && subserversd5.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-------------------------> \\\" + subserversd5[subentryd5]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd6 = ns.scan(subserversd5[subentryd5]);\\t// depth 6\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd6 in subserversd6) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd6[subentryd6] !== subserversd5[subentryd5] && subserversd6[subentryd6] !== subserversd4[subentryd4] && subserversd6.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"------------------------------> \\\" + subserversd6[subentryd6]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd7 = ns.scan(subserversd6[subentryd6]);\\t// depth 7\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor(let subentryd7 in subserversd7) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd7[subentryd7] !== subserversd6[subentryd6] && subserversd7[subentryd7] !== subserversd5[subentryd5] && subserversd7.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-----------------------------------> \\\" + subserversd7[subentryd7]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"gigascan.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.05,\"server\":\"titan-labs\",\"moduleSequenceNumber\":907,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet targetRam = ns.getServerMaxRam(ns.args[0]);\\n\\tlet scriptMem = ns.getScriptRam(ns.args[1]);\\n\\n\\tns.tprint(\\\"Maximum possible threads for \\\" + ns.args[1] + \\\": \\\" + Math.floor(targetRam / scriptMem));\\n\\tns.exit;\\n}\",\"filename\":\"ram-usage.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"titan-labs\",\"moduleSequenceNumber\":908,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerList } from \\\"modules/helper.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet serversSeen = [\\\"home\\\"]; // home + bought servers\\n\\tlet contractList = [];\\n\\n\\tserversSeen = await getServerList(serversSeen, 0, ns);\\n\\n\\tns.tprint(serversSeen);\\n}\",\"filename\":\"search-coding-contracts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"titan-labs\",\"moduleSequenceNumber\":909,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tvar servers = ns.scan(home);\\n\\tvar scripts = ns.ls(home, \\\".js\\\");\\n\\n\\tfor (let entry in scripts) {\\n\\t\\tns.tprint(\\\"found script: \\\" + scripts[entry]);\\n\\t}\\n\\n\\t// Hack servers (!!! depth = 2 !!!) if needed and populate with scripts\\n\\tfor (let entry in servers) {\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== \\\"home\\\") {\\n\\t\\t\\t\\tns.tprint(\\\"----->   \\\" + subservers[subentry]);\\n\\t\\t\\t\\tif (!ns.hasRootAccess(subservers[subentry])) {\\n\\t\\t\\t\\t\\ttakeover(subservers[subentry]);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tns.tprint(\\\"copying scripts to \\\" + subservers[subentry]);\\n\\t\\t\\t\\tawait ns.scp(scripts, home, subservers[subentry]);\\n\\t\\t\\t\\t//await ns.scp(\\\"setup.ns\\\", home, subservers[subentry]);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (!ns.hasRootAccess(servers[entry])) {\\n\\t\\t\\ttakeover(servers[entry]);\\n\\t\\t}\\n\\t\\tns.tprint(\\\"copying scripts to \\\" + servers[entry]);\\n\\t\\tawait ns.scp(scripts, home, servers[entry]);\\n\\t\\t//await ns.scp(\\\"setup.ns\\\", home, servers[entry]);\\n\\t}\\n\\n\\t/** \\n\\t * \\tAttempts to take over target machine\\t\\n\\t * \\n\\t *  @param {string} tar\\n\\t *  @return {boolean} outcome \\n\\t**/\\n\\tasync function takeover(tar) {\\n\\t\\tlet currentTarget = tar;\\n\\t\\tlet isNotTakenOver = true;\\n\\t\\tlet attemptCounter = 0;\\n\\n\\t\\tif (ns.getServerNumPortsRequired <= 5 && attemptCounter < 50) {\\n\\t\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\n\\t\\t\\t\\tattemptCounter++;\\n\\t\\t\\t}\\n\\n\\t\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.15,\"server\":\"titan-labs\",\"moduleSequenceNumber\":910,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}}],\"serversOnNetwork\":[\"zb-def\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":74,\"hackDifficulty\":74,\"minDifficulty\":25,\"moneyAvailable\":833265864,\"moneyMax\":20831646600,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":854,\"serverGrowth\":70}},\"microdyne\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"microdyne\",\"httpPortOpen\":true,\"ip\":\"0.4.3.6\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"Microdyne Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Returns an array of all hostnames in the network tree\\n * \\n * @param {string[]} myServers\\n * @param {number} safetyCounter Prevents infnite recursion\\n * @param {NS} ns\\n */\\nexport async function getServerList(myServers, safetyCounter, ns) {\\n\\tlet srvrsSeen = myServers;\\n\\tlet currServScanResult = [];\\n\\n\\tfor (let serverSeen in srvrsSeen) {\\n\\t\\tcurrServScanResult = ns.scan(srvrsSeen[serverSeen]);\\n\\t\\tfor (let entry in currServScanResult) {\\n\\t\\t\\tif (!srvrsSeen.includes(currServScanResult[entry])) {\\n\\t\\t\\t\\tsrvrsSeen.push(currServScanResult[entry]);\\n\\t\\t\\t\\tif ((++safetyCounter) < 250) {\\n\\t\\t\\t\\t\\tawait getServerList(srvrsSeen, safetyCounter, ns);\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tns.exit();\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\t//Filter out invalid values (NaN, null, {}, undefined)\\n\\tsrvrsSeen = srvrsSeen.filter(x => x);\\n\\treturn srvrsSeen;\\n}\\n\\n\\n/** \\n * \\tAttempts to take over target machine\\t\\n * \\n *  @param {string} target\\n * \\t@param {NS} ns\\n *  @return {boolean} outcome \\n**/\\nexport async function takeover(target, ns) {\\n\\tconst home = \\\"home\\\";\\n\\tlet currentTarget = target;\\n\\tlet isNotTakenOver = true;\\n\\tlet attemptCounter = 0;\\n\\n\\tlet scripts = ns.ls(home, \\\".js\\\");\\n\\t//scripts.push(ns.ls(home, \\\".ns\\\")); //in case of deprecated .ns scripts\\n\\n\\tif (!ns.hasRootAccess(currentTarget) && attemptCounter < 30) {\\n\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\ttry {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t} catch (error) {\\n\\t\\t\\t\\t\\tns.tprint(\\\"not enough ports to nuke \\\" + currentTarget);\\n\\t\\t\\t\\t\\treturn false;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t}\\n\\t\\t\\tattemptCounter++;\\n\\t\\t}\\n\\n\\t\\tawait ns.scp(scripts, home, currentTarget);\\n\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\",\"filename\":\"/modules/helper.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"microdyne\",\"moduleSequenceNumber\":911,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.grow(target);\\n\\t}\\n}\",\"filename\":\"basic-grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"microdyne\",\"moduleSequenceNumber\":912,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"basic-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"microdyne\",\"moduleSequenceNumber\":913,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(target);\\n\\t}\\n}\",\"filename\":\"basic-weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"microdyne\",\"moduleSequenceNumber\":914,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerList, takeover } from \\\"modules/helper.js\\\";\\n\\n/** @param {NS} ns **/\\n// TODO: unused + unfinished, based on setup.ns\\nexport async function main(ns) {\\n\\tconst myServers = [\\\"home\\\"];\\n\\n\\tvar servers = await getServerList(myServers, 0, ns);\\n\\n\\tfor (let entry in servers) {\\t\\n\\t\\tawait takeover(servers[entry], ns);\\n\\t}\\n}\",\"filename\":\"deep-setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"microdyne\",\"moduleSequenceNumber\":915,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\t//\\n}\",\"filename\":\"formulas-testing.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"microdyne\",\"moduleSequenceNumber\":916,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tconst currentMachine = ns.getHostname();\\n\\tvar servers = ns.scan(currentMachine);\\n\\tvar scripts = ns.ls(home, \\\"basic-\\\");\\n\\n\\tns.tprint(\\\"Host:  \\\" + currentMachine);\\n\\tfor (let entry in servers) {\\t// depth 0\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\t// depth 1\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== home && subservers.length > 1) {\\n\\t\\t\\t\\tns.tprint(\\\"-----> \\\" + subservers[subentry]);\\n\\t\\t\\t\\tlet subserversd2 = ns.scan(subservers[subentry]); // depth 2\\n\\t\\t\\t\\tfor (let subentryd2 in subserversd2) {\\n\\t\\t\\t\\t\\tif (subserversd2[subentryd2] !== subservers[subentry] && subserversd2[subentryd2] !== servers[entry] && subserversd2.length > 1) {\\n\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------> \\\" + subserversd2[subentryd2]);\\n\\t\\t\\t\\t\\t\\tlet subserversd3 = ns.scan(subserversd2[subentryd2]);\\t// depth 3\\n\\t\\t\\t\\t\\t\\tfor (let subentryd3 in subserversd3) {\\n\\t\\t\\t\\t\\t\\t\\tif (subserversd3[subentryd3] !== subserversd2[subentryd2] && subserversd3[subentryd3] !== subservers[subentry] && subserversd3.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------> \\\" + subserversd3[subentryd3]);\\n\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd4 = ns.scan(subserversd3[subentryd3]);\\t// depth 4\\n\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd4 in subserversd4) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd4[subentryd4] !== subserversd3[subentryd3] && subserversd4[subentryd4] !== subserversd2[subentryd2] && subserversd4.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------------> \\\" + subserversd4[subentryd4]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd5 = ns.scan(subserversd4[subentryd4]);\\t// depth 5\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd5 in subserversd5) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd5[subentryd5] !== subserversd4[subentryd4] && subserversd5[subentryd5] !== subserversd3[subentryd3] && subserversd5.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-------------------------> \\\" + subserversd5[subentryd5]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd6 = ns.scan(subserversd5[subentryd5]);\\t// depth 6\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd6 in subserversd6) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd6[subentryd6] !== subserversd5[subentryd5] && subserversd6[subentryd6] !== subserversd4[subentryd4] && subserversd6.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"------------------------------> \\\" + subserversd6[subentryd6]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd7 = ns.scan(subserversd6[subentryd6]);\\t// depth 7\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor(let subentryd7 in subserversd7) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd7[subentryd7] !== subserversd6[subentryd6] && subserversd7[subentryd7] !== subserversd5[subentryd5] && subserversd7.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-----------------------------------> \\\" + subserversd7[subentryd7]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"gigascan.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.05,\"server\":\"microdyne\",\"moduleSequenceNumber\":917,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet targetRam = ns.getServerMaxRam(ns.args[0]);\\n\\tlet scriptMem = ns.getScriptRam(ns.args[1]);\\n\\n\\tns.tprint(\\\"Maximum possible threads for \\\" + ns.args[1] + \\\": \\\" + Math.floor(targetRam / scriptMem));\\n\\tns.exit;\\n}\",\"filename\":\"ram-usage.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"microdyne\",\"moduleSequenceNumber\":918,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerList } from \\\"modules/helper.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet serversSeen = [\\\"home\\\"]; // home + bought servers\\n\\tlet contractList = [];\\n\\n\\tserversSeen = await getServerList(serversSeen, 0, ns);\\n\\n\\tns.tprint(serversSeen);\\n}\",\"filename\":\"search-coding-contracts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"microdyne\",\"moduleSequenceNumber\":919,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tvar servers = ns.scan(home);\\n\\tvar scripts = ns.ls(home, \\\".js\\\");\\n\\n\\tfor (let entry in scripts) {\\n\\t\\tns.tprint(\\\"found script: \\\" + scripts[entry]);\\n\\t}\\n\\n\\t// Hack servers (!!! depth = 2 !!!) if needed and populate with scripts\\n\\tfor (let entry in servers) {\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== \\\"home\\\") {\\n\\t\\t\\t\\tns.tprint(\\\"----->   \\\" + subservers[subentry]);\\n\\t\\t\\t\\tif (!ns.hasRootAccess(subservers[subentry])) {\\n\\t\\t\\t\\t\\ttakeover(subservers[subentry]);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tns.tprint(\\\"copying scripts to \\\" + subservers[subentry]);\\n\\t\\t\\t\\tawait ns.scp(scripts, home, subservers[subentry]);\\n\\t\\t\\t\\t//await ns.scp(\\\"setup.ns\\\", home, subservers[subentry]);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (!ns.hasRootAccess(servers[entry])) {\\n\\t\\t\\ttakeover(servers[entry]);\\n\\t\\t}\\n\\t\\tns.tprint(\\\"copying scripts to \\\" + servers[entry]);\\n\\t\\tawait ns.scp(scripts, home, servers[entry]);\\n\\t\\t//await ns.scp(\\\"setup.ns\\\", home, servers[entry]);\\n\\t}\\n\\n\\t/** \\n\\t * \\tAttempts to take over target machine\\t\\n\\t * \\n\\t *  @param {string} tar\\n\\t *  @return {boolean} outcome \\n\\t**/\\n\\tasync function takeover(tar) {\\n\\t\\tlet currentTarget = tar;\\n\\t\\tlet isNotTakenOver = true;\\n\\t\\tlet attemptCounter = 0;\\n\\n\\t\\tif (ns.getServerNumPortsRequired <= 5 && attemptCounter < 50) {\\n\\t\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\n\\t\\t\\t\\tattemptCounter++;\\n\\t\\t\\t}\\n\\n\\t\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.15,\"server\":\"microdyne\",\"moduleSequenceNumber\":920,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}}],\"serversOnNetwork\":[\"taiyang-digital\",\"fulcrumtech\",\"vitalife\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":65,\"hackDifficulty\":65,\"minDifficulty\":22,\"moneyAvailable\":581602401,\"moneyMax\":14540060025,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":820,\"serverGrowth\":75}},\"taiyang-digital\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"taiyang-digital\",\"httpPortOpen\":true,\"ip\":\"79.6.3.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"A-Green-Tomorrow.lit\",\"brighter-than-the-sun.lit\"],\"organizationName\":\"Taiyang Digital\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Returns an array of all hostnames in the network tree\\n * \\n * @param {string[]} myServers\\n * @param {number} safetyCounter Prevents infnite recursion\\n * @param {NS} ns\\n */\\nexport async function getServerList(myServers, safetyCounter, ns) {\\n\\tlet srvrsSeen = myServers;\\n\\tlet currServScanResult = [];\\n\\n\\tfor (let serverSeen in srvrsSeen) {\\n\\t\\tcurrServScanResult = ns.scan(srvrsSeen[serverSeen]);\\n\\t\\tfor (let entry in currServScanResult) {\\n\\t\\t\\tif (!srvrsSeen.includes(currServScanResult[entry])) {\\n\\t\\t\\t\\tsrvrsSeen.push(currServScanResult[entry]);\\n\\t\\t\\t\\tif ((++safetyCounter) < 250) {\\n\\t\\t\\t\\t\\tawait getServerList(srvrsSeen, safetyCounter, ns);\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tns.exit();\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\t//Filter out invalid values (NaN, null, {}, undefined)\\n\\tsrvrsSeen = srvrsSeen.filter(x => x);\\n\\treturn srvrsSeen;\\n}\\n\\n\\n/** \\n * \\tAttempts to take over target machine\\t\\n * \\n *  @param {string} target\\n * \\t@param {NS} ns\\n *  @return {boolean} outcome \\n**/\\nexport async function takeover(target, ns) {\\n\\tconst home = \\\"home\\\";\\n\\tlet currentTarget = target;\\n\\tlet isNotTakenOver = true;\\n\\tlet attemptCounter = 0;\\n\\n\\tlet scripts = ns.ls(home, \\\".js\\\");\\n\\t//scripts.push(ns.ls(home, \\\".ns\\\")); //in case of deprecated .ns scripts\\n\\n\\tif (!ns.hasRootAccess(currentTarget) && attemptCounter < 30) {\\n\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\ttry {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t} catch (error) {\\n\\t\\t\\t\\t\\tns.tprint(\\\"not enough ports to nuke \\\" + currentTarget);\\n\\t\\t\\t\\t\\treturn false;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t}\\n\\t\\t\\tattemptCounter++;\\n\\t\\t}\\n\\n\\t\\tawait ns.scp(scripts, home, currentTarget);\\n\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\",\"filename\":\"/modules/helper.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"taiyang-digital\",\"moduleSequenceNumber\":921,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.grow(target);\\n\\t}\\n}\",\"filename\":\"basic-grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"taiyang-digital\",\"moduleSequenceNumber\":922,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"basic-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"taiyang-digital\",\"moduleSequenceNumber\":923,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(target);\\n\\t}\\n}\",\"filename\":\"basic-weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"taiyang-digital\",\"moduleSequenceNumber\":924,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerList, takeover } from \\\"modules/helper.js\\\";\\n\\n/** @param {NS} ns **/\\n// TODO: unused + unfinished, based on setup.ns\\nexport async function main(ns) {\\n\\tconst myServers = [\\\"home\\\"];\\n\\n\\tvar servers = await getServerList(myServers, 0, ns);\\n\\n\\tfor (let entry in servers) {\\t\\n\\t\\tawait takeover(servers[entry], ns);\\n\\t}\\n}\",\"filename\":\"deep-setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"taiyang-digital\",\"moduleSequenceNumber\":925,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\t//\\n}\",\"filename\":\"formulas-testing.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"taiyang-digital\",\"moduleSequenceNumber\":926,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tconst currentMachine = ns.getHostname();\\n\\tvar servers = ns.scan(currentMachine);\\n\\tvar scripts = ns.ls(home, \\\"basic-\\\");\\n\\n\\tns.tprint(\\\"Host:  \\\" + currentMachine);\\n\\tfor (let entry in servers) {\\t// depth 0\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\t// depth 1\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== home && subservers.length > 1) {\\n\\t\\t\\t\\tns.tprint(\\\"-----> \\\" + subservers[subentry]);\\n\\t\\t\\t\\tlet subserversd2 = ns.scan(subservers[subentry]); // depth 2\\n\\t\\t\\t\\tfor (let subentryd2 in subserversd2) {\\n\\t\\t\\t\\t\\tif (subserversd2[subentryd2] !== subservers[subentry] && subserversd2[subentryd2] !== servers[entry] && subserversd2.length > 1) {\\n\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------> \\\" + subserversd2[subentryd2]);\\n\\t\\t\\t\\t\\t\\tlet subserversd3 = ns.scan(subserversd2[subentryd2]);\\t// depth 3\\n\\t\\t\\t\\t\\t\\tfor (let subentryd3 in subserversd3) {\\n\\t\\t\\t\\t\\t\\t\\tif (subserversd3[subentryd3] !== subserversd2[subentryd2] && subserversd3[subentryd3] !== subservers[subentry] && subserversd3.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------> \\\" + subserversd3[subentryd3]);\\n\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd4 = ns.scan(subserversd3[subentryd3]);\\t// depth 4\\n\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd4 in subserversd4) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd4[subentryd4] !== subserversd3[subentryd3] && subserversd4[subentryd4] !== subserversd2[subentryd2] && subserversd4.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------------> \\\" + subserversd4[subentryd4]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd5 = ns.scan(subserversd4[subentryd4]);\\t// depth 5\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd5 in subserversd5) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd5[subentryd5] !== subserversd4[subentryd4] && subserversd5[subentryd5] !== subserversd3[subentryd3] && subserversd5.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-------------------------> \\\" + subserversd5[subentryd5]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd6 = ns.scan(subserversd5[subentryd5]);\\t// depth 6\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd6 in subserversd6) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd6[subentryd6] !== subserversd5[subentryd5] && subserversd6[subentryd6] !== subserversd4[subentryd4] && subserversd6.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"------------------------------> \\\" + subserversd6[subentryd6]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd7 = ns.scan(subserversd6[subentryd6]);\\t// depth 7\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor(let subentryd7 in subserversd7) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd7[subentryd7] !== subserversd6[subentryd6] && subserversd7[subentryd7] !== subserversd5[subentryd5] && subserversd7.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-----------------------------------> \\\" + subserversd7[subentryd7]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"gigascan.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.05,\"server\":\"taiyang-digital\",\"moduleSequenceNumber\":927,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet targetRam = ns.getServerMaxRam(ns.args[0]);\\n\\tlet scriptMem = ns.getScriptRam(ns.args[1]);\\n\\n\\tns.tprint(\\\"Maximum possible threads for \\\" + ns.args[1] + \\\": \\\" + Math.floor(targetRam / scriptMem));\\n\\tns.exit;\\n}\",\"filename\":\"ram-usage.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"taiyang-digital\",\"moduleSequenceNumber\":928,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerList } from \\\"modules/helper.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet serversSeen = [\\\"home\\\"]; // home + bought servers\\n\\tlet contractList = [];\\n\\n\\tserversSeen = await getServerList(serversSeen, 0, ns);\\n\\n\\tns.tprint(serversSeen);\\n}\",\"filename\":\"search-coding-contracts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"taiyang-digital\",\"moduleSequenceNumber\":929,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tvar servers = ns.scan(home);\\n\\tvar scripts = ns.ls(home, \\\".js\\\");\\n\\n\\tfor (let entry in scripts) {\\n\\t\\tns.tprint(\\\"found script: \\\" + scripts[entry]);\\n\\t}\\n\\n\\t// Hack servers (!!! depth = 2 !!!) if needed and populate with scripts\\n\\tfor (let entry in servers) {\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== \\\"home\\\") {\\n\\t\\t\\t\\tns.tprint(\\\"----->   \\\" + subservers[subentry]);\\n\\t\\t\\t\\tif (!ns.hasRootAccess(subservers[subentry])) {\\n\\t\\t\\t\\t\\ttakeover(subservers[subentry]);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tns.tprint(\\\"copying scripts to \\\" + subservers[subentry]);\\n\\t\\t\\t\\tawait ns.scp(scripts, home, subservers[subentry]);\\n\\t\\t\\t\\t//await ns.scp(\\\"setup.ns\\\", home, subservers[subentry]);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (!ns.hasRootAccess(servers[entry])) {\\n\\t\\t\\ttakeover(servers[entry]);\\n\\t\\t}\\n\\t\\tns.tprint(\\\"copying scripts to \\\" + servers[entry]);\\n\\t\\tawait ns.scp(scripts, home, servers[entry]);\\n\\t\\t//await ns.scp(\\\"setup.ns\\\", home, servers[entry]);\\n\\t}\\n\\n\\t/** \\n\\t * \\tAttempts to take over target machine\\t\\n\\t * \\n\\t *  @param {string} tar\\n\\t *  @return {boolean} outcome \\n\\t**/\\n\\tasync function takeover(tar) {\\n\\t\\tlet currentTarget = tar;\\n\\t\\tlet isNotTakenOver = true;\\n\\t\\tlet attemptCounter = 0;\\n\\n\\t\\tif (ns.getServerNumPortsRequired <= 5 && attemptCounter < 50) {\\n\\t\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\n\\t\\t\\t\\tattemptCounter++;\\n\\t\\t\\t}\\n\\n\\t\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.15,\"server\":\"taiyang-digital\",\"moduleSequenceNumber\":930,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}}],\"serversOnNetwork\":[\"icarus\",\"microdyne\",\"applied-energetics\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":79,\"hackDifficulty\":79,\"minDifficulty\":26,\"moneyAvailable\":808922474,\"moneyMax\":20223061850,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":885,\"serverGrowth\":76}},\"galactic-cyber\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"galactic-cyber\",\"httpPortOpen\":true,\"ip\":\"64.2.4.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Galactic Cybersystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Returns an array of all hostnames in the network tree\\n * \\n * @param {string[]} myServers\\n * @param {number} safetyCounter Prevents infnite recursion\\n * @param {NS} ns\\n */\\nexport async function getServerList(myServers, safetyCounter, ns) {\\n\\tlet srvrsSeen = myServers;\\n\\tlet currServScanResult = [];\\n\\n\\tfor (let serverSeen in srvrsSeen) {\\n\\t\\tcurrServScanResult = ns.scan(srvrsSeen[serverSeen]);\\n\\t\\tfor (let entry in currServScanResult) {\\n\\t\\t\\tif (!srvrsSeen.includes(currServScanResult[entry])) {\\n\\t\\t\\t\\tsrvrsSeen.push(currServScanResult[entry]);\\n\\t\\t\\t\\tif ((++safetyCounter) < 250) {\\n\\t\\t\\t\\t\\tawait getServerList(srvrsSeen, safetyCounter, ns);\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tns.exit();\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\t//Filter out invalid values (NaN, null, {}, undefined)\\n\\tsrvrsSeen = srvrsSeen.filter(x => x);\\n\\treturn srvrsSeen;\\n}\\n\\n\\n/** \\n * \\tAttempts to take over target machine\\t\\n * \\n *  @param {string} target\\n * \\t@param {NS} ns\\n *  @return {boolean} outcome \\n**/\\nexport async function takeover(target, ns) {\\n\\tconst home = \\\"home\\\";\\n\\tlet currentTarget = target;\\n\\tlet isNotTakenOver = true;\\n\\tlet attemptCounter = 0;\\n\\n\\tlet scripts = ns.ls(home, \\\".js\\\");\\n\\t//scripts.push(ns.ls(home, \\\".ns\\\")); //in case of deprecated .ns scripts\\n\\n\\tif (!ns.hasRootAccess(currentTarget) && attemptCounter < 30) {\\n\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\ttry {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t} catch (error) {\\n\\t\\t\\t\\t\\tns.tprint(\\\"not enough ports to nuke \\\" + currentTarget);\\n\\t\\t\\t\\t\\treturn false;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t}\\n\\t\\t\\tattemptCounter++;\\n\\t\\t}\\n\\n\\t\\tawait ns.scp(scripts, home, currentTarget);\\n\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\",\"filename\":\"/modules/helper.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"galactic-cyber\",\"moduleSequenceNumber\":931,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.grow(target);\\n\\t}\\n}\",\"filename\":\"basic-grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"galactic-cyber\",\"moduleSequenceNumber\":932,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"basic-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"galactic-cyber\",\"moduleSequenceNumber\":933,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(target);\\n\\t}\\n}\",\"filename\":\"basic-weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"galactic-cyber\",\"moduleSequenceNumber\":934,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerList, takeover } from \\\"modules/helper.js\\\";\\n\\n/** @param {NS} ns **/\\n// TODO: unused + unfinished, based on setup.ns\\nexport async function main(ns) {\\n\\tconst myServers = [\\\"home\\\"];\\n\\n\\tvar servers = await getServerList(myServers, 0, ns);\\n\\n\\tfor (let entry in servers) {\\t\\n\\t\\tawait takeover(servers[entry], ns);\\n\\t}\\n}\",\"filename\":\"deep-setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"galactic-cyber\",\"moduleSequenceNumber\":935,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\t//\\n}\",\"filename\":\"formulas-testing.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"galactic-cyber\",\"moduleSequenceNumber\":936,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tconst currentMachine = ns.getHostname();\\n\\tvar servers = ns.scan(currentMachine);\\n\\tvar scripts = ns.ls(home, \\\"basic-\\\");\\n\\n\\tns.tprint(\\\"Host:  \\\" + currentMachine);\\n\\tfor (let entry in servers) {\\t// depth 0\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\t// depth 1\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== home && subservers.length > 1) {\\n\\t\\t\\t\\tns.tprint(\\\"-----> \\\" + subservers[subentry]);\\n\\t\\t\\t\\tlet subserversd2 = ns.scan(subservers[subentry]); // depth 2\\n\\t\\t\\t\\tfor (let subentryd2 in subserversd2) {\\n\\t\\t\\t\\t\\tif (subserversd2[subentryd2] !== subservers[subentry] && subserversd2[subentryd2] !== servers[entry] && subserversd2.length > 1) {\\n\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------> \\\" + subserversd2[subentryd2]);\\n\\t\\t\\t\\t\\t\\tlet subserversd3 = ns.scan(subserversd2[subentryd2]);\\t// depth 3\\n\\t\\t\\t\\t\\t\\tfor (let subentryd3 in subserversd3) {\\n\\t\\t\\t\\t\\t\\t\\tif (subserversd3[subentryd3] !== subserversd2[subentryd2] && subserversd3[subentryd3] !== subservers[subentry] && subserversd3.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------> \\\" + subserversd3[subentryd3]);\\n\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd4 = ns.scan(subserversd3[subentryd3]);\\t// depth 4\\n\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd4 in subserversd4) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd4[subentryd4] !== subserversd3[subentryd3] && subserversd4[subentryd4] !== subserversd2[subentryd2] && subserversd4.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------------> \\\" + subserversd4[subentryd4]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd5 = ns.scan(subserversd4[subentryd4]);\\t// depth 5\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd5 in subserversd5) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd5[subentryd5] !== subserversd4[subentryd4] && subserversd5[subentryd5] !== subserversd3[subentryd3] && subserversd5.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-------------------------> \\\" + subserversd5[subentryd5]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd6 = ns.scan(subserversd5[subentryd5]);\\t// depth 6\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd6 in subserversd6) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd6[subentryd6] !== subserversd5[subentryd5] && subserversd6[subentryd6] !== subserversd4[subentryd4] && subserversd6.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"------------------------------> \\\" + subserversd6[subentryd6]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd7 = ns.scan(subserversd6[subentryd6]);\\t// depth 7\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor(let subentryd7 in subserversd7) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd7[subentryd7] !== subserversd6[subentryd6] && subserversd7[subentryd7] !== subserversd5[subentryd5] && subserversd7.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-----------------------------------> \\\" + subserversd7[subentryd7]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"gigascan.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.05,\"server\":\"galactic-cyber\",\"moduleSequenceNumber\":937,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet targetRam = ns.getServerMaxRam(ns.args[0]);\\n\\tlet scriptMem = ns.getScriptRam(ns.args[1]);\\n\\n\\tns.tprint(\\\"Maximum possible threads for \\\" + ns.args[1] + \\\": \\\" + Math.floor(targetRam / scriptMem));\\n\\tns.exit;\\n}\",\"filename\":\"ram-usage.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"galactic-cyber\",\"moduleSequenceNumber\":938,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerList } from \\\"modules/helper.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet serversSeen = [\\\"home\\\"]; // home + bought servers\\n\\tlet contractList = [];\\n\\n\\tserversSeen = await getServerList(serversSeen, 0, ns);\\n\\n\\tns.tprint(serversSeen);\\n}\",\"filename\":\"search-coding-contracts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"galactic-cyber\",\"moduleSequenceNumber\":939,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tvar servers = ns.scan(home);\\n\\tvar scripts = ns.ls(home, \\\".js\\\");\\n\\n\\tfor (let entry in scripts) {\\n\\t\\tns.tprint(\\\"found script: \\\" + scripts[entry]);\\n\\t}\\n\\n\\t// Hack servers (!!! depth = 2 !!!) if needed and populate with scripts\\n\\tfor (let entry in servers) {\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== \\\"home\\\") {\\n\\t\\t\\t\\tns.tprint(\\\"----->   \\\" + subservers[subentry]);\\n\\t\\t\\t\\tif (!ns.hasRootAccess(subservers[subentry])) {\\n\\t\\t\\t\\t\\ttakeover(subservers[subentry]);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tns.tprint(\\\"copying scripts to \\\" + subservers[subentry]);\\n\\t\\t\\t\\tawait ns.scp(scripts, home, subservers[subentry]);\\n\\t\\t\\t\\t//await ns.scp(\\\"setup.ns\\\", home, subservers[subentry]);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (!ns.hasRootAccess(servers[entry])) {\\n\\t\\t\\ttakeover(servers[entry]);\\n\\t\\t}\\n\\t\\tns.tprint(\\\"copying scripts to \\\" + servers[entry]);\\n\\t\\tawait ns.scp(scripts, home, servers[entry]);\\n\\t\\t//await ns.scp(\\\"setup.ns\\\", home, servers[entry]);\\n\\t}\\n\\n\\t/** \\n\\t * \\tAttempts to take over target machine\\t\\n\\t * \\n\\t *  @param {string} tar\\n\\t *  @return {boolean} outcome \\n\\t**/\\n\\tasync function takeover(tar) {\\n\\t\\tlet currentTarget = tar;\\n\\t\\tlet isNotTakenOver = true;\\n\\t\\tlet attemptCounter = 0;\\n\\n\\t\\tif (ns.getServerNumPortsRequired <= 5 && attemptCounter < 50) {\\n\\t\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\n\\t\\t\\t\\tattemptCounter++;\\n\\t\\t\\t}\\n\\n\\t\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.15,\"server\":\"galactic-cyber\",\"moduleSequenceNumber\":940,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}}],\"serversOnNetwork\":[\"alpha-ent\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":64,\"hackDifficulty\":64,\"minDifficulty\":21,\"moneyAvailable\":820480952,\"moneyMax\":20512023800,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":866,\"serverGrowth\":80}},\"aerocorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-83637.cct\",\"type\":\"Minimum Path Sum in a Triangle\",\"data\":[[5],[9,8],[4,4,9],[8,3,3,6],[9,5,3,4,2],[2,9,4,5,2,3],[6,5,6,4,5,1,4],[3,6,9,7,7,3,4,4],[8,4,8,5,7,8,8,9,7],[8,8,3,5,9,8,4,5,7,2]],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"aerocorp\",\"httpPortOpen\":true,\"ip\":\"90.1.3.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"AeroCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Returns an array of all hostnames in the network tree\\n * \\n * @param {string[]} myServers\\n * @param {number} safetyCounter Prevents infnite recursion\\n * @param {NS} ns\\n */\\nexport async function getServerList(myServers, safetyCounter, ns) {\\n\\tlet srvrsSeen = myServers;\\n\\tlet currServScanResult = [];\\n\\n\\tfor (let serverSeen in srvrsSeen) {\\n\\t\\tcurrServScanResult = ns.scan(srvrsSeen[serverSeen]);\\n\\t\\tfor (let entry in currServScanResult) {\\n\\t\\t\\tif (!srvrsSeen.includes(currServScanResult[entry])) {\\n\\t\\t\\t\\tsrvrsSeen.push(currServScanResult[entry]);\\n\\t\\t\\t\\tif ((++safetyCounter) < 250) {\\n\\t\\t\\t\\t\\tawait getServerList(srvrsSeen, safetyCounter, ns);\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tns.exit();\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\t//Filter out invalid values (NaN, null, {}, undefined)\\n\\tsrvrsSeen = srvrsSeen.filter(x => x);\\n\\treturn srvrsSeen;\\n}\\n\\n\\n/** \\n * \\tAttempts to take over target machine\\t\\n * \\n *  @param {string} target\\n * \\t@param {NS} ns\\n *  @return {boolean} outcome \\n**/\\nexport async function takeover(target, ns) {\\n\\tconst home = \\\"home\\\";\\n\\tlet currentTarget = target;\\n\\tlet isNotTakenOver = true;\\n\\tlet attemptCounter = 0;\\n\\n\\tlet scripts = ns.ls(home, \\\".js\\\");\\n\\t//scripts.push(ns.ls(home, \\\".ns\\\")); //in case of deprecated .ns scripts\\n\\n\\tif (!ns.hasRootAccess(currentTarget) && attemptCounter < 30) {\\n\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\ttry {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t} catch (error) {\\n\\t\\t\\t\\t\\tns.tprint(\\\"not enough ports to nuke \\\" + currentTarget);\\n\\t\\t\\t\\t\\treturn false;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t}\\n\\t\\t\\tattemptCounter++;\\n\\t\\t}\\n\\n\\t\\tawait ns.scp(scripts, home, currentTarget);\\n\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\",\"filename\":\"/modules/helper.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"aerocorp\",\"moduleSequenceNumber\":941,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.grow(target);\\n\\t}\\n}\",\"filename\":\"basic-grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"aerocorp\",\"moduleSequenceNumber\":942,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"basic-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"aerocorp\",\"moduleSequenceNumber\":943,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(target);\\n\\t}\\n}\",\"filename\":\"basic-weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"aerocorp\",\"moduleSequenceNumber\":944,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerList, takeover } from \\\"modules/helper.js\\\";\\n\\n/** @param {NS} ns **/\\n// TODO: unused + unfinished, based on setup.ns\\nexport async function main(ns) {\\n\\tconst myServers = [\\\"home\\\"];\\n\\n\\tvar servers = await getServerList(myServers, 0, ns);\\n\\n\\tfor (let entry in servers) {\\t\\n\\t\\tawait takeover(servers[entry], ns);\\n\\t}\\n}\",\"filename\":\"deep-setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"aerocorp\",\"moduleSequenceNumber\":945,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\t//\\n}\",\"filename\":\"formulas-testing.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"aerocorp\",\"moduleSequenceNumber\":946,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tconst currentMachine = ns.getHostname();\\n\\tvar servers = ns.scan(currentMachine);\\n\\tvar scripts = ns.ls(home, \\\"basic-\\\");\\n\\n\\tns.tprint(\\\"Host:  \\\" + currentMachine);\\n\\tfor (let entry in servers) {\\t// depth 0\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\t// depth 1\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== home && subservers.length > 1) {\\n\\t\\t\\t\\tns.tprint(\\\"-----> \\\" + subservers[subentry]);\\n\\t\\t\\t\\tlet subserversd2 = ns.scan(subservers[subentry]); // depth 2\\n\\t\\t\\t\\tfor (let subentryd2 in subserversd2) {\\n\\t\\t\\t\\t\\tif (subserversd2[subentryd2] !== subservers[subentry] && subserversd2[subentryd2] !== servers[entry] && subserversd2.length > 1) {\\n\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------> \\\" + subserversd2[subentryd2]);\\n\\t\\t\\t\\t\\t\\tlet subserversd3 = ns.scan(subserversd2[subentryd2]);\\t// depth 3\\n\\t\\t\\t\\t\\t\\tfor (let subentryd3 in subserversd3) {\\n\\t\\t\\t\\t\\t\\t\\tif (subserversd3[subentryd3] !== subserversd2[subentryd2] && subserversd3[subentryd3] !== subservers[subentry] && subserversd3.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------> \\\" + subserversd3[subentryd3]);\\n\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd4 = ns.scan(subserversd3[subentryd3]);\\t// depth 4\\n\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd4 in subserversd4) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd4[subentryd4] !== subserversd3[subentryd3] && subserversd4[subentryd4] !== subserversd2[subentryd2] && subserversd4.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------------> \\\" + subserversd4[subentryd4]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd5 = ns.scan(subserversd4[subentryd4]);\\t// depth 5\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd5 in subserversd5) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd5[subentryd5] !== subserversd4[subentryd4] && subserversd5[subentryd5] !== subserversd3[subentryd3] && subserversd5.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-------------------------> \\\" + subserversd5[subentryd5]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd6 = ns.scan(subserversd5[subentryd5]);\\t// depth 6\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd6 in subserversd6) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd6[subentryd6] !== subserversd5[subentryd5] && subserversd6[subentryd6] !== subserversd4[subentryd4] && subserversd6.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"------------------------------> \\\" + subserversd6[subentryd6]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd7 = ns.scan(subserversd6[subentryd6]);\\t// depth 7\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor(let subentryd7 in subserversd7) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd7[subentryd7] !== subserversd6[subentryd6] && subserversd7[subentryd7] !== subserversd5[subentryd5] && subserversd7.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-----------------------------------> \\\" + subserversd7[subentryd7]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"gigascan.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.05,\"server\":\"aerocorp\",\"moduleSequenceNumber\":947,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet targetRam = ns.getServerMaxRam(ns.args[0]);\\n\\tlet scriptMem = ns.getScriptRam(ns.args[1]);\\n\\n\\tns.tprint(\\\"Maximum possible threads for \\\" + ns.args[1] + \\\": \\\" + Math.floor(targetRam / scriptMem));\\n\\tns.exit;\\n}\",\"filename\":\"ram-usage.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"aerocorp\",\"moduleSequenceNumber\":948,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerList } from \\\"modules/helper.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet serversSeen = [\\\"home\\\"]; // home + bought servers\\n\\tlet contractList = [];\\n\\n\\tserversSeen = await getServerList(serversSeen, 0, ns);\\n\\n\\tns.tprint(serversSeen);\\n}\",\"filename\":\"search-coding-contracts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"aerocorp\",\"moduleSequenceNumber\":949,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tvar servers = ns.scan(home);\\n\\tvar scripts = ns.ls(home, \\\".js\\\");\\n\\n\\tfor (let entry in scripts) {\\n\\t\\tns.tprint(\\\"found script: \\\" + scripts[entry]);\\n\\t}\\n\\n\\t// Hack servers (!!! depth = 2 !!!) if needed and populate with scripts\\n\\tfor (let entry in servers) {\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== \\\"home\\\") {\\n\\t\\t\\t\\tns.tprint(\\\"----->   \\\" + subservers[subentry]);\\n\\t\\t\\t\\tif (!ns.hasRootAccess(subservers[subentry])) {\\n\\t\\t\\t\\t\\ttakeover(subservers[subentry]);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tns.tprint(\\\"copying scripts to \\\" + subservers[subentry]);\\n\\t\\t\\t\\tawait ns.scp(scripts, home, subservers[subentry]);\\n\\t\\t\\t\\t//await ns.scp(\\\"setup.ns\\\", home, subservers[subentry]);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (!ns.hasRootAccess(servers[entry])) {\\n\\t\\t\\ttakeover(servers[entry]);\\n\\t\\t}\\n\\t\\tns.tprint(\\\"copying scripts to \\\" + servers[entry]);\\n\\t\\tawait ns.scp(scripts, home, servers[entry]);\\n\\t\\t//await ns.scp(\\\"setup.ns\\\", home, servers[entry]);\\n\\t}\\n\\n\\t/** \\n\\t * \\tAttempts to take over target machine\\t\\n\\t * \\n\\t *  @param {string} tar\\n\\t *  @return {boolean} outcome \\n\\t**/\\n\\tasync function takeover(tar) {\\n\\t\\tlet currentTarget = tar;\\n\\t\\tlet isNotTakenOver = true;\\n\\t\\tlet attemptCounter = 0;\\n\\n\\t\\tif (ns.getServerNumPortsRequired <= 5 && attemptCounter < 50) {\\n\\t\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\n\\t\\t\\t\\tattemptCounter++;\\n\\t\\t\\t}\\n\\n\\t\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.15,\"server\":\"aerocorp\",\"moduleSequenceNumber\":950,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}}],\"serversOnNetwork\":[\"millenium-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":83,\"hackDifficulty\":28,\"minDifficulty\":28,\"moneyAvailable\":0,\"moneyMax\":25539898225,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":906,\"serverGrowth\":64}},\"omnia\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omnia\",\"httpPortOpen\":true,\"ip\":\"40.8.1.1\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"history-of-synthoids.lit\"],\"organizationName\":\"Omnia Cybersystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Returns an array of all hostnames in the network tree\\n * \\n * @param {string[]} myServers\\n * @param {number} safetyCounter Prevents infnite recursion\\n * @param {NS} ns\\n */\\nexport async function getServerList(myServers, safetyCounter, ns) {\\n\\tlet srvrsSeen = myServers;\\n\\tlet currServScanResult = [];\\n\\n\\tfor (let serverSeen in srvrsSeen) {\\n\\t\\tcurrServScanResult = ns.scan(srvrsSeen[serverSeen]);\\n\\t\\tfor (let entry in currServScanResult) {\\n\\t\\t\\tif (!srvrsSeen.includes(currServScanResult[entry])) {\\n\\t\\t\\t\\tsrvrsSeen.push(currServScanResult[entry]);\\n\\t\\t\\t\\tif ((++safetyCounter) < 250) {\\n\\t\\t\\t\\t\\tawait getServerList(srvrsSeen, safetyCounter, ns);\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tns.exit();\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\t//Filter out invalid values (NaN, null, {}, undefined)\\n\\tsrvrsSeen = srvrsSeen.filter(x => x);\\n\\treturn srvrsSeen;\\n}\\n\\n\\n/** \\n * \\tAttempts to take over target machine\\t\\n * \\n *  @param {string} target\\n * \\t@param {NS} ns\\n *  @return {boolean} outcome \\n**/\\nexport async function takeover(target, ns) {\\n\\tconst home = \\\"home\\\";\\n\\tlet currentTarget = target;\\n\\tlet isNotTakenOver = true;\\n\\tlet attemptCounter = 0;\\n\\n\\tlet scripts = ns.ls(home, \\\".js\\\");\\n\\t//scripts.push(ns.ls(home, \\\".ns\\\")); //in case of deprecated .ns scripts\\n\\n\\tif (!ns.hasRootAccess(currentTarget) && attemptCounter < 30) {\\n\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\ttry {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t} catch (error) {\\n\\t\\t\\t\\t\\tns.tprint(\\\"not enough ports to nuke \\\" + currentTarget);\\n\\t\\t\\t\\t\\treturn false;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t}\\n\\t\\t\\tattemptCounter++;\\n\\t\\t}\\n\\n\\t\\tawait ns.scp(scripts, home, currentTarget);\\n\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\",\"filename\":\"/modules/helper.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"omnia\",\"moduleSequenceNumber\":951,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.grow(target);\\n\\t}\\n}\",\"filename\":\"basic-grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"omnia\",\"moduleSequenceNumber\":952,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"basic-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"omnia\",\"moduleSequenceNumber\":953,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(target);\\n\\t}\\n}\",\"filename\":\"basic-weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"omnia\",\"moduleSequenceNumber\":954,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerList, takeover } from \\\"modules/helper.js\\\";\\n\\n/** @param {NS} ns **/\\n// TODO: unused + unfinished, based on setup.ns\\nexport async function main(ns) {\\n\\tconst myServers = [\\\"home\\\"];\\n\\n\\tvar servers = await getServerList(myServers, 0, ns);\\n\\n\\tfor (let entry in servers) {\\t\\n\\t\\tawait takeover(servers[entry], ns);\\n\\t}\\n}\",\"filename\":\"deep-setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"omnia\",\"moduleSequenceNumber\":955,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\t//\\n}\",\"filename\":\"formulas-testing.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"omnia\",\"moduleSequenceNumber\":956,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tconst currentMachine = ns.getHostname();\\n\\tvar servers = ns.scan(currentMachine);\\n\\tvar scripts = ns.ls(home, \\\"basic-\\\");\\n\\n\\tns.tprint(\\\"Host:  \\\" + currentMachine);\\n\\tfor (let entry in servers) {\\t// depth 0\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\t// depth 1\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== home && subservers.length > 1) {\\n\\t\\t\\t\\tns.tprint(\\\"-----> \\\" + subservers[subentry]);\\n\\t\\t\\t\\tlet subserversd2 = ns.scan(subservers[subentry]); // depth 2\\n\\t\\t\\t\\tfor (let subentryd2 in subserversd2) {\\n\\t\\t\\t\\t\\tif (subserversd2[subentryd2] !== subservers[subentry] && subserversd2[subentryd2] !== servers[entry] && subserversd2.length > 1) {\\n\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------> \\\" + subserversd2[subentryd2]);\\n\\t\\t\\t\\t\\t\\tlet subserversd3 = ns.scan(subserversd2[subentryd2]);\\t// depth 3\\n\\t\\t\\t\\t\\t\\tfor (let subentryd3 in subserversd3) {\\n\\t\\t\\t\\t\\t\\t\\tif (subserversd3[subentryd3] !== subserversd2[subentryd2] && subserversd3[subentryd3] !== subservers[subentry] && subserversd3.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------> \\\" + subserversd3[subentryd3]);\\n\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd4 = ns.scan(subserversd3[subentryd3]);\\t// depth 4\\n\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd4 in subserversd4) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd4[subentryd4] !== subserversd3[subentryd3] && subserversd4[subentryd4] !== subserversd2[subentryd2] && subserversd4.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------------> \\\" + subserversd4[subentryd4]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd5 = ns.scan(subserversd4[subentryd4]);\\t// depth 5\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd5 in subserversd5) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd5[subentryd5] !== subserversd4[subentryd4] && subserversd5[subentryd5] !== subserversd3[subentryd3] && subserversd5.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-------------------------> \\\" + subserversd5[subentryd5]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd6 = ns.scan(subserversd5[subentryd5]);\\t// depth 6\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd6 in subserversd6) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd6[subentryd6] !== subserversd5[subentryd5] && subserversd6[subentryd6] !== subserversd4[subentryd4] && subserversd6.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"------------------------------> \\\" + subserversd6[subentryd6]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd7 = ns.scan(subserversd6[subentryd6]);\\t// depth 7\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor(let subentryd7 in subserversd7) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd7[subentryd7] !== subserversd6[subentryd6] && subserversd7[subentryd7] !== subserversd5[subentryd5] && subserversd7.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-----------------------------------> \\\" + subserversd7[subentryd7]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"gigascan.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.05,\"server\":\"omnia\",\"moduleSequenceNumber\":957,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet targetRam = ns.getServerMaxRam(ns.args[0]);\\n\\tlet scriptMem = ns.getScriptRam(ns.args[1]);\\n\\n\\tns.tprint(\\\"Maximum possible threads for \\\" + ns.args[1] + \\\": \\\" + Math.floor(targetRam / scriptMem));\\n\\tns.exit;\\n}\",\"filename\":\"ram-usage.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"omnia\",\"moduleSequenceNumber\":958,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerList } from \\\"modules/helper.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet serversSeen = [\\\"home\\\"]; // home + bought servers\\n\\tlet contractList = [];\\n\\n\\tserversSeen = await getServerList(serversSeen, 0, ns);\\n\\n\\tns.tprint(serversSeen);\\n}\",\"filename\":\"search-coding-contracts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"omnia\",\"moduleSequenceNumber\":959,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tvar servers = ns.scan(home);\\n\\tvar scripts = ns.ls(home, \\\".js\\\");\\n\\n\\tfor (let entry in scripts) {\\n\\t\\tns.tprint(\\\"found script: \\\" + scripts[entry]);\\n\\t}\\n\\n\\t// Hack servers (!!! depth = 2 !!!) if needed and populate with scripts\\n\\tfor (let entry in servers) {\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== \\\"home\\\") {\\n\\t\\t\\t\\tns.tprint(\\\"----->   \\\" + subservers[subentry]);\\n\\t\\t\\t\\tif (!ns.hasRootAccess(subservers[subentry])) {\\n\\t\\t\\t\\t\\ttakeover(subservers[subentry]);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tns.tprint(\\\"copying scripts to \\\" + subservers[subentry]);\\n\\t\\t\\t\\tawait ns.scp(scripts, home, subservers[subentry]);\\n\\t\\t\\t\\t//await ns.scp(\\\"setup.ns\\\", home, subservers[subentry]);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (!ns.hasRootAccess(servers[entry])) {\\n\\t\\t\\ttakeover(servers[entry]);\\n\\t\\t}\\n\\t\\tns.tprint(\\\"copying scripts to \\\" + servers[entry]);\\n\\t\\tawait ns.scp(scripts, home, servers[entry]);\\n\\t\\t//await ns.scp(\\\"setup.ns\\\", home, servers[entry]);\\n\\t}\\n\\n\\t/** \\n\\t * \\tAttempts to take over target machine\\t\\n\\t * \\n\\t *  @param {string} tar\\n\\t *  @return {boolean} outcome \\n\\t**/\\n\\tasync function takeover(tar) {\\n\\t\\tlet currentTarget = tar;\\n\\t\\tlet isNotTakenOver = true;\\n\\t\\tlet attemptCounter = 0;\\n\\n\\t\\tif (ns.getServerNumPortsRequired <= 5 && attemptCounter < 50) {\\n\\t\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\n\\t\\t\\t\\tattemptCounter++;\\n\\t\\t\\t}\\n\\n\\t\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.15,\"server\":\"omnia\",\"moduleSequenceNumber\":960,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}}],\"serversOnNetwork\":[\"snap-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":94,\"hackDifficulty\":94,\"minDifficulty\":31,\"moneyAvailable\":917992291,\"moneyMax\":22949807275,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":892,\"serverGrowth\":67}},\"zb-def\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-164563.cct\",\"type\":\"Subarray with Maximum Sum\",\"data\":[-10,10,1,9,0,9,2,-9,-4,-8,10,7,-9],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zb-def\",\"httpPortOpen\":true,\"ip\":\"18.3.2.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"ZB Defense Industries\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Returns an array of all hostnames in the network tree\\n * \\n * @param {string[]} myServers\\n * @param {number} safetyCounter Prevents infnite recursion\\n * @param {NS} ns\\n */\\nexport async function getServerList(myServers, safetyCounter, ns) {\\n\\tlet srvrsSeen = myServers;\\n\\tlet currServScanResult = [];\\n\\n\\tfor (let serverSeen in srvrsSeen) {\\n\\t\\tcurrServScanResult = ns.scan(srvrsSeen[serverSeen]);\\n\\t\\tfor (let entry in currServScanResult) {\\n\\t\\t\\tif (!srvrsSeen.includes(currServScanResult[entry])) {\\n\\t\\t\\t\\tsrvrsSeen.push(currServScanResult[entry]);\\n\\t\\t\\t\\tif ((++safetyCounter) < 250) {\\n\\t\\t\\t\\t\\tawait getServerList(srvrsSeen, safetyCounter, ns);\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tns.exit();\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\t//Filter out invalid values (NaN, null, {}, undefined)\\n\\tsrvrsSeen = srvrsSeen.filter(x => x);\\n\\treturn srvrsSeen;\\n}\\n\\n\\n/** \\n * \\tAttempts to take over target machine\\t\\n * \\n *  @param {string} target\\n * \\t@param {NS} ns\\n *  @return {boolean} outcome \\n**/\\nexport async function takeover(target, ns) {\\n\\tconst home = \\\"home\\\";\\n\\tlet currentTarget = target;\\n\\tlet isNotTakenOver = true;\\n\\tlet attemptCounter = 0;\\n\\n\\tlet scripts = ns.ls(home, \\\".js\\\");\\n\\t//scripts.push(ns.ls(home, \\\".ns\\\")); //in case of deprecated .ns scripts\\n\\n\\tif (!ns.hasRootAccess(currentTarget) && attemptCounter < 30) {\\n\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\ttry {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t} catch (error) {\\n\\t\\t\\t\\t\\tns.tprint(\\\"not enough ports to nuke \\\" + currentTarget);\\n\\t\\t\\t\\t\\treturn false;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t}\\n\\t\\t\\tattemptCounter++;\\n\\t\\t}\\n\\n\\t\\tawait ns.scp(scripts, home, currentTarget);\\n\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\",\"filename\":\"/modules/helper.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"zb-def\",\"moduleSequenceNumber\":961,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.grow(target);\\n\\t}\\n}\",\"filename\":\"basic-grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zb-def\",\"moduleSequenceNumber\":962,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"basic-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"zb-def\",\"moduleSequenceNumber\":963,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(target);\\n\\t}\\n}\",\"filename\":\"basic-weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zb-def\",\"moduleSequenceNumber\":964,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerList, takeover } from \\\"modules/helper.js\\\";\\n\\n/** @param {NS} ns **/\\n// TODO: unused + unfinished, based on setup.ns\\nexport async function main(ns) {\\n\\tconst myServers = [\\\"home\\\"];\\n\\n\\tvar servers = await getServerList(myServers, 0, ns);\\n\\n\\tfor (let entry in servers) {\\t\\n\\t\\tawait takeover(servers[entry], ns);\\n\\t}\\n}\",\"filename\":\"deep-setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"zb-def\",\"moduleSequenceNumber\":965,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\t//\\n}\",\"filename\":\"formulas-testing.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"zb-def\",\"moduleSequenceNumber\":966,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tconst currentMachine = ns.getHostname();\\n\\tvar servers = ns.scan(currentMachine);\\n\\tvar scripts = ns.ls(home, \\\"basic-\\\");\\n\\n\\tns.tprint(\\\"Host:  \\\" + currentMachine);\\n\\tfor (let entry in servers) {\\t// depth 0\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\t// depth 1\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== home && subservers.length > 1) {\\n\\t\\t\\t\\tns.tprint(\\\"-----> \\\" + subservers[subentry]);\\n\\t\\t\\t\\tlet subserversd2 = ns.scan(subservers[subentry]); // depth 2\\n\\t\\t\\t\\tfor (let subentryd2 in subserversd2) {\\n\\t\\t\\t\\t\\tif (subserversd2[subentryd2] !== subservers[subentry] && subserversd2[subentryd2] !== servers[entry] && subserversd2.length > 1) {\\n\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------> \\\" + subserversd2[subentryd2]);\\n\\t\\t\\t\\t\\t\\tlet subserversd3 = ns.scan(subserversd2[subentryd2]);\\t// depth 3\\n\\t\\t\\t\\t\\t\\tfor (let subentryd3 in subserversd3) {\\n\\t\\t\\t\\t\\t\\t\\tif (subserversd3[subentryd3] !== subserversd2[subentryd2] && subserversd3[subentryd3] !== subservers[subentry] && subserversd3.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------> \\\" + subserversd3[subentryd3]);\\n\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd4 = ns.scan(subserversd3[subentryd3]);\\t// depth 4\\n\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd4 in subserversd4) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd4[subentryd4] !== subserversd3[subentryd3] && subserversd4[subentryd4] !== subserversd2[subentryd2] && subserversd4.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------------> \\\" + subserversd4[subentryd4]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd5 = ns.scan(subserversd4[subentryd4]);\\t// depth 5\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd5 in subserversd5) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd5[subentryd5] !== subserversd4[subentryd4] && subserversd5[subentryd5] !== subserversd3[subentryd3] && subserversd5.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-------------------------> \\\" + subserversd5[subentryd5]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd6 = ns.scan(subserversd5[subentryd5]);\\t// depth 6\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd6 in subserversd6) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd6[subentryd6] !== subserversd5[subentryd5] && subserversd6[subentryd6] !== subserversd4[subentryd4] && subserversd6.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"------------------------------> \\\" + subserversd6[subentryd6]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd7 = ns.scan(subserversd6[subentryd6]);\\t// depth 7\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor(let subentryd7 in subserversd7) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd7[subentryd7] !== subserversd6[subentryd6] && subserversd7[subentryd7] !== subserversd5[subentryd5] && subserversd7.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-----------------------------------> \\\" + subserversd7[subentryd7]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"gigascan.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.05,\"server\":\"zb-def\",\"moduleSequenceNumber\":967,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet targetRam = ns.getServerMaxRam(ns.args[0]);\\n\\tlet scriptMem = ns.getScriptRam(ns.args[1]);\\n\\n\\tns.tprint(\\\"Maximum possible threads for \\\" + ns.args[1] + \\\": \\\" + Math.floor(targetRam / scriptMem));\\n\\tns.exit;\\n}\",\"filename\":\"ram-usage.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zb-def\",\"moduleSequenceNumber\":968,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerList } from \\\"modules/helper.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet serversSeen = [\\\"home\\\"]; // home + bought servers\\n\\tlet contractList = [];\\n\\n\\tserversSeen = await getServerList(serversSeen, 0, ns);\\n\\n\\tns.tprint(serversSeen);\\n}\",\"filename\":\"search-coding-contracts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"zb-def\",\"moduleSequenceNumber\":969,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tvar servers = ns.scan(home);\\n\\tvar scripts = ns.ls(home, \\\".js\\\");\\n\\n\\tfor (let entry in scripts) {\\n\\t\\tns.tprint(\\\"found script: \\\" + scripts[entry]);\\n\\t}\\n\\n\\t// Hack servers (!!! depth = 2 !!!) if needed and populate with scripts\\n\\tfor (let entry in servers) {\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== \\\"home\\\") {\\n\\t\\t\\t\\tns.tprint(\\\"----->   \\\" + subservers[subentry]);\\n\\t\\t\\t\\tif (!ns.hasRootAccess(subservers[subentry])) {\\n\\t\\t\\t\\t\\ttakeover(subservers[subentry]);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tns.tprint(\\\"copying scripts to \\\" + subservers[subentry]);\\n\\t\\t\\t\\tawait ns.scp(scripts, home, subservers[subentry]);\\n\\t\\t\\t\\t//await ns.scp(\\\"setup.ns\\\", home, subservers[subentry]);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (!ns.hasRootAccess(servers[entry])) {\\n\\t\\t\\ttakeover(servers[entry]);\\n\\t\\t}\\n\\t\\tns.tprint(\\\"copying scripts to \\\" + servers[entry]);\\n\\t\\tawait ns.scp(scripts, home, servers[entry]);\\n\\t\\t//await ns.scp(\\\"setup.ns\\\", home, servers[entry]);\\n\\t}\\n\\n\\t/** \\n\\t * \\tAttempts to take over target machine\\t\\n\\t * \\n\\t *  @param {string} tar\\n\\t *  @return {boolean} outcome \\n\\t**/\\n\\tasync function takeover(tar) {\\n\\t\\tlet currentTarget = tar;\\n\\t\\tlet isNotTakenOver = true;\\n\\t\\tlet attemptCounter = 0;\\n\\n\\t\\tif (ns.getServerNumPortsRequired <= 5 && attemptCounter < 50) {\\n\\t\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\n\\t\\t\\t\\tattemptCounter++;\\n\\t\\t\\t}\\n\\n\\t\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.15,\"server\":\"zb-def\",\"moduleSequenceNumber\":970,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}}],\"serversOnNetwork\":[\"zeus-med\",\"titan-labs\",\"run4theh111z\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":60,\"hackDifficulty\":60,\"minDifficulty\":20,\"moneyAvailable\":1003531497,\"moneyMax\":25088287425,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":806,\"serverGrowth\":71}},\"applied-energetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"applied-energetics\",\"httpPortOpen\":true,\"ip\":\"10.8.4.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Applied Energetics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Returns an array of all hostnames in the network tree\\n * \\n * @param {string[]} myServers\\n * @param {number} safetyCounter Prevents infnite recursion\\n * @param {NS} ns\\n */\\nexport async function getServerList(myServers, safetyCounter, ns) {\\n\\tlet srvrsSeen = myServers;\\n\\tlet currServScanResult = [];\\n\\n\\tfor (let serverSeen in srvrsSeen) {\\n\\t\\tcurrServScanResult = ns.scan(srvrsSeen[serverSeen]);\\n\\t\\tfor (let entry in currServScanResult) {\\n\\t\\t\\tif (!srvrsSeen.includes(currServScanResult[entry])) {\\n\\t\\t\\t\\tsrvrsSeen.push(currServScanResult[entry]);\\n\\t\\t\\t\\tif ((++safetyCounter) < 250) {\\n\\t\\t\\t\\t\\tawait getServerList(srvrsSeen, safetyCounter, ns);\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tns.exit();\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\t//Filter out invalid values (NaN, null, {}, undefined)\\n\\tsrvrsSeen = srvrsSeen.filter(x => x);\\n\\treturn srvrsSeen;\\n}\\n\\n\\n/** \\n * \\tAttempts to take over target machine\\t\\n * \\n *  @param {string} target\\n * \\t@param {NS} ns\\n *  @return {boolean} outcome \\n**/\\nexport async function takeover(target, ns) {\\n\\tconst home = \\\"home\\\";\\n\\tlet currentTarget = target;\\n\\tlet isNotTakenOver = true;\\n\\tlet attemptCounter = 0;\\n\\n\\tlet scripts = ns.ls(home, \\\".js\\\");\\n\\t//scripts.push(ns.ls(home, \\\".ns\\\")); //in case of deprecated .ns scripts\\n\\n\\tif (!ns.hasRootAccess(currentTarget) && attemptCounter < 30) {\\n\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\ttry {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t} catch (error) {\\n\\t\\t\\t\\t\\tns.tprint(\\\"not enough ports to nuke \\\" + currentTarget);\\n\\t\\t\\t\\t\\treturn false;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t}\\n\\t\\t\\tattemptCounter++;\\n\\t\\t}\\n\\n\\t\\tawait ns.scp(scripts, home, currentTarget);\\n\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\",\"filename\":\"/modules/helper.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"applied-energetics\",\"moduleSequenceNumber\":971,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.grow(target);\\n\\t}\\n}\",\"filename\":\"basic-grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"applied-energetics\",\"moduleSequenceNumber\":972,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"basic-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"applied-energetics\",\"moduleSequenceNumber\":973,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(target);\\n\\t}\\n}\",\"filename\":\"basic-weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"applied-energetics\",\"moduleSequenceNumber\":974,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerList, takeover } from \\\"modules/helper.js\\\";\\n\\n/** @param {NS} ns **/\\n// TODO: unused + unfinished, based on setup.ns\\nexport async function main(ns) {\\n\\tconst myServers = [\\\"home\\\"];\\n\\n\\tvar servers = await getServerList(myServers, 0, ns);\\n\\n\\tfor (let entry in servers) {\\t\\n\\t\\tawait takeover(servers[entry], ns);\\n\\t}\\n}\",\"filename\":\"deep-setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"applied-energetics\",\"moduleSequenceNumber\":975,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\t//\\n}\",\"filename\":\"formulas-testing.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"applied-energetics\",\"moduleSequenceNumber\":976,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tconst currentMachine = ns.getHostname();\\n\\tvar servers = ns.scan(currentMachine);\\n\\tvar scripts = ns.ls(home, \\\"basic-\\\");\\n\\n\\tns.tprint(\\\"Host:  \\\" + currentMachine);\\n\\tfor (let entry in servers) {\\t// depth 0\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\t// depth 1\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== home && subservers.length > 1) {\\n\\t\\t\\t\\tns.tprint(\\\"-----> \\\" + subservers[subentry]);\\n\\t\\t\\t\\tlet subserversd2 = ns.scan(subservers[subentry]); // depth 2\\n\\t\\t\\t\\tfor (let subentryd2 in subserversd2) {\\n\\t\\t\\t\\t\\tif (subserversd2[subentryd2] !== subservers[subentry] && subserversd2[subentryd2] !== servers[entry] && subserversd2.length > 1) {\\n\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------> \\\" + subserversd2[subentryd2]);\\n\\t\\t\\t\\t\\t\\tlet subserversd3 = ns.scan(subserversd2[subentryd2]);\\t// depth 3\\n\\t\\t\\t\\t\\t\\tfor (let subentryd3 in subserversd3) {\\n\\t\\t\\t\\t\\t\\t\\tif (subserversd3[subentryd3] !== subserversd2[subentryd2] && subserversd3[subentryd3] !== subservers[subentry] && subserversd3.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------> \\\" + subserversd3[subentryd3]);\\n\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd4 = ns.scan(subserversd3[subentryd3]);\\t// depth 4\\n\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd4 in subserversd4) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd4[subentryd4] !== subserversd3[subentryd3] && subserversd4[subentryd4] !== subserversd2[subentryd2] && subserversd4.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------------> \\\" + subserversd4[subentryd4]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd5 = ns.scan(subserversd4[subentryd4]);\\t// depth 5\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd5 in subserversd5) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd5[subentryd5] !== subserversd4[subentryd4] && subserversd5[subentryd5] !== subserversd3[subentryd3] && subserversd5.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-------------------------> \\\" + subserversd5[subentryd5]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd6 = ns.scan(subserversd5[subentryd5]);\\t// depth 6\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd6 in subserversd6) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd6[subentryd6] !== subserversd5[subentryd5] && subserversd6[subentryd6] !== subserversd4[subentryd4] && subserversd6.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"------------------------------> \\\" + subserversd6[subentryd6]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd7 = ns.scan(subserversd6[subentryd6]);\\t// depth 7\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor(let subentryd7 in subserversd7) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd7[subentryd7] !== subserversd6[subentryd6] && subserversd7[subentryd7] !== subserversd5[subentryd5] && subserversd7.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-----------------------------------> \\\" + subserversd7[subentryd7]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"gigascan.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.05,\"server\":\"applied-energetics\",\"moduleSequenceNumber\":977,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet targetRam = ns.getServerMaxRam(ns.args[0]);\\n\\tlet scriptMem = ns.getScriptRam(ns.args[1]);\\n\\n\\tns.tprint(\\\"Maximum possible threads for \\\" + ns.args[1] + \\\": \\\" + Math.floor(targetRam / scriptMem));\\n\\tns.exit;\\n}\",\"filename\":\"ram-usage.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"applied-energetics\",\"moduleSequenceNumber\":978,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerList } from \\\"modules/helper.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet serversSeen = [\\\"home\\\"]; // home + bought servers\\n\\tlet contractList = [];\\n\\n\\tserversSeen = await getServerList(serversSeen, 0, ns);\\n\\n\\tns.tprint(serversSeen);\\n}\",\"filename\":\"search-coding-contracts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"applied-energetics\",\"moduleSequenceNumber\":979,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tvar servers = ns.scan(home);\\n\\tvar scripts = ns.ls(home, \\\".js\\\");\\n\\n\\tfor (let entry in scripts) {\\n\\t\\tns.tprint(\\\"found script: \\\" + scripts[entry]);\\n\\t}\\n\\n\\t// Hack servers (!!! depth = 2 !!!) if needed and populate with scripts\\n\\tfor (let entry in servers) {\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== \\\"home\\\") {\\n\\t\\t\\t\\tns.tprint(\\\"----->   \\\" + subservers[subentry]);\\n\\t\\t\\t\\tif (!ns.hasRootAccess(subservers[subentry])) {\\n\\t\\t\\t\\t\\ttakeover(subservers[subentry]);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tns.tprint(\\\"copying scripts to \\\" + subservers[subentry]);\\n\\t\\t\\t\\tawait ns.scp(scripts, home, subservers[subentry]);\\n\\t\\t\\t\\t//await ns.scp(\\\"setup.ns\\\", home, subservers[subentry]);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (!ns.hasRootAccess(servers[entry])) {\\n\\t\\t\\ttakeover(servers[entry]);\\n\\t\\t}\\n\\t\\tns.tprint(\\\"copying scripts to \\\" + servers[entry]);\\n\\t\\tawait ns.scp(scripts, home, servers[entry]);\\n\\t\\t//await ns.scp(\\\"setup.ns\\\", home, servers[entry]);\\n\\t}\\n\\n\\t/** \\n\\t * \\tAttempts to take over target machine\\t\\n\\t * \\n\\t *  @param {string} tar\\n\\t *  @return {boolean} outcome \\n\\t**/\\n\\tasync function takeover(tar) {\\n\\t\\tlet currentTarget = tar;\\n\\t\\tlet isNotTakenOver = true;\\n\\t\\tlet attemptCounter = 0;\\n\\n\\t\\tif (ns.getServerNumPortsRequired <= 5 && attemptCounter < 50) {\\n\\t\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\n\\t\\t\\t\\tattemptCounter++;\\n\\t\\t\\t}\\n\\n\\t\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.15,\"server\":\"applied-energetics\",\"moduleSequenceNumber\":980,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}}],\"serversOnNetwork\":[\"taiyang-digital\",\"helios\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":63,\"hackDifficulty\":63,\"minDifficulty\":21,\"moneyAvailable\":951993720,\"moneyMax\":23799843000,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":823,\"serverGrowth\":75}},\"solaris\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"solaris\",\"httpPortOpen\":true,\"ip\":\"4.6.1.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"A-Green-Tomorrow.lit\",\"the-failed-frontier.lit\"],\"organizationName\":\"Solaris Space Systems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Returns an array of all hostnames in the network tree\\n * \\n * @param {string[]} myServers\\n * @param {number} safetyCounter Prevents infnite recursion\\n * @param {NS} ns\\n */\\nexport async function getServerList(myServers, safetyCounter, ns) {\\n\\tlet srvrsSeen = myServers;\\n\\tlet currServScanResult = [];\\n\\n\\tfor (let serverSeen in srvrsSeen) {\\n\\t\\tcurrServScanResult = ns.scan(srvrsSeen[serverSeen]);\\n\\t\\tfor (let entry in currServScanResult) {\\n\\t\\t\\tif (!srvrsSeen.includes(currServScanResult[entry])) {\\n\\t\\t\\t\\tsrvrsSeen.push(currServScanResult[entry]);\\n\\t\\t\\t\\tif ((++safetyCounter) < 250) {\\n\\t\\t\\t\\t\\tawait getServerList(srvrsSeen, safetyCounter, ns);\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tns.exit();\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\t//Filter out invalid values (NaN, null, {}, undefined)\\n\\tsrvrsSeen = srvrsSeen.filter(x => x);\\n\\treturn srvrsSeen;\\n}\\n\\n\\n/** \\n * \\tAttempts to take over target machine\\t\\n * \\n *  @param {string} target\\n * \\t@param {NS} ns\\n *  @return {boolean} outcome \\n**/\\nexport async function takeover(target, ns) {\\n\\tconst home = \\\"home\\\";\\n\\tlet currentTarget = target;\\n\\tlet isNotTakenOver = true;\\n\\tlet attemptCounter = 0;\\n\\n\\tlet scripts = ns.ls(home, \\\".js\\\");\\n\\t//scripts.push(ns.ls(home, \\\".ns\\\")); //in case of deprecated .ns scripts\\n\\n\\tif (!ns.hasRootAccess(currentTarget) && attemptCounter < 30) {\\n\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\ttry {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t} catch (error) {\\n\\t\\t\\t\\t\\tns.tprint(\\\"not enough ports to nuke \\\" + currentTarget);\\n\\t\\t\\t\\t\\treturn false;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t}\\n\\t\\t\\tattemptCounter++;\\n\\t\\t}\\n\\n\\t\\tawait ns.scp(scripts, home, currentTarget);\\n\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\",\"filename\":\"/modules/helper.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"solaris\",\"moduleSequenceNumber\":981,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.grow(target);\\n\\t}\\n}\",\"filename\":\"basic-grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"solaris\",\"moduleSequenceNumber\":982,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"basic-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"solaris\",\"moduleSequenceNumber\":983,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(target);\\n\\t}\\n}\",\"filename\":\"basic-weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"solaris\",\"moduleSequenceNumber\":984,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerList, takeover } from \\\"modules/helper.js\\\";\\n\\n/** @param {NS} ns **/\\n// TODO: unused + unfinished, based on setup.ns\\nexport async function main(ns) {\\n\\tconst myServers = [\\\"home\\\"];\\n\\n\\tvar servers = await getServerList(myServers, 0, ns);\\n\\n\\tfor (let entry in servers) {\\t\\n\\t\\tawait takeover(servers[entry], ns);\\n\\t}\\n}\",\"filename\":\"deep-setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"solaris\",\"moduleSequenceNumber\":985,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\t//\\n}\",\"filename\":\"formulas-testing.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"solaris\",\"moduleSequenceNumber\":986,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tconst currentMachine = ns.getHostname();\\n\\tvar servers = ns.scan(currentMachine);\\n\\tvar scripts = ns.ls(home, \\\"basic-\\\");\\n\\n\\tns.tprint(\\\"Host:  \\\" + currentMachine);\\n\\tfor (let entry in servers) {\\t// depth 0\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\t// depth 1\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== home && subservers.length > 1) {\\n\\t\\t\\t\\tns.tprint(\\\"-----> \\\" + subservers[subentry]);\\n\\t\\t\\t\\tlet subserversd2 = ns.scan(subservers[subentry]); // depth 2\\n\\t\\t\\t\\tfor (let subentryd2 in subserversd2) {\\n\\t\\t\\t\\t\\tif (subserversd2[subentryd2] !== subservers[subentry] && subserversd2[subentryd2] !== servers[entry] && subserversd2.length > 1) {\\n\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------> \\\" + subserversd2[subentryd2]);\\n\\t\\t\\t\\t\\t\\tlet subserversd3 = ns.scan(subserversd2[subentryd2]);\\t// depth 3\\n\\t\\t\\t\\t\\t\\tfor (let subentryd3 in subserversd3) {\\n\\t\\t\\t\\t\\t\\t\\tif (subserversd3[subentryd3] !== subserversd2[subentryd2] && subserversd3[subentryd3] !== subservers[subentry] && subserversd3.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------> \\\" + subserversd3[subentryd3]);\\n\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd4 = ns.scan(subserversd3[subentryd3]);\\t// depth 4\\n\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd4 in subserversd4) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd4[subentryd4] !== subserversd3[subentryd3] && subserversd4[subentryd4] !== subserversd2[subentryd2] && subserversd4.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------------> \\\" + subserversd4[subentryd4]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd5 = ns.scan(subserversd4[subentryd4]);\\t// depth 5\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd5 in subserversd5) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd5[subentryd5] !== subserversd4[subentryd4] && subserversd5[subentryd5] !== subserversd3[subentryd3] && subserversd5.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-------------------------> \\\" + subserversd5[subentryd5]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd6 = ns.scan(subserversd5[subentryd5]);\\t// depth 6\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd6 in subserversd6) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd6[subentryd6] !== subserversd5[subentryd5] && subserversd6[subentryd6] !== subserversd4[subentryd4] && subserversd6.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"------------------------------> \\\" + subserversd6[subentryd6]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd7 = ns.scan(subserversd6[subentryd6]);\\t// depth 7\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor(let subentryd7 in subserversd7) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd7[subentryd7] !== subserversd6[subentryd6] && subserversd7[subentryd7] !== subserversd5[subentryd5] && subserversd7.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-----------------------------------> \\\" + subserversd7[subentryd7]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"gigascan.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.05,\"server\":\"solaris\",\"moduleSequenceNumber\":987,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet targetRam = ns.getServerMaxRam(ns.args[0]);\\n\\tlet scriptMem = ns.getScriptRam(ns.args[1]);\\n\\n\\tns.tprint(\\\"Maximum possible threads for \\\" + ns.args[1] + \\\": \\\" + Math.floor(targetRam / scriptMem));\\n\\tns.exit;\\n}\",\"filename\":\"ram-usage.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"solaris\",\"moduleSequenceNumber\":988,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerList } from \\\"modules/helper.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet serversSeen = [\\\"home\\\"]; // home + bought servers\\n\\tlet contractList = [];\\n\\n\\tserversSeen = await getServerList(serversSeen, 0, ns);\\n\\n\\tns.tprint(serversSeen);\\n}\",\"filename\":\"search-coding-contracts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"solaris\",\"moduleSequenceNumber\":989,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tvar servers = ns.scan(home);\\n\\tvar scripts = ns.ls(home, \\\".js\\\");\\n\\n\\tfor (let entry in scripts) {\\n\\t\\tns.tprint(\\\"found script: \\\" + scripts[entry]);\\n\\t}\\n\\n\\t// Hack servers (!!! depth = 2 !!!) if needed and populate with scripts\\n\\tfor (let entry in servers) {\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== \\\"home\\\") {\\n\\t\\t\\t\\tns.tprint(\\\"----->   \\\" + subservers[subentry]);\\n\\t\\t\\t\\tif (!ns.hasRootAccess(subservers[subentry])) {\\n\\t\\t\\t\\t\\ttakeover(subservers[subentry]);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tns.tprint(\\\"copying scripts to \\\" + subservers[subentry]);\\n\\t\\t\\t\\tawait ns.scp(scripts, home, subservers[subentry]);\\n\\t\\t\\t\\t//await ns.scp(\\\"setup.ns\\\", home, subservers[subentry]);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (!ns.hasRootAccess(servers[entry])) {\\n\\t\\t\\ttakeover(servers[entry]);\\n\\t\\t}\\n\\t\\tns.tprint(\\\"copying scripts to \\\" + servers[entry]);\\n\\t\\tawait ns.scp(scripts, home, servers[entry]);\\n\\t\\t//await ns.scp(\\\"setup.ns\\\", home, servers[entry]);\\n\\t}\\n\\n\\t/** \\n\\t * \\tAttempts to take over target machine\\t\\n\\t * \\n\\t *  @param {string} tar\\n\\t *  @return {boolean} outcome \\n\\t**/\\n\\tasync function takeover(tar) {\\n\\t\\tlet currentTarget = tar;\\n\\t\\tlet isNotTakenOver = true;\\n\\t\\tlet attemptCounter = 0;\\n\\n\\t\\tif (ns.getServerNumPortsRequired <= 5 && attemptCounter < 50) {\\n\\t\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\n\\t\\t\\t\\tattemptCounter++;\\n\\t\\t\\t}\\n\\n\\t\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.15,\"server\":\"solaris\",\"moduleSequenceNumber\":990,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}}],\"serversOnNetwork\":[\"deltaone\",\"infocomm\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":80,\"hackDifficulty\":80,\"minDifficulty\":27,\"moneyAvailable\":768854684,\"moneyMax\":19221367100,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":828,\"serverGrowth\":78}},\"deltaone\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-802870.cct\",\"type\":\"Algorithmic Stock Trader I\",\"data\":[144,91,157,193,9,157,138,44,74,55],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"deltaone\",\"httpPortOpen\":true,\"ip\":\"13.6.6.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DeltaOne\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Returns an array of all hostnames in the network tree\\n * \\n * @param {string[]} myServers\\n * @param {number} safetyCounter Prevents infnite recursion\\n * @param {NS} ns\\n */\\nexport async function getServerList(myServers, safetyCounter, ns) {\\n\\tlet srvrsSeen = myServers;\\n\\tlet currServScanResult = [];\\n\\n\\tfor (let serverSeen in srvrsSeen) {\\n\\t\\tcurrServScanResult = ns.scan(srvrsSeen[serverSeen]);\\n\\t\\tfor (let entry in currServScanResult) {\\n\\t\\t\\tif (!srvrsSeen.includes(currServScanResult[entry])) {\\n\\t\\t\\t\\tsrvrsSeen.push(currServScanResult[entry]);\\n\\t\\t\\t\\tif ((++safetyCounter) < 250) {\\n\\t\\t\\t\\t\\tawait getServerList(srvrsSeen, safetyCounter, ns);\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tns.exit();\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\t//Filter out invalid values (NaN, null, {}, undefined)\\n\\tsrvrsSeen = srvrsSeen.filter(x => x);\\n\\treturn srvrsSeen;\\n}\\n\\n\\n/** \\n * \\tAttempts to take over target machine\\t\\n * \\n *  @param {string} target\\n * \\t@param {NS} ns\\n *  @return {boolean} outcome \\n**/\\nexport async function takeover(target, ns) {\\n\\tconst home = \\\"home\\\";\\n\\tlet currentTarget = target;\\n\\tlet isNotTakenOver = true;\\n\\tlet attemptCounter = 0;\\n\\n\\tlet scripts = ns.ls(home, \\\".js\\\");\\n\\t//scripts.push(ns.ls(home, \\\".ns\\\")); //in case of deprecated .ns scripts\\n\\n\\tif (!ns.hasRootAccess(currentTarget) && attemptCounter < 30) {\\n\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\ttry {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t} catch (error) {\\n\\t\\t\\t\\t\\tns.tprint(\\\"not enough ports to nuke \\\" + currentTarget);\\n\\t\\t\\t\\t\\treturn false;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t}\\n\\t\\t\\tattemptCounter++;\\n\\t\\t}\\n\\n\\t\\tawait ns.scp(scripts, home, currentTarget);\\n\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\",\"filename\":\"/modules/helper.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"deltaone\",\"moduleSequenceNumber\":991,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.grow(target);\\n\\t}\\n}\",\"filename\":\"basic-grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"deltaone\",\"moduleSequenceNumber\":992,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"basic-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"deltaone\",\"moduleSequenceNumber\":993,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(target);\\n\\t}\\n}\",\"filename\":\"basic-weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"deltaone\",\"moduleSequenceNumber\":994,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerList, takeover } from \\\"modules/helper.js\\\";\\n\\n/** @param {NS} ns **/\\n// TODO: unused + unfinished, based on setup.ns\\nexport async function main(ns) {\\n\\tconst myServers = [\\\"home\\\"];\\n\\n\\tvar servers = await getServerList(myServers, 0, ns);\\n\\n\\tfor (let entry in servers) {\\t\\n\\t\\tawait takeover(servers[entry], ns);\\n\\t}\\n}\",\"filename\":\"deep-setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"deltaone\",\"moduleSequenceNumber\":995,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\t//\\n}\",\"filename\":\"formulas-testing.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"deltaone\",\"moduleSequenceNumber\":996,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tconst currentMachine = ns.getHostname();\\n\\tvar servers = ns.scan(currentMachine);\\n\\tvar scripts = ns.ls(home, \\\"basic-\\\");\\n\\n\\tns.tprint(\\\"Host:  \\\" + currentMachine);\\n\\tfor (let entry in servers) {\\t// depth 0\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\t// depth 1\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== home && subservers.length > 1) {\\n\\t\\t\\t\\tns.tprint(\\\"-----> \\\" + subservers[subentry]);\\n\\t\\t\\t\\tlet subserversd2 = ns.scan(subservers[subentry]); // depth 2\\n\\t\\t\\t\\tfor (let subentryd2 in subserversd2) {\\n\\t\\t\\t\\t\\tif (subserversd2[subentryd2] !== subservers[subentry] && subserversd2[subentryd2] !== servers[entry] && subserversd2.length > 1) {\\n\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------> \\\" + subserversd2[subentryd2]);\\n\\t\\t\\t\\t\\t\\tlet subserversd3 = ns.scan(subserversd2[subentryd2]);\\t// depth 3\\n\\t\\t\\t\\t\\t\\tfor (let subentryd3 in subserversd3) {\\n\\t\\t\\t\\t\\t\\t\\tif (subserversd3[subentryd3] !== subserversd2[subentryd2] && subserversd3[subentryd3] !== subservers[subentry] && subserversd3.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------> \\\" + subserversd3[subentryd3]);\\n\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd4 = ns.scan(subserversd3[subentryd3]);\\t// depth 4\\n\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd4 in subserversd4) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd4[subentryd4] !== subserversd3[subentryd3] && subserversd4[subentryd4] !== subserversd2[subentryd2] && subserversd4.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------------> \\\" + subserversd4[subentryd4]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd5 = ns.scan(subserversd4[subentryd4]);\\t// depth 5\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd5 in subserversd5) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd5[subentryd5] !== subserversd4[subentryd4] && subserversd5[subentryd5] !== subserversd3[subentryd3] && subserversd5.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-------------------------> \\\" + subserversd5[subentryd5]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd6 = ns.scan(subserversd5[subentryd5]);\\t// depth 6\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd6 in subserversd6) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd6[subentryd6] !== subserversd5[subentryd5] && subserversd6[subentryd6] !== subserversd4[subentryd4] && subserversd6.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"------------------------------> \\\" + subserversd6[subentryd6]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd7 = ns.scan(subserversd6[subentryd6]);\\t// depth 7\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor(let subentryd7 in subserversd7) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd7[subentryd7] !== subserversd6[subentryd6] && subserversd7[subentryd7] !== subserversd5[subentryd5] && subserversd7.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-----------------------------------> \\\" + subserversd7[subentryd7]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"gigascan.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.05,\"server\":\"deltaone\",\"moduleSequenceNumber\":997,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet targetRam = ns.getServerMaxRam(ns.args[0]);\\n\\tlet scriptMem = ns.getScriptRam(ns.args[1]);\\n\\n\\tns.tprint(\\\"Maximum possible threads for \\\" + ns.args[1] + \\\": \\\" + Math.floor(targetRam / scriptMem));\\n\\tns.exit;\\n}\",\"filename\":\"ram-usage.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"deltaone\",\"moduleSequenceNumber\":998,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerList } from \\\"modules/helper.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet serversSeen = [\\\"home\\\"]; // home + bought servers\\n\\tlet contractList = [];\\n\\n\\tserversSeen = await getServerList(serversSeen, 0, ns);\\n\\n\\tns.tprint(serversSeen);\\n}\",\"filename\":\"search-coding-contracts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"deltaone\",\"moduleSequenceNumber\":999,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tvar servers = ns.scan(home);\\n\\tvar scripts = ns.ls(home, \\\".js\\\");\\n\\n\\tfor (let entry in scripts) {\\n\\t\\tns.tprint(\\\"found script: \\\" + scripts[entry]);\\n\\t}\\n\\n\\t// Hack servers (!!! depth = 2 !!!) if needed and populate with scripts\\n\\tfor (let entry in servers) {\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== \\\"home\\\") {\\n\\t\\t\\t\\tns.tprint(\\\"----->   \\\" + subservers[subentry]);\\n\\t\\t\\t\\tif (!ns.hasRootAccess(subservers[subentry])) {\\n\\t\\t\\t\\t\\ttakeover(subservers[subentry]);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tns.tprint(\\\"copying scripts to \\\" + subservers[subentry]);\\n\\t\\t\\t\\tawait ns.scp(scripts, home, subservers[subentry]);\\n\\t\\t\\t\\t//await ns.scp(\\\"setup.ns\\\", home, subservers[subentry]);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (!ns.hasRootAccess(servers[entry])) {\\n\\t\\t\\ttakeover(servers[entry]);\\n\\t\\t}\\n\\t\\tns.tprint(\\\"copying scripts to \\\" + servers[entry]);\\n\\t\\tawait ns.scp(scripts, home, servers[entry]);\\n\\t\\t//await ns.scp(\\\"setup.ns\\\", home, servers[entry]);\\n\\t}\\n\\n\\t/** \\n\\t * \\tAttempts to take over target machine\\t\\n\\t * \\n\\t *  @param {string} tar\\n\\t *  @return {boolean} outcome \\n\\t**/\\n\\tasync function takeover(tar) {\\n\\t\\tlet currentTarget = tar;\\n\\t\\tlet isNotTakenOver = true;\\n\\t\\tlet attemptCounter = 0;\\n\\n\\t\\tif (ns.getServerNumPortsRequired <= 5 && attemptCounter < 50) {\\n\\t\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\n\\t\\t\\t\\tattemptCounter++;\\n\\t\\t\\t}\\n\\n\\t\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.15,\"server\":\"deltaone\",\"moduleSequenceNumber\":1000,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}}],\"serversOnNetwork\":[\"snap-fitness\",\"defcomm\",\"icarus\",\"solaris\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":75,\"hackDifficulty\":75,\"minDifficulty\":25,\"moneyAvailable\":1597071369,\"moneyMax\":39926784225,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":808,\"serverGrowth\":54}},\"global-pharm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-292587.cct\",\"type\":\"Generate IP Addresses\",\"data\":\"13412931124\",\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"global-pharm\",\"httpPortOpen\":true,\"ip\":\"39.6.5.6\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"Global Pharmaceuticals\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Returns an array of all hostnames in the network tree\\n * \\n * @param {string[]} myServers\\n * @param {number} safetyCounter Prevents infnite recursion\\n * @param {NS} ns\\n */\\nexport async function getServerList(myServers, safetyCounter, ns) {\\n\\tlet srvrsSeen = myServers;\\n\\tlet currServScanResult = [];\\n\\n\\tfor (let serverSeen in srvrsSeen) {\\n\\t\\tcurrServScanResult = ns.scan(srvrsSeen[serverSeen]);\\n\\t\\tfor (let entry in currServScanResult) {\\n\\t\\t\\tif (!srvrsSeen.includes(currServScanResult[entry])) {\\n\\t\\t\\t\\tsrvrsSeen.push(currServScanResult[entry]);\\n\\t\\t\\t\\tif ((++safetyCounter) < 250) {\\n\\t\\t\\t\\t\\tawait getServerList(srvrsSeen, safetyCounter, ns);\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tns.exit();\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\t//Filter out invalid values (NaN, null, {}, undefined)\\n\\tsrvrsSeen = srvrsSeen.filter(x => x);\\n\\treturn srvrsSeen;\\n}\\n\\n\\n/** \\n * \\tAttempts to take over target machine\\t\\n * \\n *  @param {string} target\\n * \\t@param {NS} ns\\n *  @return {boolean} outcome \\n**/\\nexport async function takeover(target, ns) {\\n\\tconst home = \\\"home\\\";\\n\\tlet currentTarget = target;\\n\\tlet isNotTakenOver = true;\\n\\tlet attemptCounter = 0;\\n\\n\\tlet scripts = ns.ls(home, \\\".js\\\");\\n\\t//scripts.push(ns.ls(home, \\\".ns\\\")); //in case of deprecated .ns scripts\\n\\n\\tif (!ns.hasRootAccess(currentTarget) && attemptCounter < 30) {\\n\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\ttry {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t} catch (error) {\\n\\t\\t\\t\\t\\tns.tprint(\\\"not enough ports to nuke \\\" + currentTarget);\\n\\t\\t\\t\\t\\treturn false;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t}\\n\\t\\t\\tattemptCounter++;\\n\\t\\t}\\n\\n\\t\\tawait ns.scp(scripts, home, currentTarget);\\n\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\",\"filename\":\"/modules/helper.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"global-pharm\",\"moduleSequenceNumber\":1001,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.grow(target);\\n\\t}\\n}\",\"filename\":\"basic-grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"global-pharm\",\"moduleSequenceNumber\":1002,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"basic-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"global-pharm\",\"moduleSequenceNumber\":1003,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(target);\\n\\t}\\n}\",\"filename\":\"basic-weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"global-pharm\",\"moduleSequenceNumber\":1004,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerList, takeover } from \\\"modules/helper.js\\\";\\n\\n/** @param {NS} ns **/\\n// TODO: unused + unfinished, based on setup.ns\\nexport async function main(ns) {\\n\\tconst myServers = [\\\"home\\\"];\\n\\n\\tvar servers = await getServerList(myServers, 0, ns);\\n\\n\\tfor (let entry in servers) {\\t\\n\\t\\tawait takeover(servers[entry], ns);\\n\\t}\\n}\",\"filename\":\"deep-setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"global-pharm\",\"moduleSequenceNumber\":1005,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\t//\\n}\",\"filename\":\"formulas-testing.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"global-pharm\",\"moduleSequenceNumber\":1006,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tconst currentMachine = ns.getHostname();\\n\\tvar servers = ns.scan(currentMachine);\\n\\tvar scripts = ns.ls(home, \\\"basic-\\\");\\n\\n\\tns.tprint(\\\"Host:  \\\" + currentMachine);\\n\\tfor (let entry in servers) {\\t// depth 0\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\t// depth 1\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== home && subservers.length > 1) {\\n\\t\\t\\t\\tns.tprint(\\\"-----> \\\" + subservers[subentry]);\\n\\t\\t\\t\\tlet subserversd2 = ns.scan(subservers[subentry]); // depth 2\\n\\t\\t\\t\\tfor (let subentryd2 in subserversd2) {\\n\\t\\t\\t\\t\\tif (subserversd2[subentryd2] !== subservers[subentry] && subserversd2[subentryd2] !== servers[entry] && subserversd2.length > 1) {\\n\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------> \\\" + subserversd2[subentryd2]);\\n\\t\\t\\t\\t\\t\\tlet subserversd3 = ns.scan(subserversd2[subentryd2]);\\t// depth 3\\n\\t\\t\\t\\t\\t\\tfor (let subentryd3 in subserversd3) {\\n\\t\\t\\t\\t\\t\\t\\tif (subserversd3[subentryd3] !== subserversd2[subentryd2] && subserversd3[subentryd3] !== subservers[subentry] && subserversd3.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------> \\\" + subserversd3[subentryd3]);\\n\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd4 = ns.scan(subserversd3[subentryd3]);\\t// depth 4\\n\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd4 in subserversd4) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd4[subentryd4] !== subserversd3[subentryd3] && subserversd4[subentryd4] !== subserversd2[subentryd2] && subserversd4.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------------> \\\" + subserversd4[subentryd4]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd5 = ns.scan(subserversd4[subentryd4]);\\t// depth 5\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd5 in subserversd5) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd5[subentryd5] !== subserversd4[subentryd4] && subserversd5[subentryd5] !== subserversd3[subentryd3] && subserversd5.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-------------------------> \\\" + subserversd5[subentryd5]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd6 = ns.scan(subserversd5[subentryd5]);\\t// depth 6\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd6 in subserversd6) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd6[subentryd6] !== subserversd5[subentryd5] && subserversd6[subentryd6] !== subserversd4[subentryd4] && subserversd6.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"------------------------------> \\\" + subserversd6[subentryd6]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd7 = ns.scan(subserversd6[subentryd6]);\\t// depth 7\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor(let subentryd7 in subserversd7) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd7[subentryd7] !== subserversd6[subentryd6] && subserversd7[subentryd7] !== subserversd5[subentryd5] && subserversd7.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-----------------------------------> \\\" + subserversd7[subentryd7]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"gigascan.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.05,\"server\":\"global-pharm\",\"moduleSequenceNumber\":1007,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet targetRam = ns.getServerMaxRam(ns.args[0]);\\n\\tlet scriptMem = ns.getScriptRam(ns.args[1]);\\n\\n\\tns.tprint(\\\"Maximum possible threads for \\\" + ns.args[1] + \\\": \\\" + Math.floor(targetRam / scriptMem));\\n\\tns.exit;\\n}\",\"filename\":\"ram-usage.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"global-pharm\",\"moduleSequenceNumber\":1008,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerList } from \\\"modules/helper.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet serversSeen = [\\\"home\\\"]; // home + bought servers\\n\\tlet contractList = [];\\n\\n\\tserversSeen = await getServerList(serversSeen, 0, ns);\\n\\n\\tns.tprint(serversSeen);\\n}\",\"filename\":\"search-coding-contracts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"global-pharm\",\"moduleSequenceNumber\":1009,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tvar servers = ns.scan(home);\\n\\tvar scripts = ns.ls(home, \\\".js\\\");\\n\\n\\tfor (let entry in scripts) {\\n\\t\\tns.tprint(\\\"found script: \\\" + scripts[entry]);\\n\\t}\\n\\n\\t// Hack servers (!!! depth = 2 !!!) if needed and populate with scripts\\n\\tfor (let entry in servers) {\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== \\\"home\\\") {\\n\\t\\t\\t\\tns.tprint(\\\"----->   \\\" + subservers[subentry]);\\n\\t\\t\\t\\tif (!ns.hasRootAccess(subservers[subentry])) {\\n\\t\\t\\t\\t\\ttakeover(subservers[subentry]);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tns.tprint(\\\"copying scripts to \\\" + subservers[subentry]);\\n\\t\\t\\t\\tawait ns.scp(scripts, home, subservers[subentry]);\\n\\t\\t\\t\\t//await ns.scp(\\\"setup.ns\\\", home, subservers[subentry]);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (!ns.hasRootAccess(servers[entry])) {\\n\\t\\t\\ttakeover(servers[entry]);\\n\\t\\t}\\n\\t\\tns.tprint(\\\"copying scripts to \\\" + servers[entry]);\\n\\t\\tawait ns.scp(scripts, home, servers[entry]);\\n\\t\\t//await ns.scp(\\\"setup.ns\\\", home, servers[entry]);\\n\\t}\\n\\n\\t/** \\n\\t * \\tAttempts to take over target machine\\t\\n\\t * \\n\\t *  @param {string} tar\\n\\t *  @return {boolean} outcome \\n\\t**/\\n\\tasync function takeover(tar) {\\n\\t\\tlet currentTarget = tar;\\n\\t\\tlet isNotTakenOver = true;\\n\\t\\tlet attemptCounter = 0;\\n\\n\\t\\tif (ns.getServerNumPortsRequired <= 5 && attemptCounter < 50) {\\n\\t\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\n\\t\\t\\t\\tattemptCounter++;\\n\\t\\t\\t}\\n\\n\\t\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.15,\"server\":\"global-pharm\",\"moduleSequenceNumber\":1010,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}}],\"serversOnNetwork\":[\"millenium-fitness\",\"unitalife\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":77,\"hackDifficulty\":77,\"minDifficulty\":26,\"moneyAvailable\":1610319112,\"moneyMax\":40257977800,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":793,\"serverGrowth\":84}},\"nova-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-747886-Netburners.cct\",\"type\":\"Total Ways to Sum\",\"data\":98,\"reward\":{\"name\":\"Netburners\",\"type\":0}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-366324.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[14,5],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"nova-med\",\"httpPortOpen\":true,\"ip\":\"88.6.9.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Nova Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Returns an array of all hostnames in the network tree\\n * \\n * @param {string[]} myServers\\n * @param {number} safetyCounter Prevents infnite recursion\\n * @param {NS} ns\\n */\\nexport async function getServerList(myServers, safetyCounter, ns) {\\n\\tlet srvrsSeen = myServers;\\n\\tlet currServScanResult = [];\\n\\n\\tfor (let serverSeen in srvrsSeen) {\\n\\t\\tcurrServScanResult = ns.scan(srvrsSeen[serverSeen]);\\n\\t\\tfor (let entry in currServScanResult) {\\n\\t\\t\\tif (!srvrsSeen.includes(currServScanResult[entry])) {\\n\\t\\t\\t\\tsrvrsSeen.push(currServScanResult[entry]);\\n\\t\\t\\t\\tif ((++safetyCounter) < 250) {\\n\\t\\t\\t\\t\\tawait getServerList(srvrsSeen, safetyCounter, ns);\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tns.exit();\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\t//Filter out invalid values (NaN, null, {}, undefined)\\n\\tsrvrsSeen = srvrsSeen.filter(x => x);\\n\\treturn srvrsSeen;\\n}\\n\\n\\n/** \\n * \\tAttempts to take over target machine\\t\\n * \\n *  @param {string} target\\n * \\t@param {NS} ns\\n *  @return {boolean} outcome \\n**/\\nexport async function takeover(target, ns) {\\n\\tconst home = \\\"home\\\";\\n\\tlet currentTarget = target;\\n\\tlet isNotTakenOver = true;\\n\\tlet attemptCounter = 0;\\n\\n\\tlet scripts = ns.ls(home, \\\".js\\\");\\n\\t//scripts.push(ns.ls(home, \\\".ns\\\")); //in case of deprecated .ns scripts\\n\\n\\tif (!ns.hasRootAccess(currentTarget) && attemptCounter < 30) {\\n\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\ttry {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t} catch (error) {\\n\\t\\t\\t\\t\\tns.tprint(\\\"not enough ports to nuke \\\" + currentTarget);\\n\\t\\t\\t\\t\\treturn false;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t}\\n\\t\\t\\tattemptCounter++;\\n\\t\\t}\\n\\n\\t\\tawait ns.scp(scripts, home, currentTarget);\\n\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\",\"filename\":\"/modules/helper.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"nova-med\",\"moduleSequenceNumber\":1011,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.grow(target);\\n\\t}\\n}\",\"filename\":\"basic-grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"nova-med\",\"moduleSequenceNumber\":1012,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"basic-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"nova-med\",\"moduleSequenceNumber\":1013,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(target);\\n\\t}\\n}\",\"filename\":\"basic-weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"nova-med\",\"moduleSequenceNumber\":1014,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerList, takeover } from \\\"modules/helper.js\\\";\\n\\n/** @param {NS} ns **/\\n// TODO: unused + unfinished, based on setup.ns\\nexport async function main(ns) {\\n\\tconst myServers = [\\\"home\\\"];\\n\\n\\tvar servers = await getServerList(myServers, 0, ns);\\n\\n\\tfor (let entry in servers) {\\t\\n\\t\\tawait takeover(servers[entry], ns);\\n\\t}\\n}\",\"filename\":\"deep-setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"nova-med\",\"moduleSequenceNumber\":1015,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\t//\\n}\",\"filename\":\"formulas-testing.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"nova-med\",\"moduleSequenceNumber\":1016,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tconst currentMachine = ns.getHostname();\\n\\tvar servers = ns.scan(currentMachine);\\n\\tvar scripts = ns.ls(home, \\\"basic-\\\");\\n\\n\\tns.tprint(\\\"Host:  \\\" + currentMachine);\\n\\tfor (let entry in servers) {\\t// depth 0\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\t// depth 1\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== home && subservers.length > 1) {\\n\\t\\t\\t\\tns.tprint(\\\"-----> \\\" + subservers[subentry]);\\n\\t\\t\\t\\tlet subserversd2 = ns.scan(subservers[subentry]); // depth 2\\n\\t\\t\\t\\tfor (let subentryd2 in subserversd2) {\\n\\t\\t\\t\\t\\tif (subserversd2[subentryd2] !== subservers[subentry] && subserversd2[subentryd2] !== servers[entry] && subserversd2.length > 1) {\\n\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------> \\\" + subserversd2[subentryd2]);\\n\\t\\t\\t\\t\\t\\tlet subserversd3 = ns.scan(subserversd2[subentryd2]);\\t// depth 3\\n\\t\\t\\t\\t\\t\\tfor (let subentryd3 in subserversd3) {\\n\\t\\t\\t\\t\\t\\t\\tif (subserversd3[subentryd3] !== subserversd2[subentryd2] && subserversd3[subentryd3] !== subservers[subentry] && subserversd3.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------> \\\" + subserversd3[subentryd3]);\\n\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd4 = ns.scan(subserversd3[subentryd3]);\\t// depth 4\\n\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd4 in subserversd4) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd4[subentryd4] !== subserversd3[subentryd3] && subserversd4[subentryd4] !== subserversd2[subentryd2] && subserversd4.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------------> \\\" + subserversd4[subentryd4]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd5 = ns.scan(subserversd4[subentryd4]);\\t// depth 5\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd5 in subserversd5) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd5[subentryd5] !== subserversd4[subentryd4] && subserversd5[subentryd5] !== subserversd3[subentryd3] && subserversd5.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-------------------------> \\\" + subserversd5[subentryd5]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd6 = ns.scan(subserversd5[subentryd5]);\\t// depth 6\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd6 in subserversd6) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd6[subentryd6] !== subserversd5[subentryd5] && subserversd6[subentryd6] !== subserversd4[subentryd4] && subserversd6.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"------------------------------> \\\" + subserversd6[subentryd6]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd7 = ns.scan(subserversd6[subentryd6]);\\t// depth 7\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor(let subentryd7 in subserversd7) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd7[subentryd7] !== subserversd6[subentryd6] && subserversd7[subentryd7] !== subserversd5[subentryd5] && subserversd7.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-----------------------------------> \\\" + subserversd7[subentryd7]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"gigascan.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.05,\"server\":\"nova-med\",\"moduleSequenceNumber\":1017,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet targetRam = ns.getServerMaxRam(ns.args[0]);\\n\\tlet scriptMem = ns.getScriptRam(ns.args[1]);\\n\\n\\tns.tprint(\\\"Maximum possible threads for \\\" + ns.args[1] + \\\": \\\" + Math.floor(targetRam / scriptMem));\\n\\tns.exit;\\n}\",\"filename\":\"ram-usage.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"nova-med\",\"moduleSequenceNumber\":1018,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerList } from \\\"modules/helper.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet serversSeen = [\\\"home\\\"]; // home + bought servers\\n\\tlet contractList = [];\\n\\n\\tserversSeen = await getServerList(serversSeen, 0, ns);\\n\\n\\tns.tprint(serversSeen);\\n}\",\"filename\":\"search-coding-contracts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"nova-med\",\"moduleSequenceNumber\":1019,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tvar servers = ns.scan(home);\\n\\tvar scripts = ns.ls(home, \\\".js\\\");\\n\\n\\tfor (let entry in scripts) {\\n\\t\\tns.tprint(\\\"found script: \\\" + scripts[entry]);\\n\\t}\\n\\n\\t// Hack servers (!!! depth = 2 !!!) if needed and populate with scripts\\n\\tfor (let entry in servers) {\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== \\\"home\\\") {\\n\\t\\t\\t\\tns.tprint(\\\"----->   \\\" + subservers[subentry]);\\n\\t\\t\\t\\tif (!ns.hasRootAccess(subservers[subentry])) {\\n\\t\\t\\t\\t\\ttakeover(subservers[subentry]);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tns.tprint(\\\"copying scripts to \\\" + subservers[subentry]);\\n\\t\\t\\t\\tawait ns.scp(scripts, home, subservers[subentry]);\\n\\t\\t\\t\\t//await ns.scp(\\\"setup.ns\\\", home, subservers[subentry]);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (!ns.hasRootAccess(servers[entry])) {\\n\\t\\t\\ttakeover(servers[entry]);\\n\\t\\t}\\n\\t\\tns.tprint(\\\"copying scripts to \\\" + servers[entry]);\\n\\t\\tawait ns.scp(scripts, home, servers[entry]);\\n\\t\\t//await ns.scp(\\\"setup.ns\\\", home, servers[entry]);\\n\\t}\\n\\n\\t/** \\n\\t * \\tAttempts to take over target machine\\t\\n\\t * \\n\\t *  @param {string} tar\\n\\t *  @return {boolean} outcome \\n\\t**/\\n\\tasync function takeover(tar) {\\n\\t\\tlet currentTarget = tar;\\n\\t\\tlet isNotTakenOver = true;\\n\\t\\tlet attemptCounter = 0;\\n\\n\\t\\tif (ns.getServerNumPortsRequired <= 5 && attemptCounter < 50) {\\n\\t\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\n\\t\\t\\t\\tattemptCounter++;\\n\\t\\t\\t}\\n\\n\\t\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.15,\"server\":\"nova-med\",\"moduleSequenceNumber\":1020,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}}],\"serversOnNetwork\":[\"defcomm\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":70,\"hackDifficulty\":70,\"minDifficulty\":23,\"moneyAvailable\":1117122642,\"moneyMax\":27928066050,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":795,\"serverGrowth\":80}},\"zeus-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-850785.cct\",\"type\":\"Array Jumping Game\",\"data\":[2,0,0,10,0,4,0,9,0,3,1,0,0,0],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zeus-med\",\"httpPortOpen\":true,\"ip\":\"39.7.5.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Zeus Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Returns an array of all hostnames in the network tree\\n * \\n * @param {string[]} myServers\\n * @param {number} safetyCounter Prevents infnite recursion\\n * @param {NS} ns\\n */\\nexport async function getServerList(myServers, safetyCounter, ns) {\\n\\tlet srvrsSeen = myServers;\\n\\tlet currServScanResult = [];\\n\\n\\tfor (let serverSeen in srvrsSeen) {\\n\\t\\tcurrServScanResult = ns.scan(srvrsSeen[serverSeen]);\\n\\t\\tfor (let entry in currServScanResult) {\\n\\t\\t\\tif (!srvrsSeen.includes(currServScanResult[entry])) {\\n\\t\\t\\t\\tsrvrsSeen.push(currServScanResult[entry]);\\n\\t\\t\\t\\tif ((++safetyCounter) < 250) {\\n\\t\\t\\t\\t\\tawait getServerList(srvrsSeen, safetyCounter, ns);\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tns.exit();\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\t//Filter out invalid values (NaN, null, {}, undefined)\\n\\tsrvrsSeen = srvrsSeen.filter(x => x);\\n\\treturn srvrsSeen;\\n}\\n\\n\\n/** \\n * \\tAttempts to take over target machine\\t\\n * \\n *  @param {string} target\\n * \\t@param {NS} ns\\n *  @return {boolean} outcome \\n**/\\nexport async function takeover(target, ns) {\\n\\tconst home = \\\"home\\\";\\n\\tlet currentTarget = target;\\n\\tlet isNotTakenOver = true;\\n\\tlet attemptCounter = 0;\\n\\n\\tlet scripts = ns.ls(home, \\\".js\\\");\\n\\t//scripts.push(ns.ls(home, \\\".ns\\\")); //in case of deprecated .ns scripts\\n\\n\\tif (!ns.hasRootAccess(currentTarget) && attemptCounter < 30) {\\n\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\ttry {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t} catch (error) {\\n\\t\\t\\t\\t\\tns.tprint(\\\"not enough ports to nuke \\\" + currentTarget);\\n\\t\\t\\t\\t\\treturn false;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t}\\n\\t\\t\\tattemptCounter++;\\n\\t\\t}\\n\\n\\t\\tawait ns.scp(scripts, home, currentTarget);\\n\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\",\"filename\":\"/modules/helper.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"zeus-med\",\"moduleSequenceNumber\":1021,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.grow(target);\\n\\t}\\n}\",\"filename\":\"basic-grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zeus-med\",\"moduleSequenceNumber\":1022,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"basic-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"zeus-med\",\"moduleSequenceNumber\":1023,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(target);\\n\\t}\\n}\",\"filename\":\"basic-weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zeus-med\",\"moduleSequenceNumber\":1024,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerList, takeover } from \\\"modules/helper.js\\\";\\n\\n/** @param {NS} ns **/\\n// TODO: unused + unfinished, based on setup.ns\\nexport async function main(ns) {\\n\\tconst myServers = [\\\"home\\\"];\\n\\n\\tvar servers = await getServerList(myServers, 0, ns);\\n\\n\\tfor (let entry in servers) {\\t\\n\\t\\tawait takeover(servers[entry], ns);\\n\\t}\\n}\",\"filename\":\"deep-setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"zeus-med\",\"moduleSequenceNumber\":1025,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\t//\\n}\",\"filename\":\"formulas-testing.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"zeus-med\",\"moduleSequenceNumber\":1026,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tconst currentMachine = ns.getHostname();\\n\\tvar servers = ns.scan(currentMachine);\\n\\tvar scripts = ns.ls(home, \\\"basic-\\\");\\n\\n\\tns.tprint(\\\"Host:  \\\" + currentMachine);\\n\\tfor (let entry in servers) {\\t// depth 0\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\t// depth 1\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== home && subservers.length > 1) {\\n\\t\\t\\t\\tns.tprint(\\\"-----> \\\" + subservers[subentry]);\\n\\t\\t\\t\\tlet subserversd2 = ns.scan(subservers[subentry]); // depth 2\\n\\t\\t\\t\\tfor (let subentryd2 in subserversd2) {\\n\\t\\t\\t\\t\\tif (subserversd2[subentryd2] !== subservers[subentry] && subserversd2[subentryd2] !== servers[entry] && subserversd2.length > 1) {\\n\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------> \\\" + subserversd2[subentryd2]);\\n\\t\\t\\t\\t\\t\\tlet subserversd3 = ns.scan(subserversd2[subentryd2]);\\t// depth 3\\n\\t\\t\\t\\t\\t\\tfor (let subentryd3 in subserversd3) {\\n\\t\\t\\t\\t\\t\\t\\tif (subserversd3[subentryd3] !== subserversd2[subentryd2] && subserversd3[subentryd3] !== subservers[subentry] && subserversd3.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------> \\\" + subserversd3[subentryd3]);\\n\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd4 = ns.scan(subserversd3[subentryd3]);\\t// depth 4\\n\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd4 in subserversd4) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd4[subentryd4] !== subserversd3[subentryd3] && subserversd4[subentryd4] !== subserversd2[subentryd2] && subserversd4.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------------> \\\" + subserversd4[subentryd4]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd5 = ns.scan(subserversd4[subentryd4]);\\t// depth 5\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd5 in subserversd5) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd5[subentryd5] !== subserversd4[subentryd4] && subserversd5[subentryd5] !== subserversd3[subentryd3] && subserversd5.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-------------------------> \\\" + subserversd5[subentryd5]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd6 = ns.scan(subserversd5[subentryd5]);\\t// depth 6\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd6 in subserversd6) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd6[subentryd6] !== subserversd5[subentryd5] && subserversd6[subentryd6] !== subserversd4[subentryd4] && subserversd6.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"------------------------------> \\\" + subserversd6[subentryd6]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd7 = ns.scan(subserversd6[subentryd6]);\\t// depth 7\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor(let subentryd7 in subserversd7) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd7[subentryd7] !== subserversd6[subentryd6] && subserversd7[subentryd7] !== subserversd5[subentryd5] && subserversd7.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-----------------------------------> \\\" + subserversd7[subentryd7]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"gigascan.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.05,\"server\":\"zeus-med\",\"moduleSequenceNumber\":1027,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet targetRam = ns.getServerMaxRam(ns.args[0]);\\n\\tlet scriptMem = ns.getScriptRam(ns.args[1]);\\n\\n\\tns.tprint(\\\"Maximum possible threads for \\\" + ns.args[1] + \\\": \\\" + Math.floor(targetRam / scriptMem));\\n\\tns.exit;\\n}\",\"filename\":\"ram-usage.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zeus-med\",\"moduleSequenceNumber\":1028,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerList } from \\\"modules/helper.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet serversSeen = [\\\"home\\\"]; // home + bought servers\\n\\tlet contractList = [];\\n\\n\\tserversSeen = await getServerList(serversSeen, 0, ns);\\n\\n\\tns.tprint(serversSeen);\\n}\",\"filename\":\"search-coding-contracts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"zeus-med\",\"moduleSequenceNumber\":1029,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tvar servers = ns.scan(home);\\n\\tvar scripts = ns.ls(home, \\\".js\\\");\\n\\n\\tfor (let entry in scripts) {\\n\\t\\tns.tprint(\\\"found script: \\\" + scripts[entry]);\\n\\t}\\n\\n\\t// Hack servers (!!! depth = 2 !!!) if needed and populate with scripts\\n\\tfor (let entry in servers) {\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== \\\"home\\\") {\\n\\t\\t\\t\\tns.tprint(\\\"----->   \\\" + subservers[subentry]);\\n\\t\\t\\t\\tif (!ns.hasRootAccess(subservers[subentry])) {\\n\\t\\t\\t\\t\\ttakeover(subservers[subentry]);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tns.tprint(\\\"copying scripts to \\\" + subservers[subentry]);\\n\\t\\t\\t\\tawait ns.scp(scripts, home, subservers[subentry]);\\n\\t\\t\\t\\t//await ns.scp(\\\"setup.ns\\\", home, subservers[subentry]);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (!ns.hasRootAccess(servers[entry])) {\\n\\t\\t\\ttakeover(servers[entry]);\\n\\t\\t}\\n\\t\\tns.tprint(\\\"copying scripts to \\\" + servers[entry]);\\n\\t\\tawait ns.scp(scripts, home, servers[entry]);\\n\\t\\t//await ns.scp(\\\"setup.ns\\\", home, servers[entry]);\\n\\t}\\n\\n\\t/** \\n\\t * \\tAttempts to take over target machine\\t\\n\\t * \\n\\t *  @param {string} tar\\n\\t *  @return {boolean} outcome \\n\\t**/\\n\\tasync function takeover(tar) {\\n\\t\\tlet currentTarget = tar;\\n\\t\\tlet isNotTakenOver = true;\\n\\t\\tlet attemptCounter = 0;\\n\\n\\t\\tif (ns.getServerNumPortsRequired <= 5 && attemptCounter < 50) {\\n\\t\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\n\\t\\t\\t\\tattemptCounter++;\\n\\t\\t\\t}\\n\\n\\t\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.15,\"server\":\"zeus-med\",\"moduleSequenceNumber\":1030,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}}],\"serversOnNetwork\":[\"unitalife\",\"zb-def\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":88,\"hackDifficulty\":88,\"minDifficulty\":29,\"moneyAvailable\":1327704682,\"moneyMax\":33192617050,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":818,\"serverGrowth\":74}},\"unitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-455818.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[2,5],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"unitalife\",\"httpPortOpen\":true,\"ip\":\"81.9.7.5\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"UnitaLife Group\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Returns an array of all hostnames in the network tree\\n * \\n * @param {string[]} myServers\\n * @param {number} safetyCounter Prevents infnite recursion\\n * @param {NS} ns\\n */\\nexport async function getServerList(myServers, safetyCounter, ns) {\\n\\tlet srvrsSeen = myServers;\\n\\tlet currServScanResult = [];\\n\\n\\tfor (let serverSeen in srvrsSeen) {\\n\\t\\tcurrServScanResult = ns.scan(srvrsSeen[serverSeen]);\\n\\t\\tfor (let entry in currServScanResult) {\\n\\t\\t\\tif (!srvrsSeen.includes(currServScanResult[entry])) {\\n\\t\\t\\t\\tsrvrsSeen.push(currServScanResult[entry]);\\n\\t\\t\\t\\tif ((++safetyCounter) < 250) {\\n\\t\\t\\t\\t\\tawait getServerList(srvrsSeen, safetyCounter, ns);\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tns.exit();\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\t//Filter out invalid values (NaN, null, {}, undefined)\\n\\tsrvrsSeen = srvrsSeen.filter(x => x);\\n\\treturn srvrsSeen;\\n}\\n\\n\\n/** \\n * \\tAttempts to take over target machine\\t\\n * \\n *  @param {string} target\\n * \\t@param {NS} ns\\n *  @return {boolean} outcome \\n**/\\nexport async function takeover(target, ns) {\\n\\tconst home = \\\"home\\\";\\n\\tlet currentTarget = target;\\n\\tlet isNotTakenOver = true;\\n\\tlet attemptCounter = 0;\\n\\n\\tlet scripts = ns.ls(home, \\\".js\\\");\\n\\t//scripts.push(ns.ls(home, \\\".ns\\\")); //in case of deprecated .ns scripts\\n\\n\\tif (!ns.hasRootAccess(currentTarget) && attemptCounter < 30) {\\n\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\ttry {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t} catch (error) {\\n\\t\\t\\t\\t\\tns.tprint(\\\"not enough ports to nuke \\\" + currentTarget);\\n\\t\\t\\t\\t\\treturn false;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t}\\n\\t\\t\\tattemptCounter++;\\n\\t\\t}\\n\\n\\t\\tawait ns.scp(scripts, home, currentTarget);\\n\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\",\"filename\":\"/modules/helper.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"unitalife\",\"moduleSequenceNumber\":1031,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.grow(target);\\n\\t}\\n}\",\"filename\":\"basic-grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"unitalife\",\"moduleSequenceNumber\":1032,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"basic-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"unitalife\",\"moduleSequenceNumber\":1033,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(target);\\n\\t}\\n}\",\"filename\":\"basic-weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"unitalife\",\"moduleSequenceNumber\":1034,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerList, takeover } from \\\"modules/helper.js\\\";\\n\\n/** @param {NS} ns **/\\n// TODO: unused + unfinished, based on setup.ns\\nexport async function main(ns) {\\n\\tconst myServers = [\\\"home\\\"];\\n\\n\\tvar servers = await getServerList(myServers, 0, ns);\\n\\n\\tfor (let entry in servers) {\\t\\n\\t\\tawait takeover(servers[entry], ns);\\n\\t}\\n}\",\"filename\":\"deep-setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"unitalife\",\"moduleSequenceNumber\":1035,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\t//\\n}\",\"filename\":\"formulas-testing.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"unitalife\",\"moduleSequenceNumber\":1036,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tconst currentMachine = ns.getHostname();\\n\\tvar servers = ns.scan(currentMachine);\\n\\tvar scripts = ns.ls(home, \\\"basic-\\\");\\n\\n\\tns.tprint(\\\"Host:  \\\" + currentMachine);\\n\\tfor (let entry in servers) {\\t// depth 0\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\t// depth 1\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== home && subservers.length > 1) {\\n\\t\\t\\t\\tns.tprint(\\\"-----> \\\" + subservers[subentry]);\\n\\t\\t\\t\\tlet subserversd2 = ns.scan(subservers[subentry]); // depth 2\\n\\t\\t\\t\\tfor (let subentryd2 in subserversd2) {\\n\\t\\t\\t\\t\\tif (subserversd2[subentryd2] !== subservers[subentry] && subserversd2[subentryd2] !== servers[entry] && subserversd2.length > 1) {\\n\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------> \\\" + subserversd2[subentryd2]);\\n\\t\\t\\t\\t\\t\\tlet subserversd3 = ns.scan(subserversd2[subentryd2]);\\t// depth 3\\n\\t\\t\\t\\t\\t\\tfor (let subentryd3 in subserversd3) {\\n\\t\\t\\t\\t\\t\\t\\tif (subserversd3[subentryd3] !== subserversd2[subentryd2] && subserversd3[subentryd3] !== subservers[subentry] && subserversd3.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------> \\\" + subserversd3[subentryd3]);\\n\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd4 = ns.scan(subserversd3[subentryd3]);\\t// depth 4\\n\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd4 in subserversd4) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd4[subentryd4] !== subserversd3[subentryd3] && subserversd4[subentryd4] !== subserversd2[subentryd2] && subserversd4.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------------> \\\" + subserversd4[subentryd4]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd5 = ns.scan(subserversd4[subentryd4]);\\t// depth 5\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd5 in subserversd5) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd5[subentryd5] !== subserversd4[subentryd4] && subserversd5[subentryd5] !== subserversd3[subentryd3] && subserversd5.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-------------------------> \\\" + subserversd5[subentryd5]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd6 = ns.scan(subserversd5[subentryd5]);\\t// depth 6\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd6 in subserversd6) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd6[subentryd6] !== subserversd5[subentryd5] && subserversd6[subentryd6] !== subserversd4[subentryd4] && subserversd6.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"------------------------------> \\\" + subserversd6[subentryd6]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd7 = ns.scan(subserversd6[subentryd6]);\\t// depth 7\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor(let subentryd7 in subserversd7) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd7[subentryd7] !== subserversd6[subentryd6] && subserversd7[subentryd7] !== subserversd5[subentryd5] && subserversd7.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-----------------------------------> \\\" + subserversd7[subentryd7]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"gigascan.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.05,\"server\":\"unitalife\",\"moduleSequenceNumber\":1037,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet targetRam = ns.getServerMaxRam(ns.args[0]);\\n\\tlet scriptMem = ns.getScriptRam(ns.args[1]);\\n\\n\\tns.tprint(\\\"Maximum possible threads for \\\" + ns.args[1] + \\\": \\\" + Math.floor(targetRam / scriptMem));\\n\\tns.exit;\\n}\",\"filename\":\"ram-usage.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"unitalife\",\"moduleSequenceNumber\":1038,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerList } from \\\"modules/helper.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet serversSeen = [\\\"home\\\"]; // home + bought servers\\n\\tlet contractList = [];\\n\\n\\tserversSeen = await getServerList(serversSeen, 0, ns);\\n\\n\\tns.tprint(serversSeen);\\n}\",\"filename\":\"search-coding-contracts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"unitalife\",\"moduleSequenceNumber\":1039,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tvar servers = ns.scan(home);\\n\\tvar scripts = ns.ls(home, \\\".js\\\");\\n\\n\\tfor (let entry in scripts) {\\n\\t\\tns.tprint(\\\"found script: \\\" + scripts[entry]);\\n\\t}\\n\\n\\t// Hack servers (!!! depth = 2 !!!) if needed and populate with scripts\\n\\tfor (let entry in servers) {\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== \\\"home\\\") {\\n\\t\\t\\t\\tns.tprint(\\\"----->   \\\" + subservers[subentry]);\\n\\t\\t\\t\\tif (!ns.hasRootAccess(subservers[subentry])) {\\n\\t\\t\\t\\t\\ttakeover(subservers[subentry]);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tns.tprint(\\\"copying scripts to \\\" + subservers[subentry]);\\n\\t\\t\\t\\tawait ns.scp(scripts, home, subservers[subentry]);\\n\\t\\t\\t\\t//await ns.scp(\\\"setup.ns\\\", home, subservers[subentry]);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (!ns.hasRootAccess(servers[entry])) {\\n\\t\\t\\ttakeover(servers[entry]);\\n\\t\\t}\\n\\t\\tns.tprint(\\\"copying scripts to \\\" + servers[entry]);\\n\\t\\tawait ns.scp(scripts, home, servers[entry]);\\n\\t\\t//await ns.scp(\\\"setup.ns\\\", home, servers[entry]);\\n\\t}\\n\\n\\t/** \\n\\t * \\tAttempts to take over target machine\\t\\n\\t * \\n\\t *  @param {string} tar\\n\\t *  @return {boolean} outcome \\n\\t**/\\n\\tasync function takeover(tar) {\\n\\t\\tlet currentTarget = tar;\\n\\t\\tlet isNotTakenOver = true;\\n\\t\\tlet attemptCounter = 0;\\n\\n\\t\\tif (ns.getServerNumPortsRequired <= 5 && attemptCounter < 50) {\\n\\t\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\n\\t\\t\\t\\tattemptCounter++;\\n\\t\\t\\t}\\n\\n\\t\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.15,\"server\":\"unitalife\",\"moduleSequenceNumber\":1040,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}}],\"serversOnNetwork\":[\"global-pharm\",\"univ-energy\",\"zeus-med\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":75,\"hackDifficulty\":75,\"minDifficulty\":25,\"moneyAvailable\":1089365703,\"moneyMax\":27234142575,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":820,\"serverGrowth\":70}},\"lexo-corp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-60612.cct\",\"type\":\"Array Jumping Game\",\"data\":[0,3,0,5,3,2,2,0,0,3,0,9,7,8,1,9,10,3,5,2],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"lexo-corp\",\"httpPortOpen\":true,\"ip\":\"1.6.9.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"LexoCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Returns an array of all hostnames in the network tree\\n * \\n * @param {string[]} myServers\\n * @param {number} safetyCounter Prevents infnite recursion\\n * @param {NS} ns\\n */\\nexport async function getServerList(myServers, safetyCounter, ns) {\\n\\tlet srvrsSeen = myServers;\\n\\tlet currServScanResult = [];\\n\\n\\tfor (let serverSeen in srvrsSeen) {\\n\\t\\tcurrServScanResult = ns.scan(srvrsSeen[serverSeen]);\\n\\t\\tfor (let entry in currServScanResult) {\\n\\t\\t\\tif (!srvrsSeen.includes(currServScanResult[entry])) {\\n\\t\\t\\t\\tsrvrsSeen.push(currServScanResult[entry]);\\n\\t\\t\\t\\tif ((++safetyCounter) < 250) {\\n\\t\\t\\t\\t\\tawait getServerList(srvrsSeen, safetyCounter, ns);\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tns.exit();\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\t//Filter out invalid values (NaN, null, {}, undefined)\\n\\tsrvrsSeen = srvrsSeen.filter(x => x);\\n\\treturn srvrsSeen;\\n}\\n\\n\\n/** \\n * \\tAttempts to take over target machine\\t\\n * \\n *  @param {string} target\\n * \\t@param {NS} ns\\n *  @return {boolean} outcome \\n**/\\nexport async function takeover(target, ns) {\\n\\tconst home = \\\"home\\\";\\n\\tlet currentTarget = target;\\n\\tlet isNotTakenOver = true;\\n\\tlet attemptCounter = 0;\\n\\n\\tlet scripts = ns.ls(home, \\\".js\\\");\\n\\t//scripts.push(ns.ls(home, \\\".ns\\\")); //in case of deprecated .ns scripts\\n\\n\\tif (!ns.hasRootAccess(currentTarget) && attemptCounter < 30) {\\n\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\ttry {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t} catch (error) {\\n\\t\\t\\t\\t\\tns.tprint(\\\"not enough ports to nuke \\\" + currentTarget);\\n\\t\\t\\t\\t\\treturn false;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t}\\n\\t\\t\\tattemptCounter++;\\n\\t\\t}\\n\\n\\t\\tawait ns.scp(scripts, home, currentTarget);\\n\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\",\"filename\":\"/modules/helper.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":1041,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.grow(target);\\n\\t}\\n}\",\"filename\":\"basic-grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":1042,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"basic-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":1043,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(target);\\n\\t}\\n}\",\"filename\":\"basic-weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":1044,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerList, takeover } from \\\"modules/helper.js\\\";\\n\\n/** @param {NS} ns **/\\n// TODO: unused + unfinished, based on setup.ns\\nexport async function main(ns) {\\n\\tconst myServers = [\\\"home\\\"];\\n\\n\\tvar servers = await getServerList(myServers, 0, ns);\\n\\n\\tfor (let entry in servers) {\\t\\n\\t\\tawait takeover(servers[entry], ns);\\n\\t}\\n}\",\"filename\":\"deep-setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":1045,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\t//\\n}\",\"filename\":\"formulas-testing.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":1046,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tconst currentMachine = ns.getHostname();\\n\\tvar servers = ns.scan(currentMachine);\\n\\tvar scripts = ns.ls(home, \\\"basic-\\\");\\n\\n\\tns.tprint(\\\"Host:  \\\" + currentMachine);\\n\\tfor (let entry in servers) {\\t// depth 0\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\t// depth 1\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== home && subservers.length > 1) {\\n\\t\\t\\t\\tns.tprint(\\\"-----> \\\" + subservers[subentry]);\\n\\t\\t\\t\\tlet subserversd2 = ns.scan(subservers[subentry]); // depth 2\\n\\t\\t\\t\\tfor (let subentryd2 in subserversd2) {\\n\\t\\t\\t\\t\\tif (subserversd2[subentryd2] !== subservers[subentry] && subserversd2[subentryd2] !== servers[entry] && subserversd2.length > 1) {\\n\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------> \\\" + subserversd2[subentryd2]);\\n\\t\\t\\t\\t\\t\\tlet subserversd3 = ns.scan(subserversd2[subentryd2]);\\t// depth 3\\n\\t\\t\\t\\t\\t\\tfor (let subentryd3 in subserversd3) {\\n\\t\\t\\t\\t\\t\\t\\tif (subserversd3[subentryd3] !== subserversd2[subentryd2] && subserversd3[subentryd3] !== subservers[subentry] && subserversd3.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------> \\\" + subserversd3[subentryd3]);\\n\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd4 = ns.scan(subserversd3[subentryd3]);\\t// depth 4\\n\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd4 in subserversd4) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd4[subentryd4] !== subserversd3[subentryd3] && subserversd4[subentryd4] !== subserversd2[subentryd2] && subserversd4.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------------> \\\" + subserversd4[subentryd4]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd5 = ns.scan(subserversd4[subentryd4]);\\t// depth 5\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd5 in subserversd5) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd5[subentryd5] !== subserversd4[subentryd4] && subserversd5[subentryd5] !== subserversd3[subentryd3] && subserversd5.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-------------------------> \\\" + subserversd5[subentryd5]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd6 = ns.scan(subserversd5[subentryd5]);\\t// depth 6\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd6 in subserversd6) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd6[subentryd6] !== subserversd5[subentryd5] && subserversd6[subentryd6] !== subserversd4[subentryd4] && subserversd6.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"------------------------------> \\\" + subserversd6[subentryd6]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd7 = ns.scan(subserversd6[subentryd6]);\\t// depth 7\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor(let subentryd7 in subserversd7) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd7[subentryd7] !== subserversd6[subentryd6] && subserversd7[subentryd7] !== subserversd5[subentryd5] && subserversd7.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-----------------------------------> \\\" + subserversd7[subentryd7]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"gigascan.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.05,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":1047,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet targetRam = ns.getServerMaxRam(ns.args[0]);\\n\\tlet scriptMem = ns.getScriptRam(ns.args[1]);\\n\\n\\tns.tprint(\\\"Maximum possible threads for \\\" + ns.args[1] + \\\": \\\" + Math.floor(targetRam / scriptMem));\\n\\tns.exit;\\n}\",\"filename\":\"ram-usage.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":1048,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerList } from \\\"modules/helper.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet serversSeen = [\\\"home\\\"]; // home + bought servers\\n\\tlet contractList = [];\\n\\n\\tserversSeen = await getServerList(serversSeen, 0, ns);\\n\\n\\tns.tprint(serversSeen);\\n}\",\"filename\":\"search-coding-contracts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":1049,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tvar servers = ns.scan(home);\\n\\tvar scripts = ns.ls(home, \\\".js\\\");\\n\\n\\tfor (let entry in scripts) {\\n\\t\\tns.tprint(\\\"found script: \\\" + scripts[entry]);\\n\\t}\\n\\n\\t// Hack servers (!!! depth = 2 !!!) if needed and populate with scripts\\n\\tfor (let entry in servers) {\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== \\\"home\\\") {\\n\\t\\t\\t\\tns.tprint(\\\"----->   \\\" + subservers[subentry]);\\n\\t\\t\\t\\tif (!ns.hasRootAccess(subservers[subentry])) {\\n\\t\\t\\t\\t\\ttakeover(subservers[subentry]);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tns.tprint(\\\"copying scripts to \\\" + subservers[subentry]);\\n\\t\\t\\t\\tawait ns.scp(scripts, home, subservers[subentry]);\\n\\t\\t\\t\\t//await ns.scp(\\\"setup.ns\\\", home, subservers[subentry]);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (!ns.hasRootAccess(servers[entry])) {\\n\\t\\t\\ttakeover(servers[entry]);\\n\\t\\t}\\n\\t\\tns.tprint(\\\"copying scripts to \\\" + servers[entry]);\\n\\t\\tawait ns.scp(scripts, home, servers[entry]);\\n\\t\\t//await ns.scp(\\\"setup.ns\\\", home, servers[entry]);\\n\\t}\\n\\n\\t/** \\n\\t * \\tAttempts to take over target machine\\t\\n\\t * \\n\\t *  @param {string} tar\\n\\t *  @return {boolean} outcome \\n\\t**/\\n\\tasync function takeover(tar) {\\n\\t\\tlet currentTarget = tar;\\n\\t\\tlet isNotTakenOver = true;\\n\\t\\tlet attemptCounter = 0;\\n\\n\\t\\tif (ns.getServerNumPortsRequired <= 5 && attemptCounter < 50) {\\n\\t\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\n\\t\\t\\t\\tattemptCounter++;\\n\\t\\t\\t}\\n\\n\\t\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.15,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":1050,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}}],\"serversOnNetwork\":[\"rothman-uni\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":74,\"hackDifficulty\":74,\"minDifficulty\":25,\"moneyAvailable\":760130647,\"moneyMax\":19003266175,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":685,\"serverGrowth\":59}},\"rho-construction\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"rho-construction\",\"httpPortOpen\":false,\"ip\":\"8.0.2.8\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Rho Construction\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Returns an array of all hostnames in the network tree\\n * \\n * @param {string[]} myServers\\n * @param {number} safetyCounter Prevents infnite recursion\\n * @param {NS} ns\\n */\\nexport async function getServerList(myServers, safetyCounter, ns) {\\n\\tlet srvrsSeen = myServers;\\n\\tlet currServScanResult = [];\\n\\n\\tfor (let serverSeen in srvrsSeen) {\\n\\t\\tcurrServScanResult = ns.scan(srvrsSeen[serverSeen]);\\n\\t\\tfor (let entry in currServScanResult) {\\n\\t\\t\\tif (!srvrsSeen.includes(currServScanResult[entry])) {\\n\\t\\t\\t\\tsrvrsSeen.push(currServScanResult[entry]);\\n\\t\\t\\t\\tif ((++safetyCounter) < 250) {\\n\\t\\t\\t\\t\\tawait getServerList(srvrsSeen, safetyCounter, ns);\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tns.exit();\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\t//Filter out invalid values (NaN, null, {}, undefined)\\n\\tsrvrsSeen = srvrsSeen.filter(x => x);\\n\\treturn srvrsSeen;\\n}\\n\\n\\n/** \\n * \\tAttempts to take over target machine\\t\\n * \\n *  @param {string} target\\n * \\t@param {NS} ns\\n *  @return {boolean} outcome \\n**/\\nexport async function takeover(target, ns) {\\n\\tconst home = \\\"home\\\";\\n\\tlet currentTarget = target;\\n\\tlet isNotTakenOver = true;\\n\\tlet attemptCounter = 0;\\n\\n\\tlet scripts = ns.ls(home, \\\".js\\\");\\n\\t//scripts.push(ns.ls(home, \\\".ns\\\")); //in case of deprecated .ns scripts\\n\\n\\tif (!ns.hasRootAccess(currentTarget) && attemptCounter < 30) {\\n\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\ttry {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t} catch (error) {\\n\\t\\t\\t\\t\\tns.tprint(\\\"not enough ports to nuke \\\" + currentTarget);\\n\\t\\t\\t\\t\\treturn false;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t}\\n\\t\\t\\tattemptCounter++;\\n\\t\\t}\\n\\n\\t\\tawait ns.scp(scripts, home, currentTarget);\\n\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\",\"filename\":\"/modules/helper.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"rho-construction\",\"moduleSequenceNumber\":1051,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.grow(target);\\n\\t}\\n}\",\"filename\":\"basic-grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"rho-construction\",\"moduleSequenceNumber\":1052,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"basic-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"rho-construction\",\"moduleSequenceNumber\":1053,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(target);\\n\\t}\\n}\",\"filename\":\"basic-weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"rho-construction\",\"moduleSequenceNumber\":1054,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerList, takeover } from \\\"modules/helper.js\\\";\\n\\n/** @param {NS} ns **/\\n// TODO: unused + unfinished, based on setup.ns\\nexport async function main(ns) {\\n\\tconst myServers = [\\\"home\\\"];\\n\\n\\tvar servers = await getServerList(myServers, 0, ns);\\n\\n\\tfor (let entry in servers) {\\t\\n\\t\\tawait takeover(servers[entry], ns);\\n\\t}\\n}\",\"filename\":\"deep-setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"rho-construction\",\"moduleSequenceNumber\":1055,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\t//\\n}\",\"filename\":\"formulas-testing.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"rho-construction\",\"moduleSequenceNumber\":1056,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tconst currentMachine = ns.getHostname();\\n\\tvar servers = ns.scan(currentMachine);\\n\\tvar scripts = ns.ls(home, \\\"basic-\\\");\\n\\n\\tns.tprint(\\\"Host:  \\\" + currentMachine);\\n\\tfor (let entry in servers) {\\t// depth 0\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\t// depth 1\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== home && subservers.length > 1) {\\n\\t\\t\\t\\tns.tprint(\\\"-----> \\\" + subservers[subentry]);\\n\\t\\t\\t\\tlet subserversd2 = ns.scan(subservers[subentry]); // depth 2\\n\\t\\t\\t\\tfor (let subentryd2 in subserversd2) {\\n\\t\\t\\t\\t\\tif (subserversd2[subentryd2] !== subservers[subentry] && subserversd2[subentryd2] !== servers[entry] && subserversd2.length > 1) {\\n\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------> \\\" + subserversd2[subentryd2]);\\n\\t\\t\\t\\t\\t\\tlet subserversd3 = ns.scan(subserversd2[subentryd2]);\\t// depth 3\\n\\t\\t\\t\\t\\t\\tfor (let subentryd3 in subserversd3) {\\n\\t\\t\\t\\t\\t\\t\\tif (subserversd3[subentryd3] !== subserversd2[subentryd2] && subserversd3[subentryd3] !== subservers[subentry] && subserversd3.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------> \\\" + subserversd3[subentryd3]);\\n\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd4 = ns.scan(subserversd3[subentryd3]);\\t// depth 4\\n\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd4 in subserversd4) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd4[subentryd4] !== subserversd3[subentryd3] && subserversd4[subentryd4] !== subserversd2[subentryd2] && subserversd4.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------------> \\\" + subserversd4[subentryd4]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd5 = ns.scan(subserversd4[subentryd4]);\\t// depth 5\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd5 in subserversd5) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd5[subentryd5] !== subserversd4[subentryd4] && subserversd5[subentryd5] !== subserversd3[subentryd3] && subserversd5.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-------------------------> \\\" + subserversd5[subentryd5]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd6 = ns.scan(subserversd5[subentryd5]);\\t// depth 6\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd6 in subserversd6) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd6[subentryd6] !== subserversd5[subentryd5] && subserversd6[subentryd6] !== subserversd4[subentryd4] && subserversd6.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"------------------------------> \\\" + subserversd6[subentryd6]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd7 = ns.scan(subserversd6[subentryd6]);\\t// depth 7\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor(let subentryd7 in subserversd7) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd7[subentryd7] !== subserversd6[subentryd6] && subserversd7[subentryd7] !== subserversd5[subentryd5] && subserversd7.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-----------------------------------> \\\" + subserversd7[subentryd7]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"gigascan.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.05,\"server\":\"rho-construction\",\"moduleSequenceNumber\":1057,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet targetRam = ns.getServerMaxRam(ns.args[0]);\\n\\tlet scriptMem = ns.getScriptRam(ns.args[1]);\\n\\n\\tns.tprint(\\\"Maximum possible threads for \\\" + ns.args[1] + \\\": \\\" + Math.floor(targetRam / scriptMem));\\n\\tns.exit;\\n}\",\"filename\":\"ram-usage.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"rho-construction\",\"moduleSequenceNumber\":1058,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerList } from \\\"modules/helper.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet serversSeen = [\\\"home\\\"]; // home + bought servers\\n\\tlet contractList = [];\\n\\n\\tserversSeen = await getServerList(serversSeen, 0, ns);\\n\\n\\tns.tprint(serversSeen);\\n}\",\"filename\":\"search-coding-contracts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"rho-construction\",\"moduleSequenceNumber\":1059,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tvar servers = ns.scan(home);\\n\\tvar scripts = ns.ls(home, \\\".ns\\\");\\n\\n\\tfor (let entry in scripts) {\\n\\t\\tns.tprint(\\\"found script: \\\" + scripts[entry]);\\n\\t}\\n\\n\\t// Hack servers (!!! depth = 2 !!!) if needed and populate with scripts\\n\\tfor (let entry in servers) {\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== \\\"home\\\") {\\n\\t\\t\\t\\tns.tprint(\\\"----->   \\\" + subservers[subentry]);\\n\\t\\t\\t\\tif (!ns.hasRootAccess(subservers[subentry])) {\\n\\t\\t\\t\\t\\ttakeover(subservers[subentry]);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tns.tprint(\\\"copying scripts to \\\" + subservers[subentry]);\\n\\t\\t\\t\\tawait ns.scp(scripts, home, subservers[subentry]);\\n\\t\\t\\t\\t//await ns.scp(\\\"setup.ns\\\", home, subservers[subentry]);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (!ns.hasRootAccess(servers[entry])) {\\n\\t\\t\\ttakeover(servers[entry]);\\n\\t\\t}\\n\\t\\tns.tprint(\\\"copying scripts to \\\" + servers[entry]);\\n\\t\\tawait ns.scp(scripts, home, servers[entry]);\\n\\t\\t//await ns.scp(\\\"setup.ns\\\", home, servers[entry]);\\n\\t}\\n\\n\\t/** \\n\\t * \\tAttempts to take over target machine\\t\\n\\t * \\n\\t *  @param {string} tar\\n\\t *  @return {boolean} outcome \\n\\t**/\\n\\tasync function takeover(tar) {\\n\\t\\tlet currentTarget = tar;\\n\\t\\tlet isNotTakenOver = true;\\n\\t\\tlet attemptCounter = 0;\\n\\n\\t\\tif (ns.getServerNumPortsRequired <= 5 && attemptCounter < 50) {\\n\\t\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\n\\t\\t\\t\\tattemptCounter++;\\n\\t\\t\\t}\\n\\n\\t\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.15,\"server\":\"rho-construction\",\"moduleSequenceNumber\":1060,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}}],\"serversOnNetwork\":[\"zb-institute\",\"snap-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":45,\"hackDifficulty\":45,\"minDifficulty\":15,\"moneyAvailable\":686084157,\"moneyMax\":17152103925,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":494,\"serverGrowth\":45}},\"alpha-ent\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"alpha-ent\",\"httpPortOpen\":true,\"ip\":\"92.2.3.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"Alpha Enterprises\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Returns an array of all hostnames in the network tree\\n * \\n * @param {string[]} myServers\\n * @param {number} safetyCounter Prevents infnite recursion\\n * @param {NS} ns\\n */\\nexport async function getServerList(myServers, safetyCounter, ns) {\\n\\tlet srvrsSeen = myServers;\\n\\tlet currServScanResult = [];\\n\\n\\tfor (let serverSeen in srvrsSeen) {\\n\\t\\tcurrServScanResult = ns.scan(srvrsSeen[serverSeen]);\\n\\t\\tfor (let entry in currServScanResult) {\\n\\t\\t\\tif (!srvrsSeen.includes(currServScanResult[entry])) {\\n\\t\\t\\t\\tsrvrsSeen.push(currServScanResult[entry]);\\n\\t\\t\\t\\tif ((++safetyCounter) < 250) {\\n\\t\\t\\t\\t\\tawait getServerList(srvrsSeen, safetyCounter, ns);\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tns.exit();\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\t//Filter out invalid values (NaN, null, {}, undefined)\\n\\tsrvrsSeen = srvrsSeen.filter(x => x);\\n\\treturn srvrsSeen;\\n}\\n\\n\\n/** \\n * \\tAttempts to take over target machine\\t\\n * \\n *  @param {string} target\\n * \\t@param {NS} ns\\n *  @return {boolean} outcome \\n**/\\nexport async function takeover(target, ns) {\\n\\tconst home = \\\"home\\\";\\n\\tlet currentTarget = target;\\n\\tlet isNotTakenOver = true;\\n\\tlet attemptCounter = 0;\\n\\n\\tlet scripts = ns.ls(home, \\\".js\\\");\\n\\t//scripts.push(ns.ls(home, \\\".ns\\\")); //in case of deprecated .ns scripts\\n\\n\\tif (!ns.hasRootAccess(currentTarget) && attemptCounter < 30) {\\n\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\ttry {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t} catch (error) {\\n\\t\\t\\t\\t\\tns.tprint(\\\"not enough ports to nuke \\\" + currentTarget);\\n\\t\\t\\t\\t\\treturn false;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t}\\n\\t\\t\\tattemptCounter++;\\n\\t\\t}\\n\\n\\t\\tawait ns.scp(scripts, home, currentTarget);\\n\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\",\"filename\":\"/modules/helper.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":1061,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.grow(target);\\n\\t}\\n}\",\"filename\":\"basic-grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":1062,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"basic-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":1063,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(target);\\n\\t}\\n}\",\"filename\":\"basic-weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":1064,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerList, takeover } from \\\"modules/helper.js\\\";\\n\\n/** @param {NS} ns **/\\n// TODO: unused + unfinished, based on setup.ns\\nexport async function main(ns) {\\n\\tconst myServers = [\\\"home\\\"];\\n\\n\\tvar servers = await getServerList(myServers, 0, ns);\\n\\n\\tfor (let entry in servers) {\\t\\n\\t\\tawait takeover(servers[entry], ns);\\n\\t}\\n}\",\"filename\":\"deep-setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":1065,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\t//\\n}\",\"filename\":\"formulas-testing.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":1066,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tconst currentMachine = ns.getHostname();\\n\\tvar servers = ns.scan(currentMachine);\\n\\tvar scripts = ns.ls(home, \\\"basic-\\\");\\n\\n\\tns.tprint(\\\"Host:  \\\" + currentMachine);\\n\\tfor (let entry in servers) {\\t// depth 0\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\t// depth 1\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== home && subservers.length > 1) {\\n\\t\\t\\t\\tns.tprint(\\\"-----> \\\" + subservers[subentry]);\\n\\t\\t\\t\\tlet subserversd2 = ns.scan(subservers[subentry]); // depth 2\\n\\t\\t\\t\\tfor (let subentryd2 in subserversd2) {\\n\\t\\t\\t\\t\\tif (subserversd2[subentryd2] !== subservers[subentry] && subserversd2[subentryd2] !== servers[entry] && subserversd2.length > 1) {\\n\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------> \\\" + subserversd2[subentryd2]);\\n\\t\\t\\t\\t\\t\\tlet subserversd3 = ns.scan(subserversd2[subentryd2]);\\t// depth 3\\n\\t\\t\\t\\t\\t\\tfor (let subentryd3 in subserversd3) {\\n\\t\\t\\t\\t\\t\\t\\tif (subserversd3[subentryd3] !== subserversd2[subentryd2] && subserversd3[subentryd3] !== subservers[subentry] && subserversd3.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------> \\\" + subserversd3[subentryd3]);\\n\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd4 = ns.scan(subserversd3[subentryd3]);\\t// depth 4\\n\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd4 in subserversd4) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd4[subentryd4] !== subserversd3[subentryd3] && subserversd4[subentryd4] !== subserversd2[subentryd2] && subserversd4.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------------> \\\" + subserversd4[subentryd4]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd5 = ns.scan(subserversd4[subentryd4]);\\t// depth 5\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd5 in subserversd5) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd5[subentryd5] !== subserversd4[subentryd4] && subserversd5[subentryd5] !== subserversd3[subentryd3] && subserversd5.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-------------------------> \\\" + subserversd5[subentryd5]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd6 = ns.scan(subserversd5[subentryd5]);\\t// depth 6\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd6 in subserversd6) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd6[subentryd6] !== subserversd5[subentryd5] && subserversd6[subentryd6] !== subserversd4[subentryd4] && subserversd6.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"------------------------------> \\\" + subserversd6[subentryd6]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd7 = ns.scan(subserversd6[subentryd6]);\\t// depth 7\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor(let subentryd7 in subserversd7) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd7[subentryd7] !== subserversd6[subentryd6] && subserversd7[subentryd7] !== subserversd5[subentryd5] && subserversd7.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-----------------------------------> \\\" + subserversd7[subentryd7]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"gigascan.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.05,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":1067,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet targetRam = ns.getServerMaxRam(ns.args[0]);\\n\\tlet scriptMem = ns.getScriptRam(ns.args[1]);\\n\\n\\tns.tprint(\\\"Maximum possible threads for \\\" + ns.args[1] + \\\": \\\" + Math.floor(targetRam / scriptMem));\\n\\tns.exit;\\n}\",\"filename\":\"ram-usage.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":1068,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerList } from \\\"modules/helper.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet serversSeen = [\\\"home\\\"]; // home + bought servers\\n\\tlet contractList = [];\\n\\n\\tserversSeen = await getServerList(serversSeen, 0, ns);\\n\\n\\tns.tprint(serversSeen);\\n}\",\"filename\":\"search-coding-contracts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":1069,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tvar servers = ns.scan(home);\\n\\tvar scripts = ns.ls(home, \\\".js\\\");\\n\\n\\tfor (let entry in scripts) {\\n\\t\\tns.tprint(\\\"found script: \\\" + scripts[entry]);\\n\\t}\\n\\n\\t// Hack servers (!!! depth = 2 !!!) if needed and populate with scripts\\n\\tfor (let entry in servers) {\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== \\\"home\\\") {\\n\\t\\t\\t\\tns.tprint(\\\"----->   \\\" + subservers[subentry]);\\n\\t\\t\\t\\tif (!ns.hasRootAccess(subservers[subentry])) {\\n\\t\\t\\t\\t\\ttakeover(subservers[subentry]);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tns.tprint(\\\"copying scripts to \\\" + subservers[subentry]);\\n\\t\\t\\t\\tawait ns.scp(scripts, home, subservers[subentry]);\\n\\t\\t\\t\\t//await ns.scp(\\\"setup.ns\\\", home, subservers[subentry]);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (!ns.hasRootAccess(servers[entry])) {\\n\\t\\t\\ttakeover(servers[entry]);\\n\\t\\t}\\n\\t\\tns.tprint(\\\"copying scripts to \\\" + servers[entry]);\\n\\t\\tawait ns.scp(scripts, home, servers[entry]);\\n\\t\\t//await ns.scp(\\\"setup.ns\\\", home, servers[entry]);\\n\\t}\\n\\n\\t/** \\n\\t * \\tAttempts to take over target machine\\t\\n\\t * \\n\\t *  @param {string} tar\\n\\t *  @return {boolean} outcome \\n\\t**/\\n\\tasync function takeover(tar) {\\n\\t\\tlet currentTarget = tar;\\n\\t\\tlet isNotTakenOver = true;\\n\\t\\tlet attemptCounter = 0;\\n\\n\\t\\tif (ns.getServerNumPortsRequired <= 5 && attemptCounter < 50) {\\n\\t\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\n\\t\\t\\t\\tattemptCounter++;\\n\\t\\t\\t}\\n\\n\\t\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.15,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":1070,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}}],\"serversOnNetwork\":[\"zb-institute\",\"galactic-cyber\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":53,\"hackDifficulty\":53,\"minDifficulty\":18,\"moneyAvailable\":679618991,\"moneyMax\":16990474775,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":553,\"serverGrowth\":57}},\"aevum-police\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"aevum-police\",\"httpPortOpen\":true,\"ip\":\"59.6.2.6\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Aevum Police Headquarters\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Returns an array of all hostnames in the network tree\\n * \\n * @param {string[]} myServers\\n * @param {number} safetyCounter Prevents infnite recursion\\n * @param {NS} ns\\n */\\nexport async function getServerList(myServers, safetyCounter, ns) {\\n\\tlet srvrsSeen = myServers;\\n\\tlet currServScanResult = [];\\n\\n\\tfor (let serverSeen in srvrsSeen) {\\n\\t\\tcurrServScanResult = ns.scan(srvrsSeen[serverSeen]);\\n\\t\\tfor (let entry in currServScanResult) {\\n\\t\\t\\tif (!srvrsSeen.includes(currServScanResult[entry])) {\\n\\t\\t\\t\\tsrvrsSeen.push(currServScanResult[entry]);\\n\\t\\t\\t\\tif ((++safetyCounter) < 250) {\\n\\t\\t\\t\\t\\tawait getServerList(srvrsSeen, safetyCounter, ns);\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tns.exit();\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\t//Filter out invalid values (NaN, null, {}, undefined)\\n\\tsrvrsSeen = srvrsSeen.filter(x => x);\\n\\treturn srvrsSeen;\\n}\\n\\n\\n/** \\n * \\tAttempts to take over target machine\\t\\n * \\n *  @param {string} target\\n * \\t@param {NS} ns\\n *  @return {boolean} outcome \\n**/\\nexport async function takeover(target, ns) {\\n\\tconst home = \\\"home\\\";\\n\\tlet currentTarget = target;\\n\\tlet isNotTakenOver = true;\\n\\tlet attemptCounter = 0;\\n\\n\\tlet scripts = ns.ls(home, \\\".js\\\");\\n\\t//scripts.push(ns.ls(home, \\\".ns\\\")); //in case of deprecated .ns scripts\\n\\n\\tif (!ns.hasRootAccess(currentTarget) && attemptCounter < 30) {\\n\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\ttry {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t} catch (error) {\\n\\t\\t\\t\\t\\tns.tprint(\\\"not enough ports to nuke \\\" + currentTarget);\\n\\t\\t\\t\\t\\treturn false;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t}\\n\\t\\t\\tattemptCounter++;\\n\\t\\t}\\n\\n\\t\\tawait ns.scp(scripts, home, currentTarget);\\n\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\",\"filename\":\"/modules/helper.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"aevum-police\",\"moduleSequenceNumber\":1071,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.grow(target);\\n\\t}\\n}\",\"filename\":\"basic-grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"aevum-police\",\"moduleSequenceNumber\":1072,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"basic-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"aevum-police\",\"moduleSequenceNumber\":1073,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(target);\\n\\t}\\n}\",\"filename\":\"basic-weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"aevum-police\",\"moduleSequenceNumber\":1074,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerList, takeover } from \\\"modules/helper.js\\\";\\n\\n/** @param {NS} ns **/\\n// TODO: unused + unfinished, based on setup.ns\\nexport async function main(ns) {\\n\\tconst myServers = [\\\"home\\\"];\\n\\n\\tvar servers = await getServerList(myServers, 0, ns);\\n\\n\\tfor (let entry in servers) {\\t\\n\\t\\tawait takeover(servers[entry], ns);\\n\\t}\\n}\",\"filename\":\"deep-setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"aevum-police\",\"moduleSequenceNumber\":1075,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\t//\\n}\",\"filename\":\"formulas-testing.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"aevum-police\",\"moduleSequenceNumber\":1076,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tconst currentMachine = ns.getHostname();\\n\\tvar servers = ns.scan(currentMachine);\\n\\tvar scripts = ns.ls(home, \\\"basic-\\\");\\n\\n\\tns.tprint(\\\"Host:  \\\" + currentMachine);\\n\\tfor (let entry in servers) {\\t// depth 0\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\t// depth 1\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== home && subservers.length > 1) {\\n\\t\\t\\t\\tns.tprint(\\\"-----> \\\" + subservers[subentry]);\\n\\t\\t\\t\\tlet subserversd2 = ns.scan(subservers[subentry]); // depth 2\\n\\t\\t\\t\\tfor (let subentryd2 in subserversd2) {\\n\\t\\t\\t\\t\\tif (subserversd2[subentryd2] !== subservers[subentry] && subserversd2[subentryd2] !== servers[entry] && subserversd2.length > 1) {\\n\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------> \\\" + subserversd2[subentryd2]);\\n\\t\\t\\t\\t\\t\\tlet subserversd3 = ns.scan(subserversd2[subentryd2]);\\t// depth 3\\n\\t\\t\\t\\t\\t\\tfor (let subentryd3 in subserversd3) {\\n\\t\\t\\t\\t\\t\\t\\tif (subserversd3[subentryd3] !== subserversd2[subentryd2] && subserversd3[subentryd3] !== subservers[subentry] && subserversd3.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------> \\\" + subserversd3[subentryd3]);\\n\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd4 = ns.scan(subserversd3[subentryd3]);\\t// depth 4\\n\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd4 in subserversd4) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd4[subentryd4] !== subserversd3[subentryd3] && subserversd4[subentryd4] !== subserversd2[subentryd2] && subserversd4.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------------> \\\" + subserversd4[subentryd4]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd5 = ns.scan(subserversd4[subentryd4]);\\t// depth 5\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd5 in subserversd5) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd5[subentryd5] !== subserversd4[subentryd4] && subserversd5[subentryd5] !== subserversd3[subentryd3] && subserversd5.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-------------------------> \\\" + subserversd5[subentryd5]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd6 = ns.scan(subserversd5[subentryd5]);\\t// depth 6\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd6 in subserversd6) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd6[subentryd6] !== subserversd5[subentryd5] && subserversd6[subentryd6] !== subserversd4[subentryd4] && subserversd6.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"------------------------------> \\\" + subserversd6[subentryd6]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd7 = ns.scan(subserversd6[subentryd6]);\\t// depth 7\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor(let subentryd7 in subserversd7) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd7[subentryd7] !== subserversd6[subentryd6] && subserversd7[subentryd7] !== subserversd5[subentryd5] && subserversd7.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-----------------------------------> \\\" + subserversd7[subentryd7]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"gigascan.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.05,\"server\":\"aevum-police\",\"moduleSequenceNumber\":1077,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet targetRam = ns.getServerMaxRam(ns.args[0]);\\n\\tlet scriptMem = ns.getScriptRam(ns.args[1]);\\n\\n\\tns.tprint(\\\"Maximum possible threads for \\\" + ns.args[1] + \\\": \\\" + Math.floor(targetRam / scriptMem));\\n\\tns.exit;\\n}\",\"filename\":\"ram-usage.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"aevum-police\",\"moduleSequenceNumber\":1078,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerList } from \\\"modules/helper.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet serversSeen = [\\\"home\\\"]; // home + bought servers\\n\\tlet contractList = [];\\n\\n\\tserversSeen = await getServerList(serversSeen, 0, ns);\\n\\n\\tns.tprint(serversSeen);\\n}\",\"filename\":\"search-coding-contracts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"aevum-police\",\"moduleSequenceNumber\":1079,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tvar servers = ns.scan(home);\\n\\tvar scripts = ns.ls(home, \\\".js\\\");\\n\\n\\tfor (let entry in scripts) {\\n\\t\\tns.tprint(\\\"found script: \\\" + scripts[entry]);\\n\\t}\\n\\n\\t// Hack servers (!!! depth = 2 !!!) if needed and populate with scripts\\n\\tfor (let entry in servers) {\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== \\\"home\\\") {\\n\\t\\t\\t\\tns.tprint(\\\"----->   \\\" + subservers[subentry]);\\n\\t\\t\\t\\tif (!ns.hasRootAccess(subservers[subentry])) {\\n\\t\\t\\t\\t\\ttakeover(subservers[subentry]);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tns.tprint(\\\"copying scripts to \\\" + subservers[subentry]);\\n\\t\\t\\t\\tawait ns.scp(scripts, home, subservers[subentry]);\\n\\t\\t\\t\\t//await ns.scp(\\\"setup.ns\\\", home, subservers[subentry]);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (!ns.hasRootAccess(servers[entry])) {\\n\\t\\t\\ttakeover(servers[entry]);\\n\\t\\t}\\n\\t\\tns.tprint(\\\"copying scripts to \\\" + servers[entry]);\\n\\t\\tawait ns.scp(scripts, home, servers[entry]);\\n\\t\\t//await ns.scp(\\\"setup.ns\\\", home, servers[entry]);\\n\\t}\\n\\n\\t/** \\n\\t * \\tAttempts to take over target machine\\t\\n\\t * \\n\\t *  @param {string} tar\\n\\t *  @return {boolean} outcome \\n\\t**/\\n\\tasync function takeover(tar) {\\n\\t\\tlet currentTarget = tar;\\n\\t\\tlet isNotTakenOver = true;\\n\\t\\tlet attemptCounter = 0;\\n\\n\\t\\tif (ns.getServerNumPortsRequired <= 5 && attemptCounter < 50) {\\n\\t\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\n\\t\\t\\t\\tattemptCounter++;\\n\\t\\t\\t}\\n\\n\\t\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.15,\"server\":\"aevum-police\",\"moduleSequenceNumber\":1080,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}}],\"serversOnNetwork\":[\"catalyst\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":79,\"hackDifficulty\":79,\"minDifficulty\":26,\"moneyAvailable\":379689371,\"moneyMax\":9492234275,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":417,\"serverGrowth\":38}},\"rothman-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"rothman-uni\",\"httpPortOpen\":false,\"ip\":\"51.5.8.6\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"tensions-in-tech-race.lit\"],\"organizationName\":\"Rothman University\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Returns an array of all hostnames in the network tree\\n * \\n * @param {string[]} myServers\\n * @param {number} safetyCounter Prevents infnite recursion\\n * @param {NS} ns\\n */\\nexport async function getServerList(myServers, safetyCounter, ns) {\\n\\tlet srvrsSeen = myServers;\\n\\tlet currServScanResult = [];\\n\\n\\tfor (let serverSeen in srvrsSeen) {\\n\\t\\tcurrServScanResult = ns.scan(srvrsSeen[serverSeen]);\\n\\t\\tfor (let entry in currServScanResult) {\\n\\t\\t\\tif (!srvrsSeen.includes(currServScanResult[entry])) {\\n\\t\\t\\t\\tsrvrsSeen.push(currServScanResult[entry]);\\n\\t\\t\\t\\tif ((++safetyCounter) < 250) {\\n\\t\\t\\t\\t\\tawait getServerList(srvrsSeen, safetyCounter, ns);\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tns.exit();\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\t//Filter out invalid values (NaN, null, {}, undefined)\\n\\tsrvrsSeen = srvrsSeen.filter(x => x);\\n\\treturn srvrsSeen;\\n}\\n\\n\\n/** \\n * \\tAttempts to take over target machine\\t\\n * \\n *  @param {string} target\\n * \\t@param {NS} ns\\n *  @return {boolean} outcome \\n**/\\nexport async function takeover(target, ns) {\\n\\tconst home = \\\"home\\\";\\n\\tlet currentTarget = target;\\n\\tlet isNotTakenOver = true;\\n\\tlet attemptCounter = 0;\\n\\n\\tlet scripts = ns.ls(home, \\\".js\\\");\\n\\t//scripts.push(ns.ls(home, \\\".ns\\\")); //in case of deprecated .ns scripts\\n\\n\\tif (!ns.hasRootAccess(currentTarget) && attemptCounter < 30) {\\n\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\ttry {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t} catch (error) {\\n\\t\\t\\t\\t\\tns.tprint(\\\"not enough ports to nuke \\\" + currentTarget);\\n\\t\\t\\t\\t\\treturn false;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t}\\n\\t\\t\\tattemptCounter++;\\n\\t\\t}\\n\\n\\t\\tawait ns.scp(scripts, home, currentTarget);\\n\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\",\"filename\":\"/modules/helper.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":1081,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.grow(target);\\n\\t}\\n}\",\"filename\":\"basic-grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":1082,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"basic-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":1083,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(target);\\n\\t}\\n}\",\"filename\":\"basic-weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":1084,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerList, takeover } from \\\"modules/helper.js\\\";\\n\\n/** @param {NS} ns **/\\n// TODO: unused + unfinished, based on setup.ns\\nexport async function main(ns) {\\n\\tconst myServers = [\\\"home\\\"];\\n\\n\\tvar servers = await getServerList(myServers, 0, ns);\\n\\n\\tfor (let entry in servers) {\\t\\n\\t\\tawait takeover(servers[entry], ns);\\n\\t}\\n}\",\"filename\":\"deep-setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":1085,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\t//\\n}\",\"filename\":\"formulas-testing.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":1086,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tconst currentMachine = ns.getHostname();\\n\\tvar servers = ns.scan(currentMachine);\\n\\tvar scripts = ns.ls(home, \\\"basic-\\\");\\n\\n\\tns.tprint(\\\"Host:  \\\" + currentMachine);\\n\\tfor (let entry in servers) {\\t// depth 0\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\t// depth 1\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== home && subservers.length > 1) {\\n\\t\\t\\t\\tns.tprint(\\\"-----> \\\" + subservers[subentry]);\\n\\t\\t\\t\\tlet subserversd2 = ns.scan(subservers[subentry]); // depth 2\\n\\t\\t\\t\\tfor (let subentryd2 in subserversd2) {\\n\\t\\t\\t\\t\\tif (subserversd2[subentryd2] !== subservers[subentry] && subserversd2[subentryd2] !== servers[entry] && subserversd2.length > 1) {\\n\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------> \\\" + subserversd2[subentryd2]);\\n\\t\\t\\t\\t\\t\\tlet subserversd3 = ns.scan(subserversd2[subentryd2]);\\t// depth 3\\n\\t\\t\\t\\t\\t\\tfor (let subentryd3 in subserversd3) {\\n\\t\\t\\t\\t\\t\\t\\tif (subserversd3[subentryd3] !== subserversd2[subentryd2] && subserversd3[subentryd3] !== subservers[subentry] && subserversd3.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------> \\\" + subserversd3[subentryd3]);\\n\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd4 = ns.scan(subserversd3[subentryd3]);\\t// depth 4\\n\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd4 in subserversd4) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd4[subentryd4] !== subserversd3[subentryd3] && subserversd4[subentryd4] !== subserversd2[subentryd2] && subserversd4.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------------> \\\" + subserversd4[subentryd4]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd5 = ns.scan(subserversd4[subentryd4]);\\t// depth 5\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd5 in subserversd5) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd5[subentryd5] !== subserversd4[subentryd4] && subserversd5[subentryd5] !== subserversd3[subentryd3] && subserversd5.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-------------------------> \\\" + subserversd5[subentryd5]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd6 = ns.scan(subserversd5[subentryd5]);\\t// depth 6\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd6 in subserversd6) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd6[subentryd6] !== subserversd5[subentryd5] && subserversd6[subentryd6] !== subserversd4[subentryd4] && subserversd6.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"------------------------------> \\\" + subserversd6[subentryd6]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd7 = ns.scan(subserversd6[subentryd6]);\\t// depth 7\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor(let subentryd7 in subserversd7) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd7[subentryd7] !== subserversd6[subentryd6] && subserversd7[subentryd7] !== subserversd5[subentryd5] && subserversd7.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-----------------------------------> \\\" + subserversd7[subentryd7]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"gigascan.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.05,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":1087,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet targetRam = ns.getServerMaxRam(ns.args[0]);\\n\\tlet scriptMem = ns.getScriptRam(ns.args[1]);\\n\\n\\tns.tprint(\\\"Maximum possible threads for \\\" + ns.args[1] + \\\": \\\" + Math.floor(targetRam / scriptMem));\\n\\tns.exit;\\n}\",\"filename\":\"ram-usage.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":1088,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerList } from \\\"modules/helper.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet serversSeen = [\\\"home\\\"]; // home + bought servers\\n\\tlet contractList = [];\\n\\n\\tserversSeen = await getServerList(serversSeen, 0, ns);\\n\\n\\tns.tprint(serversSeen);\\n}\",\"filename\":\"search-coding-contracts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":1089,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tvar servers = ns.scan(home);\\n\\tvar scripts = ns.ls(home, \\\".ns\\\");\\n\\n\\tfor (let entry in scripts) {\\n\\t\\tns.tprint(\\\"found script: \\\" + scripts[entry]);\\n\\t}\\n\\n\\t// Hack servers (!!! depth = 2 !!!) if needed and populate with scripts\\n\\tfor (let entry in servers) {\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== \\\"home\\\") {\\n\\t\\t\\t\\tns.tprint(\\\"----->   \\\" + subservers[subentry]);\\n\\t\\t\\t\\tif (!ns.hasRootAccess(subservers[subentry])) {\\n\\t\\t\\t\\t\\ttakeover(subservers[subentry]);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tns.tprint(\\\"copying scripts to \\\" + subservers[subentry]);\\n\\t\\t\\t\\tawait ns.scp(scripts, home, subservers[subentry]);\\n\\t\\t\\t\\t//await ns.scp(\\\"setup.ns\\\", home, subservers[subentry]);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (!ns.hasRootAccess(servers[entry])) {\\n\\t\\t\\ttakeover(servers[entry]);\\n\\t\\t}\\n\\t\\tns.tprint(\\\"copying scripts to \\\" + servers[entry]);\\n\\t\\tawait ns.scp(scripts, home, servers[entry]);\\n\\t\\t//await ns.scp(\\\"setup.ns\\\", home, servers[entry]);\\n\\t}\\n\\n\\t/** \\n\\t * \\tAttempts to take over target machine\\t\\n\\t * \\n\\t *  @param {string} tar\\n\\t *  @return {boolean} outcome \\n\\t**/\\n\\tasync function takeover(tar) {\\n\\t\\tlet currentTarget = tar;\\n\\t\\tlet isNotTakenOver = true;\\n\\t\\tlet attemptCounter = 0;\\n\\n\\t\\tif (ns.getServerNumPortsRequired <= 5 && attemptCounter < 50) {\\n\\t\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\n\\t\\t\\t\\tattemptCounter++;\\n\\t\\t\\t}\\n\\n\\t\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.15,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":1090,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}}],\"serversOnNetwork\":[\"the-hub\",\"lexo-corp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":45,\"hackDifficulty\":45,\"minDifficulty\":15,\"moneyAvailable\":190621837,\"moneyMax\":4765545925,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":405,\"serverGrowth\":36}},\"zb-institute\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-704856.cct\",\"type\":\"Minimum Path Sum in a Triangle\",\"data\":[[4],[3,3],[2,1,5],[9,4,5,5],[4,2,3,7,5],[4,6,6,4,5,6],[8,2,4,8,9,4,6],[5,5,3,2,3,9,9,9],[4,7,7,3,2,8,9,7,8],[1,8,7,7,9,9,4,4,4,6],[1,7,2,3,9,3,3,9,3,5,7],[7,9,4,2,2,2,4,8,1,7,1,2]],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zb-institute\",\"httpPortOpen\":true,\"ip\":\"94.8.8.4\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[],\"organizationName\":\"ZB Institute of Technology\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Returns an array of all hostnames in the network tree\\n * \\n * @param {string[]} myServers\\n * @param {number} safetyCounter Prevents infnite recursion\\n * @param {NS} ns\\n */\\nexport async function getServerList(myServers, safetyCounter, ns) {\\n\\tlet srvrsSeen = myServers;\\n\\tlet currServScanResult = [];\\n\\n\\tfor (let serverSeen in srvrsSeen) {\\n\\t\\tcurrServScanResult = ns.scan(srvrsSeen[serverSeen]);\\n\\t\\tfor (let entry in currServScanResult) {\\n\\t\\t\\tif (!srvrsSeen.includes(currServScanResult[entry])) {\\n\\t\\t\\t\\tsrvrsSeen.push(currServScanResult[entry]);\\n\\t\\t\\t\\tif ((++safetyCounter) < 250) {\\n\\t\\t\\t\\t\\tawait getServerList(srvrsSeen, safetyCounter, ns);\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tns.exit();\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\t//Filter out invalid values (NaN, null, {}, undefined)\\n\\tsrvrsSeen = srvrsSeen.filter(x => x);\\n\\treturn srvrsSeen;\\n}\\n\\n\\n/** \\n * \\tAttempts to take over target machine\\t\\n * \\n *  @param {string} target\\n * \\t@param {NS} ns\\n *  @return {boolean} outcome \\n**/\\nexport async function takeover(target, ns) {\\n\\tconst home = \\\"home\\\";\\n\\tlet currentTarget = target;\\n\\tlet isNotTakenOver = true;\\n\\tlet attemptCounter = 0;\\n\\n\\tlet scripts = ns.ls(home, \\\".js\\\");\\n\\t//scripts.push(ns.ls(home, \\\".ns\\\")); //in case of deprecated .ns scripts\\n\\n\\tif (!ns.hasRootAccess(currentTarget) && attemptCounter < 30) {\\n\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\ttry {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t} catch (error) {\\n\\t\\t\\t\\t\\tns.tprint(\\\"not enough ports to nuke \\\" + currentTarget);\\n\\t\\t\\t\\t\\treturn false;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t}\\n\\t\\t\\tattemptCounter++;\\n\\t\\t}\\n\\n\\t\\tawait ns.scp(scripts, home, currentTarget);\\n\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\",\"filename\":\"/modules/helper.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"zb-institute\",\"moduleSequenceNumber\":1091,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.grow(target);\\n\\t}\\n}\",\"filename\":\"basic-grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zb-institute\",\"moduleSequenceNumber\":1092,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"basic-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"zb-institute\",\"moduleSequenceNumber\":1093,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(target);\\n\\t}\\n}\",\"filename\":\"basic-weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zb-institute\",\"moduleSequenceNumber\":1094,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerList, takeover } from \\\"modules/helper.js\\\";\\n\\n/** @param {NS} ns **/\\n// TODO: unused + unfinished, based on setup.ns\\nexport async function main(ns) {\\n\\tconst myServers = [\\\"home\\\"];\\n\\n\\tvar servers = await getServerList(myServers, 0, ns);\\n\\n\\tfor (let entry in servers) {\\t\\n\\t\\tawait takeover(servers[entry], ns);\\n\\t}\\n}\",\"filename\":\"deep-setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"zb-institute\",\"moduleSequenceNumber\":1095,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\t//\\n}\",\"filename\":\"formulas-testing.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"zb-institute\",\"moduleSequenceNumber\":1096,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tconst currentMachine = ns.getHostname();\\n\\tvar servers = ns.scan(currentMachine);\\n\\tvar scripts = ns.ls(home, \\\"basic-\\\");\\n\\n\\tns.tprint(\\\"Host:  \\\" + currentMachine);\\n\\tfor (let entry in servers) {\\t// depth 0\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\t// depth 1\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== home && subservers.length > 1) {\\n\\t\\t\\t\\tns.tprint(\\\"-----> \\\" + subservers[subentry]);\\n\\t\\t\\t\\tlet subserversd2 = ns.scan(subservers[subentry]); // depth 2\\n\\t\\t\\t\\tfor (let subentryd2 in subserversd2) {\\n\\t\\t\\t\\t\\tif (subserversd2[subentryd2] !== subservers[subentry] && subserversd2[subentryd2] !== servers[entry] && subserversd2.length > 1) {\\n\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------> \\\" + subserversd2[subentryd2]);\\n\\t\\t\\t\\t\\t\\tlet subserversd3 = ns.scan(subserversd2[subentryd2]);\\t// depth 3\\n\\t\\t\\t\\t\\t\\tfor (let subentryd3 in subserversd3) {\\n\\t\\t\\t\\t\\t\\t\\tif (subserversd3[subentryd3] !== subserversd2[subentryd2] && subserversd3[subentryd3] !== subservers[subentry] && subserversd3.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------> \\\" + subserversd3[subentryd3]);\\n\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd4 = ns.scan(subserversd3[subentryd3]);\\t// depth 4\\n\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd4 in subserversd4) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd4[subentryd4] !== subserversd3[subentryd3] && subserversd4[subentryd4] !== subserversd2[subentryd2] && subserversd4.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------------> \\\" + subserversd4[subentryd4]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd5 = ns.scan(subserversd4[subentryd4]);\\t// depth 5\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd5 in subserversd5) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd5[subentryd5] !== subserversd4[subentryd4] && subserversd5[subentryd5] !== subserversd3[subentryd3] && subserversd5.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-------------------------> \\\" + subserversd5[subentryd5]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd6 = ns.scan(subserversd5[subentryd5]);\\t// depth 6\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd6 in subserversd6) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd6[subentryd6] !== subserversd5[subentryd5] && subserversd6[subentryd6] !== subserversd4[subentryd4] && subserversd6.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"------------------------------> \\\" + subserversd6[subentryd6]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd7 = ns.scan(subserversd6[subentryd6]);\\t// depth 7\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor(let subentryd7 in subserversd7) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd7[subentryd7] !== subserversd6[subentryd6] && subserversd7[subentryd7] !== subserversd5[subentryd5] && subserversd7.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-----------------------------------> \\\" + subserversd7[subentryd7]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"gigascan.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.05,\"server\":\"zb-institute\",\"moduleSequenceNumber\":1097,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet targetRam = ns.getServerMaxRam(ns.args[0]);\\n\\tlet scriptMem = ns.getScriptRam(ns.args[1]);\\n\\n\\tns.tprint(\\\"Maximum possible threads for \\\" + ns.args[1] + \\\": \\\" + Math.floor(targetRam / scriptMem));\\n\\tns.exit;\\n}\",\"filename\":\"ram-usage.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zb-institute\",\"moduleSequenceNumber\":1098,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerList } from \\\"modules/helper.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet serversSeen = [\\\"home\\\"]; // home + bought servers\\n\\tlet contractList = [];\\n\\n\\tserversSeen = await getServerList(serversSeen, 0, ns);\\n\\n\\tns.tprint(serversSeen);\\n}\",\"filename\":\"search-coding-contracts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"zb-institute\",\"moduleSequenceNumber\":1099,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tvar servers = ns.scan(home);\\n\\tvar scripts = ns.ls(home, \\\".js\\\");\\n\\n\\tfor (let entry in scripts) {\\n\\t\\tns.tprint(\\\"found script: \\\" + scripts[entry]);\\n\\t}\\n\\n\\t// Hack servers (!!! depth = 2 !!!) if needed and populate with scripts\\n\\tfor (let entry in servers) {\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== \\\"home\\\") {\\n\\t\\t\\t\\tns.tprint(\\\"----->   \\\" + subservers[subentry]);\\n\\t\\t\\t\\tif (!ns.hasRootAccess(subservers[subentry])) {\\n\\t\\t\\t\\t\\ttakeover(subservers[subentry]);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tns.tprint(\\\"copying scripts to \\\" + subservers[subentry]);\\n\\t\\t\\t\\tawait ns.scp(scripts, home, subservers[subentry]);\\n\\t\\t\\t\\t//await ns.scp(\\\"setup.ns\\\", home, subservers[subentry]);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (!ns.hasRootAccess(servers[entry])) {\\n\\t\\t\\ttakeover(servers[entry]);\\n\\t\\t}\\n\\t\\tns.tprint(\\\"copying scripts to \\\" + servers[entry]);\\n\\t\\tawait ns.scp(scripts, home, servers[entry]);\\n\\t\\t//await ns.scp(\\\"setup.ns\\\", home, servers[entry]);\\n\\t}\\n\\n\\t/** \\n\\t * \\tAttempts to take over target machine\\t\\n\\t * \\n\\t *  @param {string} tar\\n\\t *  @return {boolean} outcome \\n\\t**/\\n\\tasync function takeover(tar) {\\n\\t\\tlet currentTarget = tar;\\n\\t\\tlet isNotTakenOver = true;\\n\\t\\tlet attemptCounter = 0;\\n\\n\\t\\tif (ns.getServerNumPortsRequired <= 5 && attemptCounter < 50) {\\n\\t\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\n\\t\\t\\t\\tattemptCounter++;\\n\\t\\t\\t}\\n\\n\\t\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.15,\"server\":\"zb-institute\",\"moduleSequenceNumber\":1100,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}}],\"serversOnNetwork\":[\"crush-fitness\",\"rho-construction\",\"alpha-ent\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":80,\"hackDifficulty\":80,\"minDifficulty\":27,\"moneyAvailable\":925876371,\"moneyMax\":23146909275,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":735,\"serverGrowth\":76}},\"summit-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"summit-uni\",\"httpPortOpen\":false,\"ip\":\"61.6.7.1\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"synthetic-muscles.lit\"],\"organizationName\":\"Summit University\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Returns an array of all hostnames in the network tree\\n * \\n * @param {string[]} myServers\\n * @param {number} safetyCounter Prevents infnite recursion\\n * @param {NS} ns\\n */\\nexport async function getServerList(myServers, safetyCounter, ns) {\\n\\tlet srvrsSeen = myServers;\\n\\tlet currServScanResult = [];\\n\\n\\tfor (let serverSeen in srvrsSeen) {\\n\\t\\tcurrServScanResult = ns.scan(srvrsSeen[serverSeen]);\\n\\t\\tfor (let entry in currServScanResult) {\\n\\t\\t\\tif (!srvrsSeen.includes(currServScanResult[entry])) {\\n\\t\\t\\t\\tsrvrsSeen.push(currServScanResult[entry]);\\n\\t\\t\\t\\tif ((++safetyCounter) < 250) {\\n\\t\\t\\t\\t\\tawait getServerList(srvrsSeen, safetyCounter, ns);\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tns.exit();\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\t//Filter out invalid values (NaN, null, {}, undefined)\\n\\tsrvrsSeen = srvrsSeen.filter(x => x);\\n\\treturn srvrsSeen;\\n}\\n\\n\\n/** \\n * \\tAttempts to take over target machine\\t\\n * \\n *  @param {string} target\\n * \\t@param {NS} ns\\n *  @return {boolean} outcome \\n**/\\nexport async function takeover(target, ns) {\\n\\tconst home = \\\"home\\\";\\n\\tlet currentTarget = target;\\n\\tlet isNotTakenOver = true;\\n\\tlet attemptCounter = 0;\\n\\n\\tlet scripts = ns.ls(home, \\\".js\\\");\\n\\t//scripts.push(ns.ls(home, \\\".ns\\\")); //in case of deprecated .ns scripts\\n\\n\\tif (!ns.hasRootAccess(currentTarget) && attemptCounter < 30) {\\n\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\ttry {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t} catch (error) {\\n\\t\\t\\t\\t\\tns.tprint(\\\"not enough ports to nuke \\\" + currentTarget);\\n\\t\\t\\t\\t\\treturn false;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t}\\n\\t\\t\\tattemptCounter++;\\n\\t\\t}\\n\\n\\t\\tawait ns.scp(scripts, home, currentTarget);\\n\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\",\"filename\":\"/modules/helper.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"summit-uni\",\"moduleSequenceNumber\":1101,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.grow(target);\\n\\t}\\n}\",\"filename\":\"basic-grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"summit-uni\",\"moduleSequenceNumber\":1102,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"basic-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"summit-uni\",\"moduleSequenceNumber\":1103,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(target);\\n\\t}\\n}\",\"filename\":\"basic-weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"summit-uni\",\"moduleSequenceNumber\":1104,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerList, takeover } from \\\"modules/helper.js\\\";\\n\\n/** @param {NS} ns **/\\n// TODO: unused + unfinished, based on setup.ns\\nexport async function main(ns) {\\n\\tconst myServers = [\\\"home\\\"];\\n\\n\\tvar servers = await getServerList(myServers, 0, ns);\\n\\n\\tfor (let entry in servers) {\\t\\n\\t\\tawait takeover(servers[entry], ns);\\n\\t}\\n}\",\"filename\":\"deep-setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"summit-uni\",\"moduleSequenceNumber\":1105,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\t//\\n}\",\"filename\":\"formulas-testing.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"summit-uni\",\"moduleSequenceNumber\":1106,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tconst currentMachine = ns.getHostname();\\n\\tvar servers = ns.scan(currentMachine);\\n\\tvar scripts = ns.ls(home, \\\"basic-\\\");\\n\\n\\tns.tprint(\\\"Host:  \\\" + currentMachine);\\n\\tfor (let entry in servers) {\\t// depth 0\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\t// depth 1\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== home && subservers.length > 1) {\\n\\t\\t\\t\\tns.tprint(\\\"-----> \\\" + subservers[subentry]);\\n\\t\\t\\t\\tlet subserversd2 = ns.scan(subservers[subentry]); // depth 2\\n\\t\\t\\t\\tfor (let subentryd2 in subserversd2) {\\n\\t\\t\\t\\t\\tif (subserversd2[subentryd2] !== subservers[subentry] && subserversd2[subentryd2] !== servers[entry] && subserversd2.length > 1) {\\n\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------> \\\" + subserversd2[subentryd2]);\\n\\t\\t\\t\\t\\t\\tlet subserversd3 = ns.scan(subserversd2[subentryd2]);\\t// depth 3\\n\\t\\t\\t\\t\\t\\tfor (let subentryd3 in subserversd3) {\\n\\t\\t\\t\\t\\t\\t\\tif (subserversd3[subentryd3] !== subserversd2[subentryd2] && subserversd3[subentryd3] !== subservers[subentry] && subserversd3.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------> \\\" + subserversd3[subentryd3]);\\n\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd4 = ns.scan(subserversd3[subentryd3]);\\t// depth 4\\n\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd4 in subserversd4) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd4[subentryd4] !== subserversd3[subentryd3] && subserversd4[subentryd4] !== subserversd2[subentryd2] && subserversd4.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------------> \\\" + subserversd4[subentryd4]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd5 = ns.scan(subserversd4[subentryd4]);\\t// depth 5\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd5 in subserversd5) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd5[subentryd5] !== subserversd4[subentryd4] && subserversd5[subentryd5] !== subserversd3[subentryd3] && subserversd5.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-------------------------> \\\" + subserversd5[subentryd5]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd6 = ns.scan(subserversd5[subentryd5]);\\t// depth 6\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd6 in subserversd6) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd6[subentryd6] !== subserversd5[subentryd5] && subserversd6[subentryd6] !== subserversd4[subentryd4] && subserversd6.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"------------------------------> \\\" + subserversd6[subentryd6]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd7 = ns.scan(subserversd6[subentryd6]);\\t// depth 7\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor(let subentryd7 in subserversd7) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd7[subentryd7] !== subserversd6[subentryd6] && subserversd7[subentryd7] !== subserversd5[subentryd5] && subserversd7.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-----------------------------------> \\\" + subserversd7[subentryd7]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"gigascan.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.05,\"server\":\"summit-uni\",\"moduleSequenceNumber\":1107,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet targetRam = ns.getServerMaxRam(ns.args[0]);\\n\\tlet scriptMem = ns.getScriptRam(ns.args[1]);\\n\\n\\tns.tprint(\\\"Maximum possible threads for \\\" + ns.args[1] + \\\": \\\" + Math.floor(targetRam / scriptMem));\\n\\tns.exit;\\n}\",\"filename\":\"ram-usage.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"summit-uni\",\"moduleSequenceNumber\":1108,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerList } from \\\"modules/helper.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet serversSeen = [\\\"home\\\"]; // home + bought servers\\n\\tlet contractList = [];\\n\\n\\tserversSeen = await getServerList(serversSeen, 0, ns);\\n\\n\\tns.tprint(serversSeen);\\n}\",\"filename\":\"search-coding-contracts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"summit-uni\",\"moduleSequenceNumber\":1109,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tvar servers = ns.scan(home);\\n\\tvar scripts = ns.ls(home, \\\".ns\\\");\\n\\n\\tfor (let entry in scripts) {\\n\\t\\tns.tprint(\\\"found script: \\\" + scripts[entry]);\\n\\t}\\n\\n\\t// Hack servers (!!! depth = 2 !!!) if needed and populate with scripts\\n\\tfor (let entry in servers) {\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== \\\"home\\\") {\\n\\t\\t\\t\\tns.tprint(\\\"----->   \\\" + subservers[subentry]);\\n\\t\\t\\t\\tif (!ns.hasRootAccess(subservers[subentry])) {\\n\\t\\t\\t\\t\\ttakeover(subservers[subentry]);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tns.tprint(\\\"copying scripts to \\\" + subservers[subentry]);\\n\\t\\t\\t\\tawait ns.scp(scripts, home, subservers[subentry]);\\n\\t\\t\\t\\t//await ns.scp(\\\"setup.ns\\\", home, subservers[subentry]);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (!ns.hasRootAccess(servers[entry])) {\\n\\t\\t\\ttakeover(servers[entry]);\\n\\t\\t}\\n\\t\\tns.tprint(\\\"copying scripts to \\\" + servers[entry]);\\n\\t\\tawait ns.scp(scripts, home, servers[entry]);\\n\\t\\t//await ns.scp(\\\"setup.ns\\\", home, servers[entry]);\\n\\t}\\n\\n\\t/** \\n\\t * \\tAttempts to take over target machine\\t\\n\\t * \\n\\t *  @param {string} tar\\n\\t *  @return {boolean} outcome \\n\\t**/\\n\\tasync function takeover(tar) {\\n\\t\\tlet currentTarget = tar;\\n\\t\\tlet isNotTakenOver = true;\\n\\t\\tlet attemptCounter = 0;\\n\\n\\t\\tif (ns.getServerNumPortsRequired <= 5 && attemptCounter < 50) {\\n\\t\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\n\\t\\t\\t\\tattemptCounter++;\\n\\t\\t\\t}\\n\\n\\t\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.15,\"server\":\"summit-uni\",\"moduleSequenceNumber\":1110,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}}],\"serversOnNetwork\":[\"the-hub\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":65,\"hackDifficulty\":65,\"minDifficulty\":22,\"moneyAvailable\":349733238,\"moneyMax\":8743330950,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":457,\"serverGrowth\":56}},\"syscore\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"syscore\",\"httpPortOpen\":true,\"ip\":\"46.2.2.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"SysCore Securities\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Returns an array of all hostnames in the network tree\\n * \\n * @param {string[]} myServers\\n * @param {number} safetyCounter Prevents infnite recursion\\n * @param {NS} ns\\n */\\nexport async function getServerList(myServers, safetyCounter, ns) {\\n\\tlet srvrsSeen = myServers;\\n\\tlet currServScanResult = [];\\n\\n\\tfor (let serverSeen in srvrsSeen) {\\n\\t\\tcurrServScanResult = ns.scan(srvrsSeen[serverSeen]);\\n\\t\\tfor (let entry in currServScanResult) {\\n\\t\\t\\tif (!srvrsSeen.includes(currServScanResult[entry])) {\\n\\t\\t\\t\\tsrvrsSeen.push(currServScanResult[entry]);\\n\\t\\t\\t\\tif ((++safetyCounter) < 250) {\\n\\t\\t\\t\\t\\tawait getServerList(srvrsSeen, safetyCounter, ns);\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tns.exit();\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\t//Filter out invalid values (NaN, null, {}, undefined)\\n\\tsrvrsSeen = srvrsSeen.filter(x => x);\\n\\treturn srvrsSeen;\\n}\\n\\n\\n/** \\n * \\tAttempts to take over target machine\\t\\n * \\n *  @param {string} target\\n * \\t@param {NS} ns\\n *  @return {boolean} outcome \\n**/\\nexport async function takeover(target, ns) {\\n\\tconst home = \\\"home\\\";\\n\\tlet currentTarget = target;\\n\\tlet isNotTakenOver = true;\\n\\tlet attemptCounter = 0;\\n\\n\\tlet scripts = ns.ls(home, \\\".js\\\");\\n\\t//scripts.push(ns.ls(home, \\\".ns\\\")); //in case of deprecated .ns scripts\\n\\n\\tif (!ns.hasRootAccess(currentTarget) && attemptCounter < 30) {\\n\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\ttry {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t} catch (error) {\\n\\t\\t\\t\\t\\tns.tprint(\\\"not enough ports to nuke \\\" + currentTarget);\\n\\t\\t\\t\\t\\treturn false;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t}\\n\\t\\t\\tattemptCounter++;\\n\\t\\t}\\n\\n\\t\\tawait ns.scp(scripts, home, currentTarget);\\n\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\",\"filename\":\"/modules/helper.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"syscore\",\"moduleSequenceNumber\":1111,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.grow(target);\\n\\t}\\n}\",\"filename\":\"basic-grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"syscore\",\"moduleSequenceNumber\":1112,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"basic-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"syscore\",\"moduleSequenceNumber\":1113,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(target);\\n\\t}\\n}\",\"filename\":\"basic-weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"syscore\",\"moduleSequenceNumber\":1114,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerList, takeover } from \\\"modules/helper.js\\\";\\n\\n/** @param {NS} ns **/\\n// TODO: unused + unfinished, based on setup.ns\\nexport async function main(ns) {\\n\\tconst myServers = [\\\"home\\\"];\\n\\n\\tvar servers = await getServerList(myServers, 0, ns);\\n\\n\\tfor (let entry in servers) {\\t\\n\\t\\tawait takeover(servers[entry], ns);\\n\\t}\\n}\",\"filename\":\"deep-setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"syscore\",\"moduleSequenceNumber\":1115,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\t//\\n}\",\"filename\":\"formulas-testing.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"syscore\",\"moduleSequenceNumber\":1116,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tconst currentMachine = ns.getHostname();\\n\\tvar servers = ns.scan(currentMachine);\\n\\tvar scripts = ns.ls(home, \\\"basic-\\\");\\n\\n\\tns.tprint(\\\"Host:  \\\" + currentMachine);\\n\\tfor (let entry in servers) {\\t// depth 0\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\t// depth 1\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== home && subservers.length > 1) {\\n\\t\\t\\t\\tns.tprint(\\\"-----> \\\" + subservers[subentry]);\\n\\t\\t\\t\\tlet subserversd2 = ns.scan(subservers[subentry]); // depth 2\\n\\t\\t\\t\\tfor (let subentryd2 in subserversd2) {\\n\\t\\t\\t\\t\\tif (subserversd2[subentryd2] !== subservers[subentry] && subserversd2[subentryd2] !== servers[entry] && subserversd2.length > 1) {\\n\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------> \\\" + subserversd2[subentryd2]);\\n\\t\\t\\t\\t\\t\\tlet subserversd3 = ns.scan(subserversd2[subentryd2]);\\t// depth 3\\n\\t\\t\\t\\t\\t\\tfor (let subentryd3 in subserversd3) {\\n\\t\\t\\t\\t\\t\\t\\tif (subserversd3[subentryd3] !== subserversd2[subentryd2] && subserversd3[subentryd3] !== subservers[subentry] && subserversd3.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------> \\\" + subserversd3[subentryd3]);\\n\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd4 = ns.scan(subserversd3[subentryd3]);\\t// depth 4\\n\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd4 in subserversd4) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd4[subentryd4] !== subserversd3[subentryd3] && subserversd4[subentryd4] !== subserversd2[subentryd2] && subserversd4.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------------> \\\" + subserversd4[subentryd4]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd5 = ns.scan(subserversd4[subentryd4]);\\t// depth 5\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd5 in subserversd5) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd5[subentryd5] !== subserversd4[subentryd4] && subserversd5[subentryd5] !== subserversd3[subentryd3] && subserversd5.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-------------------------> \\\" + subserversd5[subentryd5]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd6 = ns.scan(subserversd5[subentryd5]);\\t// depth 6\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd6 in subserversd6) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd6[subentryd6] !== subserversd5[subentryd5] && subserversd6[subentryd6] !== subserversd4[subentryd4] && subserversd6.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"------------------------------> \\\" + subserversd6[subentryd6]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd7 = ns.scan(subserversd6[subentryd6]);\\t// depth 7\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor(let subentryd7 in subserversd7) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd7[subentryd7] !== subserversd6[subentryd6] && subserversd7[subentryd7] !== subserversd5[subentryd5] && subserversd7.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-----------------------------------> \\\" + subserversd7[subentryd7]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"gigascan.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.05,\"server\":\"syscore\",\"moduleSequenceNumber\":1117,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet targetRam = ns.getServerMaxRam(ns.args[0]);\\n\\tlet scriptMem = ns.getScriptRam(ns.args[1]);\\n\\n\\tns.tprint(\\\"Maximum possible threads for \\\" + ns.args[1] + \\\": \\\" + Math.floor(targetRam / scriptMem));\\n\\tns.exit;\\n}\",\"filename\":\"ram-usage.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"syscore\",\"moduleSequenceNumber\":1118,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerList } from \\\"modules/helper.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet serversSeen = [\\\"home\\\"]; // home + bought servers\\n\\tlet contractList = [];\\n\\n\\tserversSeen = await getServerList(serversSeen, 0, ns);\\n\\n\\tns.tprint(serversSeen);\\n}\",\"filename\":\"search-coding-contracts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"syscore\",\"moduleSequenceNumber\":1119,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tvar servers = ns.scan(home);\\n\\tvar scripts = ns.ls(home, \\\".js\\\");\\n\\n\\tfor (let entry in scripts) {\\n\\t\\tns.tprint(\\\"found script: \\\" + scripts[entry]);\\n\\t}\\n\\n\\t// Hack servers (!!! depth = 2 !!!) if needed and populate with scripts\\n\\tfor (let entry in servers) {\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== \\\"home\\\") {\\n\\t\\t\\t\\tns.tprint(\\\"----->   \\\" + subservers[subentry]);\\n\\t\\t\\t\\tif (!ns.hasRootAccess(subservers[subentry])) {\\n\\t\\t\\t\\t\\ttakeover(subservers[subentry]);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tns.tprint(\\\"copying scripts to \\\" + subservers[subentry]);\\n\\t\\t\\t\\tawait ns.scp(scripts, home, subservers[subentry]);\\n\\t\\t\\t\\t//await ns.scp(\\\"setup.ns\\\", home, subservers[subentry]);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (!ns.hasRootAccess(servers[entry])) {\\n\\t\\t\\ttakeover(servers[entry]);\\n\\t\\t}\\n\\t\\tns.tprint(\\\"copying scripts to \\\" + servers[entry]);\\n\\t\\tawait ns.scp(scripts, home, servers[entry]);\\n\\t\\t//await ns.scp(\\\"setup.ns\\\", home, servers[entry]);\\n\\t}\\n\\n\\t/** \\n\\t * \\tAttempts to take over target machine\\t\\n\\t * \\n\\t *  @param {string} tar\\n\\t *  @return {boolean} outcome \\n\\t**/\\n\\tasync function takeover(tar) {\\n\\t\\tlet currentTarget = tar;\\n\\t\\tlet isNotTakenOver = true;\\n\\t\\tlet attemptCounter = 0;\\n\\n\\t\\tif (ns.getServerNumPortsRequired <= 5 && attemptCounter < 50) {\\n\\t\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\n\\t\\t\\t\\tattemptCounter++;\\n\\t\\t\\t}\\n\\n\\t\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.15,\"server\":\"syscore\",\"moduleSequenceNumber\":1120,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}}],\"serversOnNetwork\":[\"avmnite-02h\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":67,\"hackDifficulty\":67,\"minDifficulty\":22,\"moneyAvailable\":590829642,\"moneyMax\":14770741050,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":578,\"serverGrowth\":65}},\"catalyst\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"catalyst\",\"httpPortOpen\":false,\"ip\":\"61.9.5.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"tensions-in-tech-race.lit\"],\"organizationName\":\"Catalyst Ventures\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Returns an array of all hostnames in the network tree\\n * \\n * @param {string[]} myServers\\n * @param {number} safetyCounter Prevents infnite recursion\\n * @param {NS} ns\\n */\\nexport async function getServerList(myServers, safetyCounter, ns) {\\n\\tlet srvrsSeen = myServers;\\n\\tlet currServScanResult = [];\\n\\n\\tfor (let serverSeen in srvrsSeen) {\\n\\t\\tcurrServScanResult = ns.scan(srvrsSeen[serverSeen]);\\n\\t\\tfor (let entry in currServScanResult) {\\n\\t\\t\\tif (!srvrsSeen.includes(currServScanResult[entry])) {\\n\\t\\t\\t\\tsrvrsSeen.push(currServScanResult[entry]);\\n\\t\\t\\t\\tif ((++safetyCounter) < 250) {\\n\\t\\t\\t\\t\\tawait getServerList(srvrsSeen, safetyCounter, ns);\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tns.exit();\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\t//Filter out invalid values (NaN, null, {}, undefined)\\n\\tsrvrsSeen = srvrsSeen.filter(x => x);\\n\\treturn srvrsSeen;\\n}\\n\\n\\n/** \\n * \\tAttempts to take over target machine\\t\\n * \\n *  @param {string} target\\n * \\t@param {NS} ns\\n *  @return {boolean} outcome \\n**/\\nexport async function takeover(target, ns) {\\n\\tconst home = \\\"home\\\";\\n\\tlet currentTarget = target;\\n\\tlet isNotTakenOver = true;\\n\\tlet attemptCounter = 0;\\n\\n\\tlet scripts = ns.ls(home, \\\".js\\\");\\n\\t//scripts.push(ns.ls(home, \\\".ns\\\")); //in case of deprecated .ns scripts\\n\\n\\tif (!ns.hasRootAccess(currentTarget) && attemptCounter < 30) {\\n\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\ttry {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t} catch (error) {\\n\\t\\t\\t\\t\\tns.tprint(\\\"not enough ports to nuke \\\" + currentTarget);\\n\\t\\t\\t\\t\\treturn false;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t}\\n\\t\\t\\tattemptCounter++;\\n\\t\\t}\\n\\n\\t\\tawait ns.scp(scripts, home, currentTarget);\\n\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\",\"filename\":\"/modules/helper.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"catalyst\",\"moduleSequenceNumber\":1121,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.grow(target);\\n\\t}\\n}\",\"filename\":\"basic-grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"catalyst\",\"moduleSequenceNumber\":1122,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"basic-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"catalyst\",\"moduleSequenceNumber\":1123,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(target);\\n\\t}\\n}\",\"filename\":\"basic-weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"catalyst\",\"moduleSequenceNumber\":1124,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerList, takeover } from \\\"modules/helper.js\\\";\\n\\n/** @param {NS} ns **/\\n// TODO: unused + unfinished, based on setup.ns\\nexport async function main(ns) {\\n\\tconst myServers = [\\\"home\\\"];\\n\\n\\tvar servers = await getServerList(myServers, 0, ns);\\n\\n\\tfor (let entry in servers) {\\t\\n\\t\\tawait takeover(servers[entry], ns);\\n\\t}\\n}\",\"filename\":\"deep-setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"catalyst\",\"moduleSequenceNumber\":1125,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\t//\\n}\",\"filename\":\"formulas-testing.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"catalyst\",\"moduleSequenceNumber\":1126,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tconst currentMachine = ns.getHostname();\\n\\tvar servers = ns.scan(currentMachine);\\n\\tvar scripts = ns.ls(home, \\\"basic-\\\");\\n\\n\\tns.tprint(\\\"Host:  \\\" + currentMachine);\\n\\tfor (let entry in servers) {\\t// depth 0\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\t// depth 1\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== home && subservers.length > 1) {\\n\\t\\t\\t\\tns.tprint(\\\"-----> \\\" + subservers[subentry]);\\n\\t\\t\\t\\tlet subserversd2 = ns.scan(subservers[subentry]); // depth 2\\n\\t\\t\\t\\tfor (let subentryd2 in subserversd2) {\\n\\t\\t\\t\\t\\tif (subserversd2[subentryd2] !== subservers[subentry] && subserversd2[subentryd2] !== servers[entry] && subserversd2.length > 1) {\\n\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------> \\\" + subserversd2[subentryd2]);\\n\\t\\t\\t\\t\\t\\tlet subserversd3 = ns.scan(subserversd2[subentryd2]);\\t// depth 3\\n\\t\\t\\t\\t\\t\\tfor (let subentryd3 in subserversd3) {\\n\\t\\t\\t\\t\\t\\t\\tif (subserversd3[subentryd3] !== subserversd2[subentryd2] && subserversd3[subentryd3] !== subservers[subentry] && subserversd3.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------> \\\" + subserversd3[subentryd3]);\\n\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd4 = ns.scan(subserversd3[subentryd3]);\\t// depth 4\\n\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd4 in subserversd4) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd4[subentryd4] !== subserversd3[subentryd3] && subserversd4[subentryd4] !== subserversd2[subentryd2] && subserversd4.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------------> \\\" + subserversd4[subentryd4]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd5 = ns.scan(subserversd4[subentryd4]);\\t// depth 5\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd5 in subserversd5) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd5[subentryd5] !== subserversd4[subentryd4] && subserversd5[subentryd5] !== subserversd3[subentryd3] && subserversd5.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-------------------------> \\\" + subserversd5[subentryd5]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd6 = ns.scan(subserversd5[subentryd5]);\\t// depth 6\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd6 in subserversd6) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd6[subentryd6] !== subserversd5[subentryd5] && subserversd6[subentryd6] !== subserversd4[subentryd4] && subserversd6.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"------------------------------> \\\" + subserversd6[subentryd6]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd7 = ns.scan(subserversd6[subentryd6]);\\t// depth 7\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor(let subentryd7 in subserversd7) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd7[subentryd7] !== subserversd6[subentryd6] && subserversd7[subentryd7] !== subserversd5[subentryd5] && subserversd7.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-----------------------------------> \\\" + subserversd7[subentryd7]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"gigascan.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.05,\"server\":\"catalyst\",\"moduleSequenceNumber\":1127,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet targetRam = ns.getServerMaxRam(ns.args[0]);\\n\\tlet scriptMem = ns.getScriptRam(ns.args[1]);\\n\\n\\tns.tprint(\\\"Maximum possible threads for \\\" + ns.args[1] + \\\": \\\" + Math.floor(targetRam / scriptMem));\\n\\tns.exit;\\n}\",\"filename\":\"ram-usage.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"catalyst\",\"moduleSequenceNumber\":1128,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerList } from \\\"modules/helper.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet serversSeen = [\\\"home\\\"]; // home + bought servers\\n\\tlet contractList = [];\\n\\n\\tserversSeen = await getServerList(serversSeen, 0, ns);\\n\\n\\tns.tprint(serversSeen);\\n}\",\"filename\":\"search-coding-contracts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"catalyst\",\"moduleSequenceNumber\":1129,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tvar servers = ns.scan(home);\\n\\tvar scripts = ns.ls(home, \\\".ns\\\");\\n\\n\\tfor (let entry in scripts) {\\n\\t\\tns.tprint(\\\"found script: \\\" + scripts[entry]);\\n\\t}\\n\\n\\t// Hack servers (!!! depth = 2 !!!) if needed and populate with scripts\\n\\tfor (let entry in servers) {\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== \\\"home\\\") {\\n\\t\\t\\t\\tns.tprint(\\\"----->   \\\" + subservers[subentry]);\\n\\t\\t\\t\\tif (!ns.hasRootAccess(subservers[subentry])) {\\n\\t\\t\\t\\t\\ttakeover(subservers[subentry]);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tns.tprint(\\\"copying scripts to \\\" + subservers[subentry]);\\n\\t\\t\\t\\tawait ns.scp(scripts, home, subservers[subentry]);\\n\\t\\t\\t\\t//await ns.scp(\\\"setup.ns\\\", home, subservers[subentry]);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (!ns.hasRootAccess(servers[entry])) {\\n\\t\\t\\ttakeover(servers[entry]);\\n\\t\\t}\\n\\t\\tns.tprint(\\\"copying scripts to \\\" + servers[entry]);\\n\\t\\tawait ns.scp(scripts, home, servers[entry]);\\n\\t\\t//await ns.scp(\\\"setup.ns\\\", home, servers[entry]);\\n\\t}\\n\\n\\t/** \\n\\t * \\tAttempts to take over target machine\\t\\n\\t * \\n\\t *  @param {string} tar\\n\\t *  @return {boolean} outcome \\n\\t**/\\n\\tasync function takeover(tar) {\\n\\t\\tlet currentTarget = tar;\\n\\t\\tlet isNotTakenOver = true;\\n\\t\\tlet attemptCounter = 0;\\n\\n\\t\\tif (ns.getServerNumPortsRequired <= 5 && attemptCounter < 50) {\\n\\t\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\n\\t\\t\\t\\tattemptCounter++;\\n\\t\\t\\t}\\n\\n\\t\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.15,\"server\":\"catalyst\",\"moduleSequenceNumber\":1130,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}}],\"serversOnNetwork\":[\"comptek\",\"aevum-police\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":70,\"hackDifficulty\":70,\"minDifficulty\":23,\"moneyAvailable\":466331900,\"moneyMax\":11658297500,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":437,\"serverGrowth\":45}},\"the-hub\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-768466.cct\",\"type\":\"Find All Valid Math Expressions\",\"data\":[\"6863067076\",-95],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"the-hub\",\"httpPortOpen\":false,\"ip\":\"90.6.7.7\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"The Hub\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Returns an array of all hostnames in the network tree\\n * \\n * @param {string[]} myServers\\n * @param {number} safetyCounter Prevents infnite recursion\\n * @param {NS} ns\\n */\\nexport async function getServerList(myServers, safetyCounter, ns) {\\n\\tlet srvrsSeen = myServers;\\n\\tlet currServScanResult = [];\\n\\n\\tfor (let serverSeen in srvrsSeen) {\\n\\t\\tcurrServScanResult = ns.scan(srvrsSeen[serverSeen]);\\n\\t\\tfor (let entry in currServScanResult) {\\n\\t\\t\\tif (!srvrsSeen.includes(currServScanResult[entry])) {\\n\\t\\t\\t\\tsrvrsSeen.push(currServScanResult[entry]);\\n\\t\\t\\t\\tif ((++safetyCounter) < 250) {\\n\\t\\t\\t\\t\\tawait getServerList(srvrsSeen, safetyCounter, ns);\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tns.exit();\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\t//Filter out invalid values (NaN, null, {}, undefined)\\n\\tsrvrsSeen = srvrsSeen.filter(x => x);\\n\\treturn srvrsSeen;\\n}\\n\\n\\n/** \\n * \\tAttempts to take over target machine\\t\\n * \\n *  @param {string} target\\n * \\t@param {NS} ns\\n *  @return {boolean} outcome \\n**/\\nexport async function takeover(target, ns) {\\n\\tconst home = \\\"home\\\";\\n\\tlet currentTarget = target;\\n\\tlet isNotTakenOver = true;\\n\\tlet attemptCounter = 0;\\n\\n\\tlet scripts = ns.ls(home, \\\".js\\\");\\n\\t//scripts.push(ns.ls(home, \\\".ns\\\")); //in case of deprecated .ns scripts\\n\\n\\tif (!ns.hasRootAccess(currentTarget) && attemptCounter < 30) {\\n\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\ttry {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t} catch (error) {\\n\\t\\t\\t\\t\\tns.tprint(\\\"not enough ports to nuke \\\" + currentTarget);\\n\\t\\t\\t\\t\\treturn false;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t}\\n\\t\\t\\tattemptCounter++;\\n\\t\\t}\\n\\n\\t\\tawait ns.scp(scripts, home, currentTarget);\\n\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\",\"filename\":\"/modules/helper.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"the-hub\",\"moduleSequenceNumber\":1131,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.grow(target);\\n\\t}\\n}\",\"filename\":\"basic-grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"the-hub\",\"moduleSequenceNumber\":1132,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"basic-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"the-hub\",\"moduleSequenceNumber\":1133,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(target);\\n\\t}\\n}\",\"filename\":\"basic-weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"the-hub\",\"moduleSequenceNumber\":1134,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerList, takeover } from \\\"modules/helper.js\\\";\\n\\n/** @param {NS} ns **/\\n// TODO: unused + unfinished, based on setup.ns\\nexport async function main(ns) {\\n\\tconst myServers = [\\\"home\\\"];\\n\\n\\tvar servers = await getServerList(myServers, 0, ns);\\n\\n\\tfor (let entry in servers) {\\t\\n\\t\\tawait takeover(servers[entry], ns);\\n\\t}\\n}\",\"filename\":\"deep-setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"the-hub\",\"moduleSequenceNumber\":1135,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\t//\\n}\",\"filename\":\"formulas-testing.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"the-hub\",\"moduleSequenceNumber\":1136,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tconst currentMachine = ns.getHostname();\\n\\tvar servers = ns.scan(currentMachine);\\n\\tvar scripts = ns.ls(home, \\\"basic-\\\");\\n\\n\\tns.tprint(\\\"Host:  \\\" + currentMachine);\\n\\tfor (let entry in servers) {\\t// depth 0\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\t// depth 1\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== home && subservers.length > 1) {\\n\\t\\t\\t\\tns.tprint(\\\"-----> \\\" + subservers[subentry]);\\n\\t\\t\\t\\tlet subserversd2 = ns.scan(subservers[subentry]); // depth 2\\n\\t\\t\\t\\tfor (let subentryd2 in subserversd2) {\\n\\t\\t\\t\\t\\tif (subserversd2[subentryd2] !== subservers[subentry] && subserversd2[subentryd2] !== servers[entry] && subserversd2.length > 1) {\\n\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------> \\\" + subserversd2[subentryd2]);\\n\\t\\t\\t\\t\\t\\tlet subserversd3 = ns.scan(subserversd2[subentryd2]);\\t// depth 3\\n\\t\\t\\t\\t\\t\\tfor (let subentryd3 in subserversd3) {\\n\\t\\t\\t\\t\\t\\t\\tif (subserversd3[subentryd3] !== subserversd2[subentryd2] && subserversd3[subentryd3] !== subservers[subentry] && subserversd3.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------> \\\" + subserversd3[subentryd3]);\\n\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd4 = ns.scan(subserversd3[subentryd3]);\\t// depth 4\\n\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd4 in subserversd4) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd4[subentryd4] !== subserversd3[subentryd3] && subserversd4[subentryd4] !== subserversd2[subentryd2] && subserversd4.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------------> \\\" + subserversd4[subentryd4]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd5 = ns.scan(subserversd4[subentryd4]);\\t// depth 5\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd5 in subserversd5) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd5[subentryd5] !== subserversd4[subentryd4] && subserversd5[subentryd5] !== subserversd3[subentryd3] && subserversd5.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-------------------------> \\\" + subserversd5[subentryd5]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd6 = ns.scan(subserversd5[subentryd5]);\\t// depth 6\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd6 in subserversd6) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd6[subentryd6] !== subserversd5[subentryd5] && subserversd6[subentryd6] !== subserversd4[subentryd4] && subserversd6.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"------------------------------> \\\" + subserversd6[subentryd6]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd7 = ns.scan(subserversd6[subentryd6]);\\t// depth 7\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor(let subentryd7 in subserversd7) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd7[subentryd7] !== subserversd6[subentryd6] && subserversd7[subentryd7] !== subserversd5[subentryd5] && subserversd7.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-----------------------------------> \\\" + subserversd7[subentryd7]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"gigascan.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.05,\"server\":\"the-hub\",\"moduleSequenceNumber\":1137,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet targetRam = ns.getServerMaxRam(ns.args[0]);\\n\\tlet scriptMem = ns.getScriptRam(ns.args[1]);\\n\\n\\tns.tprint(\\\"Maximum possible threads for \\\" + ns.args[1] + \\\": \\\" + Math.floor(targetRam / scriptMem));\\n\\tns.exit;\\n}\",\"filename\":\"ram-usage.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"the-hub\",\"moduleSequenceNumber\":1138,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerList } from \\\"modules/helper.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet serversSeen = [\\\"home\\\"]; // home + bought servers\\n\\tlet contractList = [];\\n\\n\\tserversSeen = await getServerList(serversSeen, 0, ns);\\n\\n\\tns.tprint(serversSeen);\\n}\",\"filename\":\"search-coding-contracts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"the-hub\",\"moduleSequenceNumber\":1139,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tvar servers = ns.scan(home);\\n\\tvar scripts = ns.ls(home, \\\".ns\\\");\\n\\n\\tfor (let entry in scripts) {\\n\\t\\tns.tprint(\\\"found script: \\\" + scripts[entry]);\\n\\t}\\n\\n\\t// Hack servers (!!! depth = 2 !!!) if needed and populate with scripts\\n\\tfor (let entry in servers) {\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== \\\"home\\\") {\\n\\t\\t\\t\\tns.tprint(\\\"----->   \\\" + subservers[subentry]);\\n\\t\\t\\t\\tif (!ns.hasRootAccess(subservers[subentry])) {\\n\\t\\t\\t\\t\\ttakeover(subservers[subentry]);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tns.tprint(\\\"copying scripts to \\\" + subservers[subentry]);\\n\\t\\t\\t\\tawait ns.scp(scripts, home, subservers[subentry]);\\n\\t\\t\\t\\t//await ns.scp(\\\"setup.ns\\\", home, subservers[subentry]);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (!ns.hasRootAccess(servers[entry])) {\\n\\t\\t\\ttakeover(servers[entry]);\\n\\t\\t}\\n\\t\\tns.tprint(\\\"copying scripts to \\\" + servers[entry]);\\n\\t\\tawait ns.scp(scripts, home, servers[entry]);\\n\\t\\t//await ns.scp(\\\"setup.ns\\\", home, servers[entry]);\\n\\t}\\n\\n\\t/** \\n\\t * \\tAttempts to take over target machine\\t\\n\\t * \\n\\t *  @param {string} tar\\n\\t *  @return {boolean} outcome \\n\\t**/\\n\\tasync function takeover(tar) {\\n\\t\\tlet currentTarget = tar;\\n\\t\\tlet isNotTakenOver = true;\\n\\t\\tlet attemptCounter = 0;\\n\\n\\t\\tif (ns.getServerNumPortsRequired <= 5 && attemptCounter < 50) {\\n\\t\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\n\\t\\t\\t\\tattemptCounter++;\\n\\t\\t\\t}\\n\\n\\t\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.15,\"server\":\"the-hub\",\"moduleSequenceNumber\":1140,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}}],\"serversOnNetwork\":[\"omega-net\",\"rothman-uni\",\"summit-uni\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":36,\"hackDifficulty\":36,\"minDifficulty\":12,\"moneyAvailable\":157392596,\"moneyMax\":3934814900,\"numOpenPortsRequired\":2,\"openPortCount\":3,\"requiredHackingSkill\":292,\"serverGrowth\":48}},\"comptek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-142184.cct\",\"type\":\"Find Largest Prime Factor\",\"data\":170428759,\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"comptek\",\"httpPortOpen\":false,\"ip\":\"12.0.2.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"CompuTek\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Returns an array of all hostnames in the network tree\\n * \\n * @param {string[]} myServers\\n * @param {number} safetyCounter Prevents infnite recursion\\n * @param {NS} ns\\n */\\nexport async function getServerList(myServers, safetyCounter, ns) {\\n\\tlet srvrsSeen = myServers;\\n\\tlet currServScanResult = [];\\n\\n\\tfor (let serverSeen in srvrsSeen) {\\n\\t\\tcurrServScanResult = ns.scan(srvrsSeen[serverSeen]);\\n\\t\\tfor (let entry in currServScanResult) {\\n\\t\\t\\tif (!srvrsSeen.includes(currServScanResult[entry])) {\\n\\t\\t\\t\\tsrvrsSeen.push(currServScanResult[entry]);\\n\\t\\t\\t\\tif ((++safetyCounter) < 250) {\\n\\t\\t\\t\\t\\tawait getServerList(srvrsSeen, safetyCounter, ns);\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tns.exit();\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\t//Filter out invalid values (NaN, null, {}, undefined)\\n\\tsrvrsSeen = srvrsSeen.filter(x => x);\\n\\treturn srvrsSeen;\\n}\\n\\n\\n/** \\n * \\tAttempts to take over target machine\\t\\n * \\n *  @param {string} target\\n * \\t@param {NS} ns\\n *  @return {boolean} outcome \\n**/\\nexport async function takeover(target, ns) {\\n\\tconst home = \\\"home\\\";\\n\\tlet currentTarget = target;\\n\\tlet isNotTakenOver = true;\\n\\tlet attemptCounter = 0;\\n\\n\\tlet scripts = ns.ls(home, \\\".js\\\");\\n\\t//scripts.push(ns.ls(home, \\\".ns\\\")); //in case of deprecated .ns scripts\\n\\n\\tif (!ns.hasRootAccess(currentTarget) && attemptCounter < 30) {\\n\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\ttry {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t} catch (error) {\\n\\t\\t\\t\\t\\tns.tprint(\\\"not enough ports to nuke \\\" + currentTarget);\\n\\t\\t\\t\\t\\treturn false;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t}\\n\\t\\t\\tattemptCounter++;\\n\\t\\t}\\n\\n\\t\\tawait ns.scp(scripts, home, currentTarget);\\n\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\",\"filename\":\"/modules/helper.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"comptek\",\"moduleSequenceNumber\":1141,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.grow(target);\\n\\t}\\n}\",\"filename\":\"basic-grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"comptek\",\"moduleSequenceNumber\":1142,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"basic-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"comptek\",\"moduleSequenceNumber\":1143,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(target);\\n\\t}\\n}\",\"filename\":\"basic-weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"comptek\",\"moduleSequenceNumber\":1144,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerList, takeover } from \\\"modules/helper.js\\\";\\n\\n/** @param {NS} ns **/\\n// TODO: unused + unfinished, based on setup.ns\\nexport async function main(ns) {\\n\\tconst myServers = [\\\"home\\\"];\\n\\n\\tvar servers = await getServerList(myServers, 0, ns);\\n\\n\\tfor (let entry in servers) {\\t\\n\\t\\tawait takeover(servers[entry], ns);\\n\\t}\\n}\",\"filename\":\"deep-setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"comptek\",\"moduleSequenceNumber\":1145,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\t//\\n}\",\"filename\":\"formulas-testing.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"comptek\",\"moduleSequenceNumber\":1146,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tconst currentMachine = ns.getHostname();\\n\\tvar servers = ns.scan(currentMachine);\\n\\tvar scripts = ns.ls(home, \\\"basic-\\\");\\n\\n\\tns.tprint(\\\"Host:  \\\" + currentMachine);\\n\\tfor (let entry in servers) {\\t// depth 0\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\t// depth 1\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== home && subservers.length > 1) {\\n\\t\\t\\t\\tns.tprint(\\\"-----> \\\" + subservers[subentry]);\\n\\t\\t\\t\\tlet subserversd2 = ns.scan(subservers[subentry]); // depth 2\\n\\t\\t\\t\\tfor (let subentryd2 in subserversd2) {\\n\\t\\t\\t\\t\\tif (subserversd2[subentryd2] !== subservers[subentry] && subserversd2[subentryd2] !== servers[entry] && subserversd2.length > 1) {\\n\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------> \\\" + subserversd2[subentryd2]);\\n\\t\\t\\t\\t\\t\\tlet subserversd3 = ns.scan(subserversd2[subentryd2]);\\t// depth 3\\n\\t\\t\\t\\t\\t\\tfor (let subentryd3 in subserversd3) {\\n\\t\\t\\t\\t\\t\\t\\tif (subserversd3[subentryd3] !== subserversd2[subentryd2] && subserversd3[subentryd3] !== subservers[subentry] && subserversd3.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------> \\\" + subserversd3[subentryd3]);\\n\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd4 = ns.scan(subserversd3[subentryd3]);\\t// depth 4\\n\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd4 in subserversd4) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd4[subentryd4] !== subserversd3[subentryd3] && subserversd4[subentryd4] !== subserversd2[subentryd2] && subserversd4.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------------> \\\" + subserversd4[subentryd4]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd5 = ns.scan(subserversd4[subentryd4]);\\t// depth 5\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd5 in subserversd5) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd5[subentryd5] !== subserversd4[subentryd4] && subserversd5[subentryd5] !== subserversd3[subentryd3] && subserversd5.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-------------------------> \\\" + subserversd5[subentryd5]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd6 = ns.scan(subserversd5[subentryd5]);\\t// depth 6\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd6 in subserversd6) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd6[subentryd6] !== subserversd5[subentryd5] && subserversd6[subentryd6] !== subserversd4[subentryd4] && subserversd6.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"------------------------------> \\\" + subserversd6[subentryd6]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd7 = ns.scan(subserversd6[subentryd6]);\\t// depth 7\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor(let subentryd7 in subserversd7) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd7[subentryd7] !== subserversd6[subentryd6] && subserversd7[subentryd7] !== subserversd5[subentryd5] && subserversd7.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-----------------------------------> \\\" + subserversd7[subentryd7]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"gigascan.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.05,\"server\":\"comptek\",\"moduleSequenceNumber\":1147,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet targetRam = ns.getServerMaxRam(ns.args[0]);\\n\\tlet scriptMem = ns.getScriptRam(ns.args[1]);\\n\\n\\tns.tprint(\\\"Maximum possible threads for \\\" + ns.args[1] + \\\": \\\" + Math.floor(targetRam / scriptMem));\\n\\tns.exit;\\n}\",\"filename\":\"ram-usage.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"comptek\",\"moduleSequenceNumber\":1148,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerList } from \\\"modules/helper.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet serversSeen = [\\\"home\\\"]; // home + bought servers\\n\\tlet contractList = [];\\n\\n\\tserversSeen = await getServerList(serversSeen, 0, ns);\\n\\n\\tns.tprint(serversSeen);\\n}\",\"filename\":\"search-coding-contracts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"comptek\",\"moduleSequenceNumber\":1149,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tvar servers = ns.scan(home);\\n\\tvar scripts = ns.ls(home, \\\".ns\\\");\\n\\n\\tfor (let entry in scripts) {\\n\\t\\tns.tprint(\\\"found script: \\\" + scripts[entry]);\\n\\t}\\n\\n\\t// Hack servers (!!! depth = 2 !!!) if needed and populate with scripts\\n\\tfor (let entry in servers) {\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== \\\"home\\\") {\\n\\t\\t\\t\\tns.tprint(\\\"----->   \\\" + subservers[subentry]);\\n\\t\\t\\t\\tif (!ns.hasRootAccess(subservers[subentry])) {\\n\\t\\t\\t\\t\\ttakeover(subservers[subentry]);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tns.tprint(\\\"copying scripts to \\\" + subservers[subentry]);\\n\\t\\t\\t\\tawait ns.scp(scripts, home, subservers[subentry]);\\n\\t\\t\\t\\t//await ns.scp(\\\"setup.ns\\\", home, subservers[subentry]);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (!ns.hasRootAccess(servers[entry])) {\\n\\t\\t\\ttakeover(servers[entry]);\\n\\t\\t}\\n\\t\\tns.tprint(\\\"copying scripts to \\\" + servers[entry]);\\n\\t\\tawait ns.scp(scripts, home, servers[entry]);\\n\\t\\t//await ns.scp(\\\"setup.ns\\\", home, servers[entry]);\\n\\t}\\n\\n\\t/** \\n\\t * \\tAttempts to take over target machine\\t\\n\\t * \\n\\t *  @param {string} tar\\n\\t *  @return {boolean} outcome \\n\\t**/\\n\\tasync function takeover(tar) {\\n\\t\\tlet currentTarget = tar;\\n\\t\\tlet isNotTakenOver = true;\\n\\t\\tlet attemptCounter = 0;\\n\\n\\t\\tif (ns.getServerNumPortsRequired <= 5 && attemptCounter < 50) {\\n\\t\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\n\\t\\t\\t\\tattemptCounter++;\\n\\t\\t\\t}\\n\\n\\t\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.15,\"server\":\"comptek\",\"moduleSequenceNumber\":1150,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}}],\"serversOnNetwork\":[\"phantasy\",\"catalyst\",\"I.I.I.I\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":65,\"hackDifficulty\":65,\"minDifficulty\":22,\"moneyAvailable\":224900608,\"moneyMax\":5622515200,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":342,\"serverGrowth\":57}},\"netlink\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"netlink\",\"httpPortOpen\":false,\"ip\":\"16.0.4.2\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"NetLink Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Returns an array of all hostnames in the network tree\\n * \\n * @param {string[]} myServers\\n * @param {number} safetyCounter Prevents infnite recursion\\n * @param {NS} ns\\n */\\nexport async function getServerList(myServers, safetyCounter, ns) {\\n\\tlet srvrsSeen = myServers;\\n\\tlet currServScanResult = [];\\n\\n\\tfor (let serverSeen in srvrsSeen) {\\n\\t\\tcurrServScanResult = ns.scan(srvrsSeen[serverSeen]);\\n\\t\\tfor (let entry in currServScanResult) {\\n\\t\\t\\tif (!srvrsSeen.includes(currServScanResult[entry])) {\\n\\t\\t\\t\\tsrvrsSeen.push(currServScanResult[entry]);\\n\\t\\t\\t\\tif ((++safetyCounter) < 250) {\\n\\t\\t\\t\\t\\tawait getServerList(srvrsSeen, safetyCounter, ns);\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tns.exit();\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\t//Filter out invalid values (NaN, null, {}, undefined)\\n\\tsrvrsSeen = srvrsSeen.filter(x => x);\\n\\treturn srvrsSeen;\\n}\\n\\n\\n/** \\n * \\tAttempts to take over target machine\\t\\n * \\n *  @param {string} target\\n * \\t@param {NS} ns\\n *  @return {boolean} outcome \\n**/\\nexport async function takeover(target, ns) {\\n\\tconst home = \\\"home\\\";\\n\\tlet currentTarget = target;\\n\\tlet isNotTakenOver = true;\\n\\tlet attemptCounter = 0;\\n\\n\\tlet scripts = ns.ls(home, \\\".js\\\");\\n\\t//scripts.push(ns.ls(home, \\\".ns\\\")); //in case of deprecated .ns scripts\\n\\n\\tif (!ns.hasRootAccess(currentTarget) && attemptCounter < 30) {\\n\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\ttry {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t} catch (error) {\\n\\t\\t\\t\\t\\tns.tprint(\\\"not enough ports to nuke \\\" + currentTarget);\\n\\t\\t\\t\\t\\treturn false;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t}\\n\\t\\t\\tattemptCounter++;\\n\\t\\t}\\n\\n\\t\\tawait ns.scp(scripts, home, currentTarget);\\n\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\",\"filename\":\"/modules/helper.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"netlink\",\"moduleSequenceNumber\":1151,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.grow(target);\\n\\t}\\n}\",\"filename\":\"basic-grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"netlink\",\"moduleSequenceNumber\":1152,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"basic-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"netlink\",\"moduleSequenceNumber\":1153,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(target);\\n\\t}\\n}\",\"filename\":\"basic-weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"netlink\",\"moduleSequenceNumber\":1154,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerList, takeover } from \\\"modules/helper.js\\\";\\n\\n/** @param {NS} ns **/\\n// TODO: unused + unfinished, based on setup.ns\\nexport async function main(ns) {\\n\\tconst myServers = [\\\"home\\\"];\\n\\n\\tvar servers = await getServerList(myServers, 0, ns);\\n\\n\\tfor (let entry in servers) {\\t\\n\\t\\tawait takeover(servers[entry], ns);\\n\\t}\\n}\",\"filename\":\"deep-setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"netlink\",\"moduleSequenceNumber\":1155,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\t//\\n}\",\"filename\":\"formulas-testing.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"netlink\",\"moduleSequenceNumber\":1156,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tconst currentMachine = ns.getHostname();\\n\\tvar servers = ns.scan(currentMachine);\\n\\tvar scripts = ns.ls(home, \\\"basic-\\\");\\n\\n\\tns.tprint(\\\"Host:  \\\" + currentMachine);\\n\\tfor (let entry in servers) {\\t// depth 0\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\t// depth 1\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== home && subservers.length > 1) {\\n\\t\\t\\t\\tns.tprint(\\\"-----> \\\" + subservers[subentry]);\\n\\t\\t\\t\\tlet subserversd2 = ns.scan(subservers[subentry]); // depth 2\\n\\t\\t\\t\\tfor (let subentryd2 in subserversd2) {\\n\\t\\t\\t\\t\\tif (subserversd2[subentryd2] !== subservers[subentry] && subserversd2[subentryd2] !== servers[entry] && subserversd2.length > 1) {\\n\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------> \\\" + subserversd2[subentryd2]);\\n\\t\\t\\t\\t\\t\\tlet subserversd3 = ns.scan(subserversd2[subentryd2]);\\t// depth 3\\n\\t\\t\\t\\t\\t\\tfor (let subentryd3 in subserversd3) {\\n\\t\\t\\t\\t\\t\\t\\tif (subserversd3[subentryd3] !== subserversd2[subentryd2] && subserversd3[subentryd3] !== subservers[subentry] && subserversd3.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------> \\\" + subserversd3[subentryd3]);\\n\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd4 = ns.scan(subserversd3[subentryd3]);\\t// depth 4\\n\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd4 in subserversd4) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd4[subentryd4] !== subserversd3[subentryd3] && subserversd4[subentryd4] !== subserversd2[subentryd2] && subserversd4.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------------> \\\" + subserversd4[subentryd4]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd5 = ns.scan(subserversd4[subentryd4]);\\t// depth 5\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd5 in subserversd5) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd5[subentryd5] !== subserversd4[subentryd4] && subserversd5[subentryd5] !== subserversd3[subentryd3] && subserversd5.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-------------------------> \\\" + subserversd5[subentryd5]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd6 = ns.scan(subserversd5[subentryd5]);\\t// depth 6\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd6 in subserversd6) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd6[subentryd6] !== subserversd5[subentryd5] && subserversd6[subentryd6] !== subserversd4[subentryd4] && subserversd6.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"------------------------------> \\\" + subserversd6[subentryd6]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd7 = ns.scan(subserversd6[subentryd6]);\\t// depth 7\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor(let subentryd7 in subserversd7) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd7[subentryd7] !== subserversd6[subentryd6] && subserversd7[subentryd7] !== subserversd5[subentryd5] && subserversd7.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-----------------------------------> \\\" + subserversd7[subentryd7]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"gigascan.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.05,\"server\":\"netlink\",\"moduleSequenceNumber\":1157,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet targetRam = ns.getServerMaxRam(ns.args[0]);\\n\\tlet scriptMem = ns.getScriptRam(ns.args[1]);\\n\\n\\tns.tprint(\\\"Maximum possible threads for \\\" + ns.args[1] + \\\": \\\" + Math.floor(targetRam / scriptMem));\\n\\tns.exit;\\n}\",\"filename\":\"ram-usage.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"netlink\",\"moduleSequenceNumber\":1158,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerList } from \\\"modules/helper.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet serversSeen = [\\\"home\\\"]; // home + bought servers\\n\\tlet contractList = [];\\n\\n\\tserversSeen = await getServerList(serversSeen, 0, ns);\\n\\n\\tns.tprint(serversSeen);\\n}\",\"filename\":\"search-coding-contracts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"netlink\",\"moduleSequenceNumber\":1159,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tvar servers = ns.scan(home);\\n\\tvar scripts = ns.ls(home, \\\".ns\\\");\\n\\n\\tfor (let entry in scripts) {\\n\\t\\tns.tprint(\\\"found script: \\\" + scripts[entry]);\\n\\t}\\n\\n\\t// Hack servers (!!! depth = 2 !!!) if needed and populate with scripts\\n\\tfor (let entry in servers) {\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== \\\"home\\\") {\\n\\t\\t\\t\\tns.tprint(\\\"----->   \\\" + subservers[subentry]);\\n\\t\\t\\t\\tif (!ns.hasRootAccess(subservers[subentry])) {\\n\\t\\t\\t\\t\\ttakeover(subservers[subentry]);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tns.tprint(\\\"copying scripts to \\\" + subservers[subentry]);\\n\\t\\t\\t\\tawait ns.scp(scripts, home, subservers[subentry]);\\n\\t\\t\\t\\t//await ns.scp(\\\"setup.ns\\\", home, subservers[subentry]);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (!ns.hasRootAccess(servers[entry])) {\\n\\t\\t\\ttakeover(servers[entry]);\\n\\t\\t}\\n\\t\\tns.tprint(\\\"copying scripts to \\\" + servers[entry]);\\n\\t\\tawait ns.scp(scripts, home, servers[entry]);\\n\\t\\t//await ns.scp(\\\"setup.ns\\\", home, servers[entry]);\\n\\t}\\n\\n\\t/** \\n\\t * \\tAttempts to take over target machine\\t\\n\\t * \\n\\t *  @param {string} tar\\n\\t *  @return {boolean} outcome \\n\\t**/\\n\\tasync function takeover(tar) {\\n\\t\\tlet currentTarget = tar;\\n\\t\\tlet isNotTakenOver = true;\\n\\t\\tlet attemptCounter = 0;\\n\\n\\t\\tif (ns.getServerNumPortsRequired <= 5 && attemptCounter < 50) {\\n\\t\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\n\\t\\t\\t\\tattemptCounter++;\\n\\t\\t\\t}\\n\\n\\t\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.15,\"server\":\"netlink\",\"moduleSequenceNumber\":1160,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}}],\"serversOnNetwork\":[\"silver-helix\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":66,\"hackDifficulty\":66,\"minDifficulty\":22,\"moneyAvailable\":275000000,\"moneyMax\":6875000000,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":389,\"serverGrowth\":55}},\"johnson-ortho\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-724722.cct\",\"type\":\"Subarray with Maximum Sum\",\"data\":[7,-10,-4,-9,-2,8,10,-7,-7,-1,-4,2,-8,-10,-6,2,7,5,-1,-1,-1,10,-6,3,2,8,-8,-5,-9,-5,7,1],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"johnson-ortho\",\"httpPortOpen\":false,\"ip\":\"3.8.2.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Johnson Orthopedics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Returns an array of all hostnames in the network tree\\n * \\n * @param {string[]} myServers\\n * @param {number} safetyCounter Prevents infnite recursion\\n * @param {NS} ns\\n */\\nexport async function getServerList(myServers, safetyCounter, ns) {\\n\\tlet srvrsSeen = myServers;\\n\\tlet currServScanResult = [];\\n\\n\\tfor (let serverSeen in srvrsSeen) {\\n\\t\\tcurrServScanResult = ns.scan(srvrsSeen[serverSeen]);\\n\\t\\tfor (let entry in currServScanResult) {\\n\\t\\t\\tif (!srvrsSeen.includes(currServScanResult[entry])) {\\n\\t\\t\\t\\tsrvrsSeen.push(currServScanResult[entry]);\\n\\t\\t\\t\\tif ((++safetyCounter) < 250) {\\n\\t\\t\\t\\t\\tawait getServerList(srvrsSeen, safetyCounter, ns);\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tns.exit();\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\t//Filter out invalid values (NaN, null, {}, undefined)\\n\\tsrvrsSeen = srvrsSeen.filter(x => x);\\n\\treturn srvrsSeen;\\n}\\n\\n\\n/** \\n * \\tAttempts to take over target machine\\t\\n * \\n *  @param {string} target\\n * \\t@param {NS} ns\\n *  @return {boolean} outcome \\n**/\\nexport async function takeover(target, ns) {\\n\\tconst home = \\\"home\\\";\\n\\tlet currentTarget = target;\\n\\tlet isNotTakenOver = true;\\n\\tlet attemptCounter = 0;\\n\\n\\tlet scripts = ns.ls(home, \\\".js\\\");\\n\\t//scripts.push(ns.ls(home, \\\".ns\\\")); //in case of deprecated .ns scripts\\n\\n\\tif (!ns.hasRootAccess(currentTarget) && attemptCounter < 30) {\\n\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\ttry {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t} catch (error) {\\n\\t\\t\\t\\t\\tns.tprint(\\\"not enough ports to nuke \\\" + currentTarget);\\n\\t\\t\\t\\t\\treturn false;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t}\\n\\t\\t\\tattemptCounter++;\\n\\t\\t}\\n\\n\\t\\tawait ns.scp(scripts, home, currentTarget);\\n\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\",\"filename\":\"/modules/helper.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":1161,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.grow(target);\\n\\t}\\n}\",\"filename\":\"basic-grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":1162,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"basic-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":1163,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(target);\\n\\t}\\n}\",\"filename\":\"basic-weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":1164,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerList, takeover } from \\\"modules/helper.js\\\";\\n\\n/** @param {NS} ns **/\\n// TODO: unused + unfinished, based on setup.ns\\nexport async function main(ns) {\\n\\tconst myServers = [\\\"home\\\"];\\n\\n\\tvar servers = await getServerList(myServers, 0, ns);\\n\\n\\tfor (let entry in servers) {\\t\\n\\t\\tawait takeover(servers[entry], ns);\\n\\t}\\n}\",\"filename\":\"deep-setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":1165,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\t//\\n}\",\"filename\":\"formulas-testing.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":1166,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tconst currentMachine = ns.getHostname();\\n\\tvar servers = ns.scan(currentMachine);\\n\\tvar scripts = ns.ls(home, \\\"basic-\\\");\\n\\n\\tns.tprint(\\\"Host:  \\\" + currentMachine);\\n\\tfor (let entry in servers) {\\t// depth 0\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\t// depth 1\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== home && subservers.length > 1) {\\n\\t\\t\\t\\tns.tprint(\\\"-----> \\\" + subservers[subentry]);\\n\\t\\t\\t\\tlet subserversd2 = ns.scan(subservers[subentry]); // depth 2\\n\\t\\t\\t\\tfor (let subentryd2 in subserversd2) {\\n\\t\\t\\t\\t\\tif (subserversd2[subentryd2] !== subservers[subentry] && subserversd2[subentryd2] !== servers[entry] && subserversd2.length > 1) {\\n\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------> \\\" + subserversd2[subentryd2]);\\n\\t\\t\\t\\t\\t\\tlet subserversd3 = ns.scan(subserversd2[subentryd2]);\\t// depth 3\\n\\t\\t\\t\\t\\t\\tfor (let subentryd3 in subserversd3) {\\n\\t\\t\\t\\t\\t\\t\\tif (subserversd3[subentryd3] !== subserversd2[subentryd2] && subserversd3[subentryd3] !== subservers[subentry] && subserversd3.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------> \\\" + subserversd3[subentryd3]);\\n\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd4 = ns.scan(subserversd3[subentryd3]);\\t// depth 4\\n\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd4 in subserversd4) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd4[subentryd4] !== subserversd3[subentryd3] && subserversd4[subentryd4] !== subserversd2[subentryd2] && subserversd4.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------------> \\\" + subserversd4[subentryd4]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd5 = ns.scan(subserversd4[subentryd4]);\\t// depth 5\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd5 in subserversd5) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd5[subentryd5] !== subserversd4[subentryd4] && subserversd5[subentryd5] !== subserversd3[subentryd3] && subserversd5.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-------------------------> \\\" + subserversd5[subentryd5]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd6 = ns.scan(subserversd5[subentryd5]);\\t// depth 6\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd6 in subserversd6) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd6[subentryd6] !== subserversd5[subentryd5] && subserversd6[subentryd6] !== subserversd4[subentryd4] && subserversd6.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"------------------------------> \\\" + subserversd6[subentryd6]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd7 = ns.scan(subserversd6[subentryd6]);\\t// depth 7\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor(let subentryd7 in subserversd7) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd7[subentryd7] !== subserversd6[subentryd6] && subserversd7[subentryd7] !== subserversd5[subentryd5] && subserversd7.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-----------------------------------> \\\" + subserversd7[subentryd7]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"gigascan.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.05,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":1167,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet targetRam = ns.getServerMaxRam(ns.args[0]);\\n\\tlet scriptMem = ns.getScriptRam(ns.args[1]);\\n\\n\\tns.tprint(\\\"Maximum possible threads for \\\" + ns.args[1] + \\\": \\\" + Math.floor(targetRam / scriptMem));\\n\\tns.exit;\\n}\",\"filename\":\"ram-usage.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":1168,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerList } from \\\"modules/helper.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet serversSeen = [\\\"home\\\"]; // home + bought servers\\n\\tlet contractList = [];\\n\\n\\tserversSeen = await getServerList(serversSeen, 0, ns);\\n\\n\\tns.tprint(serversSeen);\\n}\",\"filename\":\"search-coding-contracts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":1169,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tvar servers = ns.scan(home);\\n\\tvar scripts = ns.ls(home, \\\".ns\\\");\\n\\n\\tfor (let entry in scripts) {\\n\\t\\tns.tprint(\\\"found script: \\\" + scripts[entry]);\\n\\t}\\n\\n\\t// Hack servers (!!! depth = 2 !!!) if needed and populate with scripts\\n\\tfor (let entry in servers) {\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== \\\"home\\\") {\\n\\t\\t\\t\\tns.tprint(\\\"----->   \\\" + subservers[subentry]);\\n\\t\\t\\t\\tif (!ns.hasRootAccess(subservers[subentry])) {\\n\\t\\t\\t\\t\\ttakeover(subservers[subentry]);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tns.tprint(\\\"copying scripts to \\\" + subservers[subentry]);\\n\\t\\t\\t\\tawait ns.scp(scripts, home, subservers[subentry]);\\n\\t\\t\\t\\t//await ns.scp(\\\"setup.ns\\\", home, subservers[subentry]);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (!ns.hasRootAccess(servers[entry])) {\\n\\t\\t\\ttakeover(servers[entry]);\\n\\t\\t}\\n\\t\\tns.tprint(\\\"copying scripts to \\\" + servers[entry]);\\n\\t\\tawait ns.scp(scripts, home, servers[entry]);\\n\\t\\t//await ns.scp(\\\"setup.ns\\\", home, servers[entry]);\\n\\t}\\n\\n\\t/** \\n\\t * \\tAttempts to take over target machine\\t\\n\\t * \\n\\t *  @param {string} tar\\n\\t *  @return {boolean} outcome \\n\\t**/\\n\\tasync function takeover(tar) {\\n\\t\\tlet currentTarget = tar;\\n\\t\\tlet isNotTakenOver = true;\\n\\t\\tlet attemptCounter = 0;\\n\\n\\t\\tif (ns.getServerNumPortsRequired <= 5 && attemptCounter < 50) {\\n\\t\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\n\\t\\t\\t\\tattemptCounter++;\\n\\t\\t\\t}\\n\\n\\t\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.15,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":1170,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}}],\"serversOnNetwork\":[\"neo-net\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":53,\"hackDifficulty\":53,\"minDifficulty\":18,\"moneyAvailable\":72204561,\"moneyMax\":1805114025,\"numOpenPortsRequired\":2,\"openPortCount\":3,\"requiredHackingSkill\":273,\"serverGrowth\":58}},\"n00dles\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"n00dles\",\"httpPortOpen\":false,\"ip\":\"95.7.9.2\",\"isConnectedTo\":false,\"maxRam\":4,\"messages\":[],\"organizationName\":\"Noodle Bar\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Returns an array of all hostnames in the network tree\\n * \\n * @param {string[]} myServers\\n * @param {number} safetyCounter Prevents infnite recursion\\n * @param {NS} ns\\n */\\nexport async function getServerList(myServers, safetyCounter, ns) {\\n\\tlet srvrsSeen = myServers;\\n\\tlet currServScanResult = [];\\n\\n\\tfor (let serverSeen in srvrsSeen) {\\n\\t\\tcurrServScanResult = ns.scan(srvrsSeen[serverSeen]);\\n\\t\\tfor (let entry in currServScanResult) {\\n\\t\\t\\tif (!srvrsSeen.includes(currServScanResult[entry])) {\\n\\t\\t\\t\\tsrvrsSeen.push(currServScanResult[entry]);\\n\\t\\t\\t\\tif ((++safetyCounter) < 250) {\\n\\t\\t\\t\\t\\tawait getServerList(srvrsSeen, safetyCounter, ns);\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tns.exit();\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\t//Filter out invalid values (NaN, null, {}, undefined)\\n\\tsrvrsSeen = srvrsSeen.filter(x => x);\\n\\treturn srvrsSeen;\\n}\\n\\n\\n/** \\n * \\tAttempts to take over target machine\\t\\n * \\n *  @param {string} target\\n * \\t@param {NS} ns\\n *  @return {boolean} outcome \\n**/\\nexport async function takeover(target, ns) {\\n\\tconst home = \\\"home\\\";\\n\\tlet currentTarget = target;\\n\\tlet isNotTakenOver = true;\\n\\tlet attemptCounter = 0;\\n\\n\\tlet scripts = ns.ls(home, \\\".js\\\");\\n\\t//scripts.push(ns.ls(home, \\\".ns\\\")); //in case of deprecated .ns scripts\\n\\n\\tif (!ns.hasRootAccess(currentTarget) && attemptCounter < 30) {\\n\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\ttry {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t} catch (error) {\\n\\t\\t\\t\\t\\tns.tprint(\\\"not enough ports to nuke \\\" + currentTarget);\\n\\t\\t\\t\\t\\treturn false;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t}\\n\\t\\t\\tattemptCounter++;\\n\\t\\t}\\n\\n\\t\\tawait ns.scp(scripts, home, currentTarget);\\n\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\",\"filename\":\"/modules/helper.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"n00dles\",\"moduleSequenceNumber\":1171,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.grow(target);\\n\\t}\\n}\",\"filename\":\"basic-grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"n00dles\",\"moduleSequenceNumber\":1172,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"basic-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"n00dles\",\"moduleSequenceNumber\":1173,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(target);\\n\\t}\\n}\",\"filename\":\"basic-weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"n00dles\",\"moduleSequenceNumber\":1174,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerList, takeover } from \\\"modules/helper.js\\\";\\n\\n/** @param {NS} ns **/\\n// TODO: unused + unfinished, based on setup.ns\\nexport async function main(ns) {\\n\\tconst myServers = [\\\"home\\\"];\\n\\n\\tvar servers = await getServerList(myServers, 0, ns);\\n\\n\\tfor (let entry in servers) {\\t\\n\\t\\tawait takeover(servers[entry], ns);\\n\\t}\\n}\",\"filename\":\"deep-setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"n00dles\",\"moduleSequenceNumber\":1175,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\t//\\n}\",\"filename\":\"formulas-testing.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"n00dles\",\"moduleSequenceNumber\":1176,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tconst currentMachine = ns.getHostname();\\n\\tvar servers = ns.scan(currentMachine);\\n\\tvar scripts = ns.ls(home, \\\"basic-\\\");\\n\\n\\tns.tprint(\\\"Host:  \\\" + currentMachine);\\n\\tfor (let entry in servers) {\\t// depth 0\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\t// depth 1\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== home && subservers.length > 1) {\\n\\t\\t\\t\\tns.tprint(\\\"-----> \\\" + subservers[subentry]);\\n\\t\\t\\t\\tlet subserversd2 = ns.scan(subservers[subentry]); // depth 2\\n\\t\\t\\t\\tfor (let subentryd2 in subserversd2) {\\n\\t\\t\\t\\t\\tif (subserversd2[subentryd2] !== subservers[subentry] && subserversd2[subentryd2] !== servers[entry] && subserversd2.length > 1) {\\n\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------> \\\" + subserversd2[subentryd2]);\\n\\t\\t\\t\\t\\t\\tlet subserversd3 = ns.scan(subserversd2[subentryd2]);\\t// depth 3\\n\\t\\t\\t\\t\\t\\tfor (let subentryd3 in subserversd3) {\\n\\t\\t\\t\\t\\t\\t\\tif (subserversd3[subentryd3] !== subserversd2[subentryd2] && subserversd3[subentryd3] !== subservers[subentry] && subserversd3.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------> \\\" + subserversd3[subentryd3]);\\n\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd4 = ns.scan(subserversd3[subentryd3]);\\t// depth 4\\n\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd4 in subserversd4) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd4[subentryd4] !== subserversd3[subentryd3] && subserversd4[subentryd4] !== subserversd2[subentryd2] && subserversd4.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------------> \\\" + subserversd4[subentryd4]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd5 = ns.scan(subserversd4[subentryd4]);\\t// depth 5\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd5 in subserversd5) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd5[subentryd5] !== subserversd4[subentryd4] && subserversd5[subentryd5] !== subserversd3[subentryd3] && subserversd5.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-------------------------> \\\" + subserversd5[subentryd5]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd6 = ns.scan(subserversd5[subentryd5]);\\t// depth 6\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd6 in subserversd6) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd6[subentryd6] !== subserversd5[subentryd5] && subserversd6[subentryd6] !== subserversd4[subentryd4] && subserversd6.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"------------------------------> \\\" + subserversd6[subentryd6]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd7 = ns.scan(subserversd6[subentryd6]);\\t// depth 7\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor(let subentryd7 in subserversd7) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd7[subentryd7] !== subserversd6[subentryd6] && subserversd7[subentryd7] !== subserversd5[subentryd5] && subserversd7.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-----------------------------------> \\\" + subserversd7[subentryd7]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"gigascan.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.05,\"server\":\"n00dles\",\"moduleSequenceNumber\":1177,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet targetRam = ns.getServerMaxRam(ns.args[0]);\\n\\tlet scriptMem = ns.getScriptRam(ns.args[1]);\\n\\n\\tns.tprint(\\\"Maximum possible threads for \\\" + ns.args[1] + \\\": \\\" + Math.floor(targetRam / scriptMem));\\n\\tns.exit;\\n}\",\"filename\":\"ram-usage.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"n00dles\",\"moduleSequenceNumber\":1178,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerList } from \\\"modules/helper.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet serversSeen = [\\\"home\\\"]; // home + bought servers\\n\\tlet contractList = [];\\n\\n\\tserversSeen = await getServerList(serversSeen, 0, ns);\\n\\n\\tns.tprint(serversSeen);\\n}\",\"filename\":\"search-coding-contracts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"n00dles\",\"moduleSequenceNumber\":1179,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tvar servers = ns.scan(home);\\n\\tvar scripts = ns.ls(home, \\\".js\\\");\\n\\n\\tfor (let entry in scripts) {\\n\\t\\tns.tprint(\\\"found script: \\\" + scripts[entry]);\\n\\t}\\n\\n\\t// Hack servers (!!! depth = 2 !!!) if needed and populate with scripts\\n\\tfor (let entry in servers) {\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== \\\"home\\\") {\\n\\t\\t\\t\\tns.tprint(\\\"----->   \\\" + subservers[subentry]);\\n\\t\\t\\t\\tif (!ns.hasRootAccess(subservers[subentry])) {\\n\\t\\t\\t\\t\\ttakeover(subservers[subentry]);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tns.tprint(\\\"copying scripts to \\\" + subservers[subentry]);\\n\\t\\t\\t\\tawait ns.scp(scripts, home, subservers[subentry]);\\n\\t\\t\\t\\t//await ns.scp(\\\"setup.ns\\\", home, subservers[subentry]);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (!ns.hasRootAccess(servers[entry])) {\\n\\t\\t\\ttakeover(servers[entry]);\\n\\t\\t}\\n\\t\\tns.tprint(\\\"copying scripts to \\\" + servers[entry]);\\n\\t\\tawait ns.scp(scripts, home, servers[entry]);\\n\\t\\t//await ns.scp(\\\"setup.ns\\\", home, servers[entry]);\\n\\t}\\n\\n\\t/** \\n\\t * \\tAttempts to take over target machine\\t\\n\\t * \\n\\t *  @param {string} tar\\n\\t *  @return {boolean} outcome \\n\\t**/\\n\\tasync function takeover(tar) {\\n\\t\\tlet currentTarget = tar;\\n\\t\\tlet isNotTakenOver = true;\\n\\t\\tlet attemptCounter = 0;\\n\\n\\t\\tif (ns.getServerNumPortsRequired <= 5 && attemptCounter < 50) {\\n\\t\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\n\\t\\t\\t\\tattemptCounter++;\\n\\t\\t\\t}\\n\\n\\t\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.15,\"server\":\"n00dles\",\"moduleSequenceNumber\":1180,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}}],\"serversOnNetwork\":[\"home\",\"max-hardware\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":70000,\"moneyMax\":1750000,\"numOpenPortsRequired\":0,\"openPortCount\":3,\"requiredHackingSkill\":1,\"serverGrowth\":3000}},\"foodnstuff\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"foodnstuff\",\"httpPortOpen\":false,\"ip\":\"88.5.4.8\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"FoodNStuff\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Returns an array of all hostnames in the network tree\\n * \\n * @param {string[]} myServers\\n * @param {number} safetyCounter Prevents infnite recursion\\n * @param {NS} ns\\n */\\nexport async function getServerList(myServers, safetyCounter, ns) {\\n\\tlet srvrsSeen = myServers;\\n\\tlet currServScanResult = [];\\n\\n\\tfor (let serverSeen in srvrsSeen) {\\n\\t\\tcurrServScanResult = ns.scan(srvrsSeen[serverSeen]);\\n\\t\\tfor (let entry in currServScanResult) {\\n\\t\\t\\tif (!srvrsSeen.includes(currServScanResult[entry])) {\\n\\t\\t\\t\\tsrvrsSeen.push(currServScanResult[entry]);\\n\\t\\t\\t\\tif ((++safetyCounter) < 250) {\\n\\t\\t\\t\\t\\tawait getServerList(srvrsSeen, safetyCounter, ns);\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tns.exit();\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\t//Filter out invalid values (NaN, null, {}, undefined)\\n\\tsrvrsSeen = srvrsSeen.filter(x => x);\\n\\treturn srvrsSeen;\\n}\\n\\n\\n/** \\n * \\tAttempts to take over target machine\\t\\n * \\n *  @param {string} target\\n * \\t@param {NS} ns\\n *  @return {boolean} outcome \\n**/\\nexport async function takeover(target, ns) {\\n\\tconst home = \\\"home\\\";\\n\\tlet currentTarget = target;\\n\\tlet isNotTakenOver = true;\\n\\tlet attemptCounter = 0;\\n\\n\\tlet scripts = ns.ls(home, \\\".js\\\");\\n\\t//scripts.push(ns.ls(home, \\\".ns\\\")); //in case of deprecated .ns scripts\\n\\n\\tif (!ns.hasRootAccess(currentTarget) && attemptCounter < 30) {\\n\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\ttry {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t} catch (error) {\\n\\t\\t\\t\\t\\tns.tprint(\\\"not enough ports to nuke \\\" + currentTarget);\\n\\t\\t\\t\\t\\treturn false;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t}\\n\\t\\t\\tattemptCounter++;\\n\\t\\t}\\n\\n\\t\\tawait ns.scp(scripts, home, currentTarget);\\n\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\",\"filename\":\"/modules/helper.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":1181,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.grow(target);\\n\\t}\\n}\",\"filename\":\"basic-grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":1182,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"basic-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"basic-hack.js\",\"url\":\"blob:file:///834f3d03-740f-4a79-93cd-91cf5ff57497\",\"moduleSequenceNumber\":1422}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":1183,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(target);\\n\\t}\\n}\",\"filename\":\"basic-weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":1184,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerList, takeover } from \\\"modules/helper.js\\\";\\n\\n/** @param {NS} ns **/\\n// TODO: unused + unfinished, based on setup.ns\\nexport async function main(ns) {\\n\\tconst myServers = [\\\"home\\\"];\\n\\n\\tvar servers = await getServerList(myServers, 0, ns);\\n\\n\\tfor (let entry in servers) {\\t\\n\\t\\tawait takeover(servers[entry], ns);\\n\\t}\\n}\",\"filename\":\"deep-setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":1185,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\t//\\n}\",\"filename\":\"formulas-testing.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":1186,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tconst currentMachine = ns.getHostname();\\n\\tvar servers = ns.scan(currentMachine);\\n\\tvar scripts = ns.ls(home, \\\"basic-\\\");\\n\\n\\tns.tprint(\\\"Host:  \\\" + currentMachine);\\n\\tfor (let entry in servers) {\\t// depth 0\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\t// depth 1\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== home && subservers.length > 1) {\\n\\t\\t\\t\\tns.tprint(\\\"-----> \\\" + subservers[subentry]);\\n\\t\\t\\t\\tlet subserversd2 = ns.scan(subservers[subentry]); // depth 2\\n\\t\\t\\t\\tfor (let subentryd2 in subserversd2) {\\n\\t\\t\\t\\t\\tif (subserversd2[subentryd2] !== subservers[subentry] && subserversd2[subentryd2] !== servers[entry] && subserversd2.length > 1) {\\n\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------> \\\" + subserversd2[subentryd2]);\\n\\t\\t\\t\\t\\t\\tlet subserversd3 = ns.scan(subserversd2[subentryd2]);\\t// depth 3\\n\\t\\t\\t\\t\\t\\tfor (let subentryd3 in subserversd3) {\\n\\t\\t\\t\\t\\t\\t\\tif (subserversd3[subentryd3] !== subserversd2[subentryd2] && subserversd3[subentryd3] !== subservers[subentry] && subserversd3.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------> \\\" + subserversd3[subentryd3]);\\n\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd4 = ns.scan(subserversd3[subentryd3]);\\t// depth 4\\n\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd4 in subserversd4) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd4[subentryd4] !== subserversd3[subentryd3] && subserversd4[subentryd4] !== subserversd2[subentryd2] && subserversd4.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------------> \\\" + subserversd4[subentryd4]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd5 = ns.scan(subserversd4[subentryd4]);\\t// depth 5\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd5 in subserversd5) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd5[subentryd5] !== subserversd4[subentryd4] && subserversd5[subentryd5] !== subserversd3[subentryd3] && subserversd5.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-------------------------> \\\" + subserversd5[subentryd5]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd6 = ns.scan(subserversd5[subentryd5]);\\t// depth 6\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd6 in subserversd6) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd6[subentryd6] !== subserversd5[subentryd5] && subserversd6[subentryd6] !== subserversd4[subentryd4] && subserversd6.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"------------------------------> \\\" + subserversd6[subentryd6]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd7 = ns.scan(subserversd6[subentryd6]);\\t// depth 7\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor(let subentryd7 in subserversd7) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd7[subentryd7] !== subserversd6[subentryd6] && subserversd7[subentryd7] !== subserversd5[subentryd5] && subserversd7.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-----------------------------------> \\\" + subserversd7[subentryd7]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"gigascan.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.05,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":1187,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet targetRam = ns.getServerMaxRam(ns.args[0]);\\n\\tlet scriptMem = ns.getScriptRam(ns.args[1]);\\n\\n\\tns.tprint(\\\"Maximum possible threads for \\\" + ns.args[1] + \\\": \\\" + Math.floor(targetRam / scriptMem));\\n\\tns.exit;\\n}\",\"filename\":\"ram-usage.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":1188,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerList } from \\\"modules/helper.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet serversSeen = [\\\"home\\\"]; // home + bought servers\\n\\tlet contractList = [];\\n\\n\\tserversSeen = await getServerList(serversSeen, 0, ns);\\n\\n\\tns.tprint(serversSeen);\\n}\",\"filename\":\"search-coding-contracts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":1189,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tvar servers = ns.scan(home);\\n\\tvar scripts = ns.ls(home, \\\".js\\\");\\n\\n\\tfor (let entry in scripts) {\\n\\t\\tns.tprint(\\\"found script: \\\" + scripts[entry]);\\n\\t}\\n\\n\\t// Hack servers (!!! depth = 2 !!!) if needed and populate with scripts\\n\\tfor (let entry in servers) {\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== \\\"home\\\") {\\n\\t\\t\\t\\tns.tprint(\\\"----->   \\\" + subservers[subentry]);\\n\\t\\t\\t\\tif (!ns.hasRootAccess(subservers[subentry])) {\\n\\t\\t\\t\\t\\ttakeover(subservers[subentry]);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tns.tprint(\\\"copying scripts to \\\" + subservers[subentry]);\\n\\t\\t\\t\\tawait ns.scp(scripts, home, subservers[subentry]);\\n\\t\\t\\t\\t//await ns.scp(\\\"setup.ns\\\", home, subservers[subentry]);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (!ns.hasRootAccess(servers[entry])) {\\n\\t\\t\\ttakeover(servers[entry]);\\n\\t\\t}\\n\\t\\tns.tprint(\\\"copying scripts to \\\" + servers[entry]);\\n\\t\\tawait ns.scp(scripts, home, servers[entry]);\\n\\t\\t//await ns.scp(\\\"setup.ns\\\", home, servers[entry]);\\n\\t}\\n\\n\\t/** \\n\\t * \\tAttempts to take over target machine\\t\\n\\t * \\n\\t *  @param {string} tar\\n\\t *  @return {boolean} outcome \\n\\t**/\\n\\tasync function takeover(tar) {\\n\\t\\tlet currentTarget = tar;\\n\\t\\tlet isNotTakenOver = true;\\n\\t\\tlet attemptCounter = 0;\\n\\n\\t\\tif (ns.getServerNumPortsRequired <= 5 && attemptCounter < 50) {\\n\\t\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\n\\t\\t\\t\\tattemptCounter++;\\n\\t\\t\\t}\\n\\n\\t\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.15,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":1190,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":10,\"hackDifficulty\":100,\"minDifficulty\":3,\"moneyAvailable\":47,\"moneyMax\":50000000,\"numOpenPortsRequired\":0,\"openPortCount\":3,\"requiredHackingSkill\":1,\"serverGrowth\":5}},\"sigma-cosmetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"sigma-cosmetics\",\"httpPortOpen\":false,\"ip\":\"75.1.7.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Sigma Cosmetics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Returns an array of all hostnames in the network tree\\n * \\n * @param {string[]} myServers\\n * @param {number} safetyCounter Prevents infnite recursion\\n * @param {NS} ns\\n */\\nexport async function getServerList(myServers, safetyCounter, ns) {\\n\\tlet srvrsSeen = myServers;\\n\\tlet currServScanResult = [];\\n\\n\\tfor (let serverSeen in srvrsSeen) {\\n\\t\\tcurrServScanResult = ns.scan(srvrsSeen[serverSeen]);\\n\\t\\tfor (let entry in currServScanResult) {\\n\\t\\t\\tif (!srvrsSeen.includes(currServScanResult[entry])) {\\n\\t\\t\\t\\tsrvrsSeen.push(currServScanResult[entry]);\\n\\t\\t\\t\\tif ((++safetyCounter) < 250) {\\n\\t\\t\\t\\t\\tawait getServerList(srvrsSeen, safetyCounter, ns);\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tns.exit();\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\t//Filter out invalid values (NaN, null, {}, undefined)\\n\\tsrvrsSeen = srvrsSeen.filter(x => x);\\n\\treturn srvrsSeen;\\n}\\n\\n\\n/** \\n * \\tAttempts to take over target machine\\t\\n * \\n *  @param {string} target\\n * \\t@param {NS} ns\\n *  @return {boolean} outcome \\n**/\\nexport async function takeover(target, ns) {\\n\\tconst home = \\\"home\\\";\\n\\tlet currentTarget = target;\\n\\tlet isNotTakenOver = true;\\n\\tlet attemptCounter = 0;\\n\\n\\tlet scripts = ns.ls(home, \\\".js\\\");\\n\\t//scripts.push(ns.ls(home, \\\".ns\\\")); //in case of deprecated .ns scripts\\n\\n\\tif (!ns.hasRootAccess(currentTarget) && attemptCounter < 30) {\\n\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\ttry {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t} catch (error) {\\n\\t\\t\\t\\t\\tns.tprint(\\\"not enough ports to nuke \\\" + currentTarget);\\n\\t\\t\\t\\t\\treturn false;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t}\\n\\t\\t\\tattemptCounter++;\\n\\t\\t}\\n\\n\\t\\tawait ns.scp(scripts, home, currentTarget);\\n\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\",\"filename\":\"/modules/helper.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":1191,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.grow(target);\\n\\t}\\n}\",\"filename\":\"basic-grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":1192,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"basic-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":1193,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(target);\\n\\t}\\n}\",\"filename\":\"basic-weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":1194,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerList, takeover } from \\\"modules/helper.js\\\";\\n\\n/** @param {NS} ns **/\\n// TODO: unused + unfinished, based on setup.ns\\nexport async function main(ns) {\\n\\tconst myServers = [\\\"home\\\"];\\n\\n\\tvar servers = await getServerList(myServers, 0, ns);\\n\\n\\tfor (let entry in servers) {\\t\\n\\t\\tawait takeover(servers[entry], ns);\\n\\t}\\n}\",\"filename\":\"deep-setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":1195,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\t//\\n}\",\"filename\":\"formulas-testing.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":1196,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tconst currentMachine = ns.getHostname();\\n\\tvar servers = ns.scan(currentMachine);\\n\\tvar scripts = ns.ls(home, \\\"basic-\\\");\\n\\n\\tns.tprint(\\\"Host:  \\\" + currentMachine);\\n\\tfor (let entry in servers) {\\t// depth 0\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\t// depth 1\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== home && subservers.length > 1) {\\n\\t\\t\\t\\tns.tprint(\\\"-----> \\\" + subservers[subentry]);\\n\\t\\t\\t\\tlet subserversd2 = ns.scan(subservers[subentry]); // depth 2\\n\\t\\t\\t\\tfor (let subentryd2 in subserversd2) {\\n\\t\\t\\t\\t\\tif (subserversd2[subentryd2] !== subservers[subentry] && subserversd2[subentryd2] !== servers[entry] && subserversd2.length > 1) {\\n\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------> \\\" + subserversd2[subentryd2]);\\n\\t\\t\\t\\t\\t\\tlet subserversd3 = ns.scan(subserversd2[subentryd2]);\\t// depth 3\\n\\t\\t\\t\\t\\t\\tfor (let subentryd3 in subserversd3) {\\n\\t\\t\\t\\t\\t\\t\\tif (subserversd3[subentryd3] !== subserversd2[subentryd2] && subserversd3[subentryd3] !== subservers[subentry] && subserversd3.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------> \\\" + subserversd3[subentryd3]);\\n\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd4 = ns.scan(subserversd3[subentryd3]);\\t// depth 4\\n\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd4 in subserversd4) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd4[subentryd4] !== subserversd3[subentryd3] && subserversd4[subentryd4] !== subserversd2[subentryd2] && subserversd4.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------------> \\\" + subserversd4[subentryd4]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd5 = ns.scan(subserversd4[subentryd4]);\\t// depth 5\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd5 in subserversd5) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd5[subentryd5] !== subserversd4[subentryd4] && subserversd5[subentryd5] !== subserversd3[subentryd3] && subserversd5.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-------------------------> \\\" + subserversd5[subentryd5]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd6 = ns.scan(subserversd5[subentryd5]);\\t// depth 6\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd6 in subserversd6) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd6[subentryd6] !== subserversd5[subentryd5] && subserversd6[subentryd6] !== subserversd4[subentryd4] && subserversd6.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"------------------------------> \\\" + subserversd6[subentryd6]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd7 = ns.scan(subserversd6[subentryd6]);\\t// depth 7\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor(let subentryd7 in subserversd7) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd7[subentryd7] !== subserversd6[subentryd6] && subserversd7[subentryd7] !== subserversd5[subentryd5] && subserversd7.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-----------------------------------> \\\" + subserversd7[subentryd7]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"gigascan.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.05,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":1197,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet targetRam = ns.getServerMaxRam(ns.args[0]);\\n\\tlet scriptMem = ns.getScriptRam(ns.args[1]);\\n\\n\\tns.tprint(\\\"Maximum possible threads for \\\" + ns.args[1] + \\\": \\\" + Math.floor(targetRam / scriptMem));\\n\\tns.exit;\\n}\",\"filename\":\"ram-usage.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":1198,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerList } from \\\"modules/helper.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet serversSeen = [\\\"home\\\"]; // home + bought servers\\n\\tlet contractList = [];\\n\\n\\tserversSeen = await getServerList(serversSeen, 0, ns);\\n\\n\\tns.tprint(serversSeen);\\n}\",\"filename\":\"search-coding-contracts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":1199,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tvar servers = ns.scan(home);\\n\\tvar scripts = ns.ls(home, \\\".js\\\");\\n\\n\\tfor (let entry in scripts) {\\n\\t\\tns.tprint(\\\"found script: \\\" + scripts[entry]);\\n\\t}\\n\\n\\t// Hack servers (!!! depth = 2 !!!) if needed and populate with scripts\\n\\tfor (let entry in servers) {\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== \\\"home\\\") {\\n\\t\\t\\t\\tns.tprint(\\\"----->   \\\" + subservers[subentry]);\\n\\t\\t\\t\\tif (!ns.hasRootAccess(subservers[subentry])) {\\n\\t\\t\\t\\t\\ttakeover(subservers[subentry]);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tns.tprint(\\\"copying scripts to \\\" + subservers[subentry]);\\n\\t\\t\\t\\tawait ns.scp(scripts, home, subservers[subentry]);\\n\\t\\t\\t\\t//await ns.scp(\\\"setup.ns\\\", home, subservers[subentry]);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (!ns.hasRootAccess(servers[entry])) {\\n\\t\\t\\ttakeover(servers[entry]);\\n\\t\\t}\\n\\t\\tns.tprint(\\\"copying scripts to \\\" + servers[entry]);\\n\\t\\tawait ns.scp(scripts, home, servers[entry]);\\n\\t\\t//await ns.scp(\\\"setup.ns\\\", home, servers[entry]);\\n\\t}\\n\\n\\t/** \\n\\t * \\tAttempts to take over target machine\\t\\n\\t * \\n\\t *  @param {string} tar\\n\\t *  @return {boolean} outcome \\n\\t**/\\n\\tasync function takeover(tar) {\\n\\t\\tlet currentTarget = tar;\\n\\t\\tlet isNotTakenOver = true;\\n\\t\\tlet attemptCounter = 0;\\n\\n\\t\\tif (ns.getServerNumPortsRequired <= 5 && attemptCounter < 50) {\\n\\t\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\n\\t\\t\\t\\tattemptCounter++;\\n\\t\\t\\t}\\n\\n\\t\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.15,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":1200,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":10,\"hackDifficulty\":10,\"minDifficulty\":3,\"moneyAvailable\":2300000,\"moneyMax\":57500000,\"numOpenPortsRequired\":0,\"openPortCount\":3,\"requiredHackingSkill\":5,\"serverGrowth\":10}},\"joesguns\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"joesguns\",\"httpPortOpen\":false,\"ip\":\"86.4.8.5\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Joe's Guns\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Returns an array of all hostnames in the network tree\\n * \\n * @param {string[]} myServers\\n * @param {number} safetyCounter Prevents infnite recursion\\n * @param {NS} ns\\n */\\nexport async function getServerList(myServers, safetyCounter, ns) {\\n\\tlet srvrsSeen = myServers;\\n\\tlet currServScanResult = [];\\n\\n\\tfor (let serverSeen in srvrsSeen) {\\n\\t\\tcurrServScanResult = ns.scan(srvrsSeen[serverSeen]);\\n\\t\\tfor (let entry in currServScanResult) {\\n\\t\\t\\tif (!srvrsSeen.includes(currServScanResult[entry])) {\\n\\t\\t\\t\\tsrvrsSeen.push(currServScanResult[entry]);\\n\\t\\t\\t\\tif ((++safetyCounter) < 250) {\\n\\t\\t\\t\\t\\tawait getServerList(srvrsSeen, safetyCounter, ns);\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tns.exit();\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\t//Filter out invalid values (NaN, null, {}, undefined)\\n\\tsrvrsSeen = srvrsSeen.filter(x => x);\\n\\treturn srvrsSeen;\\n}\\n\\n\\n/** \\n * \\tAttempts to take over target machine\\t\\n * \\n *  @param {string} target\\n * \\t@param {NS} ns\\n *  @return {boolean} outcome \\n**/\\nexport async function takeover(target, ns) {\\n\\tconst home = \\\"home\\\";\\n\\tlet currentTarget = target;\\n\\tlet isNotTakenOver = true;\\n\\tlet attemptCounter = 0;\\n\\n\\tlet scripts = ns.ls(home, \\\".js\\\");\\n\\t//scripts.push(ns.ls(home, \\\".ns\\\")); //in case of deprecated .ns scripts\\n\\n\\tif (!ns.hasRootAccess(currentTarget) && attemptCounter < 30) {\\n\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\ttry {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t} catch (error) {\\n\\t\\t\\t\\t\\tns.tprint(\\\"not enough ports to nuke \\\" + currentTarget);\\n\\t\\t\\t\\t\\treturn false;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t}\\n\\t\\t\\tattemptCounter++;\\n\\t\\t}\\n\\n\\t\\tawait ns.scp(scripts, home, currentTarget);\\n\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\",\"filename\":\"/modules/helper.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"joesguns\",\"moduleSequenceNumber\":1201,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.grow(target);\\n\\t}\\n}\",\"filename\":\"basic-grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"joesguns\",\"moduleSequenceNumber\":1202,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"basic-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"joesguns\",\"moduleSequenceNumber\":1203,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(target);\\n\\t}\\n}\",\"filename\":\"basic-weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"joesguns\",\"moduleSequenceNumber\":1204,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerList, takeover } from \\\"modules/helper.js\\\";\\n\\n/** @param {NS} ns **/\\n// TODO: unused + unfinished, based on setup.ns\\nexport async function main(ns) {\\n\\tconst myServers = [\\\"home\\\"];\\n\\n\\tvar servers = await getServerList(myServers, 0, ns);\\n\\n\\tfor (let entry in servers) {\\t\\n\\t\\tawait takeover(servers[entry], ns);\\n\\t}\\n}\",\"filename\":\"deep-setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"joesguns\",\"moduleSequenceNumber\":1205,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\t//\\n}\",\"filename\":\"formulas-testing.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"joesguns\",\"moduleSequenceNumber\":1206,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tconst currentMachine = ns.getHostname();\\n\\tvar servers = ns.scan(currentMachine);\\n\\tvar scripts = ns.ls(home, \\\"basic-\\\");\\n\\n\\tns.tprint(\\\"Host:  \\\" + currentMachine);\\n\\tfor (let entry in servers) {\\t// depth 0\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\t// depth 1\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== home && subservers.length > 1) {\\n\\t\\t\\t\\tns.tprint(\\\"-----> \\\" + subservers[subentry]);\\n\\t\\t\\t\\tlet subserversd2 = ns.scan(subservers[subentry]); // depth 2\\n\\t\\t\\t\\tfor (let subentryd2 in subserversd2) {\\n\\t\\t\\t\\t\\tif (subserversd2[subentryd2] !== subservers[subentry] && subserversd2[subentryd2] !== servers[entry] && subserversd2.length > 1) {\\n\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------> \\\" + subserversd2[subentryd2]);\\n\\t\\t\\t\\t\\t\\tlet subserversd3 = ns.scan(subserversd2[subentryd2]);\\t// depth 3\\n\\t\\t\\t\\t\\t\\tfor (let subentryd3 in subserversd3) {\\n\\t\\t\\t\\t\\t\\t\\tif (subserversd3[subentryd3] !== subserversd2[subentryd2] && subserversd3[subentryd3] !== subservers[subentry] && subserversd3.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------> \\\" + subserversd3[subentryd3]);\\n\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd4 = ns.scan(subserversd3[subentryd3]);\\t// depth 4\\n\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd4 in subserversd4) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd4[subentryd4] !== subserversd3[subentryd3] && subserversd4[subentryd4] !== subserversd2[subentryd2] && subserversd4.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------------> \\\" + subserversd4[subentryd4]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd5 = ns.scan(subserversd4[subentryd4]);\\t// depth 5\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd5 in subserversd5) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd5[subentryd5] !== subserversd4[subentryd4] && subserversd5[subentryd5] !== subserversd3[subentryd3] && subserversd5.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-------------------------> \\\" + subserversd5[subentryd5]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd6 = ns.scan(subserversd5[subentryd5]);\\t// depth 6\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd6 in subserversd6) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd6[subentryd6] !== subserversd5[subentryd5] && subserversd6[subentryd6] !== subserversd4[subentryd4] && subserversd6.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"------------------------------> \\\" + subserversd6[subentryd6]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd7 = ns.scan(subserversd6[subentryd6]);\\t// depth 7\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor(let subentryd7 in subserversd7) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd7[subentryd7] !== subserversd6[subentryd6] && subserversd7[subentryd7] !== subserversd5[subentryd5] && subserversd7.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-----------------------------------> \\\" + subserversd7[subentryd7]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"gigascan.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.05,\"server\":\"joesguns\",\"moduleSequenceNumber\":1207,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet targetRam = ns.getServerMaxRam(ns.args[0]);\\n\\tlet scriptMem = ns.getScriptRam(ns.args[1]);\\n\\n\\tns.tprint(\\\"Maximum possible threads for \\\" + ns.args[1] + \\\": \\\" + Math.floor(targetRam / scriptMem));\\n\\tns.exit;\\n}\",\"filename\":\"ram-usage.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"joesguns\",\"moduleSequenceNumber\":1208,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerList } from \\\"modules/helper.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet serversSeen = [\\\"home\\\"]; // home + bought servers\\n\\tlet contractList = [];\\n\\n\\tserversSeen = await getServerList(serversSeen, 0, ns);\\n\\n\\tns.tprint(serversSeen);\\n}\",\"filename\":\"search-coding-contracts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"joesguns\",\"moduleSequenceNumber\":1209,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tvar servers = ns.scan(home);\\n\\tvar scripts = ns.ls(home, \\\".js\\\");\\n\\n\\tfor (let entry in scripts) {\\n\\t\\tns.tprint(\\\"found script: \\\" + scripts[entry]);\\n\\t}\\n\\n\\t// Hack servers (!!! depth = 2 !!!) if needed and populate with scripts\\n\\tfor (let entry in servers) {\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== \\\"home\\\") {\\n\\t\\t\\t\\tns.tprint(\\\"----->   \\\" + subservers[subentry]);\\n\\t\\t\\t\\tif (!ns.hasRootAccess(subservers[subentry])) {\\n\\t\\t\\t\\t\\ttakeover(subservers[subentry]);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tns.tprint(\\\"copying scripts to \\\" + subservers[subentry]);\\n\\t\\t\\t\\tawait ns.scp(scripts, home, subservers[subentry]);\\n\\t\\t\\t\\t//await ns.scp(\\\"setup.ns\\\", home, subservers[subentry]);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (!ns.hasRootAccess(servers[entry])) {\\n\\t\\t\\ttakeover(servers[entry]);\\n\\t\\t}\\n\\t\\tns.tprint(\\\"copying scripts to \\\" + servers[entry]);\\n\\t\\tawait ns.scp(scripts, home, servers[entry]);\\n\\t\\t//await ns.scp(\\\"setup.ns\\\", home, servers[entry]);\\n\\t}\\n\\n\\t/** \\n\\t * \\tAttempts to take over target machine\\t\\n\\t * \\n\\t *  @param {string} tar\\n\\t *  @return {boolean} outcome \\n\\t**/\\n\\tasync function takeover(tar) {\\n\\t\\tlet currentTarget = tar;\\n\\t\\tlet isNotTakenOver = true;\\n\\t\\tlet attemptCounter = 0;\\n\\n\\t\\tif (ns.getServerNumPortsRequired <= 5 && attemptCounter < 50) {\\n\\t\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\n\\t\\t\\t\\tattemptCounter++;\\n\\t\\t\\t}\\n\\n\\t\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.15,\"server\":\"joesguns\",\"moduleSequenceNumber\":1210,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":15,\"minDifficulty\":5,\"moneyAvailable\":2500000,\"moneyMax\":62500000,\"numOpenPortsRequired\":0,\"openPortCount\":3,\"requiredHackingSkill\":10,\"serverGrowth\":20}},\"zer0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-513117.cct\",\"type\":\"Total Ways to Sum\",\"data\":54,\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zer0\",\"httpPortOpen\":false,\"ip\":\"67.5.7.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"ZER0 Nightclub\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Returns an array of all hostnames in the network tree\\n * \\n * @param {string[]} myServers\\n * @param {number} safetyCounter Prevents infnite recursion\\n * @param {NS} ns\\n */\\nexport async function getServerList(myServers, safetyCounter, ns) {\\n\\tlet srvrsSeen = myServers;\\n\\tlet currServScanResult = [];\\n\\n\\tfor (let serverSeen in srvrsSeen) {\\n\\t\\tcurrServScanResult = ns.scan(srvrsSeen[serverSeen]);\\n\\t\\tfor (let entry in currServScanResult) {\\n\\t\\t\\tif (!srvrsSeen.includes(currServScanResult[entry])) {\\n\\t\\t\\t\\tsrvrsSeen.push(currServScanResult[entry]);\\n\\t\\t\\t\\tif ((++safetyCounter) < 250) {\\n\\t\\t\\t\\t\\tawait getServerList(srvrsSeen, safetyCounter, ns);\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tns.exit();\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\t//Filter out invalid values (NaN, null, {}, undefined)\\n\\tsrvrsSeen = srvrsSeen.filter(x => x);\\n\\treturn srvrsSeen;\\n}\\n\\n\\n/** \\n * \\tAttempts to take over target machine\\t\\n * \\n *  @param {string} target\\n * \\t@param {NS} ns\\n *  @return {boolean} outcome \\n**/\\nexport async function takeover(target, ns) {\\n\\tconst home = \\\"home\\\";\\n\\tlet currentTarget = target;\\n\\tlet isNotTakenOver = true;\\n\\tlet attemptCounter = 0;\\n\\n\\tlet scripts = ns.ls(home, \\\".js\\\");\\n\\t//scripts.push(ns.ls(home, \\\".ns\\\")); //in case of deprecated .ns scripts\\n\\n\\tif (!ns.hasRootAccess(currentTarget) && attemptCounter < 30) {\\n\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\ttry {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t} catch (error) {\\n\\t\\t\\t\\t\\tns.tprint(\\\"not enough ports to nuke \\\" + currentTarget);\\n\\t\\t\\t\\t\\treturn false;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t}\\n\\t\\t\\tattemptCounter++;\\n\\t\\t}\\n\\n\\t\\tawait ns.scp(scripts, home, currentTarget);\\n\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\",\"filename\":\"/modules/helper.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"zer0\",\"moduleSequenceNumber\":1211,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.grow(target);\\n\\t}\\n}\",\"filename\":\"basic-grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zer0\",\"moduleSequenceNumber\":1212,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"basic-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"basic-hack.js\",\"url\":\"blob:file:///1861c11f-01bb-4b41-aff2-25864c9156b1\",\"moduleSequenceNumber\":1423}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"zer0\",\"moduleSequenceNumber\":1213,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(target);\\n\\t}\\n}\",\"filename\":\"basic-weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zer0\",\"moduleSequenceNumber\":1214,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerList, takeover } from \\\"modules/helper.js\\\";\\n\\n/** @param {NS} ns **/\\n// TODO: unused + unfinished, based on setup.ns\\nexport async function main(ns) {\\n\\tconst myServers = [\\\"home\\\"];\\n\\n\\tvar servers = await getServerList(myServers, 0, ns);\\n\\n\\tfor (let entry in servers) {\\t\\n\\t\\tawait takeover(servers[entry], ns);\\n\\t}\\n}\",\"filename\":\"deep-setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/modules/helper.js\",\"url\":\"blob:file:///9d292ad9-6e7b-4276-97b8-102af5f00402\",\"moduleSequenceNumber\":411},{\"filename\":\"deep-setup.js\",\"url\":\"blob:file:///32fbb3cb-cf66-475d-98b0-236b586e3b15\",\"moduleSequenceNumber\":3645}],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"zer0\",\"moduleSequenceNumber\":1215,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\t//\\n}\",\"filename\":\"formulas-testing.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"zer0\",\"moduleSequenceNumber\":1216,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tconst currentMachine = ns.getHostname();\\n\\tvar servers = ns.scan(currentMachine);\\n\\tvar scripts = ns.ls(home, \\\"basic-\\\");\\n\\n\\tns.tprint(\\\"Host:  \\\" + currentMachine);\\n\\tfor (let entry in servers) {\\t// depth 0\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\t// depth 1\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== home && subservers.length > 1) {\\n\\t\\t\\t\\tns.tprint(\\\"-----> \\\" + subservers[subentry]);\\n\\t\\t\\t\\tlet subserversd2 = ns.scan(subservers[subentry]); // depth 2\\n\\t\\t\\t\\tfor (let subentryd2 in subserversd2) {\\n\\t\\t\\t\\t\\tif (subserversd2[subentryd2] !== subservers[subentry] && subserversd2[subentryd2] !== servers[entry] && subserversd2.length > 1) {\\n\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------> \\\" + subserversd2[subentryd2]);\\n\\t\\t\\t\\t\\t\\tlet subserversd3 = ns.scan(subserversd2[subentryd2]);\\t// depth 3\\n\\t\\t\\t\\t\\t\\tfor (let subentryd3 in subserversd3) {\\n\\t\\t\\t\\t\\t\\t\\tif (subserversd3[subentryd3] !== subserversd2[subentryd2] && subserversd3[subentryd3] !== subservers[subentry] && subserversd3.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------> \\\" + subserversd3[subentryd3]);\\n\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd4 = ns.scan(subserversd3[subentryd3]);\\t// depth 4\\n\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd4 in subserversd4) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd4[subentryd4] !== subserversd3[subentryd3] && subserversd4[subentryd4] !== subserversd2[subentryd2] && subserversd4.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------------> \\\" + subserversd4[subentryd4]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd5 = ns.scan(subserversd4[subentryd4]);\\t// depth 5\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd5 in subserversd5) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd5[subentryd5] !== subserversd4[subentryd4] && subserversd5[subentryd5] !== subserversd3[subentryd3] && subserversd5.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-------------------------> \\\" + subserversd5[subentryd5]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd6 = ns.scan(subserversd5[subentryd5]);\\t// depth 6\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd6 in subserversd6) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd6[subentryd6] !== subserversd5[subentryd5] && subserversd6[subentryd6] !== subserversd4[subentryd4] && subserversd6.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"------------------------------> \\\" + subserversd6[subentryd6]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd7 = ns.scan(subserversd6[subentryd6]);\\t// depth 7\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor(let subentryd7 in subserversd7) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd7[subentryd7] !== subserversd6[subentryd6] && subserversd7[subentryd7] !== subserversd5[subentryd5] && subserversd7.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-----------------------------------> \\\" + subserversd7[subentryd7]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"gigascan.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.05,\"server\":\"zer0\",\"moduleSequenceNumber\":1217,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet targetRam = ns.getServerMaxRam(ns.args[0]);\\n\\tlet scriptMem = ns.getScriptRam(ns.args[1]);\\n\\n\\tns.tprint(\\\"Maximum possible threads for \\\" + ns.args[1] + \\\": \\\" + Math.floor(targetRam / scriptMem));\\n\\tns.exit;\\n}\",\"filename\":\"ram-usage.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zer0\",\"moduleSequenceNumber\":1218,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerList } from \\\"modules/helper.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet serversSeen = [\\\"home\\\"]; // home + bought servers\\n\\tlet contractList = [];\\n\\n\\tserversSeen = await getServerList(serversSeen, 0, ns);\\n\\n\\tns.tprint(serversSeen);\\n}\",\"filename\":\"search-coding-contracts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/modules/helper.js\",\"url\":\"blob:file:///d0a4de36-b602-4241-af14-b38ebaa59039\",\"moduleSequenceNumber\":411},{\"filename\":\"search-coding-contracts.js\",\"url\":\"blob:file:///f10d26cc-54e0-4aa8-820a-60cbdca0ae06\",\"moduleSequenceNumber\":3364}],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"zer0\",\"moduleSequenceNumber\":1219,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tvar servers = ns.scan(home);\\n\\tvar scripts = ns.ls(home, \\\".js\\\");\\n\\n\\tfor (let entry in scripts) {\\n\\t\\tns.tprint(\\\"found script: \\\" + scripts[entry]);\\n\\t}\\n\\n\\t// Hack servers (!!! depth = 2 !!!) if needed and populate with scripts\\n\\tfor (let entry in servers) {\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== \\\"home\\\") {\\n\\t\\t\\t\\tns.tprint(\\\"----->   \\\" + subservers[subentry]);\\n\\t\\t\\t\\tif (!ns.hasRootAccess(subservers[subentry])) {\\n\\t\\t\\t\\t\\ttakeover(subservers[subentry]);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tns.tprint(\\\"copying scripts to \\\" + subservers[subentry]);\\n\\t\\t\\t\\tawait ns.scp(scripts, home, subservers[subentry]);\\n\\t\\t\\t\\t//await ns.scp(\\\"setup.ns\\\", home, subservers[subentry]);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (!ns.hasRootAccess(servers[entry])) {\\n\\t\\t\\ttakeover(servers[entry]);\\n\\t\\t}\\n\\t\\tns.tprint(\\\"copying scripts to \\\" + servers[entry]);\\n\\t\\tawait ns.scp(scripts, home, servers[entry]);\\n\\t\\t//await ns.scp(\\\"setup.ns\\\", home, servers[entry]);\\n\\t}\\n\\n\\t/** \\n\\t * \\tAttempts to take over target machine\\t\\n\\t * \\n\\t *  @param {string} tar\\n\\t *  @return {boolean} outcome \\n\\t**/\\n\\tasync function takeover(tar) {\\n\\t\\tlet currentTarget = tar;\\n\\t\\tlet isNotTakenOver = true;\\n\\t\\tlet attemptCounter = 0;\\n\\n\\t\\tif (ns.getServerNumPortsRequired <= 5 && attemptCounter < 50) {\\n\\t\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\n\\t\\t\\t\\tattemptCounter++;\\n\\t\\t\\t}\\n\\n\\t\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.15,\"server\":\"zer0\",\"moduleSequenceNumber\":1220,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}}],\"serversOnNetwork\":[\"hong-fang-tea\",\"neo-net\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":25,\"hackDifficulty\":25.002,\"minDifficulty\":8,\"moneyAvailable\":7374445,\"moneyMax\":187500000,\"numOpenPortsRequired\":1,\"openPortCount\":3,\"requiredHackingSkill\":75,\"serverGrowth\":40}},\"nectar-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"nectar-net\",\"httpPortOpen\":false,\"ip\":\"7.4.3.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Nectar Nightclub Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Returns an array of all hostnames in the network tree\\n * \\n * @param {string[]} myServers\\n * @param {number} safetyCounter Prevents infnite recursion\\n * @param {NS} ns\\n */\\nexport async function getServerList(myServers, safetyCounter, ns) {\\n\\tlet srvrsSeen = myServers;\\n\\tlet currServScanResult = [];\\n\\n\\tfor (let serverSeen in srvrsSeen) {\\n\\t\\tcurrServScanResult = ns.scan(srvrsSeen[serverSeen]);\\n\\t\\tfor (let entry in currServScanResult) {\\n\\t\\t\\tif (!srvrsSeen.includes(currServScanResult[entry])) {\\n\\t\\t\\t\\tsrvrsSeen.push(currServScanResult[entry]);\\n\\t\\t\\t\\tif ((++safetyCounter) < 250) {\\n\\t\\t\\t\\t\\tawait getServerList(srvrsSeen, safetyCounter, ns);\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tns.exit();\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\t//Filter out invalid values (NaN, null, {}, undefined)\\n\\tsrvrsSeen = srvrsSeen.filter(x => x);\\n\\treturn srvrsSeen;\\n}\\n\\n\\n/** \\n * \\tAttempts to take over target machine\\t\\n * \\n *  @param {string} target\\n * \\t@param {NS} ns\\n *  @return {boolean} outcome \\n**/\\nexport async function takeover(target, ns) {\\n\\tconst home = \\\"home\\\";\\n\\tlet currentTarget = target;\\n\\tlet isNotTakenOver = true;\\n\\tlet attemptCounter = 0;\\n\\n\\tlet scripts = ns.ls(home, \\\".js\\\");\\n\\t//scripts.push(ns.ls(home, \\\".ns\\\")); //in case of deprecated .ns scripts\\n\\n\\tif (!ns.hasRootAccess(currentTarget) && attemptCounter < 30) {\\n\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\ttry {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t} catch (error) {\\n\\t\\t\\t\\t\\tns.tprint(\\\"not enough ports to nuke \\\" + currentTarget);\\n\\t\\t\\t\\t\\treturn false;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t}\\n\\t\\t\\tattemptCounter++;\\n\\t\\t}\\n\\n\\t\\tawait ns.scp(scripts, home, currentTarget);\\n\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\",\"filename\":\"/modules/helper.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"nectar-net\",\"moduleSequenceNumber\":1221,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.grow(target);\\n\\t}\\n}\",\"filename\":\"basic-grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"nectar-net\",\"moduleSequenceNumber\":1222,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"basic-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"nectar-net\",\"moduleSequenceNumber\":1223,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(target);\\n\\t}\\n}\",\"filename\":\"basic-weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"nectar-net\",\"moduleSequenceNumber\":1224,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerList, takeover } from \\\"modules/helper.js\\\";\\n\\n/** @param {NS} ns **/\\n// TODO: unused + unfinished, based on setup.ns\\nexport async function main(ns) {\\n\\tconst myServers = [\\\"home\\\"];\\n\\n\\tvar servers = await getServerList(myServers, 0, ns);\\n\\n\\tfor (let entry in servers) {\\t\\n\\t\\tawait takeover(servers[entry], ns);\\n\\t}\\n}\",\"filename\":\"deep-setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"nectar-net\",\"moduleSequenceNumber\":1225,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\t//\\n}\",\"filename\":\"formulas-testing.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"nectar-net\",\"moduleSequenceNumber\":1226,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tconst currentMachine = ns.getHostname();\\n\\tvar servers = ns.scan(currentMachine);\\n\\tvar scripts = ns.ls(home, \\\"basic-\\\");\\n\\n\\tns.tprint(\\\"Host:  \\\" + currentMachine);\\n\\tfor (let entry in servers) {\\t// depth 0\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\t// depth 1\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== home && subservers.length > 1) {\\n\\t\\t\\t\\tns.tprint(\\\"-----> \\\" + subservers[subentry]);\\n\\t\\t\\t\\tlet subserversd2 = ns.scan(subservers[subentry]); // depth 2\\n\\t\\t\\t\\tfor (let subentryd2 in subserversd2) {\\n\\t\\t\\t\\t\\tif (subserversd2[subentryd2] !== subservers[subentry] && subserversd2[subentryd2] !== servers[entry] && subserversd2.length > 1) {\\n\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------> \\\" + subserversd2[subentryd2]);\\n\\t\\t\\t\\t\\t\\tlet subserversd3 = ns.scan(subserversd2[subentryd2]);\\t// depth 3\\n\\t\\t\\t\\t\\t\\tfor (let subentryd3 in subserversd3) {\\n\\t\\t\\t\\t\\t\\t\\tif (subserversd3[subentryd3] !== subserversd2[subentryd2] && subserversd3[subentryd3] !== subservers[subentry] && subserversd3.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------> \\\" + subserversd3[subentryd3]);\\n\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd4 = ns.scan(subserversd3[subentryd3]);\\t// depth 4\\n\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd4 in subserversd4) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd4[subentryd4] !== subserversd3[subentryd3] && subserversd4[subentryd4] !== subserversd2[subentryd2] && subserversd4.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------------> \\\" + subserversd4[subentryd4]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd5 = ns.scan(subserversd4[subentryd4]);\\t// depth 5\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd5 in subserversd5) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd5[subentryd5] !== subserversd4[subentryd4] && subserversd5[subentryd5] !== subserversd3[subentryd3] && subserversd5.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-------------------------> \\\" + subserversd5[subentryd5]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd6 = ns.scan(subserversd5[subentryd5]);\\t// depth 6\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd6 in subserversd6) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd6[subentryd6] !== subserversd5[subentryd5] && subserversd6[subentryd6] !== subserversd4[subentryd4] && subserversd6.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"------------------------------> \\\" + subserversd6[subentryd6]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd7 = ns.scan(subserversd6[subentryd6]);\\t// depth 7\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor(let subentryd7 in subserversd7) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd7[subentryd7] !== subserversd6[subentryd6] && subserversd7[subentryd7] !== subserversd5[subentryd5] && subserversd7.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-----------------------------------> \\\" + subserversd7[subentryd7]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"gigascan.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.05,\"server\":\"nectar-net\",\"moduleSequenceNumber\":1227,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet targetRam = ns.getServerMaxRam(ns.args[0]);\\n\\tlet scriptMem = ns.getScriptRam(ns.args[1]);\\n\\n\\tns.tprint(\\\"Maximum possible threads for \\\" + ns.args[1] + \\\": \\\" + Math.floor(targetRam / scriptMem));\\n\\tns.exit;\\n}\",\"filename\":\"ram-usage.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"nectar-net\",\"moduleSequenceNumber\":1228,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerList } from \\\"modules/helper.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet serversSeen = [\\\"home\\\"]; // home + bought servers\\n\\tlet contractList = [];\\n\\n\\tserversSeen = await getServerList(serversSeen, 0, ns);\\n\\n\\tns.tprint(serversSeen);\\n}\",\"filename\":\"search-coding-contracts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"nectar-net\",\"moduleSequenceNumber\":1229,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tvar servers = ns.scan(home);\\n\\tvar scripts = ns.ls(home, \\\".js\\\");\\n\\n\\tfor (let entry in scripts) {\\n\\t\\tns.tprint(\\\"found script: \\\" + scripts[entry]);\\n\\t}\\n\\n\\t// Hack servers (!!! depth = 2 !!!) if needed and populate with scripts\\n\\tfor (let entry in servers) {\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== \\\"home\\\") {\\n\\t\\t\\t\\tns.tprint(\\\"----->   \\\" + subservers[subentry]);\\n\\t\\t\\t\\tif (!ns.hasRootAccess(subservers[subentry])) {\\n\\t\\t\\t\\t\\ttakeover(subservers[subentry]);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tns.tprint(\\\"copying scripts to \\\" + subservers[subentry]);\\n\\t\\t\\t\\tawait ns.scp(scripts, home, subservers[subentry]);\\n\\t\\t\\t\\t//await ns.scp(\\\"setup.ns\\\", home, subservers[subentry]);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (!ns.hasRootAccess(servers[entry])) {\\n\\t\\t\\ttakeover(servers[entry]);\\n\\t\\t}\\n\\t\\tns.tprint(\\\"copying scripts to \\\" + servers[entry]);\\n\\t\\tawait ns.scp(scripts, home, servers[entry]);\\n\\t\\t//await ns.scp(\\\"setup.ns\\\", home, servers[entry]);\\n\\t}\\n\\n\\t/** \\n\\t * \\tAttempts to take over target machine\\t\\n\\t * \\n\\t *  @param {string} tar\\n\\t *  @return {boolean} outcome \\n\\t**/\\n\\tasync function takeover(tar) {\\n\\t\\tlet currentTarget = tar;\\n\\t\\tlet isNotTakenOver = true;\\n\\t\\tlet attemptCounter = 0;\\n\\n\\t\\tif (ns.getServerNumPortsRequired <= 5 && attemptCounter < 50) {\\n\\t\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\n\\t\\t\\t\\tattemptCounter++;\\n\\t\\t\\t}\\n\\n\\t\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.15,\"server\":\"nectar-net\",\"moduleSequenceNumber\":1230,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}}],\"serversOnNetwork\":[\"iron-gym\",\"silver-helix\",\"phantasy\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":20,\"minDifficulty\":7,\"moneyAvailable\":2750000,\"moneyMax\":68750000,\"numOpenPortsRequired\":0,\"openPortCount\":3,\"requiredHackingSkill\":20,\"serverGrowth\":25}},\"neo-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-356791.cct\",\"type\":\"Find All Valid Math Expressions\",\"data\":[\"28226405600\",-77],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"neo-net\",\"httpPortOpen\":false,\"ip\":\"82.4.3.4\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"Neo Nightclub Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Returns an array of all hostnames in the network tree\\n * \\n * @param {string[]} myServers\\n * @param {number} safetyCounter Prevents infnite recursion\\n * @param {NS} ns\\n */\\nexport async function getServerList(myServers, safetyCounter, ns) {\\n\\tlet srvrsSeen = myServers;\\n\\tlet currServScanResult = [];\\n\\n\\tfor (let serverSeen in srvrsSeen) {\\n\\t\\tcurrServScanResult = ns.scan(srvrsSeen[serverSeen]);\\n\\t\\tfor (let entry in currServScanResult) {\\n\\t\\t\\tif (!srvrsSeen.includes(currServScanResult[entry])) {\\n\\t\\t\\t\\tsrvrsSeen.push(currServScanResult[entry]);\\n\\t\\t\\t\\tif ((++safetyCounter) < 250) {\\n\\t\\t\\t\\t\\tawait getServerList(srvrsSeen, safetyCounter, ns);\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tns.exit();\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\t//Filter out invalid values (NaN, null, {}, undefined)\\n\\tsrvrsSeen = srvrsSeen.filter(x => x);\\n\\treturn srvrsSeen;\\n}\\n\\n\\n/** \\n * \\tAttempts to take over target machine\\t\\n * \\n *  @param {string} target\\n * \\t@param {NS} ns\\n *  @return {boolean} outcome \\n**/\\nexport async function takeover(target, ns) {\\n\\tconst home = \\\"home\\\";\\n\\tlet currentTarget = target;\\n\\tlet isNotTakenOver = true;\\n\\tlet attemptCounter = 0;\\n\\n\\tlet scripts = ns.ls(home, \\\".js\\\");\\n\\t//scripts.push(ns.ls(home, \\\".ns\\\")); //in case of deprecated .ns scripts\\n\\n\\tif (!ns.hasRootAccess(currentTarget) && attemptCounter < 30) {\\n\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\ttry {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t} catch (error) {\\n\\t\\t\\t\\t\\tns.tprint(\\\"not enough ports to nuke \\\" + currentTarget);\\n\\t\\t\\t\\t\\treturn false;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t}\\n\\t\\t\\tattemptCounter++;\\n\\t\\t}\\n\\n\\t\\tawait ns.scp(scripts, home, currentTarget);\\n\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\",\"filename\":\"/modules/helper.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"neo-net\",\"moduleSequenceNumber\":1231,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.grow(target);\\n\\t}\\n}\",\"filename\":\"basic-grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"neo-net\",\"moduleSequenceNumber\":1232,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"basic-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"neo-net\",\"moduleSequenceNumber\":1233,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(target);\\n\\t}\\n}\",\"filename\":\"basic-weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"neo-net\",\"moduleSequenceNumber\":1234,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerList, takeover } from \\\"modules/helper.js\\\";\\n\\n/** @param {NS} ns **/\\n// TODO: unused + unfinished, based on setup.ns\\nexport async function main(ns) {\\n\\tconst myServers = [\\\"home\\\"];\\n\\n\\tvar servers = await getServerList(myServers, 0, ns);\\n\\n\\tfor (let entry in servers) {\\t\\n\\t\\tawait takeover(servers[entry], ns);\\n\\t}\\n}\",\"filename\":\"deep-setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"neo-net\",\"moduleSequenceNumber\":1235,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\t//\\n}\",\"filename\":\"formulas-testing.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"neo-net\",\"moduleSequenceNumber\":1236,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tconst currentMachine = ns.getHostname();\\n\\tvar servers = ns.scan(currentMachine);\\n\\tvar scripts = ns.ls(home, \\\"basic-\\\");\\n\\n\\tns.tprint(\\\"Host:  \\\" + currentMachine);\\n\\tfor (let entry in servers) {\\t// depth 0\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\t// depth 1\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== home && subservers.length > 1) {\\n\\t\\t\\t\\tns.tprint(\\\"-----> \\\" + subservers[subentry]);\\n\\t\\t\\t\\tlet subserversd2 = ns.scan(subservers[subentry]); // depth 2\\n\\t\\t\\t\\tfor (let subentryd2 in subserversd2) {\\n\\t\\t\\t\\t\\tif (subserversd2[subentryd2] !== subservers[subentry] && subserversd2[subentryd2] !== servers[entry] && subserversd2.length > 1) {\\n\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------> \\\" + subserversd2[subentryd2]);\\n\\t\\t\\t\\t\\t\\tlet subserversd3 = ns.scan(subserversd2[subentryd2]);\\t// depth 3\\n\\t\\t\\t\\t\\t\\tfor (let subentryd3 in subserversd3) {\\n\\t\\t\\t\\t\\t\\t\\tif (subserversd3[subentryd3] !== subserversd2[subentryd2] && subserversd3[subentryd3] !== subservers[subentry] && subserversd3.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------> \\\" + subserversd3[subentryd3]);\\n\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd4 = ns.scan(subserversd3[subentryd3]);\\t// depth 4\\n\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd4 in subserversd4) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd4[subentryd4] !== subserversd3[subentryd3] && subserversd4[subentryd4] !== subserversd2[subentryd2] && subserversd4.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------------> \\\" + subserversd4[subentryd4]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd5 = ns.scan(subserversd4[subentryd4]);\\t// depth 5\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd5 in subserversd5) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd5[subentryd5] !== subserversd4[subentryd4] && subserversd5[subentryd5] !== subserversd3[subentryd3] && subserversd5.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-------------------------> \\\" + subserversd5[subentryd5]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd6 = ns.scan(subserversd5[subentryd5]);\\t// depth 6\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd6 in subserversd6) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd6[subentryd6] !== subserversd5[subentryd5] && subserversd6[subentryd6] !== subserversd4[subentryd4] && subserversd6.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"------------------------------> \\\" + subserversd6[subentryd6]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd7 = ns.scan(subserversd6[subentryd6]);\\t// depth 7\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor(let subentryd7 in subserversd7) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd7[subentryd7] !== subserversd6[subentryd6] && subserversd7[subentryd7] !== subserversd5[subentryd5] && subserversd7.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-----------------------------------> \\\" + subserversd7[subentryd7]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"gigascan.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.05,\"server\":\"neo-net\",\"moduleSequenceNumber\":1237,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet targetRam = ns.getServerMaxRam(ns.args[0]);\\n\\tlet scriptMem = ns.getScriptRam(ns.args[1]);\\n\\n\\tns.tprint(\\\"Maximum possible threads for \\\" + ns.args[1] + \\\": \\\" + Math.floor(targetRam / scriptMem));\\n\\tns.exit;\\n}\",\"filename\":\"ram-usage.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"neo-net\",\"moduleSequenceNumber\":1238,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerList } from \\\"modules/helper.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet serversSeen = [\\\"home\\\"]; // home + bought servers\\n\\tlet contractList = [];\\n\\n\\tserversSeen = await getServerList(serversSeen, 0, ns);\\n\\n\\tns.tprint(serversSeen);\\n}\",\"filename\":\"search-coding-contracts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"neo-net\",\"moduleSequenceNumber\":1239,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tvar servers = ns.scan(home);\\n\\tvar scripts = ns.ls(home, \\\".ns\\\");\\n\\n\\tfor (let entry in scripts) {\\n\\t\\tns.tprint(\\\"found script: \\\" + scripts[entry]);\\n\\t}\\n\\n\\t// Hack servers (!!! depth = 2 !!!) if needed and populate with scripts\\n\\tfor (let entry in servers) {\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== \\\"home\\\") {\\n\\t\\t\\t\\tns.tprint(\\\"----->   \\\" + subservers[subentry]);\\n\\t\\t\\t\\tif (!ns.hasRootAccess(subservers[subentry])) {\\n\\t\\t\\t\\t\\ttakeover(subservers[subentry]);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tns.tprint(\\\"copying scripts to \\\" + subservers[subentry]);\\n\\t\\t\\t\\tawait ns.scp(scripts, home, subservers[subentry]);\\n\\t\\t\\t\\t//await ns.scp(\\\"setup.ns\\\", home, subservers[subentry]);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (!ns.hasRootAccess(servers[entry])) {\\n\\t\\t\\ttakeover(servers[entry]);\\n\\t\\t}\\n\\t\\tns.tprint(\\\"copying scripts to \\\" + servers[entry]);\\n\\t\\tawait ns.scp(scripts, home, servers[entry]);\\n\\t\\t//await ns.scp(\\\"setup.ns\\\", home, servers[entry]);\\n\\t}\\n\\n\\t/** \\n\\t * \\tAttempts to take over target machine\\t\\n\\t * \\n\\t *  @param {string} tar\\n\\t *  @return {boolean} outcome \\n\\t**/\\n\\tasync function takeover(tar) {\\n\\t\\tlet currentTarget = tar;\\n\\t\\tlet isNotTakenOver = true;\\n\\t\\tlet attemptCounter = 0;\\n\\n\\t\\tif (ns.getServerNumPortsRequired <= 5 && attemptCounter < 50) {\\n\\t\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\n\\t\\t\\t\\tattemptCounter++;\\n\\t\\t\\t}\\n\\n\\t\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.15,\"server\":\"neo-net\",\"moduleSequenceNumber\":1240,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}}],\"serversOnNetwork\":[\"zer0\",\"johnson-ortho\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":25,\"minDifficulty\":8,\"moneyAvailable\":5000000,\"moneyMax\":125000000,\"numOpenPortsRequired\":1,\"openPortCount\":3,\"requiredHackingSkill\":50,\"serverGrowth\":25}},\"silver-helix\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-734513-NiteSec.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[168,78,179,184,51,86,120,113,119],\"reward\":{\"name\":\"NiteSec\",\"type\":0}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-853821.cct\",\"type\":\"Find All Valid Math Expressions\",\"data\":[\"823603983\",27],\"reward\":{\"name\":\"\",\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-455932.cct\",\"type\":\"Find Largest Prime Factor\",\"data\":796447738,\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"silver-helix\",\"httpPortOpen\":false,\"ip\":\"51.7.6.7\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"new-triads.lit\"],\"organizationName\":\"Silver Helix\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Returns an array of all hostnames in the network tree\\n * \\n * @param {string[]} myServers\\n * @param {number} safetyCounter Prevents infnite recursion\\n * @param {NS} ns\\n */\\nexport async function getServerList(myServers, safetyCounter, ns) {\\n\\tlet srvrsSeen = myServers;\\n\\tlet currServScanResult = [];\\n\\n\\tfor (let serverSeen in srvrsSeen) {\\n\\t\\tcurrServScanResult = ns.scan(srvrsSeen[serverSeen]);\\n\\t\\tfor (let entry in currServScanResult) {\\n\\t\\t\\tif (!srvrsSeen.includes(currServScanResult[entry])) {\\n\\t\\t\\t\\tsrvrsSeen.push(currServScanResult[entry]);\\n\\t\\t\\t\\tif ((++safetyCounter) < 250) {\\n\\t\\t\\t\\t\\tawait getServerList(srvrsSeen, safetyCounter, ns);\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tns.exit();\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\t//Filter out invalid values (NaN, null, {}, undefined)\\n\\tsrvrsSeen = srvrsSeen.filter(x => x);\\n\\treturn srvrsSeen;\\n}\\n\\n\\n/** \\n * \\tAttempts to take over target machine\\t\\n * \\n *  @param {string} target\\n * \\t@param {NS} ns\\n *  @return {boolean} outcome \\n**/\\nexport async function takeover(target, ns) {\\n\\tconst home = \\\"home\\\";\\n\\tlet currentTarget = target;\\n\\tlet isNotTakenOver = true;\\n\\tlet attemptCounter = 0;\\n\\n\\tlet scripts = ns.ls(home, \\\".js\\\");\\n\\t//scripts.push(ns.ls(home, \\\".ns\\\")); //in case of deprecated .ns scripts\\n\\n\\tif (!ns.hasRootAccess(currentTarget) && attemptCounter < 30) {\\n\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\ttry {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t} catch (error) {\\n\\t\\t\\t\\t\\tns.tprint(\\\"not enough ports to nuke \\\" + currentTarget);\\n\\t\\t\\t\\t\\treturn false;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t}\\n\\t\\t\\tattemptCounter++;\\n\\t\\t}\\n\\n\\t\\tawait ns.scp(scripts, home, currentTarget);\\n\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\",\"filename\":\"/modules/helper.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"silver-helix\",\"moduleSequenceNumber\":1241,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.grow(target);\\n\\t}\\n}\",\"filename\":\"basic-grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"silver-helix\",\"moduleSequenceNumber\":1242,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"basic-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"silver-helix\",\"moduleSequenceNumber\":1243,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(target);\\n\\t}\\n}\",\"filename\":\"basic-weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"silver-helix\",\"moduleSequenceNumber\":1244,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerList, takeover } from \\\"modules/helper.js\\\";\\n\\n/** @param {NS} ns **/\\n// TODO: unused + unfinished, based on setup.ns\\nexport async function main(ns) {\\n\\tconst myServers = [\\\"home\\\"];\\n\\n\\tvar servers = await getServerList(myServers, 0, ns);\\n\\n\\tfor (let entry in servers) {\\t\\n\\t\\tawait takeover(servers[entry], ns);\\n\\t}\\n}\",\"filename\":\"deep-setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"silver-helix\",\"moduleSequenceNumber\":1245,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\t//\\n}\",\"filename\":\"formulas-testing.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"silver-helix\",\"moduleSequenceNumber\":1246,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tconst currentMachine = ns.getHostname();\\n\\tvar servers = ns.scan(currentMachine);\\n\\tvar scripts = ns.ls(home, \\\"basic-\\\");\\n\\n\\tns.tprint(\\\"Host:  \\\" + currentMachine);\\n\\tfor (let entry in servers) {\\t// depth 0\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\t// depth 1\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== home && subservers.length > 1) {\\n\\t\\t\\t\\tns.tprint(\\\"-----> \\\" + subservers[subentry]);\\n\\t\\t\\t\\tlet subserversd2 = ns.scan(subservers[subentry]); // depth 2\\n\\t\\t\\t\\tfor (let subentryd2 in subserversd2) {\\n\\t\\t\\t\\t\\tif (subserversd2[subentryd2] !== subservers[subentry] && subserversd2[subentryd2] !== servers[entry] && subserversd2.length > 1) {\\n\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------> \\\" + subserversd2[subentryd2]);\\n\\t\\t\\t\\t\\t\\tlet subserversd3 = ns.scan(subserversd2[subentryd2]);\\t// depth 3\\n\\t\\t\\t\\t\\t\\tfor (let subentryd3 in subserversd3) {\\n\\t\\t\\t\\t\\t\\t\\tif (subserversd3[subentryd3] !== subserversd2[subentryd2] && subserversd3[subentryd3] !== subservers[subentry] && subserversd3.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------> \\\" + subserversd3[subentryd3]);\\n\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd4 = ns.scan(subserversd3[subentryd3]);\\t// depth 4\\n\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd4 in subserversd4) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd4[subentryd4] !== subserversd3[subentryd3] && subserversd4[subentryd4] !== subserversd2[subentryd2] && subserversd4.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------------> \\\" + subserversd4[subentryd4]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd5 = ns.scan(subserversd4[subentryd4]);\\t// depth 5\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd5 in subserversd5) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd5[subentryd5] !== subserversd4[subentryd4] && subserversd5[subentryd5] !== subserversd3[subentryd3] && subserversd5.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-------------------------> \\\" + subserversd5[subentryd5]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd6 = ns.scan(subserversd5[subentryd5]);\\t// depth 6\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd6 in subserversd6) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd6[subentryd6] !== subserversd5[subentryd5] && subserversd6[subentryd6] !== subserversd4[subentryd4] && subserversd6.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"------------------------------> \\\" + subserversd6[subentryd6]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd7 = ns.scan(subserversd6[subentryd6]);\\t// depth 7\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor(let subentryd7 in subserversd7) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd7[subentryd7] !== subserversd6[subentryd6] && subserversd7[subentryd7] !== subserversd5[subentryd5] && subserversd7.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-----------------------------------> \\\" + subserversd7[subentryd7]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"gigascan.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.05,\"server\":\"silver-helix\",\"moduleSequenceNumber\":1247,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet targetRam = ns.getServerMaxRam(ns.args[0]);\\n\\tlet scriptMem = ns.getScriptRam(ns.args[1]);\\n\\n\\tns.tprint(\\\"Maximum possible threads for \\\" + ns.args[1] + \\\": \\\" + Math.floor(targetRam / scriptMem));\\n\\tns.exit;\\n}\",\"filename\":\"ram-usage.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"silver-helix\",\"moduleSequenceNumber\":1248,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerList } from \\\"modules/helper.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet serversSeen = [\\\"home\\\"]; // home + bought servers\\n\\tlet contractList = [];\\n\\n\\tserversSeen = await getServerList(serversSeen, 0, ns);\\n\\n\\tns.tprint(serversSeen);\\n}\",\"filename\":\"search-coding-contracts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"silver-helix\",\"moduleSequenceNumber\":1249,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tvar servers = ns.scan(home);\\n\\tvar scripts = ns.ls(home, \\\".ns\\\");\\n\\n\\tfor (let entry in scripts) {\\n\\t\\tns.tprint(\\\"found script: \\\" + scripts[entry]);\\n\\t}\\n\\n\\t// Hack servers (!!! depth = 2 !!!) if needed and populate with scripts\\n\\tfor (let entry in servers) {\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== \\\"home\\\") {\\n\\t\\t\\t\\tns.tprint(\\\"----->   \\\" + subservers[subentry]);\\n\\t\\t\\t\\tif (!ns.hasRootAccess(subservers[subentry])) {\\n\\t\\t\\t\\t\\ttakeover(subservers[subentry]);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tns.tprint(\\\"copying scripts to \\\" + subservers[subentry]);\\n\\t\\t\\t\\tawait ns.scp(scripts, home, subservers[subentry]);\\n\\t\\t\\t\\t//await ns.scp(\\\"setup.ns\\\", home, subservers[subentry]);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (!ns.hasRootAccess(servers[entry])) {\\n\\t\\t\\ttakeover(servers[entry]);\\n\\t\\t}\\n\\t\\tns.tprint(\\\"copying scripts to \\\" + servers[entry]);\\n\\t\\tawait ns.scp(scripts, home, servers[entry]);\\n\\t\\t//await ns.scp(\\\"setup.ns\\\", home, servers[entry]);\\n\\t}\\n\\n\\t/** \\n\\t * \\tAttempts to take over target machine\\t\\n\\t * \\n\\t *  @param {string} tar\\n\\t *  @return {boolean} outcome \\n\\t**/\\n\\tasync function takeover(tar) {\\n\\t\\tlet currentTarget = tar;\\n\\t\\tlet isNotTakenOver = true;\\n\\t\\tlet attemptCounter = 0;\\n\\n\\t\\tif (ns.getServerNumPortsRequired <= 5 && attemptCounter < 50) {\\n\\t\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\n\\t\\t\\t\\tattemptCounter++;\\n\\t\\t\\t}\\n\\n\\t\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.15,\"server\":\"silver-helix\",\"moduleSequenceNumber\":1250,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}}],\"serversOnNetwork\":[\"nectar-net\",\"netlink\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":30,\"minDifficulty\":10,\"moneyAvailable\":45000000,\"moneyMax\":1125000000,\"numOpenPortsRequired\":2,\"openPortCount\":3,\"requiredHackingSkill\":150,\"serverGrowth\":30}},\"hong-fang-tea\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-850650.cct\",\"type\":\"Algorithmic Stock Trader I\",\"data\":[23,83,84,91,128,39,138],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"hong-fang-tea\",\"httpPortOpen\":false,\"ip\":\"86.9.1.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"brighter-than-the-sun.lit\"],\"organizationName\":\"HongFang Teahouse\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Returns an array of all hostnames in the network tree\\n * \\n * @param {string[]} myServers\\n * @param {number} safetyCounter Prevents infnite recursion\\n * @param {NS} ns\\n */\\nexport async function getServerList(myServers, safetyCounter, ns) {\\n\\tlet srvrsSeen = myServers;\\n\\tlet currServScanResult = [];\\n\\n\\tfor (let serverSeen in srvrsSeen) {\\n\\t\\tcurrServScanResult = ns.scan(srvrsSeen[serverSeen]);\\n\\t\\tfor (let entry in currServScanResult) {\\n\\t\\t\\tif (!srvrsSeen.includes(currServScanResult[entry])) {\\n\\t\\t\\t\\tsrvrsSeen.push(currServScanResult[entry]);\\n\\t\\t\\t\\tif ((++safetyCounter) < 250) {\\n\\t\\t\\t\\t\\tawait getServerList(srvrsSeen, safetyCounter, ns);\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tns.exit();\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\t//Filter out invalid values (NaN, null, {}, undefined)\\n\\tsrvrsSeen = srvrsSeen.filter(x => x);\\n\\treturn srvrsSeen;\\n}\\n\\n\\n/** \\n * \\tAttempts to take over target machine\\t\\n * \\n *  @param {string} target\\n * \\t@param {NS} ns\\n *  @return {boolean} outcome \\n**/\\nexport async function takeover(target, ns) {\\n\\tconst home = \\\"home\\\";\\n\\tlet currentTarget = target;\\n\\tlet isNotTakenOver = true;\\n\\tlet attemptCounter = 0;\\n\\n\\tlet scripts = ns.ls(home, \\\".js\\\");\\n\\t//scripts.push(ns.ls(home, \\\".ns\\\")); //in case of deprecated .ns scripts\\n\\n\\tif (!ns.hasRootAccess(currentTarget) && attemptCounter < 30) {\\n\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\ttry {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t} catch (error) {\\n\\t\\t\\t\\t\\tns.tprint(\\\"not enough ports to nuke \\\" + currentTarget);\\n\\t\\t\\t\\t\\treturn false;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t}\\n\\t\\t\\tattemptCounter++;\\n\\t\\t}\\n\\n\\t\\tawait ns.scp(scripts, home, currentTarget);\\n\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\",\"filename\":\"/modules/helper.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":1251,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.grow(target);\\n\\t}\\n}\",\"filename\":\"basic-grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":1252,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"basic-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":1253,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(target);\\n\\t}\\n}\",\"filename\":\"basic-weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":1254,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerList, takeover } from \\\"modules/helper.js\\\";\\n\\n/** @param {NS} ns **/\\n// TODO: unused + unfinished, based on setup.ns\\nexport async function main(ns) {\\n\\tconst myServers = [\\\"home\\\"];\\n\\n\\tvar servers = await getServerList(myServers, 0, ns);\\n\\n\\tfor (let entry in servers) {\\t\\n\\t\\tawait takeover(servers[entry], ns);\\n\\t}\\n}\",\"filename\":\"deep-setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":1255,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\t//\\n}\",\"filename\":\"formulas-testing.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":1256,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tconst currentMachine = ns.getHostname();\\n\\tvar servers = ns.scan(currentMachine);\\n\\tvar scripts = ns.ls(home, \\\"basic-\\\");\\n\\n\\tns.tprint(\\\"Host:  \\\" + currentMachine);\\n\\tfor (let entry in servers) {\\t// depth 0\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\t// depth 1\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== home && subservers.length > 1) {\\n\\t\\t\\t\\tns.tprint(\\\"-----> \\\" + subservers[subentry]);\\n\\t\\t\\t\\tlet subserversd2 = ns.scan(subservers[subentry]); // depth 2\\n\\t\\t\\t\\tfor (let subentryd2 in subserversd2) {\\n\\t\\t\\t\\t\\tif (subserversd2[subentryd2] !== subservers[subentry] && subserversd2[subentryd2] !== servers[entry] && subserversd2.length > 1) {\\n\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------> \\\" + subserversd2[subentryd2]);\\n\\t\\t\\t\\t\\t\\tlet subserversd3 = ns.scan(subserversd2[subentryd2]);\\t// depth 3\\n\\t\\t\\t\\t\\t\\tfor (let subentryd3 in subserversd3) {\\n\\t\\t\\t\\t\\t\\t\\tif (subserversd3[subentryd3] !== subserversd2[subentryd2] && subserversd3[subentryd3] !== subservers[subentry] && subserversd3.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------> \\\" + subserversd3[subentryd3]);\\n\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd4 = ns.scan(subserversd3[subentryd3]);\\t// depth 4\\n\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd4 in subserversd4) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd4[subentryd4] !== subserversd3[subentryd3] && subserversd4[subentryd4] !== subserversd2[subentryd2] && subserversd4.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------------> \\\" + subserversd4[subentryd4]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd5 = ns.scan(subserversd4[subentryd4]);\\t// depth 5\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd5 in subserversd5) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd5[subentryd5] !== subserversd4[subentryd4] && subserversd5[subentryd5] !== subserversd3[subentryd3] && subserversd5.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-------------------------> \\\" + subserversd5[subentryd5]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd6 = ns.scan(subserversd5[subentryd5]);\\t// depth 6\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd6 in subserversd6) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd6[subentryd6] !== subserversd5[subentryd5] && subserversd6[subentryd6] !== subserversd4[subentryd4] && subserversd6.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"------------------------------> \\\" + subserversd6[subentryd6]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd7 = ns.scan(subserversd6[subentryd6]);\\t// depth 7\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor(let subentryd7 in subserversd7) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd7[subentryd7] !== subserversd6[subentryd6] && subserversd7[subentryd7] !== subserversd5[subentryd5] && subserversd7.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-----------------------------------> \\\" + subserversd7[subentryd7]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"gigascan.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.05,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":1257,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet targetRam = ns.getServerMaxRam(ns.args[0]);\\n\\tlet scriptMem = ns.getScriptRam(ns.args[1]);\\n\\n\\tns.tprint(\\\"Maximum possible threads for \\\" + ns.args[1] + \\\": \\\" + Math.floor(targetRam / scriptMem));\\n\\tns.exit;\\n}\",\"filename\":\"ram-usage.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":1258,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerList } from \\\"modules/helper.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet serversSeen = [\\\"home\\\"]; // home + bought servers\\n\\tlet contractList = [];\\n\\n\\tserversSeen = await getServerList(serversSeen, 0, ns);\\n\\n\\tns.tprint(serversSeen);\\n}\",\"filename\":\"search-coding-contracts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":1259,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tvar servers = ns.scan(home);\\n\\tvar scripts = ns.ls(home, \\\".js\\\");\\n\\n\\tfor (let entry in scripts) {\\n\\t\\tns.tprint(\\\"found script: \\\" + scripts[entry]);\\n\\t}\\n\\n\\t// Hack servers (!!! depth = 2 !!!) if needed and populate with scripts\\n\\tfor (let entry in servers) {\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== \\\"home\\\") {\\n\\t\\t\\t\\tns.tprint(\\\"----->   \\\" + subservers[subentry]);\\n\\t\\t\\t\\tif (!ns.hasRootAccess(subservers[subentry])) {\\n\\t\\t\\t\\t\\ttakeover(subservers[subentry]);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tns.tprint(\\\"copying scripts to \\\" + subservers[subentry]);\\n\\t\\t\\t\\tawait ns.scp(scripts, home, subservers[subentry]);\\n\\t\\t\\t\\t//await ns.scp(\\\"setup.ns\\\", home, subservers[subentry]);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (!ns.hasRootAccess(servers[entry])) {\\n\\t\\t\\ttakeover(servers[entry]);\\n\\t\\t}\\n\\t\\tns.tprint(\\\"copying scripts to \\\" + servers[entry]);\\n\\t\\tawait ns.scp(scripts, home, servers[entry]);\\n\\t\\t//await ns.scp(\\\"setup.ns\\\", home, servers[entry]);\\n\\t}\\n\\n\\t/** \\n\\t * \\tAttempts to take over target machine\\t\\n\\t * \\n\\t *  @param {string} tar\\n\\t *  @return {boolean} outcome \\n\\t**/\\n\\tasync function takeover(tar) {\\n\\t\\tlet currentTarget = tar;\\n\\t\\tlet isNotTakenOver = true;\\n\\t\\tlet attemptCounter = 0;\\n\\n\\t\\tif (ns.getServerNumPortsRequired <= 5 && attemptCounter < 50) {\\n\\t\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\n\\t\\t\\t\\tattemptCounter++;\\n\\t\\t\\t}\\n\\n\\t\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.15,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":1260,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}}],\"serversOnNetwork\":[\"home\",\"zer0\",\"CSEC\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":15,\"minDifficulty\":5,\"moneyAvailable\":3000000,\"moneyMax\":75000000,\"numOpenPortsRequired\":0,\"openPortCount\":3,\"requiredHackingSkill\":30,\"serverGrowth\":20}},\"harakiri-sushi\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-418339-Netburners.cct\",\"type\":\"Spiralize Matrix\",\"data\":[[33,42,30,36,44,16,46,35,47,41,50,39,42],[29,38,15,12,34,9,5,6,34,30,3,33,1],[39,43,21,21,41,39,31,15,42,4,8,16,46],[12,1,48,24,45,38,24,1,28,40,24,36,40],[40,4,47,25,24,4,34,36,39,15,29,36,35],[49,3,2,19,47,41,25,50,7,37,47,28,48],[39,40,6,41,15,17,43,42,13,8,6,26,27],[35,27,14,20,3,25,49,28,5,4,36,45,32]],\"reward\":{\"name\":\"Netburners\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"harakiri-sushi\",\"httpPortOpen\":false,\"ip\":\"63.8.6.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"HaraKiri Sushi Bar Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Returns an array of all hostnames in the network tree\\n * \\n * @param {string[]} myServers\\n * @param {number} safetyCounter Prevents infnite recursion\\n * @param {NS} ns\\n */\\nexport async function getServerList(myServers, safetyCounter, ns) {\\n\\tlet srvrsSeen = myServers;\\n\\tlet currServScanResult = [];\\n\\n\\tfor (let serverSeen in srvrsSeen) {\\n\\t\\tcurrServScanResult = ns.scan(srvrsSeen[serverSeen]);\\n\\t\\tfor (let entry in currServScanResult) {\\n\\t\\t\\tif (!srvrsSeen.includes(currServScanResult[entry])) {\\n\\t\\t\\t\\tsrvrsSeen.push(currServScanResult[entry]);\\n\\t\\t\\t\\tif ((++safetyCounter) < 250) {\\n\\t\\t\\t\\t\\tawait getServerList(srvrsSeen, safetyCounter, ns);\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tns.exit();\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\t//Filter out invalid values (NaN, null, {}, undefined)\\n\\tsrvrsSeen = srvrsSeen.filter(x => x);\\n\\treturn srvrsSeen;\\n}\\n\\n\\n/** \\n * \\tAttempts to take over target machine\\t\\n * \\n *  @param {string} target\\n * \\t@param {NS} ns\\n *  @return {boolean} outcome \\n**/\\nexport async function takeover(target, ns) {\\n\\tconst home = \\\"home\\\";\\n\\tlet currentTarget = target;\\n\\tlet isNotTakenOver = true;\\n\\tlet attemptCounter = 0;\\n\\n\\tlet scripts = ns.ls(home, \\\".js\\\");\\n\\t//scripts.push(ns.ls(home, \\\".ns\\\")); //in case of deprecated .ns scripts\\n\\n\\tif (!ns.hasRootAccess(currentTarget) && attemptCounter < 30) {\\n\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\ttry {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t} catch (error) {\\n\\t\\t\\t\\t\\tns.tprint(\\\"not enough ports to nuke \\\" + currentTarget);\\n\\t\\t\\t\\t\\treturn false;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t}\\n\\t\\t\\tattemptCounter++;\\n\\t\\t}\\n\\n\\t\\tawait ns.scp(scripts, home, currentTarget);\\n\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\",\"filename\":\"/modules/helper.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":1261,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.grow(target);\\n\\t}\\n}\",\"filename\":\"basic-grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":1262,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"basic-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":1263,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(target);\\n\\t}\\n}\",\"filename\":\"basic-weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":1264,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerList, takeover } from \\\"modules/helper.js\\\";\\n\\n/** @param {NS} ns **/\\n// TODO: unused + unfinished, based on setup.ns\\nexport async function main(ns) {\\n\\tconst myServers = [\\\"home\\\"];\\n\\n\\tvar servers = await getServerList(myServers, 0, ns);\\n\\n\\tfor (let entry in servers) {\\t\\n\\t\\tawait takeover(servers[entry], ns);\\n\\t}\\n}\",\"filename\":\"deep-setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":1265,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\t//\\n}\",\"filename\":\"formulas-testing.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":1266,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tconst currentMachine = ns.getHostname();\\n\\tvar servers = ns.scan(currentMachine);\\n\\tvar scripts = ns.ls(home, \\\"basic-\\\");\\n\\n\\tns.tprint(\\\"Host:  \\\" + currentMachine);\\n\\tfor (let entry in servers) {\\t// depth 0\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\t// depth 1\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== home && subservers.length > 1) {\\n\\t\\t\\t\\tns.tprint(\\\"-----> \\\" + subservers[subentry]);\\n\\t\\t\\t\\tlet subserversd2 = ns.scan(subservers[subentry]); // depth 2\\n\\t\\t\\t\\tfor (let subentryd2 in subserversd2) {\\n\\t\\t\\t\\t\\tif (subserversd2[subentryd2] !== subservers[subentry] && subserversd2[subentryd2] !== servers[entry] && subserversd2.length > 1) {\\n\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------> \\\" + subserversd2[subentryd2]);\\n\\t\\t\\t\\t\\t\\tlet subserversd3 = ns.scan(subserversd2[subentryd2]);\\t// depth 3\\n\\t\\t\\t\\t\\t\\tfor (let subentryd3 in subserversd3) {\\n\\t\\t\\t\\t\\t\\t\\tif (subserversd3[subentryd3] !== subserversd2[subentryd2] && subserversd3[subentryd3] !== subservers[subentry] && subserversd3.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------> \\\" + subserversd3[subentryd3]);\\n\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd4 = ns.scan(subserversd3[subentryd3]);\\t// depth 4\\n\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd4 in subserversd4) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd4[subentryd4] !== subserversd3[subentryd3] && subserversd4[subentryd4] !== subserversd2[subentryd2] && subserversd4.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------------> \\\" + subserversd4[subentryd4]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd5 = ns.scan(subserversd4[subentryd4]);\\t// depth 5\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd5 in subserversd5) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd5[subentryd5] !== subserversd4[subentryd4] && subserversd5[subentryd5] !== subserversd3[subentryd3] && subserversd5.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-------------------------> \\\" + subserversd5[subentryd5]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd6 = ns.scan(subserversd5[subentryd5]);\\t// depth 6\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd6 in subserversd6) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd6[subentryd6] !== subserversd5[subentryd5] && subserversd6[subentryd6] !== subserversd4[subentryd4] && subserversd6.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"------------------------------> \\\" + subserversd6[subentryd6]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd7 = ns.scan(subserversd6[subentryd6]);\\t// depth 7\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor(let subentryd7 in subserversd7) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd7[subentryd7] !== subserversd6[subentryd6] && subserversd7[subentryd7] !== subserversd5[subentryd5] && subserversd7.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-----------------------------------> \\\" + subserversd7[subentryd7]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"gigascan.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.05,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":1267,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet targetRam = ns.getServerMaxRam(ns.args[0]);\\n\\tlet scriptMem = ns.getScriptRam(ns.args[1]);\\n\\n\\tns.tprint(\\\"Maximum possible threads for \\\" + ns.args[1] + \\\": \\\" + Math.floor(targetRam / scriptMem));\\n\\tns.exit;\\n}\",\"filename\":\"ram-usage.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":1268,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerList } from \\\"modules/helper.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet serversSeen = [\\\"home\\\"]; // home + bought servers\\n\\tlet contractList = [];\\n\\n\\tserversSeen = await getServerList(serversSeen, 0, ns);\\n\\n\\tns.tprint(serversSeen);\\n}\",\"filename\":\"search-coding-contracts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":1269,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tvar servers = ns.scan(home);\\n\\tvar scripts = ns.ls(home, \\\".js\\\");\\n\\n\\tfor (let entry in scripts) {\\n\\t\\tns.tprint(\\\"found script: \\\" + scripts[entry]);\\n\\t}\\n\\n\\t// Hack servers (!!! depth = 2 !!!) if needed and populate with scripts\\n\\tfor (let entry in servers) {\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== \\\"home\\\") {\\n\\t\\t\\t\\tns.tprint(\\\"----->   \\\" + subservers[subentry]);\\n\\t\\t\\t\\tif (!ns.hasRootAccess(subservers[subentry])) {\\n\\t\\t\\t\\t\\ttakeover(subservers[subentry]);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tns.tprint(\\\"copying scripts to \\\" + subservers[subentry]);\\n\\t\\t\\t\\tawait ns.scp(scripts, home, subservers[subentry]);\\n\\t\\t\\t\\t//await ns.scp(\\\"setup.ns\\\", home, subservers[subentry]);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (!ns.hasRootAccess(servers[entry])) {\\n\\t\\t\\ttakeover(servers[entry]);\\n\\t\\t}\\n\\t\\tns.tprint(\\\"copying scripts to \\\" + servers[entry]);\\n\\t\\tawait ns.scp(scripts, home, servers[entry]);\\n\\t\\t//await ns.scp(\\\"setup.ns\\\", home, servers[entry]);\\n\\t}\\n\\n\\t/** \\n\\t * \\tAttempts to take over target machine\\t\\n\\t * \\n\\t *  @param {string} tar\\n\\t *  @return {boolean} outcome \\n\\t**/\\n\\tasync function takeover(tar) {\\n\\t\\tlet currentTarget = tar;\\n\\t\\tlet isNotTakenOver = true;\\n\\t\\tlet attemptCounter = 0;\\n\\n\\t\\tif (ns.getServerNumPortsRequired <= 5 && attemptCounter < 50) {\\n\\t\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\n\\t\\t\\t\\tattemptCounter++;\\n\\t\\t\\t}\\n\\n\\t\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.15,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":1270,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":15,\"minDifficulty\":5,\"moneyAvailable\":4000000,\"moneyMax\":100000000,\"numOpenPortsRequired\":0,\"openPortCount\":3,\"requiredHackingSkill\":40,\"serverGrowth\":40}},\"phantasy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"phantasy\",\"httpPortOpen\":false,\"ip\":\"99.2.3.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Phantasy Club\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Returns an array of all hostnames in the network tree\\n * \\n * @param {string[]} myServers\\n * @param {number} safetyCounter Prevents infnite recursion\\n * @param {NS} ns\\n */\\nexport async function getServerList(myServers, safetyCounter, ns) {\\n\\tlet srvrsSeen = myServers;\\n\\tlet currServScanResult = [];\\n\\n\\tfor (let serverSeen in srvrsSeen) {\\n\\t\\tcurrServScanResult = ns.scan(srvrsSeen[serverSeen]);\\n\\t\\tfor (let entry in currServScanResult) {\\n\\t\\t\\tif (!srvrsSeen.includes(currServScanResult[entry])) {\\n\\t\\t\\t\\tsrvrsSeen.push(currServScanResult[entry]);\\n\\t\\t\\t\\tif ((++safetyCounter) < 250) {\\n\\t\\t\\t\\t\\tawait getServerList(srvrsSeen, safetyCounter, ns);\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tns.exit();\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\t//Filter out invalid values (NaN, null, {}, undefined)\\n\\tsrvrsSeen = srvrsSeen.filter(x => x);\\n\\treturn srvrsSeen;\\n}\\n\\n\\n/** \\n * \\tAttempts to take over target machine\\t\\n * \\n *  @param {string} target\\n * \\t@param {NS} ns\\n *  @return {boolean} outcome \\n**/\\nexport async function takeover(target, ns) {\\n\\tconst home = \\\"home\\\";\\n\\tlet currentTarget = target;\\n\\tlet isNotTakenOver = true;\\n\\tlet attemptCounter = 0;\\n\\n\\tlet scripts = ns.ls(home, \\\".js\\\");\\n\\t//scripts.push(ns.ls(home, \\\".ns\\\")); //in case of deprecated .ns scripts\\n\\n\\tif (!ns.hasRootAccess(currentTarget) && attemptCounter < 30) {\\n\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\ttry {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t} catch (error) {\\n\\t\\t\\t\\t\\tns.tprint(\\\"not enough ports to nuke \\\" + currentTarget);\\n\\t\\t\\t\\t\\treturn false;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t}\\n\\t\\t\\tattemptCounter++;\\n\\t\\t}\\n\\n\\t\\tawait ns.scp(scripts, home, currentTarget);\\n\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\",\"filename\":\"/modules/helper.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"phantasy\",\"moduleSequenceNumber\":1271,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.grow(target);\\n\\t}\\n}\",\"filename\":\"basic-grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"phantasy\",\"moduleSequenceNumber\":1272,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"basic-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"phantasy\",\"moduleSequenceNumber\":1273,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(target);\\n\\t}\\n}\",\"filename\":\"basic-weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"phantasy\",\"moduleSequenceNumber\":1274,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerList, takeover } from \\\"modules/helper.js\\\";\\n\\n/** @param {NS} ns **/\\n// TODO: unused + unfinished, based on setup.ns\\nexport async function main(ns) {\\n\\tconst myServers = [\\\"home\\\"];\\n\\n\\tvar servers = await getServerList(myServers, 0, ns);\\n\\n\\tfor (let entry in servers) {\\t\\n\\t\\tawait takeover(servers[entry], ns);\\n\\t}\\n}\",\"filename\":\"deep-setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"phantasy\",\"moduleSequenceNumber\":1275,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\t//\\n}\",\"filename\":\"formulas-testing.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"phantasy\",\"moduleSequenceNumber\":1276,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tconst currentMachine = ns.getHostname();\\n\\tvar servers = ns.scan(currentMachine);\\n\\tvar scripts = ns.ls(home, \\\"basic-\\\");\\n\\n\\tns.tprint(\\\"Host:  \\\" + currentMachine);\\n\\tfor (let entry in servers) {\\t// depth 0\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\t// depth 1\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== home && subservers.length > 1) {\\n\\t\\t\\t\\tns.tprint(\\\"-----> \\\" + subservers[subentry]);\\n\\t\\t\\t\\tlet subserversd2 = ns.scan(subservers[subentry]); // depth 2\\n\\t\\t\\t\\tfor (let subentryd2 in subserversd2) {\\n\\t\\t\\t\\t\\tif (subserversd2[subentryd2] !== subservers[subentry] && subserversd2[subentryd2] !== servers[entry] && subserversd2.length > 1) {\\n\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------> \\\" + subserversd2[subentryd2]);\\n\\t\\t\\t\\t\\t\\tlet subserversd3 = ns.scan(subserversd2[subentryd2]);\\t// depth 3\\n\\t\\t\\t\\t\\t\\tfor (let subentryd3 in subserversd3) {\\n\\t\\t\\t\\t\\t\\t\\tif (subserversd3[subentryd3] !== subserversd2[subentryd2] && subserversd3[subentryd3] !== subservers[subentry] && subserversd3.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------> \\\" + subserversd3[subentryd3]);\\n\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd4 = ns.scan(subserversd3[subentryd3]);\\t// depth 4\\n\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd4 in subserversd4) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd4[subentryd4] !== subserversd3[subentryd3] && subserversd4[subentryd4] !== subserversd2[subentryd2] && subserversd4.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------------> \\\" + subserversd4[subentryd4]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd5 = ns.scan(subserversd4[subentryd4]);\\t// depth 5\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd5 in subserversd5) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd5[subentryd5] !== subserversd4[subentryd4] && subserversd5[subentryd5] !== subserversd3[subentryd3] && subserversd5.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-------------------------> \\\" + subserversd5[subentryd5]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd6 = ns.scan(subserversd5[subentryd5]);\\t// depth 6\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd6 in subserversd6) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd6[subentryd6] !== subserversd5[subentryd5] && subserversd6[subentryd6] !== subserversd4[subentryd4] && subserversd6.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"------------------------------> \\\" + subserversd6[subentryd6]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd7 = ns.scan(subserversd6[subentryd6]);\\t// depth 7\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor(let subentryd7 in subserversd7) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd7[subentryd7] !== subserversd6[subentryd6] && subserversd7[subentryd7] !== subserversd5[subentryd5] && subserversd7.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-----------------------------------> \\\" + subserversd7[subentryd7]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"gigascan.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.05,\"server\":\"phantasy\",\"moduleSequenceNumber\":1277,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet targetRam = ns.getServerMaxRam(ns.args[0]);\\n\\tlet scriptMem = ns.getScriptRam(ns.args[1]);\\n\\n\\tns.tprint(\\\"Maximum possible threads for \\\" + ns.args[1] + \\\": \\\" + Math.floor(targetRam / scriptMem));\\n\\tns.exit;\\n}\",\"filename\":\"ram-usage.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"phantasy\",\"moduleSequenceNumber\":1278,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerList } from \\\"modules/helper.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet serversSeen = [\\\"home\\\"]; // home + bought servers\\n\\tlet contractList = [];\\n\\n\\tserversSeen = await getServerList(serversSeen, 0, ns);\\n\\n\\tns.tprint(serversSeen);\\n}\",\"filename\":\"search-coding-contracts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"phantasy\",\"moduleSequenceNumber\":1279,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tvar servers = ns.scan(home);\\n\\tvar scripts = ns.ls(home, \\\".ns\\\");\\n\\n\\tfor (let entry in scripts) {\\n\\t\\tns.tprint(\\\"found script: \\\" + scripts[entry]);\\n\\t}\\n\\n\\t// Hack servers (!!! depth = 2 !!!) if needed and populate with scripts\\n\\tfor (let entry in servers) {\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== \\\"home\\\") {\\n\\t\\t\\t\\tns.tprint(\\\"----->   \\\" + subservers[subentry]);\\n\\t\\t\\t\\tif (!ns.hasRootAccess(subservers[subentry])) {\\n\\t\\t\\t\\t\\ttakeover(subservers[subentry]);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tns.tprint(\\\"copying scripts to \\\" + subservers[subentry]);\\n\\t\\t\\t\\tawait ns.scp(scripts, home, subservers[subentry]);\\n\\t\\t\\t\\t//await ns.scp(\\\"setup.ns\\\", home, subservers[subentry]);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (!ns.hasRootAccess(servers[entry])) {\\n\\t\\t\\ttakeover(servers[entry]);\\n\\t\\t}\\n\\t\\tns.tprint(\\\"copying scripts to \\\" + servers[entry]);\\n\\t\\tawait ns.scp(scripts, home, servers[entry]);\\n\\t\\t//await ns.scp(\\\"setup.ns\\\", home, servers[entry]);\\n\\t}\\n\\n\\t/** \\n\\t * \\tAttempts to take over target machine\\t\\n\\t * \\n\\t *  @param {string} tar\\n\\t *  @return {boolean} outcome \\n\\t**/\\n\\tasync function takeover(tar) {\\n\\t\\tlet currentTarget = tar;\\n\\t\\tlet isNotTakenOver = true;\\n\\t\\tlet attemptCounter = 0;\\n\\n\\t\\tif (ns.getServerNumPortsRequired <= 5 && attemptCounter < 50) {\\n\\t\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\n\\t\\t\\t\\tattemptCounter++;\\n\\t\\t\\t}\\n\\n\\t\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.15,\"server\":\"phantasy\",\"moduleSequenceNumber\":1280,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}}],\"serversOnNetwork\":[\"nectar-net\",\"comptek\",\"avmnite-02h\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":20,\"minDifficulty\":7,\"moneyAvailable\":24000000,\"moneyMax\":600000000,\"numOpenPortsRequired\":2,\"openPortCount\":3,\"requiredHackingSkill\":100,\"serverGrowth\":35}},\"max-hardware\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"max-hardware\",\"httpPortOpen\":false,\"ip\":\"48.6.9.8\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Max Hardware Store\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Returns an array of all hostnames in the network tree\\n * \\n * @param {string[]} myServers\\n * @param {number} safetyCounter Prevents infnite recursion\\n * @param {NS} ns\\n */\\nexport async function getServerList(myServers, safetyCounter, ns) {\\n\\tlet srvrsSeen = myServers;\\n\\tlet currServScanResult = [];\\n\\n\\tfor (let serverSeen in srvrsSeen) {\\n\\t\\tcurrServScanResult = ns.scan(srvrsSeen[serverSeen]);\\n\\t\\tfor (let entry in currServScanResult) {\\n\\t\\t\\tif (!srvrsSeen.includes(currServScanResult[entry])) {\\n\\t\\t\\t\\tsrvrsSeen.push(currServScanResult[entry]);\\n\\t\\t\\t\\tif ((++safetyCounter) < 250) {\\n\\t\\t\\t\\t\\tawait getServerList(srvrsSeen, safetyCounter, ns);\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tns.exit();\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\t//Filter out invalid values (NaN, null, {}, undefined)\\n\\tsrvrsSeen = srvrsSeen.filter(x => x);\\n\\treturn srvrsSeen;\\n}\\n\\n\\n/** \\n * \\tAttempts to take over target machine\\t\\n * \\n *  @param {string} target\\n * \\t@param {NS} ns\\n *  @return {boolean} outcome \\n**/\\nexport async function takeover(target, ns) {\\n\\tconst home = \\\"home\\\";\\n\\tlet currentTarget = target;\\n\\tlet isNotTakenOver = true;\\n\\tlet attemptCounter = 0;\\n\\n\\tlet scripts = ns.ls(home, \\\".js\\\");\\n\\t//scripts.push(ns.ls(home, \\\".ns\\\")); //in case of deprecated .ns scripts\\n\\n\\tif (!ns.hasRootAccess(currentTarget) && attemptCounter < 30) {\\n\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\ttry {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t} catch (error) {\\n\\t\\t\\t\\t\\tns.tprint(\\\"not enough ports to nuke \\\" + currentTarget);\\n\\t\\t\\t\\t\\treturn false;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t}\\n\\t\\t\\tattemptCounter++;\\n\\t\\t}\\n\\n\\t\\tawait ns.scp(scripts, home, currentTarget);\\n\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\",\"filename\":\"/modules/helper.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"max-hardware\",\"moduleSequenceNumber\":1281,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.grow(target);\\n\\t}\\n}\",\"filename\":\"basic-grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"max-hardware\",\"moduleSequenceNumber\":1282,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"basic-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"max-hardware\",\"moduleSequenceNumber\":1283,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(target);\\n\\t}\\n}\",\"filename\":\"basic-weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"max-hardware\",\"moduleSequenceNumber\":1284,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerList, takeover } from \\\"modules/helper.js\\\";\\n\\n/** @param {NS} ns **/\\n// TODO: unused + unfinished, based on setup.ns\\nexport async function main(ns) {\\n\\tconst myServers = [\\\"home\\\"];\\n\\n\\tvar servers = await getServerList(myServers, 0, ns);\\n\\n\\tfor (let entry in servers) {\\t\\n\\t\\tawait takeover(servers[entry], ns);\\n\\t}\\n}\",\"filename\":\"deep-setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"max-hardware\",\"moduleSequenceNumber\":1285,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\t//\\n}\",\"filename\":\"formulas-testing.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"max-hardware\",\"moduleSequenceNumber\":1286,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tconst currentMachine = ns.getHostname();\\n\\tvar servers = ns.scan(currentMachine);\\n\\tvar scripts = ns.ls(home, \\\"basic-\\\");\\n\\n\\tns.tprint(\\\"Host:  \\\" + currentMachine);\\n\\tfor (let entry in servers) {\\t// depth 0\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\t// depth 1\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== home && subservers.length > 1) {\\n\\t\\t\\t\\tns.tprint(\\\"-----> \\\" + subservers[subentry]);\\n\\t\\t\\t\\tlet subserversd2 = ns.scan(subservers[subentry]); // depth 2\\n\\t\\t\\t\\tfor (let subentryd2 in subserversd2) {\\n\\t\\t\\t\\t\\tif (subserversd2[subentryd2] !== subservers[subentry] && subserversd2[subentryd2] !== servers[entry] && subserversd2.length > 1) {\\n\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------> \\\" + subserversd2[subentryd2]);\\n\\t\\t\\t\\t\\t\\tlet subserversd3 = ns.scan(subserversd2[subentryd2]);\\t// depth 3\\n\\t\\t\\t\\t\\t\\tfor (let subentryd3 in subserversd3) {\\n\\t\\t\\t\\t\\t\\t\\tif (subserversd3[subentryd3] !== subserversd2[subentryd2] && subserversd3[subentryd3] !== subservers[subentry] && subserversd3.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------> \\\" + subserversd3[subentryd3]);\\n\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd4 = ns.scan(subserversd3[subentryd3]);\\t// depth 4\\n\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd4 in subserversd4) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd4[subentryd4] !== subserversd3[subentryd3] && subserversd4[subentryd4] !== subserversd2[subentryd2] && subserversd4.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------------> \\\" + subserversd4[subentryd4]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd5 = ns.scan(subserversd4[subentryd4]);\\t// depth 5\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd5 in subserversd5) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd5[subentryd5] !== subserversd4[subentryd4] && subserversd5[subentryd5] !== subserversd3[subentryd3] && subserversd5.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-------------------------> \\\" + subserversd5[subentryd5]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd6 = ns.scan(subserversd5[subentryd5]);\\t// depth 6\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd6 in subserversd6) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd6[subentryd6] !== subserversd5[subentryd5] && subserversd6[subentryd6] !== subserversd4[subentryd4] && subserversd6.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"------------------------------> \\\" + subserversd6[subentryd6]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd7 = ns.scan(subserversd6[subentryd6]);\\t// depth 7\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor(let subentryd7 in subserversd7) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd7[subentryd7] !== subserversd6[subentryd6] && subserversd7[subentryd7] !== subserversd5[subentryd5] && subserversd7.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-----------------------------------> \\\" + subserversd7[subentryd7]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"gigascan.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.05,\"server\":\"max-hardware\",\"moduleSequenceNumber\":1287,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet targetRam = ns.getServerMaxRam(ns.args[0]);\\n\\tlet scriptMem = ns.getScriptRam(ns.args[1]);\\n\\n\\tns.tprint(\\\"Maximum possible threads for \\\" + ns.args[1] + \\\": \\\" + Math.floor(targetRam / scriptMem));\\n\\tns.exit;\\n}\",\"filename\":\"ram-usage.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"max-hardware\",\"moduleSequenceNumber\":1288,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerList } from \\\"modules/helper.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet serversSeen = [\\\"home\\\"]; // home + bought servers\\n\\tlet contractList = [];\\n\\n\\tserversSeen = await getServerList(serversSeen, 0, ns);\\n\\n\\tns.tprint(serversSeen);\\n}\",\"filename\":\"search-coding-contracts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"max-hardware\",\"moduleSequenceNumber\":1289,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tvar servers = ns.scan(home);\\n\\tvar scripts = ns.ls(home, \\\".js\\\");\\n\\n\\tfor (let entry in scripts) {\\n\\t\\tns.tprint(\\\"found script: \\\" + scripts[entry]);\\n\\t}\\n\\n\\t// Hack servers (!!! depth = 2 !!!) if needed and populate with scripts\\n\\tfor (let entry in servers) {\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== \\\"home\\\") {\\n\\t\\t\\t\\tns.tprint(\\\"----->   \\\" + subservers[subentry]);\\n\\t\\t\\t\\tif (!ns.hasRootAccess(subservers[subentry])) {\\n\\t\\t\\t\\t\\ttakeover(subservers[subentry]);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tns.tprint(\\\"copying scripts to \\\" + subservers[subentry]);\\n\\t\\t\\t\\tawait ns.scp(scripts, home, subservers[subentry]);\\n\\t\\t\\t\\t//await ns.scp(\\\"setup.ns\\\", home, subservers[subentry]);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (!ns.hasRootAccess(servers[entry])) {\\n\\t\\t\\ttakeover(servers[entry]);\\n\\t\\t}\\n\\t\\tns.tprint(\\\"copying scripts to \\\" + servers[entry]);\\n\\t\\tawait ns.scp(scripts, home, servers[entry]);\\n\\t\\t//await ns.scp(\\\"setup.ns\\\", home, servers[entry]);\\n\\t}\\n\\n\\t/** \\n\\t * \\tAttempts to take over target machine\\t\\n\\t * \\n\\t *  @param {string} tar\\n\\t *  @return {boolean} outcome \\n\\t**/\\n\\tasync function takeover(tar) {\\n\\t\\tlet currentTarget = tar;\\n\\t\\tlet isNotTakenOver = true;\\n\\t\\tlet attemptCounter = 0;\\n\\n\\t\\tif (ns.getServerNumPortsRequired <= 5 && attemptCounter < 50) {\\n\\t\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\n\\t\\t\\t\\tattemptCounter++;\\n\\t\\t\\t}\\n\\n\\t\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.15,\"server\":\"max-hardware\",\"moduleSequenceNumber\":1290,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}}],\"serversOnNetwork\":[\"n00dles\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":15,\"minDifficulty\":5,\"moneyAvailable\":10000000,\"moneyMax\":250000000,\"numOpenPortsRequired\":1,\"openPortCount\":3,\"requiredHackingSkill\":80,\"serverGrowth\":30}},\"omega-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-703642-Netburners.cct\",\"type\":\"Subarray with Maximum Sum\",\"data\":[-1,6,4,5,-4,-5,-10,4,1,10,8,0,-4,-8,1,-1,4,0,8,-2,-8,7,-10,-4,10,3,0,1,3,3,9,-1,-4,-3,7],\"reward\":{\"name\":\"Netburners\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omega-net\",\"httpPortOpen\":false,\"ip\":\"18.7.9.7\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-new-god.lit\"],\"organizationName\":\"Omega Software\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Returns an array of all hostnames in the network tree\\n * \\n * @param {string[]} myServers\\n * @param {number} safetyCounter Prevents infnite recursion\\n * @param {NS} ns\\n */\\nexport async function getServerList(myServers, safetyCounter, ns) {\\n\\tlet srvrsSeen = myServers;\\n\\tlet currServScanResult = [];\\n\\n\\tfor (let serverSeen in srvrsSeen) {\\n\\t\\tcurrServScanResult = ns.scan(srvrsSeen[serverSeen]);\\n\\t\\tfor (let entry in currServScanResult) {\\n\\t\\t\\tif (!srvrsSeen.includes(currServScanResult[entry])) {\\n\\t\\t\\t\\tsrvrsSeen.push(currServScanResult[entry]);\\n\\t\\t\\t\\tif ((++safetyCounter) < 250) {\\n\\t\\t\\t\\t\\tawait getServerList(srvrsSeen, safetyCounter, ns);\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tns.exit();\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\t//Filter out invalid values (NaN, null, {}, undefined)\\n\\tsrvrsSeen = srvrsSeen.filter(x => x);\\n\\treturn srvrsSeen;\\n}\\n\\n\\n/** \\n * \\tAttempts to take over target machine\\t\\n * \\n *  @param {string} target\\n * \\t@param {NS} ns\\n *  @return {boolean} outcome \\n**/\\nexport async function takeover(target, ns) {\\n\\tconst home = \\\"home\\\";\\n\\tlet currentTarget = target;\\n\\tlet isNotTakenOver = true;\\n\\tlet attemptCounter = 0;\\n\\n\\tlet scripts = ns.ls(home, \\\".js\\\");\\n\\t//scripts.push(ns.ls(home, \\\".ns\\\")); //in case of deprecated .ns scripts\\n\\n\\tif (!ns.hasRootAccess(currentTarget) && attemptCounter < 30) {\\n\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\ttry {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t} catch (error) {\\n\\t\\t\\t\\t\\tns.tprint(\\\"not enough ports to nuke \\\" + currentTarget);\\n\\t\\t\\t\\t\\treturn false;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t}\\n\\t\\t\\tattemptCounter++;\\n\\t\\t}\\n\\n\\t\\tawait ns.scp(scripts, home, currentTarget);\\n\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\",\"filename\":\"/modules/helper.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"omega-net\",\"moduleSequenceNumber\":1291,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.grow(target);\\n\\t}\\n}\",\"filename\":\"basic-grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"omega-net\",\"moduleSequenceNumber\":1292,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"basic-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"omega-net\",\"moduleSequenceNumber\":1293,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(target);\\n\\t}\\n}\",\"filename\":\"basic-weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"omega-net\",\"moduleSequenceNumber\":1294,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerList, takeover } from \\\"modules/helper.js\\\";\\n\\n/** @param {NS} ns **/\\n// TODO: unused + unfinished, based on setup.ns\\nexport async function main(ns) {\\n\\tconst myServers = [\\\"home\\\"];\\n\\n\\tvar servers = await getServerList(myServers, 0, ns);\\n\\n\\tfor (let entry in servers) {\\t\\n\\t\\tawait takeover(servers[entry], ns);\\n\\t}\\n}\",\"filename\":\"deep-setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"omega-net\",\"moduleSequenceNumber\":1295,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\t//\\n}\",\"filename\":\"formulas-testing.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"omega-net\",\"moduleSequenceNumber\":1296,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tconst currentMachine = ns.getHostname();\\n\\tvar servers = ns.scan(currentMachine);\\n\\tvar scripts = ns.ls(home, \\\"basic-\\\");\\n\\n\\tns.tprint(\\\"Host:  \\\" + currentMachine);\\n\\tfor (let entry in servers) {\\t// depth 0\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\t// depth 1\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== home && subservers.length > 1) {\\n\\t\\t\\t\\tns.tprint(\\\"-----> \\\" + subservers[subentry]);\\n\\t\\t\\t\\tlet subserversd2 = ns.scan(subservers[subentry]); // depth 2\\n\\t\\t\\t\\tfor (let subentryd2 in subserversd2) {\\n\\t\\t\\t\\t\\tif (subserversd2[subentryd2] !== subservers[subentry] && subserversd2[subentryd2] !== servers[entry] && subserversd2.length > 1) {\\n\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------> \\\" + subserversd2[subentryd2]);\\n\\t\\t\\t\\t\\t\\tlet subserversd3 = ns.scan(subserversd2[subentryd2]);\\t// depth 3\\n\\t\\t\\t\\t\\t\\tfor (let subentryd3 in subserversd3) {\\n\\t\\t\\t\\t\\t\\t\\tif (subserversd3[subentryd3] !== subserversd2[subentryd2] && subserversd3[subentryd3] !== subservers[subentry] && subserversd3.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------> \\\" + subserversd3[subentryd3]);\\n\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd4 = ns.scan(subserversd3[subentryd3]);\\t// depth 4\\n\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd4 in subserversd4) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd4[subentryd4] !== subserversd3[subentryd3] && subserversd4[subentryd4] !== subserversd2[subentryd2] && subserversd4.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------------> \\\" + subserversd4[subentryd4]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd5 = ns.scan(subserversd4[subentryd4]);\\t// depth 5\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd5 in subserversd5) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd5[subentryd5] !== subserversd4[subentryd4] && subserversd5[subentryd5] !== subserversd3[subentryd3] && subserversd5.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-------------------------> \\\" + subserversd5[subentryd5]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd6 = ns.scan(subserversd5[subentryd5]);\\t// depth 6\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd6 in subserversd6) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd6[subentryd6] !== subserversd5[subentryd5] && subserversd6[subentryd6] !== subserversd4[subentryd4] && subserversd6.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"------------------------------> \\\" + subserversd6[subentryd6]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd7 = ns.scan(subserversd6[subentryd6]);\\t// depth 7\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor(let subentryd7 in subserversd7) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd7[subentryd7] !== subserversd6[subentryd6] && subserversd7[subentryd7] !== subserversd5[subentryd5] && subserversd7.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-----------------------------------> \\\" + subserversd7[subentryd7]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"gigascan.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.05,\"server\":\"omega-net\",\"moduleSequenceNumber\":1297,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet targetRam = ns.getServerMaxRam(ns.args[0]);\\n\\tlet scriptMem = ns.getScriptRam(ns.args[1]);\\n\\n\\tns.tprint(\\\"Maximum possible threads for \\\" + ns.args[1] + \\\": \\\" + Math.floor(targetRam / scriptMem));\\n\\tns.exit;\\n}\",\"filename\":\"ram-usage.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"omega-net\",\"moduleSequenceNumber\":1298,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerList } from \\\"modules/helper.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet serversSeen = [\\\"home\\\"]; // home + bought servers\\n\\tlet contractList = [];\\n\\n\\tserversSeen = await getServerList(serversSeen, 0, ns);\\n\\n\\tns.tprint(serversSeen);\\n}\",\"filename\":\"search-coding-contracts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"omega-net\",\"moduleSequenceNumber\":1299,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tvar servers = ns.scan(home);\\n\\tvar scripts = ns.ls(home, \\\".ns\\\");\\n\\n\\tfor (let entry in scripts) {\\n\\t\\tns.tprint(\\\"found script: \\\" + scripts[entry]);\\n\\t}\\n\\n\\t// Hack servers (!!! depth = 2 !!!) if needed and populate with scripts\\n\\tfor (let entry in servers) {\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== \\\"home\\\") {\\n\\t\\t\\t\\tns.tprint(\\\"----->   \\\" + subservers[subentry]);\\n\\t\\t\\t\\tif (!ns.hasRootAccess(subservers[subentry])) {\\n\\t\\t\\t\\t\\ttakeover(subservers[subentry]);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tns.tprint(\\\"copying scripts to \\\" + subservers[subentry]);\\n\\t\\t\\t\\tawait ns.scp(scripts, home, subservers[subentry]);\\n\\t\\t\\t\\t//await ns.scp(\\\"setup.ns\\\", home, subservers[subentry]);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (!ns.hasRootAccess(servers[entry])) {\\n\\t\\t\\ttakeover(servers[entry]);\\n\\t\\t}\\n\\t\\tns.tprint(\\\"copying scripts to \\\" + servers[entry]);\\n\\t\\tawait ns.scp(scripts, home, servers[entry]);\\n\\t\\t//await ns.scp(\\\"setup.ns\\\", home, servers[entry]);\\n\\t}\\n\\n\\t/** \\n\\t * \\tAttempts to take over target machine\\t\\n\\t * \\n\\t *  @param {string} tar\\n\\t *  @return {boolean} outcome \\n\\t**/\\n\\tasync function takeover(tar) {\\n\\t\\tlet currentTarget = tar;\\n\\t\\tlet isNotTakenOver = true;\\n\\t\\tlet attemptCounter = 0;\\n\\n\\t\\tif (ns.getServerNumPortsRequired <= 5 && attemptCounter < 50) {\\n\\t\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\n\\t\\t\\t\\tattemptCounter++;\\n\\t\\t\\t}\\n\\n\\t\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.15,\"server\":\"omega-net\",\"moduleSequenceNumber\":1300,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}}],\"serversOnNetwork\":[\"CSEC\",\"the-hub\",\"crush-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":26,\"hackDifficulty\":26,\"minDifficulty\":9,\"moneyAvailable\":67990336,\"moneyMax\":1699758400,\"numOpenPortsRequired\":2,\"openPortCount\":3,\"requiredHackingSkill\":201,\"serverGrowth\":36}},\"crush-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"crush-fitness\",\"httpPortOpen\":false,\"ip\":\"64.1.3.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Crush Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Returns an array of all hostnames in the network tree\\n * \\n * @param {string[]} myServers\\n * @param {number} safetyCounter Prevents infnite recursion\\n * @param {NS} ns\\n */\\nexport async function getServerList(myServers, safetyCounter, ns) {\\n\\tlet srvrsSeen = myServers;\\n\\tlet currServScanResult = [];\\n\\n\\tfor (let serverSeen in srvrsSeen) {\\n\\t\\tcurrServScanResult = ns.scan(srvrsSeen[serverSeen]);\\n\\t\\tfor (let entry in currServScanResult) {\\n\\t\\t\\tif (!srvrsSeen.includes(currServScanResult[entry])) {\\n\\t\\t\\t\\tsrvrsSeen.push(currServScanResult[entry]);\\n\\t\\t\\t\\tif ((++safetyCounter) < 250) {\\n\\t\\t\\t\\t\\tawait getServerList(srvrsSeen, safetyCounter, ns);\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tns.exit();\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\t//Filter out invalid values (NaN, null, {}, undefined)\\n\\tsrvrsSeen = srvrsSeen.filter(x => x);\\n\\treturn srvrsSeen;\\n}\\n\\n\\n/** \\n * \\tAttempts to take over target machine\\t\\n * \\n *  @param {string} target\\n * \\t@param {NS} ns\\n *  @return {boolean} outcome \\n**/\\nexport async function takeover(target, ns) {\\n\\tconst home = \\\"home\\\";\\n\\tlet currentTarget = target;\\n\\tlet isNotTakenOver = true;\\n\\tlet attemptCounter = 0;\\n\\n\\tlet scripts = ns.ls(home, \\\".js\\\");\\n\\t//scripts.push(ns.ls(home, \\\".ns\\\")); //in case of deprecated .ns scripts\\n\\n\\tif (!ns.hasRootAccess(currentTarget) && attemptCounter < 30) {\\n\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\ttry {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t} catch (error) {\\n\\t\\t\\t\\t\\tns.tprint(\\\"not enough ports to nuke \\\" + currentTarget);\\n\\t\\t\\t\\t\\treturn false;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t}\\n\\t\\t\\tattemptCounter++;\\n\\t\\t}\\n\\n\\t\\tawait ns.scp(scripts, home, currentTarget);\\n\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\",\"filename\":\"/modules/helper.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":1301,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.grow(target);\\n\\t}\\n}\",\"filename\":\"basic-grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":1302,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"basic-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":1303,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(target);\\n\\t}\\n}\",\"filename\":\"basic-weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":1304,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerList, takeover } from \\\"modules/helper.js\\\";\\n\\n/** @param {NS} ns **/\\n// TODO: unused + unfinished, based on setup.ns\\nexport async function main(ns) {\\n\\tconst myServers = [\\\"home\\\"];\\n\\n\\tvar servers = await getServerList(myServers, 0, ns);\\n\\n\\tfor (let entry in servers) {\\t\\n\\t\\tawait takeover(servers[entry], ns);\\n\\t}\\n}\",\"filename\":\"deep-setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":1305,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\t//\\n}\",\"filename\":\"formulas-testing.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":1306,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tconst currentMachine = ns.getHostname();\\n\\tvar servers = ns.scan(currentMachine);\\n\\tvar scripts = ns.ls(home, \\\"basic-\\\");\\n\\n\\tns.tprint(\\\"Host:  \\\" + currentMachine);\\n\\tfor (let entry in servers) {\\t// depth 0\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\t// depth 1\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== home && subservers.length > 1) {\\n\\t\\t\\t\\tns.tprint(\\\"-----> \\\" + subservers[subentry]);\\n\\t\\t\\t\\tlet subserversd2 = ns.scan(subservers[subentry]); // depth 2\\n\\t\\t\\t\\tfor (let subentryd2 in subserversd2) {\\n\\t\\t\\t\\t\\tif (subserversd2[subentryd2] !== subservers[subentry] && subserversd2[subentryd2] !== servers[entry] && subserversd2.length > 1) {\\n\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------> \\\" + subserversd2[subentryd2]);\\n\\t\\t\\t\\t\\t\\tlet subserversd3 = ns.scan(subserversd2[subentryd2]);\\t// depth 3\\n\\t\\t\\t\\t\\t\\tfor (let subentryd3 in subserversd3) {\\n\\t\\t\\t\\t\\t\\t\\tif (subserversd3[subentryd3] !== subserversd2[subentryd2] && subserversd3[subentryd3] !== subservers[subentry] && subserversd3.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------> \\\" + subserversd3[subentryd3]);\\n\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd4 = ns.scan(subserversd3[subentryd3]);\\t// depth 4\\n\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd4 in subserversd4) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd4[subentryd4] !== subserversd3[subentryd3] && subserversd4[subentryd4] !== subserversd2[subentryd2] && subserversd4.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------------> \\\" + subserversd4[subentryd4]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd5 = ns.scan(subserversd4[subentryd4]);\\t// depth 5\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd5 in subserversd5) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd5[subentryd5] !== subserversd4[subentryd4] && subserversd5[subentryd5] !== subserversd3[subentryd3] && subserversd5.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-------------------------> \\\" + subserversd5[subentryd5]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd6 = ns.scan(subserversd5[subentryd5]);\\t// depth 6\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd6 in subserversd6) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd6[subentryd6] !== subserversd5[subentryd5] && subserversd6[subentryd6] !== subserversd4[subentryd4] && subserversd6.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"------------------------------> \\\" + subserversd6[subentryd6]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd7 = ns.scan(subserversd6[subentryd6]);\\t// depth 7\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor(let subentryd7 in subserversd7) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd7[subentryd7] !== subserversd6[subentryd6] && subserversd7[subentryd7] !== subserversd5[subentryd5] && subserversd7.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-----------------------------------> \\\" + subserversd7[subentryd7]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"gigascan.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.05,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":1307,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet targetRam = ns.getServerMaxRam(ns.args[0]);\\n\\tlet scriptMem = ns.getScriptRam(ns.args[1]);\\n\\n\\tns.tprint(\\\"Maximum possible threads for \\\" + ns.args[1] + \\\": \\\" + Math.floor(targetRam / scriptMem));\\n\\tns.exit;\\n}\",\"filename\":\"ram-usage.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":1308,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerList } from \\\"modules/helper.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet serversSeen = [\\\"home\\\"]; // home + bought servers\\n\\tlet contractList = [];\\n\\n\\tserversSeen = await getServerList(serversSeen, 0, ns);\\n\\n\\tns.tprint(serversSeen);\\n}\",\"filename\":\"search-coding-contracts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":1309,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tvar servers = ns.scan(home);\\n\\tvar scripts = ns.ls(home, \\\".ns\\\");\\n\\n\\tfor (let entry in scripts) {\\n\\t\\tns.tprint(\\\"found script: \\\" + scripts[entry]);\\n\\t}\\n\\n\\t// Hack servers (!!! depth = 2 !!!) if needed and populate with scripts\\n\\tfor (let entry in servers) {\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== \\\"home\\\") {\\n\\t\\t\\t\\tns.tprint(\\\"----->   \\\" + subservers[subentry]);\\n\\t\\t\\t\\tif (!ns.hasRootAccess(subservers[subentry])) {\\n\\t\\t\\t\\t\\ttakeover(subservers[subentry]);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tns.tprint(\\\"copying scripts to \\\" + subservers[subentry]);\\n\\t\\t\\t\\tawait ns.scp(scripts, home, subservers[subentry]);\\n\\t\\t\\t\\t//await ns.scp(\\\"setup.ns\\\", home, subservers[subentry]);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (!ns.hasRootAccess(servers[entry])) {\\n\\t\\t\\ttakeover(servers[entry]);\\n\\t\\t}\\n\\t\\tns.tprint(\\\"copying scripts to \\\" + servers[entry]);\\n\\t\\tawait ns.scp(scripts, home, servers[entry]);\\n\\t\\t//await ns.scp(\\\"setup.ns\\\", home, servers[entry]);\\n\\t}\\n\\n\\t/** \\n\\t * \\tAttempts to take over target machine\\t\\n\\t * \\n\\t *  @param {string} tar\\n\\t *  @return {boolean} outcome \\n\\t**/\\n\\tasync function takeover(tar) {\\n\\t\\tlet currentTarget = tar;\\n\\t\\tlet isNotTakenOver = true;\\n\\t\\tlet attemptCounter = 0;\\n\\n\\t\\tif (ns.getServerNumPortsRequired <= 5 && attemptCounter < 50) {\\n\\t\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\n\\t\\t\\t\\tattemptCounter++;\\n\\t\\t\\t}\\n\\n\\t\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.15,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":1310,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}}],\"serversOnNetwork\":[\"omega-net\",\"zb-institute\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":45,\"hackDifficulty\":45,\"minDifficulty\":15,\"moneyAvailable\":55918749,\"moneyMax\":1397968725,\"numOpenPortsRequired\":2,\"openPortCount\":3,\"requiredHackingSkill\":255,\"serverGrowth\":29}},\"iron-gym\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"iron-gym\",\"httpPortOpen\":false,\"ip\":\"27.3.6.6\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Iron Gym Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Returns an array of all hostnames in the network tree\\n * \\n * @param {string[]} myServers\\n * @param {number} safetyCounter Prevents infnite recursion\\n * @param {NS} ns\\n */\\nexport async function getServerList(myServers, safetyCounter, ns) {\\n\\tlet srvrsSeen = myServers;\\n\\tlet currServScanResult = [];\\n\\n\\tfor (let serverSeen in srvrsSeen) {\\n\\t\\tcurrServScanResult = ns.scan(srvrsSeen[serverSeen]);\\n\\t\\tfor (let entry in currServScanResult) {\\n\\t\\t\\tif (!srvrsSeen.includes(currServScanResult[entry])) {\\n\\t\\t\\t\\tsrvrsSeen.push(currServScanResult[entry]);\\n\\t\\t\\t\\tif ((++safetyCounter) < 250) {\\n\\t\\t\\t\\t\\tawait getServerList(srvrsSeen, safetyCounter, ns);\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tns.exit();\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\t//Filter out invalid values (NaN, null, {}, undefined)\\n\\tsrvrsSeen = srvrsSeen.filter(x => x);\\n\\treturn srvrsSeen;\\n}\\n\\n\\n/** \\n * \\tAttempts to take over target machine\\t\\n * \\n *  @param {string} target\\n * \\t@param {NS} ns\\n *  @return {boolean} outcome \\n**/\\nexport async function takeover(target, ns) {\\n\\tconst home = \\\"home\\\";\\n\\tlet currentTarget = target;\\n\\tlet isNotTakenOver = true;\\n\\tlet attemptCounter = 0;\\n\\n\\tlet scripts = ns.ls(home, \\\".js\\\");\\n\\t//scripts.push(ns.ls(home, \\\".ns\\\")); //in case of deprecated .ns scripts\\n\\n\\tif (!ns.hasRootAccess(currentTarget) && attemptCounter < 30) {\\n\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\ttry {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t} catch (error) {\\n\\t\\t\\t\\t\\tns.tprint(\\\"not enough ports to nuke \\\" + currentTarget);\\n\\t\\t\\t\\t\\treturn false;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t}\\n\\t\\t\\tattemptCounter++;\\n\\t\\t}\\n\\n\\t\\tawait ns.scp(scripts, home, currentTarget);\\n\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\",\"filename\":\"/modules/helper.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"iron-gym\",\"moduleSequenceNumber\":1311,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.grow(target);\\n\\t}\\n}\",\"filename\":\"basic-grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"iron-gym\",\"moduleSequenceNumber\":1312,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"basic-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"iron-gym\",\"moduleSequenceNumber\":1313,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(target);\\n\\t}\\n}\",\"filename\":\"basic-weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"iron-gym\",\"moduleSequenceNumber\":1314,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerList, takeover } from \\\"modules/helper.js\\\";\\n\\n/** @param {NS} ns **/\\n// TODO: unused + unfinished, based on setup.ns\\nexport async function main(ns) {\\n\\tconst myServers = [\\\"home\\\"];\\n\\n\\tvar servers = await getServerList(myServers, 0, ns);\\n\\n\\tfor (let entry in servers) {\\t\\n\\t\\tawait takeover(servers[entry], ns);\\n\\t}\\n}\",\"filename\":\"deep-setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"iron-gym\",\"moduleSequenceNumber\":1315,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\t//\\n}\",\"filename\":\"formulas-testing.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"iron-gym\",\"moduleSequenceNumber\":1316,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tconst currentMachine = ns.getHostname();\\n\\tvar servers = ns.scan(currentMachine);\\n\\tvar scripts = ns.ls(home, \\\"basic-\\\");\\n\\n\\tns.tprint(\\\"Host:  \\\" + currentMachine);\\n\\tfor (let entry in servers) {\\t// depth 0\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\t// depth 1\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== home && subservers.length > 1) {\\n\\t\\t\\t\\tns.tprint(\\\"-----> \\\" + subservers[subentry]);\\n\\t\\t\\t\\tlet subserversd2 = ns.scan(subservers[subentry]); // depth 2\\n\\t\\t\\t\\tfor (let subentryd2 in subserversd2) {\\n\\t\\t\\t\\t\\tif (subserversd2[subentryd2] !== subservers[subentry] && subserversd2[subentryd2] !== servers[entry] && subserversd2.length > 1) {\\n\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------> \\\" + subserversd2[subentryd2]);\\n\\t\\t\\t\\t\\t\\tlet subserversd3 = ns.scan(subserversd2[subentryd2]);\\t// depth 3\\n\\t\\t\\t\\t\\t\\tfor (let subentryd3 in subserversd3) {\\n\\t\\t\\t\\t\\t\\t\\tif (subserversd3[subentryd3] !== subserversd2[subentryd2] && subserversd3[subentryd3] !== subservers[subentry] && subserversd3.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------> \\\" + subserversd3[subentryd3]);\\n\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd4 = ns.scan(subserversd3[subentryd3]);\\t// depth 4\\n\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd4 in subserversd4) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd4[subentryd4] !== subserversd3[subentryd3] && subserversd4[subentryd4] !== subserversd2[subentryd2] && subserversd4.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------------> \\\" + subserversd4[subentryd4]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd5 = ns.scan(subserversd4[subentryd4]);\\t// depth 5\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd5 in subserversd5) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd5[subentryd5] !== subserversd4[subentryd4] && subserversd5[subentryd5] !== subserversd3[subentryd3] && subserversd5.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-------------------------> \\\" + subserversd5[subentryd5]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd6 = ns.scan(subserversd5[subentryd5]);\\t// depth 6\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd6 in subserversd6) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd6[subentryd6] !== subserversd5[subentryd5] && subserversd6[subentryd6] !== subserversd4[subentryd4] && subserversd6.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"------------------------------> \\\" + subserversd6[subentryd6]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd7 = ns.scan(subserversd6[subentryd6]);\\t// depth 7\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor(let subentryd7 in subserversd7) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd7[subentryd7] !== subserversd6[subentryd6] && subserversd7[subentryd7] !== subserversd5[subentryd5] && subserversd7.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-----------------------------------> \\\" + subserversd7[subentryd7]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"gigascan.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.05,\"server\":\"iron-gym\",\"moduleSequenceNumber\":1317,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet targetRam = ns.getServerMaxRam(ns.args[0]);\\n\\tlet scriptMem = ns.getScriptRam(ns.args[1]);\\n\\n\\tns.tprint(\\\"Maximum possible threads for \\\" + ns.args[1] + \\\": \\\" + Math.floor(targetRam / scriptMem));\\n\\tns.exit;\\n}\",\"filename\":\"ram-usage.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"iron-gym\",\"moduleSequenceNumber\":1318,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerList } from \\\"modules/helper.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet serversSeen = [\\\"home\\\"]; // home + bought servers\\n\\tlet contractList = [];\\n\\n\\tserversSeen = await getServerList(serversSeen, 0, ns);\\n\\n\\tns.tprint(serversSeen);\\n}\",\"filename\":\"search-coding-contracts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"iron-gym\",\"moduleSequenceNumber\":1319,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tvar servers = ns.scan(home);\\n\\tvar scripts = ns.ls(home, \\\".js\\\");\\n\\n\\tfor (let entry in scripts) {\\n\\t\\tns.tprint(\\\"found script: \\\" + scripts[entry]);\\n\\t}\\n\\n\\t// Hack servers (!!! depth = 2 !!!) if needed and populate with scripts\\n\\tfor (let entry in servers) {\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== \\\"home\\\") {\\n\\t\\t\\t\\tns.tprint(\\\"----->   \\\" + subservers[subentry]);\\n\\t\\t\\t\\tif (!ns.hasRootAccess(subservers[subentry])) {\\n\\t\\t\\t\\t\\ttakeover(subservers[subentry]);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tns.tprint(\\\"copying scripts to \\\" + subservers[subentry]);\\n\\t\\t\\t\\tawait ns.scp(scripts, home, subservers[subentry]);\\n\\t\\t\\t\\t//await ns.scp(\\\"setup.ns\\\", home, subservers[subentry]);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (!ns.hasRootAccess(servers[entry])) {\\n\\t\\t\\ttakeover(servers[entry]);\\n\\t\\t}\\n\\t\\tns.tprint(\\\"copying scripts to \\\" + servers[entry]);\\n\\t\\tawait ns.scp(scripts, home, servers[entry]);\\n\\t\\t//await ns.scp(\\\"setup.ns\\\", home, servers[entry]);\\n\\t}\\n\\n\\t/** \\n\\t * \\tAttempts to take over target machine\\t\\n\\t * \\n\\t *  @param {string} tar\\n\\t *  @return {boolean} outcome \\n\\t**/\\n\\tasync function takeover(tar) {\\n\\t\\tlet currentTarget = tar;\\n\\t\\tlet isNotTakenOver = true;\\n\\t\\tlet attemptCounter = 0;\\n\\n\\t\\tif (ns.getServerNumPortsRequired <= 5 && attemptCounter < 50) {\\n\\t\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\n\\t\\t\\t\\tattemptCounter++;\\n\\t\\t\\t}\\n\\n\\t\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.15,\"server\":\"iron-gym\",\"moduleSequenceNumber\":1320,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}}],\"serversOnNetwork\":[\"home\",\"nectar-net\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":30,\"minDifficulty\":10,\"moneyAvailable\":20000000,\"moneyMax\":500000000,\"numOpenPortsRequired\":1,\"openPortCount\":3,\"requiredHackingSkill\":100,\"serverGrowth\":20}},\"millenium-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"millenium-fitness\",\"httpPortOpen\":false,\"ip\":\"97.4.4.0\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Millenium Fitness Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Returns an array of all hostnames in the network tree\\n * \\n * @param {string[]} myServers\\n * @param {number} safetyCounter Prevents infnite recursion\\n * @param {NS} ns\\n */\\nexport async function getServerList(myServers, safetyCounter, ns) {\\n\\tlet srvrsSeen = myServers;\\n\\tlet currServScanResult = [];\\n\\n\\tfor (let serverSeen in srvrsSeen) {\\n\\t\\tcurrServScanResult = ns.scan(srvrsSeen[serverSeen]);\\n\\t\\tfor (let entry in currServScanResult) {\\n\\t\\t\\tif (!srvrsSeen.includes(currServScanResult[entry])) {\\n\\t\\t\\t\\tsrvrsSeen.push(currServScanResult[entry]);\\n\\t\\t\\t\\tif ((++safetyCounter) < 250) {\\n\\t\\t\\t\\t\\tawait getServerList(srvrsSeen, safetyCounter, ns);\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tns.exit();\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\t//Filter out invalid values (NaN, null, {}, undefined)\\n\\tsrvrsSeen = srvrsSeen.filter(x => x);\\n\\treturn srvrsSeen;\\n}\\n\\n\\n/** \\n * \\tAttempts to take over target machine\\t\\n * \\n *  @param {string} target\\n * \\t@param {NS} ns\\n *  @return {boolean} outcome \\n**/\\nexport async function takeover(target, ns) {\\n\\tconst home = \\\"home\\\";\\n\\tlet currentTarget = target;\\n\\tlet isNotTakenOver = true;\\n\\tlet attemptCounter = 0;\\n\\n\\tlet scripts = ns.ls(home, \\\".js\\\");\\n\\t//scripts.push(ns.ls(home, \\\".ns\\\")); //in case of deprecated .ns scripts\\n\\n\\tif (!ns.hasRootAccess(currentTarget) && attemptCounter < 30) {\\n\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\ttry {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t} catch (error) {\\n\\t\\t\\t\\t\\tns.tprint(\\\"not enough ports to nuke \\\" + currentTarget);\\n\\t\\t\\t\\t\\treturn false;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t}\\n\\t\\t\\tattemptCounter++;\\n\\t\\t}\\n\\n\\t\\tawait ns.scp(scripts, home, currentTarget);\\n\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\",\"filename\":\"/modules/helper.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":1321,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.grow(target);\\n\\t}\\n}\",\"filename\":\"basic-grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":1322,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"basic-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":1323,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(target);\\n\\t}\\n}\",\"filename\":\"basic-weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":1324,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerList, takeover } from \\\"modules/helper.js\\\";\\n\\n/** @param {NS} ns **/\\n// TODO: unused + unfinished, based on setup.ns\\nexport async function main(ns) {\\n\\tconst myServers = [\\\"home\\\"];\\n\\n\\tvar servers = await getServerList(myServers, 0, ns);\\n\\n\\tfor (let entry in servers) {\\t\\n\\t\\tawait takeover(servers[entry], ns);\\n\\t}\\n}\",\"filename\":\"deep-setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":1325,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\t//\\n}\",\"filename\":\"formulas-testing.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":1326,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tconst currentMachine = ns.getHostname();\\n\\tvar servers = ns.scan(currentMachine);\\n\\tvar scripts = ns.ls(home, \\\"basic-\\\");\\n\\n\\tns.tprint(\\\"Host:  \\\" + currentMachine);\\n\\tfor (let entry in servers) {\\t// depth 0\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\t// depth 1\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== home && subservers.length > 1) {\\n\\t\\t\\t\\tns.tprint(\\\"-----> \\\" + subservers[subentry]);\\n\\t\\t\\t\\tlet subserversd2 = ns.scan(subservers[subentry]); // depth 2\\n\\t\\t\\t\\tfor (let subentryd2 in subserversd2) {\\n\\t\\t\\t\\t\\tif (subserversd2[subentryd2] !== subservers[subentry] && subserversd2[subentryd2] !== servers[entry] && subserversd2.length > 1) {\\n\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------> \\\" + subserversd2[subentryd2]);\\n\\t\\t\\t\\t\\t\\tlet subserversd3 = ns.scan(subserversd2[subentryd2]);\\t// depth 3\\n\\t\\t\\t\\t\\t\\tfor (let subentryd3 in subserversd3) {\\n\\t\\t\\t\\t\\t\\t\\tif (subserversd3[subentryd3] !== subserversd2[subentryd2] && subserversd3[subentryd3] !== subservers[subentry] && subserversd3.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------> \\\" + subserversd3[subentryd3]);\\n\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd4 = ns.scan(subserversd3[subentryd3]);\\t// depth 4\\n\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd4 in subserversd4) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd4[subentryd4] !== subserversd3[subentryd3] && subserversd4[subentryd4] !== subserversd2[subentryd2] && subserversd4.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------------> \\\" + subserversd4[subentryd4]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd5 = ns.scan(subserversd4[subentryd4]);\\t// depth 5\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd5 in subserversd5) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd5[subentryd5] !== subserversd4[subentryd4] && subserversd5[subentryd5] !== subserversd3[subentryd3] && subserversd5.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-------------------------> \\\" + subserversd5[subentryd5]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd6 = ns.scan(subserversd5[subentryd5]);\\t// depth 6\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd6 in subserversd6) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd6[subentryd6] !== subserversd5[subentryd5] && subserversd6[subentryd6] !== subserversd4[subentryd4] && subserversd6.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"------------------------------> \\\" + subserversd6[subentryd6]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd7 = ns.scan(subserversd6[subentryd6]);\\t// depth 7\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor(let subentryd7 in subserversd7) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd7[subentryd7] !== subserversd6[subentryd6] && subserversd7[subentryd7] !== subserversd5[subentryd5] && subserversd7.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-----------------------------------> \\\" + subserversd7[subentryd7]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"gigascan.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.05,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":1327,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet targetRam = ns.getServerMaxRam(ns.args[0]);\\n\\tlet scriptMem = ns.getScriptRam(ns.args[1]);\\n\\n\\tns.tprint(\\\"Maximum possible threads for \\\" + ns.args[1] + \\\": \\\" + Math.floor(targetRam / scriptMem));\\n\\tns.exit;\\n}\",\"filename\":\"ram-usage.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":1328,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerList } from \\\"modules/helper.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet serversSeen = [\\\"home\\\"]; // home + bought servers\\n\\tlet contractList = [];\\n\\n\\tserversSeen = await getServerList(serversSeen, 0, ns);\\n\\n\\tns.tprint(serversSeen);\\n}\",\"filename\":\"search-coding-contracts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":1329,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tvar servers = ns.scan(home);\\n\\tvar scripts = ns.ls(home, \\\".ns\\\");\\n\\n\\tfor (let entry in scripts) {\\n\\t\\tns.tprint(\\\"found script: \\\" + scripts[entry]);\\n\\t}\\n\\n\\t// Hack servers (!!! depth = 2 !!!) if needed and populate with scripts\\n\\tfor (let entry in servers) {\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== \\\"home\\\") {\\n\\t\\t\\t\\tns.tprint(\\\"----->   \\\" + subservers[subentry]);\\n\\t\\t\\t\\tif (!ns.hasRootAccess(subservers[subentry])) {\\n\\t\\t\\t\\t\\ttakeover(subservers[subentry]);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tns.tprint(\\\"copying scripts to \\\" + subservers[subentry]);\\n\\t\\t\\t\\tawait ns.scp(scripts, home, subservers[subentry]);\\n\\t\\t\\t\\t//await ns.scp(\\\"setup.ns\\\", home, subservers[subentry]);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (!ns.hasRootAccess(servers[entry])) {\\n\\t\\t\\ttakeover(servers[entry]);\\n\\t\\t}\\n\\t\\tns.tprint(\\\"copying scripts to \\\" + servers[entry]);\\n\\t\\tawait ns.scp(scripts, home, servers[entry]);\\n\\t\\t//await ns.scp(\\\"setup.ns\\\", home, servers[entry]);\\n\\t}\\n\\n\\t/** \\n\\t * \\tAttempts to take over target machine\\t\\n\\t * \\n\\t *  @param {string} tar\\n\\t *  @return {boolean} outcome \\n\\t**/\\n\\tasync function takeover(tar) {\\n\\t\\tlet currentTarget = tar;\\n\\t\\tlet isNotTakenOver = true;\\n\\t\\tlet attemptCounter = 0;\\n\\n\\t\\tif (ns.getServerNumPortsRequired <= 5 && attemptCounter < 50) {\\n\\t\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\n\\t\\t\\t\\tattemptCounter++;\\n\\t\\t\\t}\\n\\n\\t\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.15,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":1330,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}}],\"serversOnNetwork\":[\"I.I.I.I\",\"aerocorp\",\"global-pharm\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":54,\"hackDifficulty\":54,\"minDifficulty\":18,\"moneyAvailable\":250000000,\"moneyMax\":6250000000,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":488,\"serverGrowth\":32}},\"powerhouse-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"powerhouse-fitness\",\"httpPortOpen\":true,\"ip\":\"80.5.4.4\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Powerhouse Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Returns an array of all hostnames in the network tree\\n * \\n * @param {string[]} myServers\\n * @param {number} safetyCounter Prevents infnite recursion\\n * @param {NS} ns\\n */\\nexport async function getServerList(myServers, safetyCounter, ns) {\\n\\tlet srvrsSeen = myServers;\\n\\tlet currServScanResult = [];\\n\\n\\tfor (let serverSeen in srvrsSeen) {\\n\\t\\tcurrServScanResult = ns.scan(srvrsSeen[serverSeen]);\\n\\t\\tfor (let entry in currServScanResult) {\\n\\t\\t\\tif (!srvrsSeen.includes(currServScanResult[entry])) {\\n\\t\\t\\t\\tsrvrsSeen.push(currServScanResult[entry]);\\n\\t\\t\\t\\tif ((++safetyCounter) < 250) {\\n\\t\\t\\t\\t\\tawait getServerList(srvrsSeen, safetyCounter, ns);\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tns.exit();\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\t//Filter out invalid values (NaN, null, {}, undefined)\\n\\tsrvrsSeen = srvrsSeen.filter(x => x);\\n\\treturn srvrsSeen;\\n}\\n\\n\\n/** \\n * \\tAttempts to take over target machine\\t\\n * \\n *  @param {string} target\\n * \\t@param {NS} ns\\n *  @return {boolean} outcome \\n**/\\nexport async function takeover(target, ns) {\\n\\tconst home = \\\"home\\\";\\n\\tlet currentTarget = target;\\n\\tlet isNotTakenOver = true;\\n\\tlet attemptCounter = 0;\\n\\n\\tlet scripts = ns.ls(home, \\\".js\\\");\\n\\t//scripts.push(ns.ls(home, \\\".ns\\\")); //in case of deprecated .ns scripts\\n\\n\\tif (!ns.hasRootAccess(currentTarget) && attemptCounter < 30) {\\n\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\ttry {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t} catch (error) {\\n\\t\\t\\t\\t\\tns.tprint(\\\"not enough ports to nuke \\\" + currentTarget);\\n\\t\\t\\t\\t\\treturn false;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t}\\n\\t\\t\\tattemptCounter++;\\n\\t\\t}\\n\\n\\t\\tawait ns.scp(scripts, home, currentTarget);\\n\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\",\"filename\":\"/modules/helper.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"powerhouse-fitness\",\"moduleSequenceNumber\":1331,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.grow(target);\\n\\t}\\n}\",\"filename\":\"basic-grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"powerhouse-fitness\",\"moduleSequenceNumber\":1332,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"basic-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"powerhouse-fitness\",\"moduleSequenceNumber\":1333,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(target);\\n\\t}\\n}\",\"filename\":\"basic-weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"powerhouse-fitness\",\"moduleSequenceNumber\":1334,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerList, takeover } from \\\"modules/helper.js\\\";\\n\\n/** @param {NS} ns **/\\n// TODO: unused + unfinished, based on setup.ns\\nexport async function main(ns) {\\n\\tconst myServers = [\\\"home\\\"];\\n\\n\\tvar servers = await getServerList(myServers, 0, ns);\\n\\n\\tfor (let entry in servers) {\\t\\n\\t\\tawait takeover(servers[entry], ns);\\n\\t}\\n}\",\"filename\":\"deep-setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"powerhouse-fitness\",\"moduleSequenceNumber\":1335,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\t//\\n}\",\"filename\":\"formulas-testing.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"powerhouse-fitness\",\"moduleSequenceNumber\":1336,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tconst currentMachine = ns.getHostname();\\n\\tvar servers = ns.scan(currentMachine);\\n\\tvar scripts = ns.ls(home, \\\"basic-\\\");\\n\\n\\tns.tprint(\\\"Host:  \\\" + currentMachine);\\n\\tfor (let entry in servers) {\\t// depth 0\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\t// depth 1\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== home && subservers.length > 1) {\\n\\t\\t\\t\\tns.tprint(\\\"-----> \\\" + subservers[subentry]);\\n\\t\\t\\t\\tlet subserversd2 = ns.scan(subservers[subentry]); // depth 2\\n\\t\\t\\t\\tfor (let subentryd2 in subserversd2) {\\n\\t\\t\\t\\t\\tif (subserversd2[subentryd2] !== subservers[subentry] && subserversd2[subentryd2] !== servers[entry] && subserversd2.length > 1) {\\n\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------> \\\" + subserversd2[subentryd2]);\\n\\t\\t\\t\\t\\t\\tlet subserversd3 = ns.scan(subserversd2[subentryd2]);\\t// depth 3\\n\\t\\t\\t\\t\\t\\tfor (let subentryd3 in subserversd3) {\\n\\t\\t\\t\\t\\t\\t\\tif (subserversd3[subentryd3] !== subserversd2[subentryd2] && subserversd3[subentryd3] !== subservers[subentry] && subserversd3.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------> \\\" + subserversd3[subentryd3]);\\n\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd4 = ns.scan(subserversd3[subentryd3]);\\t// depth 4\\n\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd4 in subserversd4) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd4[subentryd4] !== subserversd3[subentryd3] && subserversd4[subentryd4] !== subserversd2[subentryd2] && subserversd4.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------------> \\\" + subserversd4[subentryd4]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd5 = ns.scan(subserversd4[subentryd4]);\\t// depth 5\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd5 in subserversd5) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd5[subentryd5] !== subserversd4[subentryd4] && subserversd5[subentryd5] !== subserversd3[subentryd3] && subserversd5.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-------------------------> \\\" + subserversd5[subentryd5]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd6 = ns.scan(subserversd5[subentryd5]);\\t// depth 6\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd6 in subserversd6) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd6[subentryd6] !== subserversd5[subentryd5] && subserversd6[subentryd6] !== subserversd4[subentryd4] && subserversd6.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"------------------------------> \\\" + subserversd6[subentryd6]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd7 = ns.scan(subserversd6[subentryd6]);\\t// depth 7\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor(let subentryd7 in subserversd7) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd7[subentryd7] !== subserversd6[subentryd6] && subserversd7[subentryd7] !== subserversd5[subentryd5] && subserversd7.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-----------------------------------> \\\" + subserversd7[subentryd7]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"gigascan.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.05,\"server\":\"powerhouse-fitness\",\"moduleSequenceNumber\":1337,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet targetRam = ns.getServerMaxRam(ns.args[0]);\\n\\tlet scriptMem = ns.getScriptRam(ns.args[1]);\\n\\n\\tns.tprint(\\\"Maximum possible threads for \\\" + ns.args[1] + \\\": \\\" + Math.floor(targetRam / scriptMem));\\n\\tns.exit;\\n}\",\"filename\":\"ram-usage.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"powerhouse-fitness\",\"moduleSequenceNumber\":1338,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerList } from \\\"modules/helper.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet serversSeen = [\\\"home\\\"]; // home + bought servers\\n\\tlet contractList = [];\\n\\n\\tserversSeen = await getServerList(serversSeen, 0, ns);\\n\\n\\tns.tprint(serversSeen);\\n}\",\"filename\":\"search-coding-contracts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"powerhouse-fitness\",\"moduleSequenceNumber\":1339,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tvar servers = ns.scan(home);\\n\\tvar scripts = ns.ls(home, \\\".js\\\");\\n\\n\\tfor (let entry in scripts) {\\n\\t\\tns.tprint(\\\"found script: \\\" + scripts[entry]);\\n\\t}\\n\\n\\t// Hack servers (!!! depth = 2 !!!) if needed and populate with scripts\\n\\tfor (let entry in servers) {\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== \\\"home\\\") {\\n\\t\\t\\t\\tns.tprint(\\\"----->   \\\" + subservers[subentry]);\\n\\t\\t\\t\\tif (!ns.hasRootAccess(subservers[subentry])) {\\n\\t\\t\\t\\t\\ttakeover(subservers[subentry]);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tns.tprint(\\\"copying scripts to \\\" + subservers[subentry]);\\n\\t\\t\\t\\tawait ns.scp(scripts, home, subservers[subentry]);\\n\\t\\t\\t\\t//await ns.scp(\\\"setup.ns\\\", home, subservers[subentry]);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (!ns.hasRootAccess(servers[entry])) {\\n\\t\\t\\ttakeover(servers[entry]);\\n\\t\\t}\\n\\t\\tns.tprint(\\\"copying scripts to \\\" + servers[entry]);\\n\\t\\tawait ns.scp(scripts, home, servers[entry]);\\n\\t\\t//await ns.scp(\\\"setup.ns\\\", home, servers[entry]);\\n\\t}\\n\\n\\t/** \\n\\t * \\tAttempts to take over target machine\\t\\n\\t * \\n\\t *  @param {string} tar\\n\\t *  @return {boolean} outcome \\n\\t**/\\n\\tasync function takeover(tar) {\\n\\t\\tlet currentTarget = tar;\\n\\t\\tlet isNotTakenOver = true;\\n\\t\\tlet attemptCounter = 0;\\n\\n\\t\\tif (ns.getServerNumPortsRequired <= 5 && attemptCounter < 50) {\\n\\t\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\n\\t\\t\\t\\tattemptCounter++;\\n\\t\\t\\t}\\n\\n\\t\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.15,\"server\":\"powerhouse-fitness\",\"moduleSequenceNumber\":1340,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}}],\"serversOnNetwork\":[\"omnitek\",\"megacorp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":65,\"hackDifficulty\":65,\"minDifficulty\":22,\"moneyAvailable\":900000000,\"moneyMax\":22500000000,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1034,\"serverGrowth\":59}},\"snap-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-276745.cct\",\"type\":\"Algorithmic Stock Trader I\",\"data\":[65,49,181,160,99,61,34,181,11,128,107,34,196],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"snap-fitness\",\"httpPortOpen\":true,\"ip\":\"73.1.7.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Snap Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Returns an array of all hostnames in the network tree\\n * \\n * @param {string[]} myServers\\n * @param {number} safetyCounter Prevents infnite recursion\\n * @param {NS} ns\\n */\\nexport async function getServerList(myServers, safetyCounter, ns) {\\n\\tlet srvrsSeen = myServers;\\n\\tlet currServScanResult = [];\\n\\n\\tfor (let serverSeen in srvrsSeen) {\\n\\t\\tcurrServScanResult = ns.scan(srvrsSeen[serverSeen]);\\n\\t\\tfor (let entry in currServScanResult) {\\n\\t\\t\\tif (!srvrsSeen.includes(currServScanResult[entry])) {\\n\\t\\t\\t\\tsrvrsSeen.push(currServScanResult[entry]);\\n\\t\\t\\t\\tif ((++safetyCounter) < 250) {\\n\\t\\t\\t\\t\\tawait getServerList(srvrsSeen, safetyCounter, ns);\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tns.exit();\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\t//Filter out invalid values (NaN, null, {}, undefined)\\n\\tsrvrsSeen = srvrsSeen.filter(x => x);\\n\\treturn srvrsSeen;\\n}\\n\\n\\n/** \\n * \\tAttempts to take over target machine\\t\\n * \\n *  @param {string} target\\n * \\t@param {NS} ns\\n *  @return {boolean} outcome \\n**/\\nexport async function takeover(target, ns) {\\n\\tconst home = \\\"home\\\";\\n\\tlet currentTarget = target;\\n\\tlet isNotTakenOver = true;\\n\\tlet attemptCounter = 0;\\n\\n\\tlet scripts = ns.ls(home, \\\".js\\\");\\n\\t//scripts.push(ns.ls(home, \\\".ns\\\")); //in case of deprecated .ns scripts\\n\\n\\tif (!ns.hasRootAccess(currentTarget) && attemptCounter < 30) {\\n\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\ttry {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t} catch (error) {\\n\\t\\t\\t\\t\\tns.tprint(\\\"not enough ports to nuke \\\" + currentTarget);\\n\\t\\t\\t\\t\\treturn false;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t}\\n\\t\\t\\tattemptCounter++;\\n\\t\\t}\\n\\n\\t\\tawait ns.scp(scripts, home, currentTarget);\\n\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\",\"filename\":\"/modules/helper.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"snap-fitness\",\"moduleSequenceNumber\":1341,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.grow(target);\\n\\t}\\n}\",\"filename\":\"basic-grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"snap-fitness\",\"moduleSequenceNumber\":1342,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"basic-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"snap-fitness\",\"moduleSequenceNumber\":1343,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(target);\\n\\t}\\n}\",\"filename\":\"basic-weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"snap-fitness\",\"moduleSequenceNumber\":1344,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerList, takeover } from \\\"modules/helper.js\\\";\\n\\n/** @param {NS} ns **/\\n// TODO: unused + unfinished, based on setup.ns\\nexport async function main(ns) {\\n\\tconst myServers = [\\\"home\\\"];\\n\\n\\tvar servers = await getServerList(myServers, 0, ns);\\n\\n\\tfor (let entry in servers) {\\t\\n\\t\\tawait takeover(servers[entry], ns);\\n\\t}\\n}\",\"filename\":\"deep-setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"snap-fitness\",\"moduleSequenceNumber\":1345,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\t//\\n}\",\"filename\":\"formulas-testing.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"snap-fitness\",\"moduleSequenceNumber\":1346,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tconst currentMachine = ns.getHostname();\\n\\tvar servers = ns.scan(currentMachine);\\n\\tvar scripts = ns.ls(home, \\\"basic-\\\");\\n\\n\\tns.tprint(\\\"Host:  \\\" + currentMachine);\\n\\tfor (let entry in servers) {\\t// depth 0\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\t// depth 1\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== home && subservers.length > 1) {\\n\\t\\t\\t\\tns.tprint(\\\"-----> \\\" + subservers[subentry]);\\n\\t\\t\\t\\tlet subserversd2 = ns.scan(subservers[subentry]); // depth 2\\n\\t\\t\\t\\tfor (let subentryd2 in subserversd2) {\\n\\t\\t\\t\\t\\tif (subserversd2[subentryd2] !== subservers[subentry] && subserversd2[subentryd2] !== servers[entry] && subserversd2.length > 1) {\\n\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------> \\\" + subserversd2[subentryd2]);\\n\\t\\t\\t\\t\\t\\tlet subserversd3 = ns.scan(subserversd2[subentryd2]);\\t// depth 3\\n\\t\\t\\t\\t\\t\\tfor (let subentryd3 in subserversd3) {\\n\\t\\t\\t\\t\\t\\t\\tif (subserversd3[subentryd3] !== subserversd2[subentryd2] && subserversd3[subentryd3] !== subservers[subentry] && subserversd3.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------> \\\" + subserversd3[subentryd3]);\\n\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd4 = ns.scan(subserversd3[subentryd3]);\\t// depth 4\\n\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd4 in subserversd4) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd4[subentryd4] !== subserversd3[subentryd3] && subserversd4[subentryd4] !== subserversd2[subentryd2] && subserversd4.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------------> \\\" + subserversd4[subentryd4]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd5 = ns.scan(subserversd4[subentryd4]);\\t// depth 5\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd5 in subserversd5) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd5[subentryd5] !== subserversd4[subentryd4] && subserversd5[subentryd5] !== subserversd3[subentryd3] && subserversd5.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-------------------------> \\\" + subserversd5[subentryd5]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd6 = ns.scan(subserversd5[subentryd5]);\\t// depth 6\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd6 in subserversd6) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd6[subentryd6] !== subserversd5[subentryd5] && subserversd6[subentryd6] !== subserversd4[subentryd4] && subserversd6.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"------------------------------> \\\" + subserversd6[subentryd6]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd7 = ns.scan(subserversd6[subentryd6]);\\t// depth 7\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor(let subentryd7 in subserversd7) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd7[subentryd7] !== subserversd6[subentryd6] && subserversd7[subentryd7] !== subserversd5[subentryd5] && subserversd7.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-----------------------------------> \\\" + subserversd7[subentryd7]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"gigascan.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.05,\"server\":\"snap-fitness\",\"moduleSequenceNumber\":1347,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet targetRam = ns.getServerMaxRam(ns.args[0]);\\n\\tlet scriptMem = ns.getScriptRam(ns.args[1]);\\n\\n\\tns.tprint(\\\"Maximum possible threads for \\\" + ns.args[1] + \\\": \\\" + Math.floor(targetRam / scriptMem));\\n\\tns.exit;\\n}\",\"filename\":\"ram-usage.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"snap-fitness\",\"moduleSequenceNumber\":1348,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerList } from \\\"modules/helper.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet serversSeen = [\\\"home\\\"]; // home + bought servers\\n\\tlet contractList = [];\\n\\n\\tserversSeen = await getServerList(serversSeen, 0, ns);\\n\\n\\tns.tprint(serversSeen);\\n}\",\"filename\":\"search-coding-contracts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"snap-fitness\",\"moduleSequenceNumber\":1349,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tvar servers = ns.scan(home);\\n\\tvar scripts = ns.ls(home, \\\".js\\\");\\n\\n\\tfor (let entry in scripts) {\\n\\t\\tns.tprint(\\\"found script: \\\" + scripts[entry]);\\n\\t}\\n\\n\\t// Hack servers (!!! depth = 2 !!!) if needed and populate with scripts\\n\\tfor (let entry in servers) {\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== \\\"home\\\") {\\n\\t\\t\\t\\tns.tprint(\\\"----->   \\\" + subservers[subentry]);\\n\\t\\t\\t\\tif (!ns.hasRootAccess(subservers[subentry])) {\\n\\t\\t\\t\\t\\ttakeover(subservers[subentry]);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tns.tprint(\\\"copying scripts to \\\" + subservers[subentry]);\\n\\t\\t\\t\\tawait ns.scp(scripts, home, subservers[subentry]);\\n\\t\\t\\t\\t//await ns.scp(\\\"setup.ns\\\", home, subservers[subentry]);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (!ns.hasRootAccess(servers[entry])) {\\n\\t\\t\\ttakeover(servers[entry]);\\n\\t\\t}\\n\\t\\tns.tprint(\\\"copying scripts to \\\" + servers[entry]);\\n\\t\\tawait ns.scp(scripts, home, servers[entry]);\\n\\t\\t//await ns.scp(\\\"setup.ns\\\", home, servers[entry]);\\n\\t}\\n\\n\\t/** \\n\\t * \\tAttempts to take over target machine\\t\\n\\t * \\n\\t *  @param {string} tar\\n\\t *  @return {boolean} outcome \\n\\t**/\\n\\tasync function takeover(tar) {\\n\\t\\tlet currentTarget = tar;\\n\\t\\tlet isNotTakenOver = true;\\n\\t\\tlet attemptCounter = 0;\\n\\n\\t\\tif (ns.getServerNumPortsRequired <= 5 && attemptCounter < 50) {\\n\\t\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\n\\t\\t\\t\\tattemptCounter++;\\n\\t\\t\\t}\\n\\n\\t\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.15,\"server\":\"snap-fitness\",\"moduleSequenceNumber\":1350,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}}],\"serversOnNetwork\":[\"rho-construction\",\"omnia\",\"deltaone\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":53,\"hackDifficulty\":53,\"minDifficulty\":18,\"moneyAvailable\":450000000,\"moneyMax\":11250000000,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":774,\"serverGrowth\":54}},\"run4theh111z\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"run4theh111z\",\"httpPortOpen\":true,\"ip\":\"25.5.7.7\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"simulated-reality.lit\",\"the-new-god.lit\"],\"organizationName\":\"The Runners\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Returns an array of all hostnames in the network tree\\n * \\n * @param {string[]} myServers\\n * @param {number} safetyCounter Prevents infnite recursion\\n * @param {NS} ns\\n */\\nexport async function getServerList(myServers, safetyCounter, ns) {\\n\\tlet srvrsSeen = myServers;\\n\\tlet currServScanResult = [];\\n\\n\\tfor (let serverSeen in srvrsSeen) {\\n\\t\\tcurrServScanResult = ns.scan(srvrsSeen[serverSeen]);\\n\\t\\tfor (let entry in currServScanResult) {\\n\\t\\t\\tif (!srvrsSeen.includes(currServScanResult[entry])) {\\n\\t\\t\\t\\tsrvrsSeen.push(currServScanResult[entry]);\\n\\t\\t\\t\\tif ((++safetyCounter) < 250) {\\n\\t\\t\\t\\t\\tawait getServerList(srvrsSeen, safetyCounter, ns);\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tns.exit();\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\t//Filter out invalid values (NaN, null, {}, undefined)\\n\\tsrvrsSeen = srvrsSeen.filter(x => x);\\n\\treturn srvrsSeen;\\n}\\n\\n\\n/** \\n * \\tAttempts to take over target machine\\t\\n * \\n *  @param {string} target\\n * \\t@param {NS} ns\\n *  @return {boolean} outcome \\n**/\\nexport async function takeover(target, ns) {\\n\\tconst home = \\\"home\\\";\\n\\tlet currentTarget = target;\\n\\tlet isNotTakenOver = true;\\n\\tlet attemptCounter = 0;\\n\\n\\tlet scripts = ns.ls(home, \\\".js\\\");\\n\\t//scripts.push(ns.ls(home, \\\".ns\\\")); //in case of deprecated .ns scripts\\n\\n\\tif (!ns.hasRootAccess(currentTarget) && attemptCounter < 30) {\\n\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\ttry {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t} catch (error) {\\n\\t\\t\\t\\t\\tns.tprint(\\\"not enough ports to nuke \\\" + currentTarget);\\n\\t\\t\\t\\t\\treturn false;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t}\\n\\t\\t\\tattemptCounter++;\\n\\t\\t}\\n\\n\\t\\tawait ns.scp(scripts, home, currentTarget);\\n\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\",\"filename\":\"/modules/helper.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":1351,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.grow(target);\\n\\t}\\n}\",\"filename\":\"basic-grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":1352,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"basic-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":1353,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(target);\\n\\t}\\n}\",\"filename\":\"basic-weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":1354,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerList, takeover } from \\\"modules/helper.js\\\";\\n\\n/** @param {NS} ns **/\\n// TODO: unused + unfinished, based on setup.ns\\nexport async function main(ns) {\\n\\tconst myServers = [\\\"home\\\"];\\n\\n\\tvar servers = await getServerList(myServers, 0, ns);\\n\\n\\tfor (let entry in servers) {\\t\\n\\t\\tawait takeover(servers[entry], ns);\\n\\t}\\n}\",\"filename\":\"deep-setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":1355,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\t//\\n}\",\"filename\":\"formulas-testing.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":1356,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tconst currentMachine = ns.getHostname();\\n\\tvar servers = ns.scan(currentMachine);\\n\\tvar scripts = ns.ls(home, \\\"basic-\\\");\\n\\n\\tns.tprint(\\\"Host:  \\\" + currentMachine);\\n\\tfor (let entry in servers) {\\t// depth 0\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\t// depth 1\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== home && subservers.length > 1) {\\n\\t\\t\\t\\tns.tprint(\\\"-----> \\\" + subservers[subentry]);\\n\\t\\t\\t\\tlet subserversd2 = ns.scan(subservers[subentry]); // depth 2\\n\\t\\t\\t\\tfor (let subentryd2 in subserversd2) {\\n\\t\\t\\t\\t\\tif (subserversd2[subentryd2] !== subservers[subentry] && subserversd2[subentryd2] !== servers[entry] && subserversd2.length > 1) {\\n\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------> \\\" + subserversd2[subentryd2]);\\n\\t\\t\\t\\t\\t\\tlet subserversd3 = ns.scan(subserversd2[subentryd2]);\\t// depth 3\\n\\t\\t\\t\\t\\t\\tfor (let subentryd3 in subserversd3) {\\n\\t\\t\\t\\t\\t\\t\\tif (subserversd3[subentryd3] !== subserversd2[subentryd2] && subserversd3[subentryd3] !== subservers[subentry] && subserversd3.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------> \\\" + subserversd3[subentryd3]);\\n\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd4 = ns.scan(subserversd3[subentryd3]);\\t// depth 4\\n\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd4 in subserversd4) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd4[subentryd4] !== subserversd3[subentryd3] && subserversd4[subentryd4] !== subserversd2[subentryd2] && subserversd4.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------------> \\\" + subserversd4[subentryd4]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd5 = ns.scan(subserversd4[subentryd4]);\\t// depth 5\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd5 in subserversd5) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd5[subentryd5] !== subserversd4[subentryd4] && subserversd5[subentryd5] !== subserversd3[subentryd3] && subserversd5.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-------------------------> \\\" + subserversd5[subentryd5]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd6 = ns.scan(subserversd5[subentryd5]);\\t// depth 6\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd6 in subserversd6) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd6[subentryd6] !== subserversd5[subentryd5] && subserversd6[subentryd6] !== subserversd4[subentryd4] && subserversd6.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"------------------------------> \\\" + subserversd6[subentryd6]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd7 = ns.scan(subserversd6[subentryd6]);\\t// depth 7\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor(let subentryd7 in subserversd7) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd7[subentryd7] !== subserversd6[subentryd6] && subserversd7[subentryd7] !== subserversd5[subentryd5] && subserversd7.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-----------------------------------> \\\" + subserversd7[subentryd7]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"gigascan.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.05,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":1357,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet targetRam = ns.getServerMaxRam(ns.args[0]);\\n\\tlet scriptMem = ns.getScriptRam(ns.args[1]);\\n\\n\\tns.tprint(\\\"Maximum possible threads for \\\" + ns.args[1] + \\\": \\\" + Math.floor(targetRam / scriptMem));\\n\\tns.exit;\\n}\",\"filename\":\"ram-usage.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":1358,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerList } from \\\"modules/helper.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet serversSeen = [\\\"home\\\"]; // home + bought servers\\n\\tlet contractList = [];\\n\\n\\tserversSeen = await getServerList(serversSeen, 0, ns);\\n\\n\\tns.tprint(serversSeen);\\n}\",\"filename\":\"search-coding-contracts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":1359,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tvar servers = ns.scan(home);\\n\\tvar scripts = ns.ls(home, \\\".js\\\");\\n\\n\\tfor (let entry in scripts) {\\n\\t\\tns.tprint(\\\"found script: \\\" + scripts[entry]);\\n\\t}\\n\\n\\t// Hack servers (!!! depth = 2 !!!) if needed and populate with scripts\\n\\tfor (let entry in servers) {\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== \\\"home\\\") {\\n\\t\\t\\t\\tns.tprint(\\\"----->   \\\" + subservers[subentry]);\\n\\t\\t\\t\\tif (!ns.hasRootAccess(subservers[subentry])) {\\n\\t\\t\\t\\t\\ttakeover(subservers[subentry]);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tns.tprint(\\\"copying scripts to \\\" + subservers[subentry]);\\n\\t\\t\\t\\tawait ns.scp(scripts, home, subservers[subentry]);\\n\\t\\t\\t\\t//await ns.scp(\\\"setup.ns\\\", home, subservers[subentry]);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (!ns.hasRootAccess(servers[entry])) {\\n\\t\\t\\ttakeover(servers[entry]);\\n\\t\\t}\\n\\t\\tns.tprint(\\\"copying scripts to \\\" + servers[entry]);\\n\\t\\tawait ns.scp(scripts, home, servers[entry]);\\n\\t\\t//await ns.scp(\\\"setup.ns\\\", home, servers[entry]);\\n\\t}\\n\\n\\t/** \\n\\t * \\tAttempts to take over target machine\\t\\n\\t * \\n\\t *  @param {string} tar\\n\\t *  @return {boolean} outcome \\n\\t**/\\n\\tasync function takeover(tar) {\\n\\t\\tlet currentTarget = tar;\\n\\t\\tlet isNotTakenOver = true;\\n\\t\\tlet attemptCounter = 0;\\n\\n\\t\\tif (ns.getServerNumPortsRequired <= 5 && attemptCounter < 50) {\\n\\t\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\n\\t\\t\\t\\tattemptCounter++;\\n\\t\\t\\t}\\n\\n\\t\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.15,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":1360,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}}],\"serversOnNetwork\":[\"zb-def\",\"stormtech\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":0,\"hackDifficulty\":5.319999999999635,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":542,\"serverGrowth\":0}},\"I.I.I.I\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-541231.cct\",\"type\":\"Find All Valid Math Expressions\",\"data\":[\"965045466\",-99],\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-409814.cct\",\"type\":\"Minimum Path Sum in a Triangle\",\"data\":[[1],[6,9],[4,7,7],[9,3,7,5],[2,2,9,5,9],[9,5,4,9,5,6],[8,9,7,9,1,3,6],[5,1,4,8,9,8,6,1],[1,1,3,7,7,7,3,3,8]],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"I.I.I.I\",\"httpPortOpen\":false,\"ip\":\"60.3.1.6\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"I.I.I.I\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Returns an array of all hostnames in the network tree\\n * \\n * @param {string[]} myServers\\n * @param {number} safetyCounter Prevents infnite recursion\\n * @param {NS} ns\\n */\\nexport async function getServerList(myServers, safetyCounter, ns) {\\n\\tlet srvrsSeen = myServers;\\n\\tlet currServScanResult = [];\\n\\n\\tfor (let serverSeen in srvrsSeen) {\\n\\t\\tcurrServScanResult = ns.scan(srvrsSeen[serverSeen]);\\n\\t\\tfor (let entry in currServScanResult) {\\n\\t\\t\\tif (!srvrsSeen.includes(currServScanResult[entry])) {\\n\\t\\t\\t\\tsrvrsSeen.push(currServScanResult[entry]);\\n\\t\\t\\t\\tif ((++safetyCounter) < 250) {\\n\\t\\t\\t\\t\\tawait getServerList(srvrsSeen, safetyCounter, ns);\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tns.exit();\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\t//Filter out invalid values (NaN, null, {}, undefined)\\n\\tsrvrsSeen = srvrsSeen.filter(x => x);\\n\\treturn srvrsSeen;\\n}\\n\\n\\n/** \\n * \\tAttempts to take over target machine\\t\\n * \\n *  @param {string} target\\n * \\t@param {NS} ns\\n *  @return {boolean} outcome \\n**/\\nexport async function takeover(target, ns) {\\n\\tconst home = \\\"home\\\";\\n\\tlet currentTarget = target;\\n\\tlet isNotTakenOver = true;\\n\\tlet attemptCounter = 0;\\n\\n\\tlet scripts = ns.ls(home, \\\".js\\\");\\n\\t//scripts.push(ns.ls(home, \\\".ns\\\")); //in case of deprecated .ns scripts\\n\\n\\tif (!ns.hasRootAccess(currentTarget) && attemptCounter < 30) {\\n\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\ttry {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t} catch (error) {\\n\\t\\t\\t\\t\\tns.tprint(\\\"not enough ports to nuke \\\" + currentTarget);\\n\\t\\t\\t\\t\\treturn false;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t}\\n\\t\\t\\tattemptCounter++;\\n\\t\\t}\\n\\n\\t\\tawait ns.scp(scripts, home, currentTarget);\\n\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\",\"filename\":\"/modules/helper.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":1361,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.grow(target);\\n\\t}\\n}\",\"filename\":\"basic-grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":1362,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"basic-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":1363,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(target);\\n\\t}\\n}\",\"filename\":\"basic-weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":1364,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerList, takeover } from \\\"modules/helper.js\\\";\\n\\n/** @param {NS} ns **/\\n// TODO: unused + unfinished, based on setup.ns\\nexport async function main(ns) {\\n\\tconst myServers = [\\\"home\\\"];\\n\\n\\tvar servers = await getServerList(myServers, 0, ns);\\n\\n\\tfor (let entry in servers) {\\t\\n\\t\\tawait takeover(servers[entry], ns);\\n\\t}\\n}\",\"filename\":\"deep-setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":1365,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\t//\\n}\",\"filename\":\"formulas-testing.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":1366,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tconst currentMachine = ns.getHostname();\\n\\tvar servers = ns.scan(currentMachine);\\n\\tvar scripts = ns.ls(home, \\\"basic-\\\");\\n\\n\\tns.tprint(\\\"Host:  \\\" + currentMachine);\\n\\tfor (let entry in servers) {\\t// depth 0\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\t// depth 1\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== home && subservers.length > 1) {\\n\\t\\t\\t\\tns.tprint(\\\"-----> \\\" + subservers[subentry]);\\n\\t\\t\\t\\tlet subserversd2 = ns.scan(subservers[subentry]); // depth 2\\n\\t\\t\\t\\tfor (let subentryd2 in subserversd2) {\\n\\t\\t\\t\\t\\tif (subserversd2[subentryd2] !== subservers[subentry] && subserversd2[subentryd2] !== servers[entry] && subserversd2.length > 1) {\\n\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------> \\\" + subserversd2[subentryd2]);\\n\\t\\t\\t\\t\\t\\tlet subserversd3 = ns.scan(subserversd2[subentryd2]);\\t// depth 3\\n\\t\\t\\t\\t\\t\\tfor (let subentryd3 in subserversd3) {\\n\\t\\t\\t\\t\\t\\t\\tif (subserversd3[subentryd3] !== subserversd2[subentryd2] && subserversd3[subentryd3] !== subservers[subentry] && subserversd3.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------> \\\" + subserversd3[subentryd3]);\\n\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd4 = ns.scan(subserversd3[subentryd3]);\\t// depth 4\\n\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd4 in subserversd4) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd4[subentryd4] !== subserversd3[subentryd3] && subserversd4[subentryd4] !== subserversd2[subentryd2] && subserversd4.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------------> \\\" + subserversd4[subentryd4]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd5 = ns.scan(subserversd4[subentryd4]);\\t// depth 5\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd5 in subserversd5) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd5[subentryd5] !== subserversd4[subentryd4] && subserversd5[subentryd5] !== subserversd3[subentryd3] && subserversd5.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-------------------------> \\\" + subserversd5[subentryd5]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd6 = ns.scan(subserversd5[subentryd5]);\\t// depth 6\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd6 in subserversd6) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd6[subentryd6] !== subserversd5[subentryd5] && subserversd6[subentryd6] !== subserversd4[subentryd4] && subserversd6.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"------------------------------> \\\" + subserversd6[subentryd6]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd7 = ns.scan(subserversd6[subentryd6]);\\t// depth 7\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor(let subentryd7 in subserversd7) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd7[subentryd7] !== subserversd6[subentryd6] && subserversd7[subentryd7] !== subserversd5[subentryd5] && subserversd7.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-----------------------------------> \\\" + subserversd7[subentryd7]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"gigascan.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.05,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":1367,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet targetRam = ns.getServerMaxRam(ns.args[0]);\\n\\tlet scriptMem = ns.getScriptRam(ns.args[1]);\\n\\n\\tns.tprint(\\\"Maximum possible threads for \\\" + ns.args[1] + \\\": \\\" + Math.floor(targetRam / scriptMem));\\n\\tns.exit;\\n}\",\"filename\":\"ram-usage.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":1368,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerList } from \\\"modules/helper.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet serversSeen = [\\\"home\\\"]; // home + bought servers\\n\\tlet contractList = [];\\n\\n\\tserversSeen = await getServerList(serversSeen, 0, ns);\\n\\n\\tns.tprint(serversSeen);\\n}\",\"filename\":\"search-coding-contracts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":1369,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tvar servers = ns.scan(home);\\n\\tvar scripts = ns.ls(home, \\\".ns\\\");\\n\\n\\tfor (let entry in scripts) {\\n\\t\\tns.tprint(\\\"found script: \\\" + scripts[entry]);\\n\\t}\\n\\n\\t// Hack servers (!!! depth = 2 !!!) if needed and populate with scripts\\n\\tfor (let entry in servers) {\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== \\\"home\\\") {\\n\\t\\t\\t\\tns.tprint(\\\"----->   \\\" + subservers[subentry]);\\n\\t\\t\\t\\tif (!ns.hasRootAccess(subservers[subentry])) {\\n\\t\\t\\t\\t\\ttakeover(subservers[subentry]);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tns.tprint(\\\"copying scripts to \\\" + subservers[subentry]);\\n\\t\\t\\t\\tawait ns.scp(scripts, home, subservers[subentry]);\\n\\t\\t\\t\\t//await ns.scp(\\\"setup.ns\\\", home, subservers[subentry]);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (!ns.hasRootAccess(servers[entry])) {\\n\\t\\t\\ttakeover(servers[entry]);\\n\\t\\t}\\n\\t\\tns.tprint(\\\"copying scripts to \\\" + servers[entry]);\\n\\t\\tawait ns.scp(scripts, home, servers[entry]);\\n\\t\\t//await ns.scp(\\\"setup.ns\\\", home, servers[entry]);\\n\\t}\\n\\n\\t/** \\n\\t * \\tAttempts to take over target machine\\t\\n\\t * \\n\\t *  @param {string} tar\\n\\t *  @return {boolean} outcome \\n\\t**/\\n\\tasync function takeover(tar) {\\n\\t\\tlet currentTarget = tar;\\n\\t\\tlet isNotTakenOver = true;\\n\\t\\tlet attemptCounter = 0;\\n\\n\\t\\tif (ns.getServerNumPortsRequired <= 5 && attemptCounter < 50) {\\n\\t\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\n\\t\\t\\t\\tattemptCounter++;\\n\\t\\t\\t}\\n\\n\\t\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.15,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":1370,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}}],\"serversOnNetwork\":[\"comptek\",\"millenium-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":0,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":347,\"serverGrowth\":0}},\"avmnite-02h\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"avmnite-02h\",\"httpPortOpen\":false,\"ip\":\"65.2.4.1\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"NiteSec\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Returns an array of all hostnames in the network tree\\n * \\n * @param {string[]} myServers\\n * @param {number} safetyCounter Prevents infnite recursion\\n * @param {NS} ns\\n */\\nexport async function getServerList(myServers, safetyCounter, ns) {\\n\\tlet srvrsSeen = myServers;\\n\\tlet currServScanResult = [];\\n\\n\\tfor (let serverSeen in srvrsSeen) {\\n\\t\\tcurrServScanResult = ns.scan(srvrsSeen[serverSeen]);\\n\\t\\tfor (let entry in currServScanResult) {\\n\\t\\t\\tif (!srvrsSeen.includes(currServScanResult[entry])) {\\n\\t\\t\\t\\tsrvrsSeen.push(currServScanResult[entry]);\\n\\t\\t\\t\\tif ((++safetyCounter) < 250) {\\n\\t\\t\\t\\t\\tawait getServerList(srvrsSeen, safetyCounter, ns);\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tns.exit();\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\t//Filter out invalid values (NaN, null, {}, undefined)\\n\\tsrvrsSeen = srvrsSeen.filter(x => x);\\n\\treturn srvrsSeen;\\n}\\n\\n\\n/** \\n * \\tAttempts to take over target machine\\t\\n * \\n *  @param {string} target\\n * \\t@param {NS} ns\\n *  @return {boolean} outcome \\n**/\\nexport async function takeover(target, ns) {\\n\\tconst home = \\\"home\\\";\\n\\tlet currentTarget = target;\\n\\tlet isNotTakenOver = true;\\n\\tlet attemptCounter = 0;\\n\\n\\tlet scripts = ns.ls(home, \\\".js\\\");\\n\\t//scripts.push(ns.ls(home, \\\".ns\\\")); //in case of deprecated .ns scripts\\n\\n\\tif (!ns.hasRootAccess(currentTarget) && attemptCounter < 30) {\\n\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\ttry {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t} catch (error) {\\n\\t\\t\\t\\t\\tns.tprint(\\\"not enough ports to nuke \\\" + currentTarget);\\n\\t\\t\\t\\t\\treturn false;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t}\\n\\t\\t\\tattemptCounter++;\\n\\t\\t}\\n\\n\\t\\tawait ns.scp(scripts, home, currentTarget);\\n\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\",\"filename\":\"/modules/helper.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":1371,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.grow(target);\\n\\t}\\n}\",\"filename\":\"basic-grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":1372,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"basic-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":1373,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(target);\\n\\t}\\n}\",\"filename\":\"basic-weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":1374,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerList, takeover } from \\\"modules/helper.js\\\";\\n\\n/** @param {NS} ns **/\\n// TODO: unused + unfinished, based on setup.ns\\nexport async function main(ns) {\\n\\tconst myServers = [\\\"home\\\"];\\n\\n\\tvar servers = await getServerList(myServers, 0, ns);\\n\\n\\tfor (let entry in servers) {\\t\\n\\t\\tawait takeover(servers[entry], ns);\\n\\t}\\n}\",\"filename\":\"deep-setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":1375,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\t//\\n}\",\"filename\":\"formulas-testing.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":1376,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tconst currentMachine = ns.getHostname();\\n\\tvar servers = ns.scan(currentMachine);\\n\\tvar scripts = ns.ls(home, \\\"basic-\\\");\\n\\n\\tns.tprint(\\\"Host:  \\\" + currentMachine);\\n\\tfor (let entry in servers) {\\t// depth 0\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\t// depth 1\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== home && subservers.length > 1) {\\n\\t\\t\\t\\tns.tprint(\\\"-----> \\\" + subservers[subentry]);\\n\\t\\t\\t\\tlet subserversd2 = ns.scan(subservers[subentry]); // depth 2\\n\\t\\t\\t\\tfor (let subentryd2 in subserversd2) {\\n\\t\\t\\t\\t\\tif (subserversd2[subentryd2] !== subservers[subentry] && subserversd2[subentryd2] !== servers[entry] && subserversd2.length > 1) {\\n\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------> \\\" + subserversd2[subentryd2]);\\n\\t\\t\\t\\t\\t\\tlet subserversd3 = ns.scan(subserversd2[subentryd2]);\\t// depth 3\\n\\t\\t\\t\\t\\t\\tfor (let subentryd3 in subserversd3) {\\n\\t\\t\\t\\t\\t\\t\\tif (subserversd3[subentryd3] !== subserversd2[subentryd2] && subserversd3[subentryd3] !== subservers[subentry] && subserversd3.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------> \\\" + subserversd3[subentryd3]);\\n\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd4 = ns.scan(subserversd3[subentryd3]);\\t// depth 4\\n\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd4 in subserversd4) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd4[subentryd4] !== subserversd3[subentryd3] && subserversd4[subentryd4] !== subserversd2[subentryd2] && subserversd4.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------------> \\\" + subserversd4[subentryd4]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd5 = ns.scan(subserversd4[subentryd4]);\\t// depth 5\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd5 in subserversd5) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd5[subentryd5] !== subserversd4[subentryd4] && subserversd5[subentryd5] !== subserversd3[subentryd3] && subserversd5.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-------------------------> \\\" + subserversd5[subentryd5]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd6 = ns.scan(subserversd5[subentryd5]);\\t// depth 6\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd6 in subserversd6) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd6[subentryd6] !== subserversd5[subentryd5] && subserversd6[subentryd6] !== subserversd4[subentryd4] && subserversd6.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"------------------------------> \\\" + subserversd6[subentryd6]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd7 = ns.scan(subserversd6[subentryd6]);\\t// depth 7\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor(let subentryd7 in subserversd7) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd7[subentryd7] !== subserversd6[subentryd6] && subserversd7[subentryd7] !== subserversd5[subentryd5] && subserversd7.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-----------------------------------> \\\" + subserversd7[subentryd7]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"gigascan.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.05,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":1377,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet targetRam = ns.getServerMaxRam(ns.args[0]);\\n\\tlet scriptMem = ns.getScriptRam(ns.args[1]);\\n\\n\\tns.tprint(\\\"Maximum possible threads for \\\" + ns.args[1] + \\\": \\\" + Math.floor(targetRam / scriptMem));\\n\\tns.exit;\\n}\",\"filename\":\"ram-usage.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":1378,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerList } from \\\"modules/helper.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet serversSeen = [\\\"home\\\"]; // home + bought servers\\n\\tlet contractList = [];\\n\\n\\tserversSeen = await getServerList(serversSeen, 0, ns);\\n\\n\\tns.tprint(serversSeen);\\n}\",\"filename\":\"search-coding-contracts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":1379,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tvar servers = ns.scan(home);\\n\\tvar scripts = ns.ls(home, \\\".ns\\\");\\n\\n\\tfor (let entry in scripts) {\\n\\t\\tns.tprint(\\\"found script: \\\" + scripts[entry]);\\n\\t}\\n\\n\\t// Hack servers (!!! depth = 2 !!!) if needed and populate with scripts\\n\\tfor (let entry in servers) {\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== \\\"home\\\") {\\n\\t\\t\\t\\tns.tprint(\\\"----->   \\\" + subservers[subentry]);\\n\\t\\t\\t\\tif (!ns.hasRootAccess(subservers[subentry])) {\\n\\t\\t\\t\\t\\ttakeover(subservers[subentry]);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tns.tprint(\\\"copying scripts to \\\" + subservers[subentry]);\\n\\t\\t\\t\\tawait ns.scp(scripts, home, subservers[subentry]);\\n\\t\\t\\t\\t//await ns.scp(\\\"setup.ns\\\", home, subservers[subentry]);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (!ns.hasRootAccess(servers[entry])) {\\n\\t\\t\\ttakeover(servers[entry]);\\n\\t\\t}\\n\\t\\tns.tprint(\\\"copying scripts to \\\" + servers[entry]);\\n\\t\\tawait ns.scp(scripts, home, servers[entry]);\\n\\t\\t//await ns.scp(\\\"setup.ns\\\", home, servers[entry]);\\n\\t}\\n\\n\\t/** \\n\\t * \\tAttempts to take over target machine\\t\\n\\t * \\n\\t *  @param {string} tar\\n\\t *  @return {boolean} outcome \\n\\t**/\\n\\tasync function takeover(tar) {\\n\\t\\tlet currentTarget = tar;\\n\\t\\tlet isNotTakenOver = true;\\n\\t\\tlet attemptCounter = 0;\\n\\n\\t\\tif (ns.getServerNumPortsRequired <= 5 && attemptCounter < 50) {\\n\\t\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\n\\t\\t\\t\\tattemptCounter++;\\n\\t\\t\\t}\\n\\n\\t\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.15,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":1380,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}}],\"serversOnNetwork\":[\"phantasy\",\"syscore\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":2,\"openPortCount\":3,\"requiredHackingSkill\":211,\"serverGrowth\":0}},\".\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-525506.cct\",\"type\":\"Algorithmic Stock Trader IV\",\"data\":[4,[2,171,91,41,37,57,104,126,8,109,35,14,78,60,89,157,142,175,46,159,151,66,31,15,34,188,184]],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\".\",\"httpPortOpen\":true,\"ip\":\"8.0.2.6\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\".\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Returns an array of all hostnames in the network tree\\n * \\n * @param {string[]} myServers\\n * @param {number} safetyCounter Prevents infnite recursion\\n * @param {NS} ns\\n */\\nexport async function getServerList(myServers, safetyCounter, ns) {\\n\\tlet srvrsSeen = myServers;\\n\\tlet currServScanResult = [];\\n\\n\\tfor (let serverSeen in srvrsSeen) {\\n\\t\\tcurrServScanResult = ns.scan(srvrsSeen[serverSeen]);\\n\\t\\tfor (let entry in currServScanResult) {\\n\\t\\t\\tif (!srvrsSeen.includes(currServScanResult[entry])) {\\n\\t\\t\\t\\tsrvrsSeen.push(currServScanResult[entry]);\\n\\t\\t\\t\\tif ((++safetyCounter) < 250) {\\n\\t\\t\\t\\t\\tawait getServerList(srvrsSeen, safetyCounter, ns);\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tns.exit();\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\t//Filter out invalid values (NaN, null, {}, undefined)\\n\\tsrvrsSeen = srvrsSeen.filter(x => x);\\n\\treturn srvrsSeen;\\n}\\n\\n\\n/** \\n * \\tAttempts to take over target machine\\t\\n * \\n *  @param {string} target\\n * \\t@param {NS} ns\\n *  @return {boolean} outcome \\n**/\\nexport async function takeover(target, ns) {\\n\\tconst home = \\\"home\\\";\\n\\tlet currentTarget = target;\\n\\tlet isNotTakenOver = true;\\n\\tlet attemptCounter = 0;\\n\\n\\tlet scripts = ns.ls(home, \\\".js\\\");\\n\\t//scripts.push(ns.ls(home, \\\".ns\\\")); //in case of deprecated .ns scripts\\n\\n\\tif (!ns.hasRootAccess(currentTarget) && attemptCounter < 30) {\\n\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\ttry {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t} catch (error) {\\n\\t\\t\\t\\t\\tns.tprint(\\\"not enough ports to nuke \\\" + currentTarget);\\n\\t\\t\\t\\t\\treturn false;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t}\\n\\t\\t\\tattemptCounter++;\\n\\t\\t}\\n\\n\\t\\tawait ns.scp(scripts, home, currentTarget);\\n\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\",\"filename\":\"/modules/helper.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.05,\"server\":\".\",\"moduleSequenceNumber\":1381,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.grow(target);\\n\\t}\\n}\",\"filename\":\"basic-grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\".\",\"moduleSequenceNumber\":1382,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"basic-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\".\",\"moduleSequenceNumber\":1383,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(target);\\n\\t}\\n}\",\"filename\":\"basic-weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\".\",\"moduleSequenceNumber\":1384,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerList, takeover } from \\\"modules/helper.js\\\";\\n\\n/** @param {NS} ns **/\\n// TODO: unused + unfinished, based on setup.ns\\nexport async function main(ns) {\\n\\tconst myServers = [\\\"home\\\"];\\n\\n\\tvar servers = await getServerList(myServers, 0, ns);\\n\\n\\tfor (let entry in servers) {\\t\\n\\t\\tawait takeover(servers[entry], ns);\\n\\t}\\n}\",\"filename\":\"deep-setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.05,\"server\":\".\",\"moduleSequenceNumber\":1385,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\t//\\n}\",\"filename\":\"formulas-testing.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\".\",\"moduleSequenceNumber\":1386,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tconst currentMachine = ns.getHostname();\\n\\tvar servers = ns.scan(currentMachine);\\n\\tvar scripts = ns.ls(home, \\\"basic-\\\");\\n\\n\\tns.tprint(\\\"Host:  \\\" + currentMachine);\\n\\tfor (let entry in servers) {\\t// depth 0\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\t// depth 1\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== home && subservers.length > 1) {\\n\\t\\t\\t\\tns.tprint(\\\"-----> \\\" + subservers[subentry]);\\n\\t\\t\\t\\tlet subserversd2 = ns.scan(subservers[subentry]); // depth 2\\n\\t\\t\\t\\tfor (let subentryd2 in subserversd2) {\\n\\t\\t\\t\\t\\tif (subserversd2[subentryd2] !== subservers[subentry] && subserversd2[subentryd2] !== servers[entry] && subserversd2.length > 1) {\\n\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------> \\\" + subserversd2[subentryd2]);\\n\\t\\t\\t\\t\\t\\tlet subserversd3 = ns.scan(subserversd2[subentryd2]);\\t// depth 3\\n\\t\\t\\t\\t\\t\\tfor (let subentryd3 in subserversd3) {\\n\\t\\t\\t\\t\\t\\t\\tif (subserversd3[subentryd3] !== subserversd2[subentryd2] && subserversd3[subentryd3] !== subservers[subentry] && subserversd3.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------> \\\" + subserversd3[subentryd3]);\\n\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd4 = ns.scan(subserversd3[subentryd3]);\\t// depth 4\\n\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd4 in subserversd4) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd4[subentryd4] !== subserversd3[subentryd3] && subserversd4[subentryd4] !== subserversd2[subentryd2] && subserversd4.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------------> \\\" + subserversd4[subentryd4]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd5 = ns.scan(subserversd4[subentryd4]);\\t// depth 5\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd5 in subserversd5) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd5[subentryd5] !== subserversd4[subentryd4] && subserversd5[subentryd5] !== subserversd3[subentryd3] && subserversd5.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-------------------------> \\\" + subserversd5[subentryd5]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd6 = ns.scan(subserversd5[subentryd5]);\\t// depth 6\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd6 in subserversd6) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd6[subentryd6] !== subserversd5[subentryd5] && subserversd6[subentryd6] !== subserversd4[subentryd4] && subserversd6.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"------------------------------> \\\" + subserversd6[subentryd6]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd7 = ns.scan(subserversd6[subentryd6]);\\t// depth 7\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor(let subentryd7 in subserversd7) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd7[subentryd7] !== subserversd6[subentryd6] && subserversd7[subentryd7] !== subserversd5[subentryd5] && subserversd7.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-----------------------------------> \\\" + subserversd7[subentryd7]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"gigascan.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.05,\"server\":\".\",\"moduleSequenceNumber\":1387,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet targetRam = ns.getServerMaxRam(ns.args[0]);\\n\\tlet scriptMem = ns.getScriptRam(ns.args[1]);\\n\\n\\tns.tprint(\\\"Maximum possible threads for \\\" + ns.args[1] + \\\": \\\" + Math.floor(targetRam / scriptMem));\\n\\tns.exit;\\n}\",\"filename\":\"ram-usage.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\".\",\"moduleSequenceNumber\":1388,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerList } from \\\"modules/helper.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet serversSeen = [\\\"home\\\"]; // home + bought servers\\n\\tlet contractList = [];\\n\\n\\tserversSeen = await getServerList(serversSeen, 0, ns);\\n\\n\\tns.tprint(serversSeen);\\n}\",\"filename\":\"search-coding-contracts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\".\",\"moduleSequenceNumber\":1389,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tvar servers = ns.scan(home);\\n\\tvar scripts = ns.ls(home, \\\".js\\\");\\n\\n\\tfor (let entry in scripts) {\\n\\t\\tns.tprint(\\\"found script: \\\" + scripts[entry]);\\n\\t}\\n\\n\\t// Hack servers (!!! depth = 2 !!!) if needed and populate with scripts\\n\\tfor (let entry in servers) {\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== \\\"home\\\") {\\n\\t\\t\\t\\tns.tprint(\\\"----->   \\\" + subservers[subentry]);\\n\\t\\t\\t\\tif (!ns.hasRootAccess(subservers[subentry])) {\\n\\t\\t\\t\\t\\ttakeover(subservers[subentry]);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tns.tprint(\\\"copying scripts to \\\" + subservers[subentry]);\\n\\t\\t\\t\\tawait ns.scp(scripts, home, subservers[subentry]);\\n\\t\\t\\t\\t//await ns.scp(\\\"setup.ns\\\", home, subservers[subentry]);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (!ns.hasRootAccess(servers[entry])) {\\n\\t\\t\\ttakeover(servers[entry]);\\n\\t\\t}\\n\\t\\tns.tprint(\\\"copying scripts to \\\" + servers[entry]);\\n\\t\\tawait ns.scp(scripts, home, servers[entry]);\\n\\t\\t//await ns.scp(\\\"setup.ns\\\", home, servers[entry]);\\n\\t}\\n\\n\\t/** \\n\\t * \\tAttempts to take over target machine\\t\\n\\t * \\n\\t *  @param {string} tar\\n\\t *  @return {boolean} outcome \\n\\t**/\\n\\tasync function takeover(tar) {\\n\\t\\tlet currentTarget = tar;\\n\\t\\tlet isNotTakenOver = true;\\n\\t\\tlet attemptCounter = 0;\\n\\n\\t\\tif (ns.getServerNumPortsRequired <= 5 && attemptCounter < 50) {\\n\\t\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\n\\t\\t\\t\\tattemptCounter++;\\n\\t\\t\\t}\\n\\n\\t\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.15,\"server\":\".\",\"moduleSequenceNumber\":1390,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}}],\"serversOnNetwork\":[\"helios\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":0,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":537,\"serverGrowth\":0}},\"CSEC\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"CSEC\",\"httpPortOpen\":false,\"ip\":\"64.0.2.5\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"CyberSec\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Returns an array of all hostnames in the network tree\\n * \\n * @param {string[]} myServers\\n * @param {number} safetyCounter Prevents infnite recursion\\n * @param {NS} ns\\n */\\nexport async function getServerList(myServers, safetyCounter, ns) {\\n\\tlet srvrsSeen = myServers;\\n\\tlet currServScanResult = [];\\n\\n\\tfor (let serverSeen in srvrsSeen) {\\n\\t\\tcurrServScanResult = ns.scan(srvrsSeen[serverSeen]);\\n\\t\\tfor (let entry in currServScanResult) {\\n\\t\\t\\tif (!srvrsSeen.includes(currServScanResult[entry])) {\\n\\t\\t\\t\\tsrvrsSeen.push(currServScanResult[entry]);\\n\\t\\t\\t\\tif ((++safetyCounter) < 250) {\\n\\t\\t\\t\\t\\tawait getServerList(srvrsSeen, safetyCounter, ns);\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tns.exit();\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\t//Filter out invalid values (NaN, null, {}, undefined)\\n\\tsrvrsSeen = srvrsSeen.filter(x => x);\\n\\treturn srvrsSeen;\\n}\\n\\n\\n/** \\n * \\tAttempts to take over target machine\\t\\n * \\n *  @param {string} target\\n * \\t@param {NS} ns\\n *  @return {boolean} outcome \\n**/\\nexport async function takeover(target, ns) {\\n\\tconst home = \\\"home\\\";\\n\\tlet currentTarget = target;\\n\\tlet isNotTakenOver = true;\\n\\tlet attemptCounter = 0;\\n\\n\\tlet scripts = ns.ls(home, \\\".js\\\");\\n\\t//scripts.push(ns.ls(home, \\\".ns\\\")); //in case of deprecated .ns scripts\\n\\n\\tif (!ns.hasRootAccess(currentTarget) && attemptCounter < 30) {\\n\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\ttry {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t} catch (error) {\\n\\t\\t\\t\\t\\tns.tprint(\\\"not enough ports to nuke \\\" + currentTarget);\\n\\t\\t\\t\\t\\treturn false;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t}\\n\\t\\t\\tattemptCounter++;\\n\\t\\t}\\n\\n\\t\\tawait ns.scp(scripts, home, currentTarget);\\n\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\",\"filename\":\"/modules/helper.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"CSEC\",\"moduleSequenceNumber\":1391,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.grow(target);\\n\\t}\\n}\",\"filename\":\"basic-grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"CSEC\",\"moduleSequenceNumber\":1392,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"basic-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"CSEC\",\"moduleSequenceNumber\":1393,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(target);\\n\\t}\\n}\",\"filename\":\"basic-weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"CSEC\",\"moduleSequenceNumber\":1394,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerList, takeover } from \\\"modules/helper.js\\\";\\n\\n/** @param {NS} ns **/\\n// TODO: unused + unfinished, based on setup.ns\\nexport async function main(ns) {\\n\\tconst myServers = [\\\"home\\\"];\\n\\n\\tvar servers = await getServerList(myServers, 0, ns);\\n\\n\\tfor (let entry in servers) {\\t\\n\\t\\tawait takeover(servers[entry], ns);\\n\\t}\\n}\",\"filename\":\"deep-setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"CSEC\",\"moduleSequenceNumber\":1395,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\t//\\n}\",\"filename\":\"formulas-testing.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"CSEC\",\"moduleSequenceNumber\":1396,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tconst currentMachine = ns.getHostname();\\n\\tvar servers = ns.scan(currentMachine);\\n\\tvar scripts = ns.ls(home, \\\"basic-\\\");\\n\\n\\tns.tprint(\\\"Host:  \\\" + currentMachine);\\n\\tfor (let entry in servers) {\\t// depth 0\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\t// depth 1\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== home && subservers.length > 1) {\\n\\t\\t\\t\\tns.tprint(\\\"-----> \\\" + subservers[subentry]);\\n\\t\\t\\t\\tlet subserversd2 = ns.scan(subservers[subentry]); // depth 2\\n\\t\\t\\t\\tfor (let subentryd2 in subserversd2) {\\n\\t\\t\\t\\t\\tif (subserversd2[subentryd2] !== subservers[subentry] && subserversd2[subentryd2] !== servers[entry] && subserversd2.length > 1) {\\n\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------> \\\" + subserversd2[subentryd2]);\\n\\t\\t\\t\\t\\t\\tlet subserversd3 = ns.scan(subserversd2[subentryd2]);\\t// depth 3\\n\\t\\t\\t\\t\\t\\tfor (let subentryd3 in subserversd3) {\\n\\t\\t\\t\\t\\t\\t\\tif (subserversd3[subentryd3] !== subserversd2[subentryd2] && subserversd3[subentryd3] !== subservers[subentry] && subserversd3.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------> \\\" + subserversd3[subentryd3]);\\n\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd4 = ns.scan(subserversd3[subentryd3]);\\t// depth 4\\n\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd4 in subserversd4) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd4[subentryd4] !== subserversd3[subentryd3] && subserversd4[subentryd4] !== subserversd2[subentryd2] && subserversd4.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------------> \\\" + subserversd4[subentryd4]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd5 = ns.scan(subserversd4[subentryd4]);\\t// depth 5\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd5 in subserversd5) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd5[subentryd5] !== subserversd4[subentryd4] && subserversd5[subentryd5] !== subserversd3[subentryd3] && subserversd5.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-------------------------> \\\" + subserversd5[subentryd5]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd6 = ns.scan(subserversd5[subentryd5]);\\t// depth 6\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd6 in subserversd6) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd6[subentryd6] !== subserversd5[subentryd5] && subserversd6[subentryd6] !== subserversd4[subentryd4] && subserversd6.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"------------------------------> \\\" + subserversd6[subentryd6]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd7 = ns.scan(subserversd6[subentryd6]);\\t// depth 7\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor(let subentryd7 in subserversd7) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd7[subentryd7] !== subserversd6[subentryd6] && subserversd7[subentryd7] !== subserversd5[subentryd5] && subserversd7.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-----------------------------------> \\\" + subserversd7[subentryd7]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"gigascan.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.05,\"server\":\"CSEC\",\"moduleSequenceNumber\":1397,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet targetRam = ns.getServerMaxRam(ns.args[0]);\\n\\tlet scriptMem = ns.getScriptRam(ns.args[1]);\\n\\n\\tns.tprint(\\\"Maximum possible threads for \\\" + ns.args[1] + \\\": \\\" + Math.floor(targetRam / scriptMem));\\n\\tns.exit;\\n}\",\"filename\":\"ram-usage.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"CSEC\",\"moduleSequenceNumber\":1398,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerList } from \\\"modules/helper.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet serversSeen = [\\\"home\\\"]; // home + bought servers\\n\\tlet contractList = [];\\n\\n\\tserversSeen = await getServerList(serversSeen, 0, ns);\\n\\n\\tns.tprint(serversSeen);\\n}\",\"filename\":\"search-coding-contracts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"CSEC\",\"moduleSequenceNumber\":1399,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tvar servers = ns.scan(home);\\n\\tvar scripts = ns.ls(home, \\\".js\\\");\\n\\n\\tfor (let entry in scripts) {\\n\\t\\tns.tprint(\\\"found script: \\\" + scripts[entry]);\\n\\t}\\n\\n\\t// Hack servers (!!! depth = 2 !!!) if needed and populate with scripts\\n\\tfor (let entry in servers) {\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== \\\"home\\\") {\\n\\t\\t\\t\\tns.tprint(\\\"----->   \\\" + subservers[subentry]);\\n\\t\\t\\t\\tif (!ns.hasRootAccess(subservers[subentry])) {\\n\\t\\t\\t\\t\\ttakeover(subservers[subentry]);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tns.tprint(\\\"copying scripts to \\\" + subservers[subentry]);\\n\\t\\t\\t\\tawait ns.scp(scripts, home, subservers[subentry]);\\n\\t\\t\\t\\t//await ns.scp(\\\"setup.ns\\\", home, subservers[subentry]);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (!ns.hasRootAccess(servers[entry])) {\\n\\t\\t\\ttakeover(servers[entry]);\\n\\t\\t}\\n\\t\\tns.tprint(\\\"copying scripts to \\\" + servers[entry]);\\n\\t\\tawait ns.scp(scripts, home, servers[entry]);\\n\\t\\t//await ns.scp(\\\"setup.ns\\\", home, servers[entry]);\\n\\t}\\n\\n\\t/** \\n\\t * \\tAttempts to take over target machine\\t\\n\\t * \\n\\t *  @param {string} tar\\n\\t *  @return {boolean} outcome \\n\\t**/\\n\\tasync function takeover(tar) {\\n\\t\\tlet currentTarget = tar;\\n\\t\\tlet isNotTakenOver = true;\\n\\t\\tlet attemptCounter = 0;\\n\\n\\t\\tif (ns.getServerNumPortsRequired <= 5 && attemptCounter < 50) {\\n\\t\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\n\\t\\t\\t\\tattemptCounter++;\\n\\t\\t\\t}\\n\\n\\t\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.15,\"server\":\"CSEC\",\"moduleSequenceNumber\":1400,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}}],\"serversOnNetwork\":[\"hong-fang-tea\",\"omega-net\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":0,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":1,\"openPortCount\":3,\"requiredHackingSkill\":53,\"serverGrowth\":0}},\"The-Cave\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"The-Cave\",\"httpPortOpen\":true,\"ip\":\"63.5.4.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"alpha-omega.lit\"],\"organizationName\":\"Helios\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Returns an array of all hostnames in the network tree\\n * \\n * @param {string[]} myServers\\n * @param {number} safetyCounter Prevents infnite recursion\\n * @param {NS} ns\\n */\\nexport async function getServerList(myServers, safetyCounter, ns) {\\n\\tlet srvrsSeen = myServers;\\n\\tlet currServScanResult = [];\\n\\n\\tfor (let serverSeen in srvrsSeen) {\\n\\t\\tcurrServScanResult = ns.scan(srvrsSeen[serverSeen]);\\n\\t\\tfor (let entry in currServScanResult) {\\n\\t\\t\\tif (!srvrsSeen.includes(currServScanResult[entry])) {\\n\\t\\t\\t\\tsrvrsSeen.push(currServScanResult[entry]);\\n\\t\\t\\t\\tif ((++safetyCounter) < 250) {\\n\\t\\t\\t\\t\\tawait getServerList(srvrsSeen, safetyCounter, ns);\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tns.exit();\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\t//Filter out invalid values (NaN, null, {}, undefined)\\n\\tsrvrsSeen = srvrsSeen.filter(x => x);\\n\\treturn srvrsSeen;\\n}\\n\\n\\n/** \\n * \\tAttempts to take over target machine\\t\\n * \\n *  @param {string} target\\n * \\t@param {NS} ns\\n *  @return {boolean} outcome \\n**/\\nexport async function takeover(target, ns) {\\n\\tconst home = \\\"home\\\";\\n\\tlet currentTarget = target;\\n\\tlet isNotTakenOver = true;\\n\\tlet attemptCounter = 0;\\n\\n\\tlet scripts = ns.ls(home, \\\".js\\\");\\n\\t//scripts.push(ns.ls(home, \\\".ns\\\")); //in case of deprecated .ns scripts\\n\\n\\tif (!ns.hasRootAccess(currentTarget) && attemptCounter < 30) {\\n\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\ttry {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t} catch (error) {\\n\\t\\t\\t\\t\\tns.tprint(\\\"not enough ports to nuke \\\" + currentTarget);\\n\\t\\t\\t\\t\\treturn false;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t}\\n\\t\\t\\tattemptCounter++;\\n\\t\\t}\\n\\n\\t\\tawait ns.scp(scripts, home, currentTarget);\\n\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\",\"filename\":\"/modules/helper.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"The-Cave\",\"moduleSequenceNumber\":1401,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.grow(target);\\n\\t}\\n}\",\"filename\":\"basic-grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"The-Cave\",\"moduleSequenceNumber\":1402,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"basic-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"The-Cave\",\"moduleSequenceNumber\":1403,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(target);\\n\\t}\\n}\",\"filename\":\"basic-weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"The-Cave\",\"moduleSequenceNumber\":1404,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerList, takeover } from \\\"modules/helper.js\\\";\\n\\n/** @param {NS} ns **/\\n// TODO: unused + unfinished, based on setup.ns\\nexport async function main(ns) {\\n\\tconst myServers = [\\\"home\\\"];\\n\\n\\tvar servers = await getServerList(myServers, 0, ns);\\n\\n\\tfor (let entry in servers) {\\t\\n\\t\\tawait takeover(servers[entry], ns);\\n\\t}\\n}\",\"filename\":\"deep-setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"The-Cave\",\"moduleSequenceNumber\":1405,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\t//\\n}\",\"filename\":\"formulas-testing.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"The-Cave\",\"moduleSequenceNumber\":1406,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tconst currentMachine = ns.getHostname();\\n\\tvar servers = ns.scan(currentMachine);\\n\\tvar scripts = ns.ls(home, \\\"basic-\\\");\\n\\n\\tns.tprint(\\\"Host:  \\\" + currentMachine);\\n\\tfor (let entry in servers) {\\t// depth 0\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\t// depth 1\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== home && subservers.length > 1) {\\n\\t\\t\\t\\tns.tprint(\\\"-----> \\\" + subservers[subentry]);\\n\\t\\t\\t\\tlet subserversd2 = ns.scan(subservers[subentry]); // depth 2\\n\\t\\t\\t\\tfor (let subentryd2 in subserversd2) {\\n\\t\\t\\t\\t\\tif (subserversd2[subentryd2] !== subservers[subentry] && subserversd2[subentryd2] !== servers[entry] && subserversd2.length > 1) {\\n\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------> \\\" + subserversd2[subentryd2]);\\n\\t\\t\\t\\t\\t\\tlet subserversd3 = ns.scan(subserversd2[subentryd2]);\\t// depth 3\\n\\t\\t\\t\\t\\t\\tfor (let subentryd3 in subserversd3) {\\n\\t\\t\\t\\t\\t\\t\\tif (subserversd3[subentryd3] !== subserversd2[subentryd2] && subserversd3[subentryd3] !== subservers[subentry] && subserversd3.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------> \\\" + subserversd3[subentryd3]);\\n\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd4 = ns.scan(subserversd3[subentryd3]);\\t// depth 4\\n\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd4 in subserversd4) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd4[subentryd4] !== subserversd3[subentryd3] && subserversd4[subentryd4] !== subserversd2[subentryd2] && subserversd4.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------------> \\\" + subserversd4[subentryd4]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd5 = ns.scan(subserversd4[subentryd4]);\\t// depth 5\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd5 in subserversd5) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd5[subentryd5] !== subserversd4[subentryd4] && subserversd5[subentryd5] !== subserversd3[subentryd3] && subserversd5.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-------------------------> \\\" + subserversd5[subentryd5]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd6 = ns.scan(subserversd5[subentryd5]);\\t// depth 6\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd6 in subserversd6) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd6[subentryd6] !== subserversd5[subentryd5] && subserversd6[subentryd6] !== subserversd4[subentryd4] && subserversd6.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"------------------------------> \\\" + subserversd6[subentryd6]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd7 = ns.scan(subserversd6[subentryd6]);\\t// depth 7\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor(let subentryd7 in subserversd7) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd7[subentryd7] !== subserversd6[subentryd6] && subserversd7[subentryd7] !== subserversd5[subentryd5] && subserversd7.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-----------------------------------> \\\" + subserversd7[subentryd7]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"gigascan.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.05,\"server\":\"The-Cave\",\"moduleSequenceNumber\":1407,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet targetRam = ns.getServerMaxRam(ns.args[0]);\\n\\tlet scriptMem = ns.getScriptRam(ns.args[1]);\\n\\n\\tns.tprint(\\\"Maximum possible threads for \\\" + ns.args[1] + \\\": \\\" + Math.floor(targetRam / scriptMem));\\n\\tns.exit;\\n}\",\"filename\":\"ram-usage.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"The-Cave\",\"moduleSequenceNumber\":1408,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerList } from \\\"modules/helper.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet serversSeen = [\\\"home\\\"]; // home + bought servers\\n\\tlet contractList = [];\\n\\n\\tserversSeen = await getServerList(serversSeen, 0, ns);\\n\\n\\tns.tprint(serversSeen);\\n}\",\"filename\":\"search-coding-contracts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"The-Cave\",\"moduleSequenceNumber\":1409,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tvar servers = ns.scan(home);\\n\\tvar scripts = ns.ls(home, \\\".js\\\");\\n\\n\\tfor (let entry in scripts) {\\n\\t\\tns.tprint(\\\"found script: \\\" + scripts[entry]);\\n\\t}\\n\\n\\t// Hack servers (!!! depth = 2 !!!) if needed and populate with scripts\\n\\tfor (let entry in servers) {\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== \\\"home\\\") {\\n\\t\\t\\t\\tns.tprint(\\\"----->   \\\" + subservers[subentry]);\\n\\t\\t\\t\\tif (!ns.hasRootAccess(subservers[subentry])) {\\n\\t\\t\\t\\t\\ttakeover(subservers[subentry]);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tns.tprint(\\\"copying scripts to \\\" + subservers[subentry]);\\n\\t\\t\\t\\tawait ns.scp(scripts, home, subservers[subentry]);\\n\\t\\t\\t\\t//await ns.scp(\\\"setup.ns\\\", home, subservers[subentry]);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (!ns.hasRootAccess(servers[entry])) {\\n\\t\\t\\ttakeover(servers[entry]);\\n\\t\\t}\\n\\t\\tns.tprint(\\\"copying scripts to \\\" + servers[entry]);\\n\\t\\tawait ns.scp(scripts, home, servers[entry]);\\n\\t\\t//await ns.scp(\\\"setup.ns\\\", home, servers[entry]);\\n\\t}\\n\\n\\t/** \\n\\t * \\tAttempts to take over target machine\\t\\n\\t * \\n\\t *  @param {string} tar\\n\\t *  @return {boolean} outcome \\n\\t**/\\n\\tasync function takeover(tar) {\\n\\t\\tlet currentTarget = tar;\\n\\t\\tlet isNotTakenOver = true;\\n\\t\\tlet attemptCounter = 0;\\n\\n\\t\\tif (ns.getServerNumPortsRequired <= 5 && attemptCounter < 50) {\\n\\t\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\n\\t\\t\\t\\tattemptCounter++;\\n\\t\\t\\t}\\n\\n\\t\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.15,\"server\":\"The-Cave\",\"moduleSequenceNumber\":1410,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}}],\"serversOnNetwork\":[\"blade\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":925,\"serverGrowth\":0}},\"w0r1d_d43m0n\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"w0r1d_d43m0n\",\"httpPortOpen\":false,\"ip\":\"26.3.1.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"w0r1d_d43m0n\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":3000,\"serverGrowth\":0}},\"darkweb\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"darkweb\",\"httpPortOpen\":true,\"ip\":\"8.8.3.5\",\"isConnectedTo\":false,\"maxRam\":1,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Returns an array of all hostnames in the network tree\\n * \\n * @param {string[]} myServers\\n * @param {number} safetyCounter Prevents infnite recursion\\n * @param {NS} ns\\n */\\nexport async function getServerList(myServers, safetyCounter, ns) {\\n\\tlet srvrsSeen = myServers;\\n\\tlet currServScanResult = [];\\n\\n\\tfor (let serverSeen in srvrsSeen) {\\n\\t\\tcurrServScanResult = ns.scan(srvrsSeen[serverSeen]);\\n\\t\\tfor (let entry in currServScanResult) {\\n\\t\\t\\tif (!srvrsSeen.includes(currServScanResult[entry])) {\\n\\t\\t\\t\\tsrvrsSeen.push(currServScanResult[entry]);\\n\\t\\t\\t\\tif ((++safetyCounter) < 250) {\\n\\t\\t\\t\\t\\tawait getServerList(srvrsSeen, safetyCounter, ns);\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tns.exit();\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\t//Filter out invalid values (NaN, null, {}, undefined)\\n\\tsrvrsSeen = srvrsSeen.filter(x => x);\\n\\treturn srvrsSeen;\\n}\\n\\n\\n/** \\n * \\tAttempts to take over target machine\\t\\n * \\n *  @param {string} target\\n * \\t@param {NS} ns\\n *  @return {boolean} outcome \\n**/\\nexport async function takeover(target, ns) {\\n\\tconst home = \\\"home\\\";\\n\\tlet currentTarget = target;\\n\\tlet isNotTakenOver = true;\\n\\tlet attemptCounter = 0;\\n\\n\\tlet scripts = ns.ls(home, \\\".js\\\");\\n\\t//scripts.push(ns.ls(home, \\\".ns\\\")); //in case of deprecated .ns scripts\\n\\n\\tif (!ns.hasRootAccess(currentTarget) && attemptCounter < 30) {\\n\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\ttry {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t} catch (error) {\\n\\t\\t\\t\\t\\tns.tprint(\\\"not enough ports to nuke \\\" + currentTarget);\\n\\t\\t\\t\\t\\treturn false;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t}\\n\\t\\t\\tattemptCounter++;\\n\\t\\t}\\n\\n\\t\\tawait ns.scp(scripts, home, currentTarget);\\n\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\",\"filename\":\"/modules/helper.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"darkweb\",\"moduleSequenceNumber\":1411,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.grow(target);\\n\\t}\\n}\",\"filename\":\"basic-grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"darkweb\",\"moduleSequenceNumber\":1412,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"basic-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"darkweb\",\"moduleSequenceNumber\":1413,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(target);\\n\\t}\\n}\",\"filename\":\"basic-weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"darkweb\",\"moduleSequenceNumber\":1414,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerList, takeover } from \\\"modules/helper.js\\\";\\n\\n/** @param {NS} ns **/\\n// TODO: unused + unfinished, based on setup.ns\\nexport async function main(ns) {\\n\\tconst myServers = [\\\"home\\\"];\\n\\n\\tvar servers = await getServerList(myServers, 0, ns);\\n\\n\\tfor (let entry in servers) {\\t\\n\\t\\tawait takeover(servers[entry], ns);\\n\\t}\\n}\",\"filename\":\"deep-setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"darkweb\",\"moduleSequenceNumber\":1415,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\t//\\n}\",\"filename\":\"formulas-testing.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"darkweb\",\"moduleSequenceNumber\":1416,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tconst currentMachine = ns.getHostname();\\n\\tvar servers = ns.scan(currentMachine);\\n\\tvar scripts = ns.ls(home, \\\"basic-\\\");\\n\\n\\tns.tprint(\\\"Host:  \\\" + currentMachine);\\n\\tfor (let entry in servers) {\\t// depth 0\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\t// depth 1\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== home && subservers.length > 1) {\\n\\t\\t\\t\\tns.tprint(\\\"-----> \\\" + subservers[subentry]);\\n\\t\\t\\t\\tlet subserversd2 = ns.scan(subservers[subentry]); // depth 2\\n\\t\\t\\t\\tfor (let subentryd2 in subserversd2) {\\n\\t\\t\\t\\t\\tif (subserversd2[subentryd2] !== subservers[subentry] && subserversd2[subentryd2] !== servers[entry] && subserversd2.length > 1) {\\n\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------> \\\" + subserversd2[subentryd2]);\\n\\t\\t\\t\\t\\t\\tlet subserversd3 = ns.scan(subserversd2[subentryd2]);\\t// depth 3\\n\\t\\t\\t\\t\\t\\tfor (let subentryd3 in subserversd3) {\\n\\t\\t\\t\\t\\t\\t\\tif (subserversd3[subentryd3] !== subserversd2[subentryd2] && subserversd3[subentryd3] !== subservers[subentry] && subserversd3.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------> \\\" + subserversd3[subentryd3]);\\n\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd4 = ns.scan(subserversd3[subentryd3]);\\t// depth 4\\n\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd4 in subserversd4) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd4[subentryd4] !== subserversd3[subentryd3] && subserversd4[subentryd4] !== subserversd2[subentryd2] && subserversd4.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"----------------------> \\\" + subserversd4[subentryd4]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd5 = ns.scan(subserversd4[subentryd4]);\\t// depth 5\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd5 in subserversd5) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd5[subentryd5] !== subserversd4[subentryd4] && subserversd5[subentryd5] !== subserversd3[subentryd3] && subserversd5.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-------------------------> \\\" + subserversd5[subentryd5]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd6 = ns.scan(subserversd5[subentryd5]);\\t// depth 6\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (let subentryd6 in subserversd6) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd6[subentryd6] !== subserversd5[subentryd5] && subserversd6[subentryd6] !== subserversd4[subentryd4] && subserversd6.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"------------------------------> \\\" + subserversd6[subentryd6]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlet subserversd7 = ns.scan(subserversd6[subentryd6]);\\t// depth 7\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfor(let subentryd7 in subserversd7) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (subserversd7[subentryd7] !== subserversd6[subentryd6] && subserversd7[subentryd7] !== subserversd5[subentryd5] && subserversd7.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tns.tprint(\\\"-----------------------------------> \\\" + subserversd7[subentryd7]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"gigascan.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.05,\"server\":\"darkweb\",\"moduleSequenceNumber\":1417,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet targetRam = ns.getServerMaxRam(ns.args[0]);\\n\\tlet scriptMem = ns.getScriptRam(ns.args[1]);\\n\\n\\tns.tprint(\\\"Maximum possible threads for \\\" + ns.args[1] + \\\": \\\" + Math.floor(targetRam / scriptMem));\\n\\tns.exit;\\n}\",\"filename\":\"ram-usage.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"darkweb\",\"moduleSequenceNumber\":1418,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerList } from \\\"modules/helper.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet serversSeen = [\\\"home\\\"]; // home + bought servers\\n\\tlet contractList = [];\\n\\n\\tserversSeen = await getServerList(serversSeen, 0, ns);\\n\\n\\tns.tprint(serversSeen);\\n}\",\"filename\":\"search-coding-contracts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"darkweb\",\"moduleSequenceNumber\":1419,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst home = \\\"home\\\";\\n\\tconst target = ns.args[0];\\n\\tvar servers = ns.scan(home);\\n\\tvar scripts = ns.ls(home, \\\".js\\\");\\n\\n\\tfor (let entry in scripts) {\\n\\t\\tns.tprint(\\\"found script: \\\" + scripts[entry]);\\n\\t}\\n\\n\\t// Hack servers (!!! depth = 2 !!!) if needed and populate with scripts\\n\\tfor (let entry in servers) {\\n\\t\\tns.tprint(\\\"found server: \\\" + servers[entry]);\\n\\t\\tlet subservers = ns.scan(servers[entry]);\\n\\t\\tfor (let subentry in subservers) {\\n\\t\\t\\tif (subservers[subentry] !== \\\"home\\\") {\\n\\t\\t\\t\\tns.tprint(\\\"----->   \\\" + subservers[subentry]);\\n\\t\\t\\t\\tif (!ns.hasRootAccess(subservers[subentry])) {\\n\\t\\t\\t\\t\\ttakeover(subservers[subentry]);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tns.tprint(\\\"copying scripts to \\\" + subservers[subentry]);\\n\\t\\t\\t\\tawait ns.scp(scripts, home, subservers[subentry]);\\n\\t\\t\\t\\t//await ns.scp(\\\"setup.ns\\\", home, subservers[subentry]);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (!ns.hasRootAccess(servers[entry])) {\\n\\t\\t\\ttakeover(servers[entry]);\\n\\t\\t}\\n\\t\\tns.tprint(\\\"copying scripts to \\\" + servers[entry]);\\n\\t\\tawait ns.scp(scripts, home, servers[entry]);\\n\\t\\t//await ns.scp(\\\"setup.ns\\\", home, servers[entry]);\\n\\t}\\n\\n\\t/** \\n\\t * \\tAttempts to take over target machine\\t\\n\\t * \\n\\t *  @param {string} tar\\n\\t *  @return {boolean} outcome \\n\\t**/\\n\\tasync function takeover(tar) {\\n\\t\\tlet currentTarget = tar;\\n\\t\\tlet isNotTakenOver = true;\\n\\t\\tlet attemptCounter = 0;\\n\\n\\t\\tif (ns.getServerNumPortsRequired <= 5 && attemptCounter < 50) {\\n\\t\\t\\twhile (isNotTakenOver) {\\n\\t\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.brutessh(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.ftpcrack(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.httpworm(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.relaysmtp(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.sqlinject(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"NUKE.exe\\\", \\\"home\\\")) {\\n\\t\\t\\t\\t\\tns.nuke(currentTarget);\\n\\t\\t\\t\\t\\tisNotTakenOver = !ns.hasRootAccess(currentTarget);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\n\\t\\t\\t\\tattemptCounter++;\\n\\t\\t\\t}\\n\\n\\t\\t\\tns.tprint(\\\"target \\\" + currentTarget + \\\" taken over\\\");\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"setup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.15,\"server\":\"darkweb\",\"moduleSequenceNumber\":1420,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"beehive\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"beehive\",\"httpPortOpen\":false,\"ip\":\"92.3.7.2\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}}}","CompaniesSave":"{\"ECorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"ECorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"MegaCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"MegaCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"Bachman & Associates\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Bachman & Associates\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.6,\"salaryMultiplier\":2.6,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"Blade Industries\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Blade Industries\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"NWO\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NWO\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"Clarke Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Clarke Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"OmniTek Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"OmniTek Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"Four Sigma\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Four Sigma\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.5,\"salaryMultiplier\":2.5,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"KuaiGong International\":{\"ctor\":\"Company\",\"data\":{\"name\":\"KuaiGong International\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.2,\"salaryMultiplier\":2.2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"Fulcrum Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Fulcrum Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"Storm Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Storm Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"DefComm\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DefComm\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"Helios Labs\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Helios Labs\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"VitaLife\":{\"ctor\":\"Company\",\"data\":{\"name\":\"VitaLife\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"Icarus Microsystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Icarus Microsystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"Universal Energy\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Universal Energy\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"Galactic Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Galactic Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"AeroCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"AeroCorp\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"Omnia Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omnia Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"Solaris Space Systems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Solaris Space Systems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":4.0306,\"isMegacorp\":false}},\"DeltaOne\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DeltaOne\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.6,\"salaryMultiplier\":1.6,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"Global Pharmaceuticals\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Global Pharmaceuticals\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"Nova Medical\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Nova Medical\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"Central Intelligence Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Central Intelligence Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":89.8227,\"isMegacorp\":false}},\"National Security Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"National Security Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"Watchdog Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Watchdog Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"LexoCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"LexoCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.4,\"salaryMultiplier\":1.4,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"Rho Construction\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Rho Construction\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"Alpha Enterprises\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Alpha Enterprises\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"Aevum Police Headquarters\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Aevum Police Headquarters\",\"info\":\"\",\"companyPositions\":{\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"SysCore Securities\":{\"ctor\":\"Company\",\"data\":{\"name\":\"SysCore Securities\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"CompuTek\":{\"ctor\":\"Company\",\"data\":{\"name\":\"CompuTek\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"NetLink Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NetLink Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"Carmichael Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Carmichael Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"FoodNStuff\":{\"ctor\":\"Company\",\"data\":{\"name\":\"FoodNStuff\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"Joe's Guns\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Joe's Guns\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"Omega Software\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omega Software\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true},\"expMultiplier\":1.1,\"salaryMultiplier\":1.1,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"Noodle Bar\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Noodle Bar\",\"info\":\"\",\"companyPositions\":{\"Waiter\":true,\"Part-time Waiter\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}}}","FactionsSave":"{\"Illuminati\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"QLink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Illuminati\",\"playerReputation\":0}},\"Daedalus\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"The Red Pill\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Daedalus\",\"playerReputation\":0}},\"The Covenant\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib III\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"SPTN-97 Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Covenant\",\"playerReputation\":0}},\"ECorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"NeuroFlux Governor\",\"ECorp HVMind Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"ECorp\",\"playerReputation\":0}},\"MegaCorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"CordiARC Fusion Reactor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"MegaCorp\",\"playerReputation\":0}},\"Bachman & Associates\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"SmartJaw\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bachman & Associates\",\"playerReputation\":0}},\"Blade Industries\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"NeuroFlux Governor\",\"HyperSight Corneal Implant\",\"Neotra\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Blade Industries\",\"playerReputation\":0}},\"NWO\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"Neurotrainer III\",\"Power Recirculation Core\",\"Xanipher\",\"Hydroflame Left Arm\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"NWO\",\"playerReputation\":0}},\"Clarke Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Neuronal Densification\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"nextSENS Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Clarke Incorporated\",\"playerReputation\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"NeuroFlux Governor\",\"OmniTek InfoLoad\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"OmniTek Incorporated\",\"playerReputation\":0}},\"Four Sigma\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"PC Direct-Neural Interface\",\"ADR-V1 Pheromone Gene\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"Neurotrainer III\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Four Sigma\",\"playerReputation\":0}},\"KuaiGong International\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module Core V2 Upgrade\",\"Speech Enhancement\",\"FocusWire\",\"NeuroFlux Governor\",\"HyperSight Corneal Implant\",\"Photosynthetic Cells\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"KuaiGong International\",\"playerReputation\":0}},\"Fulcrum Secret Technologies\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface Optimization Submodule\",\"PC Direct-Neural Interface NeuroNet Injector\",\"NeuroFlux Governor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Fulcrum Secret Technologies\",\"playerReputation\":0}},\"BitRunners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Neural Accelerator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"Cranial Signal Processors - Gen V\",\"NeuroFlux Governor\",\"Neurotrainer II\",\"BitRunners Neurolink\"],\"favor\":193.2693,\"isBanned\":false,\"isMember\":true,\"name\":\"BitRunners\",\"playerReputation\":9006592.915935049}},\"The Black Hand\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Artificial Synaptic Potentiation\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Neuralstimulator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"NeuroFlux Governor\",\"The Black Hand\"],\"favor\":178.7846,\"isBanned\":false,\"isMember\":true,\"name\":\"The Black Hand\",\"playerReputation\":7510761.0945301615}},\"NiteSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"BitWire\",\"Artificial Synaptic Potentiation\",\"Neural-Retention Enhancement\",\"DataJack\",\"Embedded Netburner Module\",\"Cranial Signal Processors - Gen II\",\"Cranial Signal Processors - Gen III\",\"NeuroFlux Governor\",\"Neurotrainer II\",\"CRTX42-AA Gene Modification\"],\"favor\":281.0366,\"isBanned\":false,\"isMember\":true,\"name\":\"NiteSec\",\"playerReputation\":10274880.773150124}},\"Aevum\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Wired Reflexes\",\"Speech Processor Implant\",\"Synaptic Enhancement Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"Neurotrainer I\",\"PCMatrix\"],\"favor\":221.182,\"isBanned\":false,\"isMember\":true,\"name\":\"Aevum\",\"playerReputation\":8638189.284305913}},\"Chongqing\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"Neuregen Gene Modification\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Chongqing\",\"playerReputation\":0}},\"Ishima\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"INFRARET Enhancement\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Ishima\",\"playerReputation\":0}},\"New Tokyo\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"NutriGen Implant\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"New Tokyo\",\"playerReputation\":0}},\"Sector-12\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"CashRoot Starter Kit\"],\"favor\":274.3994,\"isBanned\":false,\"isMember\":true,\"name\":\"Sector-12\",\"playerReputation\":24173301.91100995}},\"Volhaven\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Combat Rib I\",\"Combat Rib II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"DermaForce Particle Barrier\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Volhaven\",\"playerReputation\":0}},\"Speakers for the Dead\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Unstable Circadian Modulator\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"Speech Enhancement\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Graphene BrachiBlades Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Speakers for the Dead\",\"playerReputation\":0}},\"The Dark Army\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Wired Reflexes\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Power Recirculation Core\",\"Graphene Bionic Arms Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Dark Army\",\"playerReputation\":0}},\"The Syndicate\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"ADR-V1 Pheromone Gene\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Power Recirculation Core\",\"BrachiBlades\"],\"favor\":1.0114,\"isBanned\":false,\"isMember\":false,\"name\":\"The Syndicate\",\"playerReputation\":0}},\"Silhouette\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"TITN-41 Gene-Modification Injection\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Silhouette\",\"playerReputation\":0}},\"Tetrads\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"NeuroFlux Governor\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"Power Recirculation Core\",\"Bionic Arms\"],\"favor\":81.3989,\"isBanned\":false,\"isMember\":false,\"name\":\"Tetrads\",\"playerReputation\":0}},\"Slum Snakes\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"NeuroFlux Governor\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"SmartSonar Implant\"],\"favor\":65.6895,\"isBanned\":false,\"isMember\":false,\"name\":\"Slum Snakes\",\"playerReputation\":0}},\"Netburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Hacknet Node CPU Architecture Neural-Upload\",\"Hacknet Node Cache Architecture Neural-Upload\",\"Hacknet Node NIC Architecture Neural-Upload\",\"Hacknet Node Kernel Direct-Neural Interface\",\"Hacknet Node Core Direct-Neural Interface\",\"NeuroFlux Governor\"],\"favor\":270.4744,\"isBanned\":false,\"isMember\":true,\"name\":\"Netburners\",\"playerReputation\":23420756.653530203}},\"Tian Di Hui\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Nanofiber Weave\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"Social Negotiation Assistant (S.N.A)\",\"Neuroreceptor Management Implant\"],\"favor\":241.1789,\"isBanned\":false,\"isMember\":true,\"name\":\"Tian Di Hui\",\"playerReputation\":8939981.948987916}},\"CyberSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"BitWire\",\"Synaptic Enhancement Implant\",\"Cranial Signal Processors - Gen I\",\"Cranial Signal Processors - Gen II\",\"NeuroFlux Governor\",\"Neurotrainer I\"],\"favor\":230.5077,\"isBanned\":false,\"isMember\":true,\"name\":\"CyberSec\",\"playerReputation\":8638735.173425496}},\"Bladeburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"EsperTech Bladeburner Eyewear\",\"EMS-4 Recombination\",\"ORION-MKIV Shoulder\",\"Hyperion Plasma Cannon V1\",\"Hyperion Plasma Cannon V2\",\"GOLEM Serum\",\"Vangelis Virus\",\"Vangelis Virus 3.0\",\"I.N.T.E.R.L.I.N.K.E.D\",\"Blade's Runners\",\"BLADE-51b Tesla Armor\",\"BLADE-51b Tesla Armor: Power Cells Upgrade\",\"BLADE-51b Tesla Armor: Energy Shielding Upgrade\",\"BLADE-51b Tesla Armor: Unibeam Upgrade\",\"BLADE-51b Tesla Armor: Omnibeam Upgrade\",\"BLADE-51b Tesla Armor: IPU Upgrade\",\"The Blade's Simulacrum\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bladeburners\",\"playerReputation\":0}},\"Church of the Machine God\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Stanek's Gift - Genesis\",\"Stanek's Gift - Awakening\",\"Stanek's Gift - Serenity\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Church of the Machine God\",\"playerReputation\":0}}}","AliasesSave":"{\"sa10\":\"scan-analyze 10\",\"sa5\":\"scan-analyze 5\",\"sa\":\"scan-analyze 10\",\"conn\":\"connect\",\"sa1\":\"scan-analyze\"}","GlobalAliasesSave":"{}","MessagesSave":"{\"j0.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j0.msg\",\"msg\":\"I know you can sense it. I know you're searching for it. It's why you spend night after night at your computer. <br><br>It's real, I've seen it. And I can help you find it. But not right now. You're not ready yet.<br><br>Use this program to track your progress<br><br>The fl1ght.exe program was added to your home computer<br><br>-jump3R\",\"recvd\":true}},\"j1.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j1.msg\",\"msg\":\"Soon you will be contacted by a hacking group known as CyberSec. They can help you with your search. <br><br>You should join them, garner their favor, and exploit them for their Augmentations. But do not trust them. They are not what they seem. No one is.<br><br>-jump3R\",\"recvd\":true}},\"j2.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j2.msg\",\"msg\":\"Do not try to save the world. There is no world to save. If you want to find the truth, worry only about yourself. Ethics and morals will get you killed. <br><br>Watch out for a hacking group known as NiteSec.<br><br>-jump3R\",\"recvd\":true}},\"j3.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j3.msg\",\"msg\":\"You must learn to walk before you can run. And you must run before you can fly. Look for the black hand. <br><br>I.I.I.I <br><br>-jump3R\",\"recvd\":true}},\"j4.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j4.msg\",\"msg\":\"To find what you are searching for, you must understand the bits. The bits are all around us. The runners will help you.<br><br>-jump3R\",\"recvd\":true}},\"csec-test.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"csec-test.msg\",\"msg\":\"We've been watching you. Your skills are very impressive. But you're wasting your talents. If you join us, you can put your skills to good use and change the world for the better. If you join us, we can unlock your full potential. <br><br>But first, you must pass our test. Find and install the backdoor on our server. <br><br>-CyberSec\",\"recvd\":true}},\"nitesec-test.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"nitesec-test.msg\",\"msg\":\"People say that the corrupted governments and corporations rule the world. Yes, maybe they do. But do you know who everyone really fears? People like us. Because they can't hide from us. Because they can't fight shadows and ideas with bullets. <br><br>Join us, and people will fear you, too. <br><br>Find and install the backdoor on our server. Then, we will contact you again.<br><br>-NiteSec\",\"recvd\":true}},\"19dfj3l1nd.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"19dfj3l1nd.msg\",\"msg\":\"We know what you are doing. We know what drives you. We know what you are looking for. <br><br> We can help you find the answers.<br><br>run4theh111z\",\"recvd\":true}},\"icarus.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"icarus.msg\",\"msg\":\"@)(#V%*N)@(#*)*C)@#%*)*V)@#(*%V@)(#VN%*)@#(*%<br>)@B(*#%)@)M#B*%V)____FIND___#$@)#%(B*)@#(*%B)<br>@_#(%_@#M(BDSPOMB__THE-CAVE_#)$(*@#$)@#BNBEGB<br>DFLSMFVMV)#@($*)@#*$MV)@#(*$V)M#(*$)M@(#*VM$)\",\"recvd\":false}}}","StockMarketSave":"{\"ECorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"ECorp\",\"symbol\":\"ECP\",\"price\":48936.55759905319,\"lastPrice\":48829.02704035009,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.5,\"b\":false,\"otlkMag\":15.733548639202555,\"otlkMagForecast\":33.49048192708538,\"cap\":562027380,\"spreadPerc\":0.1,\"shareTxForMovement\":30964,\"shareTxUntilMovement\":30964,\"totalShares\":91300000,\"maxShares\":18300000}},\"MegaCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"MegaCorp\",\"symbol\":\"MGCP\",\"price\":251228.42619666035,\"lastPrice\":250764.5530158204,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.42,\"b\":true,\"otlkMag\":18.348803053899772,\"otlkMagForecast\":67.37370982928748,\"cap\":219905425,\"spreadPerc\":0.2,\"shareTxForMovement\":32933,\"shareTxUntilMovement\":32933,\"totalShares\":87200000,\"maxShares\":17400000}},\"Blade Industries\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Blade Industries\",\"symbol\":\"BLD\",\"price\":2982.9718216535357,\"lastPrice\":2992.2998815668407,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.71,\"b\":false,\"otlkMag\":14.04171847590271,\"otlkMagForecast\":36.02577037745741,\"cap\":184309803,\"spreadPerc\":0.3,\"shareTxForMovement\":75545,\"shareTxUntilMovement\":75545,\"totalShares\":90100000,\"maxShares\":18000000}},\"Clarke Incorporated\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Clarke Incorporated\",\"symbol\":\"CLRK\",\"price\":66482.43995486967,\"lastPrice\":66289.74333339151,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.66,\"b\":false,\"otlkMag\":10.757606676335424,\"otlkMagForecast\":38.41229822452607,\"cap\":150413899,\"spreadPerc\":0.4,\"shareTxForMovement\":30516,\"shareTxUntilMovement\":30516,\"totalShares\":116100000,\"maxShares\":23200000}},\"OmniTek Incorporated\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"OmniTek Incorporated\",\"symbol\":\"OMTK\",\"price\":12732.300939407072,\"lastPrice\":12695.396888106723,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.66,\"b\":false,\"otlkMag\":16.15906527339262,\"otlkMagForecast\":31.94189702199747,\"cap\":421426440,\"spreadPerc\":0.1,\"shareTxForMovement\":67233,\"shareTxUntilMovement\":67233,\"totalShares\":47100000,\"maxShares\":9400000}},\"Four Sigma\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Four Sigma\",\"symbol\":\"FSIG\",\"price\":3567475.339600592,\"lastPrice\":3551364.569158927,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.03,\"b\":true,\"otlkMag\":27.99375037919648,\"otlkMagForecast\":76.35936372275134,\"cap\":285730021,\"spreadPerc\":0.1,\"shareTxForMovement\":51368,\"shareTxUntilMovement\":51368,\"totalShares\":30700000,\"maxShares\":6100000}},\"KuaiGong International\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"KuaiGong International\",\"symbol\":\"KGI\",\"price\":113397.91503773448,\"lastPrice\":113802.4666308373,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.81,\"b\":false,\"otlkMag\":8.515409555657792,\"otlkMagForecast\":42.11899440384035,\"cap\":101532196,\"spreadPerc\":0.6,\"shareTxForMovement\":66184,\"shareTxUntilMovement\":66184,\"totalShares\":71200000,\"maxShares\":14200000}},\"Fulcrum Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Fulcrum Technologies\",\"symbol\":\"FLCM\",\"price\":20709.5551721832,\"lastPrice\":20825.39511083785,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.27,\"b\":false,\"otlkMag\":15.517760635201597,\"otlkMagForecast\":35.927382409076344,\"cap\":716291155,\"spreadPerc\":0.6,\"shareTxForMovement\":53112,\"shareTxUntilMovement\":53112,\"totalShares\":63700000,\"maxShares\":12700000}},\"Storm Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Storm Technologies\",\"symbol\":\"STM\",\"price\":21191.609205594457,\"lastPrice\":21113.496214504703,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.84,\"b\":true,\"otlkMag\":8.682871959511282,\"otlkMagForecast\":57.57008995967343,\"cap\":410001807,\"spreadPerc\":0.8,\"shareTxForMovement\":44990,\"shareTxUntilMovement\":44990,\"totalShares\":53700000,\"maxShares\":10700000}},\"DefComm\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"DefComm\",\"symbol\":\"DCOMM\",\"price\":8746.960249548361,\"lastPrice\":8721.990579866726,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.65,\"b\":true,\"otlkMag\":5.289412655637555,\"otlkMagForecast\":54.5883058718896,\"cap\":35156256,\"spreadPerc\":0.7,\"shareTxForMovement\":59511,\"shareTxUntilMovement\":59511,\"totalShares\":97700000,\"maxShares\":19500000}},\"Helios Labs\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Helios Labs\",\"symbol\":\"HLS\",\"price\":6200.488719966741,\"lastPrice\":6216.601176571137,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.59,\"b\":false,\"otlkMag\":11.972181769926996,\"otlkMagForecast\":38.91238485117255,\"cap\":75461368,\"spreadPerc\":0.8,\"shareTxForMovement\":52369,\"shareTxUntilMovement\":52369,\"totalShares\":56100000,\"maxShares\":11200000}},\"VitaLife\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"VitaLife\",\"symbol\":\"VITA\",\"price\":2778.8758261645044,\"lastPrice\":2787.443264910927,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.7,\"b\":true,\"otlkMag\":6.442194915297639,\"otlkMagForecast\":56.488850521467555,\"cap\":85908903,\"spreadPerc\":0.3,\"shareTxForMovement\":58693,\"shareTxUntilMovement\":58693,\"totalShares\":116100000,\"maxShares\":23200000}},\"Icarus Microsystems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Icarus Microsystems\",\"symbol\":\"ICRS\",\"price\":14983.042122965651,\"lastPrice\":14936.990496645758,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.7,\"b\":true,\"otlkMag\":9.282845041445027,\"otlkMagForecast\":58.950632874745054,\"cap\":275146267,\"spreadPerc\":0.8,\"shareTxForMovement\":43244,\"shareTxUntilMovement\":43244,\"totalShares\":47400000,\"maxShares\":9500000}},\"Universal Energy\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Universal Energy\",\"symbol\":\"UNV\",\"price\":38202.964541738,\"lastPrice\":38288.777143333595,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.51,\"b\":false,\"otlkMag\":8.631837305574551,\"otlkMagForecast\":42.35883304183666,\"cap\":477578470,\"spreadPerc\":0.5,\"shareTxForMovement\":102200,\"shareTxUntilMovement\":102200,\"totalShares\":31800000,\"maxShares\":6400000}},\"AeroCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"AeroCorp\",\"symbol\":\"AERO\",\"price\":32974.94384344866,\"lastPrice\":33069.34585500804,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.65,\"b\":true,\"otlkMag\":6.39574245016597,\"otlkMagForecast\":56.6887865126191,\"cap\":136960617,\"spreadPerc\":0.8,\"shareTxForMovement\":80953,\"shareTxUntilMovement\":80953,\"totalShares\":49900000,\"maxShares\":10000000}},\"Omnia Cybersystems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Omnia Cybersystems\",\"symbol\":\"OMN\",\"price\":21046.427298621365,\"lastPrice\":20979.896969055662,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.72,\"b\":true,\"otlkMag\":12.830211203071316,\"otlkMagForecast\":61.63305230220454,\"cap\":47350367,\"spreadPerc\":0.7,\"shareTxForMovement\":68344,\"shareTxUntilMovement\":68344,\"totalShares\":81400000,\"maxShares\":16300000}},\"Solaris Space Systems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Solaris Space Systems\",\"symbol\":\"SLRS\",\"price\":6035.923516034116,\"lastPrice\":6016.579069173598,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.73,\"b\":true,\"otlkMag\":7.29532767932122,\"otlkMagForecast\":55.95113380646727,\"cap\":326521822,\"spreadPerc\":0.6,\"shareTxForMovement\":80734,\"shareTxUntilMovement\":80734,\"totalShares\":33900000,\"maxShares\":6800000}},\"Global Pharmaceuticals\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Global Pharmaceuticals\",\"symbol\":\"GPH\",\"price\":28413.781412173932,\"lastPrice\":28340.137340925507,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.59,\"b\":true,\"otlkMag\":11.307401412131867,\"otlkMagForecast\":61.358295526666126,\"cap\":85251030,\"spreadPerc\":0.7,\"shareTxForMovement\":109012,\"shareTxUntilMovement\":109012,\"totalShares\":24100000,\"maxShares\":4800000}},\"Nova Medical\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Nova Medical\",\"symbol\":\"NVMD\",\"price\":29538.08748967352,\"lastPrice\":29435.66748133355,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.79,\"b\":true,\"otlkMag\":7.655779729878157,\"otlkMagForecast\":57.637079460251755,\"cap\":35525649,\"spreadPerc\":0.5,\"shareTxForMovement\":92168,\"shareTxUntilMovement\":92168,\"totalShares\":33000000,\"maxShares\":6600000}},\"Watchdog Security\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Watchdog Security\",\"symbol\":\"WDS\",\"price\":65094.51911119956,\"lastPrice\":65828.47205304488,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":2.56,\"b\":true,\"otlkMag\":5.943506222307995,\"otlkMagForecast\":55.61947307457438,\"cap\":108047687,\"spreadPerc\":0.9,\"shareTxForMovement\":30730,\"shareTxUntilMovement\":30730,\"totalShares\":76600000,\"maxShares\":15300000}},\"LexoCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"LexoCorp\",\"symbol\":\"LXO\",\"price\":4478.4036848978285,\"lastPrice\":4455.44427586132,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.17,\"b\":false,\"otlkMag\":5.543644091316561,\"otlkMagForecast\":45.47617492148919,\"cap\":31560855,\"spreadPerc\":0.9,\"shareTxForMovement\":95415,\"shareTxUntilMovement\":95415,\"totalShares\":65000000,\"maxShares\":13000000}},\"Rho Construction\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Rho Construction\",\"symbol\":\"RHOC\",\"price\":6554.655283300814,\"lastPrice\":6573.997599852478,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.67,\"b\":true,\"otlkMag\":4.465308124983509,\"otlkMagForecast\":48.013429838892904,\"cap\":42429403,\"spreadPerc\":0.6,\"shareTxForMovement\":91100,\"shareTxUntilMovement\":91100,\"totalShares\":79400000,\"maxShares\":15900000}},\"Alpha Enterprises\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Alpha Enterprises\",\"symbol\":\"APHE\",\"price\":285.30284185798166,\"lastPrice\":282.8486743549239,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.97,\"b\":true,\"otlkMag\":7.292602459326501,\"otlkMagForecast\":56.940263805951666,\"cap\":85743727,\"spreadPerc\":0.9,\"shareTxForMovement\":53147,\"shareTxUntilMovement\":53147,\"totalShares\":51300000,\"maxShares\":10300000}},\"SysCore Securities\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"SysCore Securities\",\"symbol\":\"SYSC\",\"price\":25704.677058096066,\"lastPrice\":25529.27009730041,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.56,\"b\":false,\"otlkMag\":5.292714161109341,\"otlkMagForecast\":45.79498717812497,\"cap\":66185268,\"spreadPerc\":1.1,\"shareTxForMovement\":29177,\"shareTxUntilMovement\":29177,\"totalShares\":48500000,\"maxShares\":9700000}},\"CompuTek\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"CompuTek\",\"symbol\":\"CTK\",\"price\":2067.2871020609577,\"lastPrice\":2076.392200014298,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1,\"b\":false,\"otlkMag\":9.28362633120787,\"otlkMagForecast\":42.2045037358632,\"cap\":53752629,\"spreadPerc\":0.7,\"shareTxForMovement\":76194,\"shareTxUntilMovement\":76194,\"totalShares\":35700000,\"maxShares\":7100000}},\"NetLink Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"NetLink Technologies\",\"symbol\":\"NTLK\",\"price\":7650.0294565279755,\"lastPrice\":7559.1388922862,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":2.73,\"b\":true,\"otlkMag\":6.041442848574896,\"otlkMagForecast\":53.36338126120672,\"cap\":38076598,\"spreadPerc\":1.1,\"shareTxForMovement\":36349,\"shareTxUntilMovement\":36349,\"totalShares\":12100000,\"maxShares\":2400000}},\"Omega Software\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Omega Software\",\"symbol\":\"OMGA\",\"price\":1935.9342861490104,\"lastPrice\":1926.6847281453583,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.09,\"b\":true,\"otlkMag\":7.78704843980001,\"otlkMagForecast\":58.92261062563822,\"cap\":77028052,\"spreadPerc\":1.1,\"shareTxForMovement\":33165,\"shareTxUntilMovement\":33165,\"totalShares\":16500000,\"maxShares\":3300000}},\"FoodNStuff\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"FoodNStuff\",\"symbol\":\"FNS\",\"price\":19525.038245521002,\"lastPrice\":19591.254779695195,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.77,\"b\":false,\"otlkMag\":1.6671107691811973,\"otlkMagForecast\":48.84025985852019,\"cap\":14531160,\"spreadPerc\":1,\"shareTxForMovement\":158570,\"shareTxUntilMovement\":158570,\"totalShares\":25700000,\"maxShares\":5100000}},\"Sigma Cosmetics\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Sigma Cosmetics\",\"symbol\":\"SGC\",\"price\":72611.42255991868,\"lastPrice\":73158.29354625595,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.71,\"b\":false,\"otlkMag\":9.523754602163926,\"otlkMagForecast\":39.50362334577386,\"cap\":32788403,\"spreadPerc\":0.8,\"shareTxForMovement\":49390,\"shareTxUntilMovement\":49390,\"totalShares\":8700000,\"maxShares\":1700000}},\"Joe's Guns\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Joe's Guns\",\"symbol\":\"JGN\",\"price\":6805024.147915946,\"lastPrice\":6706078.3719113385,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":3.35,\"b\":false,\"otlkMag\":21.93725468610473,\"otlkMagForecast\":88.97477343807392,\"cap\":9734473,\"spreadPerc\":0.9,\"shareTxForMovement\":39822,\"shareTxUntilMovement\":39822,\"totalShares\":44100000,\"maxShares\":8800000}},\"Catalyst Ventures\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Catalyst Ventures\",\"symbol\":\"CTYS\",\"price\":552.2783543933587,\"lastPrice\":549.2544543727794,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.25,\"b\":true,\"otlkMag\":23.826257497006083,\"otlkMagForecast\":76.56410590482353,\"cap\":6574652,\"spreadPerc\":1.1,\"shareTxForMovement\":48792,\"shareTxUntilMovement\":48792,\"totalShares\":69500000,\"maxShares\":13900000}},\"Microdyne Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Microdyne Technologies\",\"symbol\":\"MDYN\",\"price\":9901.91708009475,\"lastPrice\":9869.749257387091,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.74,\"b\":false,\"otlkMag\":5.8178947044682525,\"otlkMagForecast\":43.9992268611982,\"cap\":331891937,\"spreadPerc\":0.4,\"shareTxForMovement\":139177,\"shareTxUntilMovement\":139177,\"totalShares\":22500000,\"maxShares\":4500000}},\"Titan Laboratories\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Titan Laboratories\",\"symbol\":\"TITN\",\"price\":26053.503865959447,\"lastPrice\":26132.68086856283,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.69,\"b\":false,\"otlkMag\":8.172146125266147,\"otlkMagForecast\":39.55569599366091,\"cap\":270940268,\"spreadPerc\":0.9,\"shareTxForMovement\":209158,\"shareTxUntilMovement\":209158,\"totalShares\":27200000,\"maxShares\":5400000}},\"Orders\":{\"ECP\":[],\"MGCP\":[],\"BLD\":[],\"CLRK\":[],\"OMTK\":[],\"FSIG\":[],\"KGI\":[],\"FLCM\":[],\"STM\":[],\"DCOMM\":[],\"HLS\":[],\"VITA\":[],\"ICRS\":[],\"UNV\":[],\"AERO\":[],\"OMN\":[],\"SLRS\":[],\"GPH\":[],\"NVMD\":[],\"WDS\":[],\"LXO\":[],\"RHOC\":[],\"APHE\":[],\"SYSC\":[],\"CTK\":[],\"NTLK\":[],\"OMGA\":[],\"FNS\":[],\"SGC\":[],\"JGN\":[],\"CTYS\":[],\"MDYN\":[],\"TITN\":[]},\"storedCycles\":4397243,\"lastUpdate\":1645190602802,\"ticksUntilCycle\":19}","SettingsSave":"{\"ActiveScriptsServerPageSize\":10,\"ActiveScriptsScriptPageSize\":10,\"AutosaveInterval\":60,\"CodeInstructionRunTime\":25,\"DisableASCIIArt\":false,\"DisableHotkeys\":false,\"DisableTextEffects\":false,\"DisableOverviewProgressBars\":false,\"EnableBashHotkeys\":false,\"TimestampsFormat\":\"\",\"Locale\":\"en\",\"MaxLogCapacity\":50,\"MaxPortCapacity\":50,\"MaxTerminalCapacity\":500,\"OwnedAugmentationsOrder\":1,\"PurchaseAugmentationsOrder\":0,\"SaveGameOnFileSave\":true,\"SuppressBuyAugmentationConfirmation\":false,\"SuppressFactionInvites\":false,\"SuppressMessages\":false,\"SuppressTravelConfirmation\":false,\"SuppressBladeburnerPopup\":false,\"SuppressTIXPopup\":false,\"SuppressSavedGameToast\":false,\"UseIEC60027_2\":false,\"ExcludeRunningScriptsFromSave\":false,\"IsSidebarOpened\":true,\"MonacoTheme\":\"monokai\",\"MonacoInsertSpaces\":false,\"MonacoFontSize\":20,\"MonacoVim\":false,\"MonacoWordWrap\":\"off\",\"theme\":{\"primarylight\":\"#0f0\",\"primary\":\"#0c0\",\"primarydark\":\"#090\",\"successlight\":\"#0f0\",\"success\":\"#0c0\",\"successdark\":\"#090\",\"errorlight\":\"#f00\",\"error\":\"#c00\",\"errordark\":\"#900\",\"secondarylight\":\"#AAA\",\"secondary\":\"#888\",\"secondarydark\":\"#666\",\"warninglight\":\"#ff0\",\"warning\":\"#cc0\",\"warningdark\":\"#990\",\"infolight\":\"#69f\",\"info\":\"#36c\",\"infodark\":\"#039\",\"welllight\":\"#444\",\"well\":\"#222\",\"white\":\"#fff\",\"black\":\"#000\",\"hp\":\"#dd3434\",\"money\":\"#ffd700\",\"hack\":\"#adff2f\",\"combat\":\"#faffdf\",\"cha\":\"#a671d1\",\"int\":\"#6495ed\",\"rep\":\"#faffdf\",\"disabled\":\"#66cfbc\",\"backgroundprimary\":\"#000\",\"backgroundsecondary\":\"#000\",\"button\":\"#333\"},\"styles\":{\"lineHeight\":1.5,\"fontFamily\":\"Lucida Console, Lucida Sans Unicode, Fira Mono, Consolas, Courier New, Courier, monospace, Times New Roman\"},\"overview\":{\"x\":-1,\"y\":0,\"opened\":true}}","VersionSave":"10","AllGangsSave":"","LastExportBonus":"1645190606305","StaneksGiftSave":"{\"ctor\":\"StaneksGift\",\"data\":{\"storedCycles\":0,\"fragments\":[]}}","SaveTimestamp":"1645190606329"}}
